{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/pay/weixin.png","path":"pay/weixin.png","modified":0,"renderable":0},{"_id":"source/about/weixin.png","path":"about/weixin.png","modified":0,"renderable":0},{"_id":"source/pay/zhifubao.png","path":"pay/zhifubao.png","modified":0,"renderable":0},{"_id":"source/uploads/concurrentHashMap.png","path":"uploads/concurrentHashMap.png","modified":0,"renderable":0},{"_id":"source/about/zhifubao.png","path":"about/zhifubao.png","modified":0,"renderable":0},{"_id":"source/uploads/author.jpg","path":"uploads/author.jpg","modified":0,"renderable":0},{"_id":"source/uploads/design-patterns.jpg","path":"uploads/design-patterns.jpg","modified":0,"renderable":0},{"_id":"source/uploads/chainOfResponsibility/1.png","path":"uploads/chainOfResponsibility/1.png","modified":0,"renderable":0},{"_id":"source/uploads/double_checked_locking/double_checked_lock1.png","path":"uploads/double_checked_locking/double_checked_lock1.png","modified":0,"renderable":0},{"_id":"source/uploads/iterator/1.jpg","path":"uploads/iterator/1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interpreter/1.gif","path":"uploads/interpreter/1.gif","modified":0,"renderable":0},{"_id":"source/uploads/javasource/lock.jpeg","path":"uploads/javasource/lock.jpeg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/SerialOld.jpg","path":"uploads/jvm/SerialOld.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/栈帧.jpg","path":"uploads/jvm/栈帧.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/垃圾收集器.jpg","path":"uploads/jvm/垃圾收集器.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/运行时数据区.jpg","path":"uploads/jvm/运行时数据区.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/类加载器.jpeg","path":"uploads/jvm/类加载器.jpeg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/类加载过程.jpg","path":"uploads/jvm/类加载过程.jpg","modified":0,"renderable":0},{"_id":"source/uploads/structure/trie.png","path":"uploads/structure/trie.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"source/uploads/bridge/2.jpg","path":"uploads/bridge/2.jpg","modified":0,"renderable":0},{"_id":"source/uploads/facade/1.png","path":"uploads/facade/1.png","modified":0,"renderable":0},{"_id":"source/uploads/double_checked_locking/double_checked_lock.png","path":"uploads/double_checked_locking/double_checked_lock.png","modified":0,"renderable":0},{"_id":"source/uploads/decorator/1.jpg","path":"uploads/decorator/1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/G1.jpg","path":"uploads/jvm/G1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/ParNew.jpg","path":"uploads/jvm/ParNew.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/ParallelScavenge.jpg","path":"uploads/jvm/ParallelScavenge.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/ParallelOld.jpg","path":"uploads/jvm/ParallelOld.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/可达性算法.png","path":"uploads/jvm/可达性算法.png","modified":0,"renderable":0},{"_id":"source/uploads/jvm/serial.jpg","path":"uploads/jvm/serial.jpg","modified":0,"renderable":0},{"_id":"source/uploads/jvm/CMS.jpg","path":"uploads/jvm/CMS.jpg","modified":0,"renderable":0},{"_id":"source/uploads/java/synchronize.png","path":"uploads/java/synchronize.png","modified":0,"renderable":0},{"_id":"source/uploads/structure/PriorityQueue.png","path":"uploads/structure/PriorityQueue.png","modified":0,"renderable":0},{"_id":"source/uploads/algorithm/cap/1.png","path":"uploads/algorithm/cap/1.png","modified":0,"renderable":0},{"_id":"source/uploads/javasource/util/aqs2.png","path":"uploads/javasource/util/aqs2.png","modified":0,"renderable":0},{"_id":"source/uploads/javasource/util/aqs4.png","path":"uploads/javasource/util/aqs4.png","modified":0,"renderable":0},{"_id":"source/uploads/javasource/util/aqs3.png","path":"uploads/javasource/util/aqs3.png","modified":0,"renderable":0},{"_id":"source/uploads/bridge/1.jpg","path":"uploads/bridge/1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/mysql/transaction/transaction1.jpg","path":"uploads/mysql/transaction/transaction1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/spring/ioc/4.jpeg","path":"uploads/spring/ioc/4.jpeg","modified":0,"renderable":0},{"_id":"source/uploads/java/synchronize1.png","path":"uploads/java/synchronize1.png","modified":0,"renderable":0},{"_id":"source/uploads/spring/ioc/5.jpg","path":"uploads/spring/ioc/5.jpg","modified":0,"renderable":0},{"_id":"source/uploads/spring/ioc/6.jpg","path":"uploads/spring/ioc/6.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"source/uploads/algorithm/一致性hash/1.png","path":"uploads/algorithm/一致性hash/1.png","modified":0,"renderable":0},{"_id":"source/uploads/algorithm/一致性hash/3.png","path":"uploads/algorithm/一致性hash/3.png","modified":0,"renderable":0},{"_id":"source/uploads/algorithm/一致性hash/5.png","path":"uploads/algorithm/一致性hash/5.png","modified":0,"renderable":0},{"_id":"source/uploads/algorithm/一致性hash/2.png","path":"uploads/algorithm/一致性hash/2.png","modified":0,"renderable":0},{"_id":"source/uploads/algorithm/一致性hash/4.png","path":"uploads/algorithm/一致性hash/4.png","modified":0,"renderable":0},{"_id":"source/uploads/javasource/util/ConcurrentHashMap.png","path":"uploads/javasource/util/ConcurrentHashMap.png","modified":0,"renderable":0},{"_id":"source/uploads/algorithm/一致性hash/6.png","path":"uploads/algorithm/一致性hash/6.png","modified":0,"renderable":0},{"_id":"source/uploads/mysql/index/1.jpg","path":"uploads/mysql/index/1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/mysql/index/4.jpg","path":"uploads/mysql/index/4.jpg","modified":0,"renderable":0},{"_id":"source/uploads/mysql/index/2.jpg","path":"uploads/mysql/index/2.jpg","modified":0,"renderable":0},{"_id":"source/uploads/spring/ioc/1.jpg","path":"uploads/spring/ioc/1.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/uploads/mysql/index/3.jpg","path":"uploads/mysql/index/3.jpg","modified":0,"renderable":0},{"_id":"source/uploads/spring/ioc/2.png","path":"uploads/spring/ioc/2.png","modified":0,"renderable":0},{"_id":"source/uploads/structure/PriorityQueue1.png","path":"uploads/structure/PriorityQueue1.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/uploads/jvm/标记复制.png","path":"uploads/jvm/标记复制.png","modified":0,"renderable":0},{"_id":"source/uploads/jvm/标记整理.png","path":"uploads/jvm/标记整理.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"source/uploads/javasource/util/aqs1.png","path":"uploads/javasource/util/aqs1.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/uploads/javasource/util/executor.jpeg","path":"uploads/javasource/util/executor.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/uploads/jvm/标记清除.png","path":"uploads/jvm/标记清除.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/uploads/spring/ioc/3.jpg","path":"uploads/spring/ioc/3.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/zzzzzz.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"source/favicon.ico","hash":"781096cb74eaeea8e2fb26a37e810e6d688e28b4","modified":1577944163780},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1577944163000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1577944163000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1577944163000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1577944163000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1577944163000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1577944163000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1577944163000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1577944163000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1577944163000},{"_id":"themes/next/_config.yml","hash":"3f0ad0ee55913d75102664ce85d058af71c41892","modified":1577944163000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1577944163000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1577944163000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1577944163000},{"_id":"source/categories/index.md","hash":"36ac1ae42c3969427c1f1b22ae21f915b131117e","modified":1577944163779},{"_id":"source/_posts/start.md","hash":"863e3e558d508205098b6d3cfd98fd64954d9b31","modified":1578552959236},{"_id":"source/pay/weixin.png","hash":"57dd56fecf6f6b3b95e3eb205ca360f0656f92fd","modified":1577944163781},{"_id":"source/about/weixin.png","hash":"57dd56fecf6f6b3b95e3eb205ca360f0656f92fd","modified":1577944163778},{"_id":"source/about/index.md","hash":"b85f4d257da3bacc586fdb13d9c609e809672f15","modified":1577944163777},{"_id":"source/pay/zhifubao.png","hash":"e5f1b2b91d1c3a64e0f7f72f6c78c5ead9099b76","modified":1577944163781},{"_id":"source/uploads/concurrentHashMap.png","hash":"d1ab4315b91c992435e96ab6f8575a957e86b1e8","modified":1577944163788},{"_id":"source/about/zhifubao.png","hash":"e5f1b2b91d1c3a64e0f7f72f6c78c5ead9099b76","modified":1577944163778},{"_id":"source/uploads/author.jpg","hash":"64f368339dd0e50cb0e77ececff611f68fa8f5ca","modified":1577944163786},{"_id":"source/tags/index.md","hash":"f5f47f5675b1d4516c0312892750082ba944fb00","modified":1577944163782},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1577944163000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1577944163000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1577944163000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1577944163000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1577944163000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1577944163000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1577944163000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1577944163000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1577944163000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1577944163000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1577944163000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1577944163000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1577944163000},{"_id":"themes/next/layout/_layout.swig","hash":"3b254fa8ad6016cfa8bfcfc820d169b7c9bdac47","modified":1577944163000},{"_id":"themes/next/layout/_layoutnc.swig","hash":"43edd6fb1f361dbe42cfc895329a37c5d5487384","modified":1577944163000},{"_id":"themes/next/layout/category.swig","hash":"affe41b8a749239a889149d4951fc38d7f354dcc","modified":1577944163000},{"_id":"themes/next/layout/index.swig","hash":"06c70465ad3089aea2f3864b196a01450f745f7f","modified":1577944163000},{"_id":"themes/next/layout/page.swig","hash":"b5f8d1ba95d749f2e46c9784354456edc005d850","modified":1577944163000},{"_id":"themes/next/layout/archive.swig","hash":"a576a64f5d30017a1008b88282191c326cda22f1","modified":1577944163000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1577944163000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1577944163000},{"_id":"themes/next/layout/post.swig","hash":"ec1d8e5afea9d84a16c5a09fda72a5a65306bb2b","modified":1577944163000},{"_id":"themes/next/layout/tag.swig","hash":"c6a3bcda9a5c18f647500998f36412fe4d1274e8","modified":1577944163000},{"_id":"themes/next/layout/schedule.swig","hash":"5d37852199c5b512c3bfec4f503345f1dbdcac38","modified":1577944163000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1577944163000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1577944163000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1577944163000},{"_id":"source/uploads/design-patterns.jpg","hash":"5533c4baa4a9ee3e2315d805f40f42fe7d4af6ce","modified":1577944163789},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"source/_posts/Design_pattern/11_composite.md","hash":"dbd2b7e91a99e055fd7547aafce6b3b363ba820b","modified":1577944163740},{"_id":"source/_posts/Design_pattern/12_decorator.md","hash":"171ceb70a4835728f13c4c8451a0880328ea0b3d","modified":1581603869154},{"_id":"source/_posts/Design_pattern/14_flyweight.md","hash":"5ed891801785a457b4709b4d9b00da83163d49a2","modified":1577944163745},{"_id":"source/_posts/Design_pattern/13_facede.md","hash":"b163f92059002fa389e93982763df3a776fec964","modified":1581604033776},{"_id":"source/_posts/Design_pattern/18_interpreter.md","hash":"070ca0071ade4f36bb6cbf341f9833a4ad760b4f","modified":1581605131101},{"_id":"source/_posts/Design_pattern/17_command.md","hash":"7dc0597b0ca8e5c2b06ab202dfe39715a8768e3b","modified":1577944163746},{"_id":"source/_posts/Design_pattern/16_chainOfResponsibility.md","hash":"6c2eb741318d36dc2bae57ababf494a7628f530d","modified":1581604710716},{"_id":"source/_posts/Design_pattern/15_proxy.md","hash":"80b728e24fe311003cbe0f59f11797573e4c9c45","modified":1578552959117},{"_id":"source/_posts/Design_pattern/19_iterator.md","hash":"8f86ba4ca1f69ae5f19246b6d9b516fe7b5f70dd","modified":1581605316715},{"_id":"source/_posts/Design_pattern/21_strategy.md","hash":"dd58caad0bae063ce74dd1f360f1110a30b58e3d","modified":1581605624695},{"_id":"source/_posts/Design_pattern/20_template.md","hash":"dd0299d2be018cfc0136ad35788376633784cd37","modified":1581605612835},{"_id":"source/_posts/Design_pattern/1_start.md","hash":"e304bc7870375b6d77fef63bbbe04e2782b389db","modified":1577944163750},{"_id":"source/_posts/Design_pattern/2_factory_pattern.md","hash":"137c25f4c2959bb1c8a5d2022bc815100d255b47","modified":1577944163750},{"_id":"source/_posts/Design_pattern/3_abstract-factory-pattern.md","hash":"52bd38b90fe46e443d93e1d9bccc851f484f0122","modified":1577944163751},{"_id":"source/_posts/Design_pattern/4_singleton-pattern.md","hash":"387476e3c0582b98f160e053a555cbed94f5ab0f","modified":1577944163752},{"_id":"source/_posts/Design_pattern/5_double-checked-locking.md","hash":"f9724ecc74d0143ff8760dc078449281746529f8","modified":1578555866175},{"_id":"source/_posts/Design_pattern/7_Prototype.md","hash":"bd18a0fc8b37a9fc9a5e5f4653ebe2953fea17d7","modified":1577944163754},{"_id":"source/_posts/Design_pattern/8_Adapter.md","hash":"c1af5d1e310e4d4ea354c8ce79ebb2d29f275b03","modified":1577944163755},{"_id":"source/_posts/Design_pattern/6_builder.md","hash":"5b04f342ab93424ea40646675f60c75ac93a4ceb","modified":1577944163753},{"_id":"source/_posts/Design_pattern/9_Bridge.md","hash":"d76d82e431f566de0994f5c32c1adc656e292a73","modified":1577944163756},{"_id":"source/_posts/distributed/CAP.md","hash":"16be615b00b26b549e975a83c8b3063e858e3f1d","modified":1577944163758},{"_id":"source/_posts/algorithm/一致性hash.md","hash":"0555f396bd7938c6be99c7773b72675f5b14ccb3","modified":1577944163757},{"_id":"source/_posts/jvm/2_JVM垃圾回收算法.md","hash":"e01419f2b30ae7855917f1d39087d95435cdb14c","modified":1577944163772},{"_id":"source/_posts/jvm/1_JVM内存区域.markdown","hash":"25ced6a9ea441ba86c3acd12b89c1937eab07d44","modified":1577944163771},{"_id":"source/_posts/jvm/3_GC垃圾收集器.md","hash":"a70a35009c402610fc8d6f6c45544d2e98ad7219","modified":1577944163773},{"_id":"source/_posts/jvm/4_JVM类加载机制.md","hash":"225f2912c7e0ee5136aa8ac09f0ab5ce00695617","modified":1577944163773},{"_id":"source/_posts/jvm/5_JDK常用命令（虚拟机性能监控故障处理）.md","hash":"77f9e29b90566ec0c075dcf7d6399b29d52c59a1","modified":1577944163774},{"_id":"source/_posts/mysql/事务.md","hash":"04f019d584f57117eafa7737ad64f9f9301c9b5d","modified":1577944163774},{"_id":"source/_posts/mysql/存储引擎.md","hash":"d451c3a70d1863b301267ceb4dd8e447607b5896","modified":1577944163775},{"_id":"source/_posts/redis/HyperLogLog.md","hash":"42fc849e1237d6d88db3fa336828aa4cb0644ae2","modified":1581598917547},{"_id":"source/_posts/mysql/索引.md","hash":"0d332299d276d4fdc6888e0bba8eeafd56634117","modified":1577944163775},{"_id":"source/_posts/redis/redis.md","hash":"f4f7a2f13b0262b16fab6a232d084dfe932990d2","modified":1581581971709},{"_id":"source/_posts/redis/分布式锁.md","hash":"6e01940af4f67e4cd1881f687e9a01c327e5151a","modified":1581583153517},{"_id":"source/_posts/redis/布隆过滤器.md","hash":"459b36380cbe7fedc464d333cb8d276864cd6799","modified":1581600354219},{"_id":"source/_posts/redis/限流.md","hash":"5126b028a970ee8d085f3fd4626fdea980dd917e","modified":1581601422608},{"_id":"source/_posts/spring/aop.md","hash":"fa90fd8f47680390f2525c7b481930f3d8e6f06f","modified":1578552968743},{"_id":"source/_posts/spring/ioc.md","hash":"18f245be3d1041b8539b1952b84ef86ab6bdda2d","modified":1578552959262},{"_id":"source/_posts/java/2_volatile.md","hash":"b18e43020ec5dd3678c3ec7d801041c74a6510f0","modified":1577944163761},{"_id":"source/_posts/java/1_concurrentHashMap.md","hash":"f3ecb06436ae591f400022fb2161f45437005d4a","modified":1578554780233},{"_id":"source/_posts/java/3_synchronizedAndlock.md","hash":"8840e6c5f99e406a7ef3a63a599bd21d3cc6dd94","modified":1577944163762},{"_id":"source/_posts/java/4_集合简介.md","hash":"f4cbace601a56a1da8c0d16fd0db417540725201","modified":1577944163762},{"_id":"source/_posts/java/5_synchronized.md","hash":"d30329186fec58be153ec419963a8533a10f0af1","modified":1577944163763},{"_id":"source/_posts/structure/1_trie.md","hash":"201c33af117c4964e41b44ec4caca0817bf5ade1","modified":1577944163777},{"_id":"source/_posts/zookeeper/zk.md","hash":"6268077bba9b0434800a74a3300480a5f483354f","modified":1578552959118},{"_id":"source/_posts/structure/2_并查集.md","hash":"a0aa832d431d825572d10c5b17a3f569a8b8b9fb","modified":1578835910158},{"_id":"source/uploads/chainOfResponsibility/1.png","hash":"f026078b3158711c42c15590a99b30acbdd730ef","modified":1577944163788},{"_id":"source/uploads/double_checked_locking/double_checked_lock1.png","hash":"ea0f57df87b459dfab9e82912d8e05f819881391","modified":1577944163790},{"_id":"source/uploads/iterator/1.jpg","hash":"af9a53090738130cfd114e3b678df937ebb323ec","modified":1577944163792},{"_id":"source/uploads/interpreter/1.gif","hash":"41220026fc53ead3a405453d5c1328cd6ce69fe5","modified":1577944163791},{"_id":"source/uploads/javasource/.DS_Store","hash":"339cda40be8ecc8be8770a79ab8127e96424b74d","modified":1573958583501},{"_id":"source/uploads/javasource/lock.jpeg","hash":"8c95d0fa616ffc48f7a346220964a150c708fc7f","modified":1577944163796},{"_id":"source/uploads/jvm/SerialOld.jpg","hash":"24db61ec0bbb08290bc421cde6ff583b4d15d7d0","modified":1577944163806},{"_id":"source/uploads/jvm/栈帧.jpg","hash":"dcaa9a7640f71f685ab494b52d3843d7392e3b3c","modified":1577944163819},{"_id":"source/uploads/jvm/垃圾收集器.jpg","hash":"cde53c94df9427c944125e05d01a7f2feb50db31","modified":1577944163807},{"_id":"source/uploads/jvm/运行时数据区.jpg","hash":"8568074c49c8086cb2330bd15b46a4aeff1f4956","modified":1577944163821},{"_id":"source/uploads/jvm/类加载器.jpeg","hash":"33dcc4737c95d48c53549f772a2f5c6f60f9db4b","modified":1577944163820},{"_id":"source/uploads/jvm/类加载过程.jpg","hash":"0c3ca0936abdd81064c4f1629faf7c84d25d97ba","modified":1577944163820},{"_id":"source/uploads/structure/trie.png","hash":"3e6c7d524d9103c3debd52dc01b0343326b274f5","modified":1577944163842},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1577944163000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1577944163000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1577944163000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1577944163000},{"_id":"themes/next/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1577944163000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1577944163000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1577944163000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1577944163000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1577944163000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1577944163000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1577944163000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1577944163000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1577944163000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1577944163000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1577944163000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1577944163000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1577944163000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"55491984964175176e054661a7326e85fa83a7a0","modified":1577944163000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1577944163000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1577944163000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1577944163000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1577944163000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1577944163000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1577944163000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1577944163000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1577944163000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1577944163000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1577944163000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1577944163000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1577944163000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1577944163000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1577944163000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1577944163000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1577944163000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1577944163000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1577944163000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1577944163000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1577944163000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577944163000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1577944163000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1577944163000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1577944163000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1577944163000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1577944163000},{"_id":"source/uploads/bridge/2.jpg","hash":"2b9e1e7cf3aee874637a4ea9a0be545df3a5abd6","modified":1577944163788},{"_id":"source/uploads/facade/1.png","hash":"b8d18ffdd8f7401724f30c51610aeb2e06f557a6","modified":1577944163791},{"_id":"source/uploads/double_checked_locking/double_checked_lock.png","hash":"4e955d8760cc3f6a72c3ed28fc0321c7bc7153b4","modified":1577944163790},{"_id":"source/uploads/decorator/1.jpg","hash":"f1df6b8a4036c40e4d916c3e3eb00433922ece64","modified":1577944163789},{"_id":"source/uploads/jvm/G1.jpg","hash":"3206ab67fb1f688c433342f5439f350a12bff258","modified":1577944163803},{"_id":"source/uploads/jvm/ParNew.jpg","hash":"0da964484bf05c270020fc0dc0ac9e0461986532","modified":1577944163804},{"_id":"source/uploads/jvm/ParallelScavenge.jpg","hash":"a3e01a02c3e781119a5363309b1fe56ad8759ac2","modified":1577944163805},{"_id":"source/uploads/jvm/ParallelOld.jpg","hash":"a3e01a02c3e781119a5363309b1fe56ad8759ac2","modified":1577944163805},{"_id":"source/uploads/jvm/可达性算法.png","hash":"30b34bcc2ff7014a80ea2de8bdd5398f0f450eae","modified":1577944163807},{"_id":"source/uploads/jvm/serial.jpg","hash":"a3e01a02c3e781119a5363309b1fe56ad8759ac2","modified":1577944163806},{"_id":"source/uploads/jvm/CMS.jpg","hash":"e9169ffa04a4c3e3d227967f967048f05da66386","modified":1577944163803},{"_id":"source/uploads/java/synchronize.png","hash":"5b9bdad3c6c5083a90374dd36a33d8fa912910e2","modified":1577944163793},{"_id":"source/uploads/structure/PriorityQueue.png","hash":"271da221bbc5aa798075b4ce0a65ff9ceaeaa60a","modified":1577944163840},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577944163000},{"_id":"source/_posts/javasource/util/10_PriorityQueue.md","hash":"171545119d3bb5b8aec0d7d87f54849d460b9bc7","modified":1577944163763},{"_id":"source/_posts/javasource/util/2_ExecutorService.md","hash":"664301a6a3baf4f44b8bb27f88f963b7566f2c33","modified":1577944163766},{"_id":"source/_posts/javasource/util/3_AbstractQueuedSynchronizer.md","hash":"d859c71cddcc9dc9f4801d15b9e5d15f8e0871b7","modified":1577944163767},{"_id":"source/_posts/javasource/util/4_ConcurrentHashMap.md","hash":"5a40d1df1ac637d21ad6021fa297c22e38b21cc1","modified":1577944163768},{"_id":"source/_posts/javasource/util/1_HashMap.md","hash":"40fbfd347ae0ac84311c38ad49edb29e446d3ca7","modified":1581606459574},{"_id":"source/_posts/javasource/util/5_ReentrantLock.md","hash":"471c0358a3ef1fb8d7821e21368f8e8cb46870ca","modified":1577944163768},{"_id":"source/_posts/javasource/util/8_CountDownLatch.md","hash":"067769a262c12ddbc981c3e07ab5ae014990f9ab","modified":1577944163769},{"_id":"source/_posts/javasource/util/9_Semaphore.md","hash":"e02d16551c8f829ec52f3dbb1c5867511eaf44e0","modified":1577944163771},{"_id":"source/_posts/javasource/util/6_ReentrantReadWriteLock.md","hash":"07081c28654ec9a79e1686eefca7cb5c8fc69082","modified":1577944163769},{"_id":"source/_posts/javasource/util/7_CyclicBarrier.md","hash":"d5f198ac825eec4fba2c7498db3d29ba7f2ca616","modified":1577944163769},{"_id":"source/uploads/algorithm/cap/1.png","hash":"4ad86ee8d68aeb4c9b09e6dc649d06d2ae2ccff1","modified":1577944163782},{"_id":"source/uploads/javasource/util/.DS_Store","hash":"420a0d04681ff8898b084c86f6f5c5083541c9fc","modified":1573958589896},{"_id":"source/uploads/javasource/util/aqs2.png","hash":"062cb5989e3a889fb0644479745bd233b56fb52f","modified":1577944163798},{"_id":"source/uploads/javasource/util/aqs4.png","hash":"59945212e2e73963c10d0cff87a855e869bf2535","modified":1577944163800},{"_id":"source/uploads/javasource/util/aqs3.png","hash":"ed7fe0239a42aefcb42bd877a895f5757a2335a4","modified":1577944163799},{"_id":"source/uploads/bridge/1.jpg","hash":"ca09b943f8b76ff0eab45038b6a72b48ee59b213","modified":1577944163787},{"_id":"source/uploads/mysql/transaction/transaction1.jpg","hash":"5f7882851a78588b0c6de7686f9e009482cc113b","modified":1577944163825},{"_id":"source/uploads/spring/ioc/4.jpeg","hash":"dd716204df33624827ded150baf562b81bd0e82a","modified":1577944163838},{"_id":"source/uploads/java/synchronize1.png","hash":"53acf97141d0a47a9a3e057d803546d63cd81799","modified":1577944163795},{"_id":"source/uploads/spring/ioc/5.jpg","hash":"341ba1c44c85b71b68305e21d719b7074a61d71b","modified":1577944163838},{"_id":"source/uploads/spring/ioc/6.jpg","hash":"04c63491cb3b34a0c97aeb3ab3f437b4f69e961f","modified":1577944163839},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1577944163000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1577944163000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1577944163000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1577944163000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1577944163000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1577944163000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1577944163000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1577944163000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1577944163000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1577944163000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1577944163000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"ea3833c82c4b0851ad3c4ee2898cbfd17da3bf54","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1577944163000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1577944163000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1577944163000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1577944163000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1577944163000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1577944163000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"0bc96718d71a45d5d28b84318e7d8df9f100a57e","modified":1577944163000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1577944163000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1577944163000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1577944163000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1577944163000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1577944163000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1577944163000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1577944163000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1577944163000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1577944163000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1577944163000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1577944163000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1577944163000},{"_id":"themes/next/source/js/src/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1577944163000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1577944163000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1577944163000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1577944163000},{"_id":"themes/next/source/js/src/utils.js","hash":"2041eae5ac81c392067bfbd1bba4399cb37beea1","modified":1577944163000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1577944163000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1577944163000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1577944163000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1577944163000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1577944163000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1577944163000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1577944163000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1577944163000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1577944163000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1577944163000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1577944163000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1577944163000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1577944163000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1577944163000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1577944163000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1577944163000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1577944163000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1577944163000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1577944163000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1577944163000},{"_id":"source/uploads/algorithm/一致性hash/1.png","hash":"f1eec5563d27c2120a6c65a8de0e6f7969423aff","modified":1577944163783},{"_id":"source/uploads/algorithm/一致性hash/3.png","hash":"89f397f0ba4e4805061d7f3aeb07c824992c775c","modified":1577944163784},{"_id":"source/uploads/algorithm/一致性hash/5.png","hash":"2e230820df9f77b698b8790e40b1a79512f4d273","modified":1577944163785},{"_id":"source/uploads/algorithm/一致性hash/2.png","hash":"ecb0a3869267ead01483137cb730e1a4e7e56e09","modified":1577944163783},{"_id":"source/uploads/algorithm/一致性hash/4.png","hash":"a83f646527f146390bd6979d8b660c87c49be69e","modified":1577944163785},{"_id":"source/uploads/javasource/util/ConcurrentHashMap.png","hash":"5b5b35ef819d56b38a5e455a10f17819ecc53cc5","modified":1577944163796},{"_id":"source/uploads/algorithm/一致性hash/6.png","hash":"e84e272c22a0df97b2b00c1cf6e57e8db0efe7d8","modified":1577944163786},{"_id":"source/uploads/mysql/index/1.jpg","hash":"46d6fb043a2b75197191c5519d9adad15b2bb784","modified":1577944163822},{"_id":"source/uploads/mysql/index/4.jpg","hash":"05746e6b33f73dd9bf58851ffb83ba1c844b8633","modified":1577944163824},{"_id":"source/uploads/mysql/index/2.jpg","hash":"2d1a3648506c6b2531303132026f642fb3319f18","modified":1577944163822},{"_id":"source/uploads/spring/ioc/1.jpg","hash":"ec63366b4a3565aaa27b37d3feb8adbea168b799","modified":1577944163834},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1577944163000},{"_id":"source/uploads/mysql/index/3.jpg","hash":"be8f76015d76b46f31cf93ab6c21fa7d6aa4963b","modified":1577944163823},{"_id":"source/uploads/spring/ioc/2.png","hash":"a1cce899c72187fa1b942433a3b6659634773510","modified":1577944163835},{"_id":"source/uploads/structure/PriorityQueue1.png","hash":"aa829389c79ce3e83eadc3f040969028866865a3","modified":1577944163841},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1577944163000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1577944163000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1577944163000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1577944163000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1577944163000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1577944163000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1577944163000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1577944163000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1577944163000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1577944163000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1577944163000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1577944163000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1577944163000},{"_id":"source/uploads/jvm/标记复制.png","hash":"3eadc25c4c06df9babbfddd908b62ac43b614a3d","modified":1577944163811},{"_id":"source/uploads/jvm/标记整理.png","hash":"f08ef793e3c51369fc291207c08a2fa5e8bf1c5b","modified":1577944163817},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577944163000},{"_id":"source/uploads/javasource/util/aqs1.png","hash":"454ba81041540da08cf9ab5b1988eeec3c81e36f","modified":1577944163798},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"c196401747019d389da09b7a0fe7f27e3a0ec01f","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1577944163000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1577944163000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1577944163000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577944163000},{"_id":"source/uploads/javasource/util/executor.jpeg","hash":"b8cb91f94f549f29f6369bbf0acc5cb4e90f9e4c","modified":1577944163802},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1577944163000},{"_id":"source/uploads/jvm/标记清除.png","hash":"9cd58b1d9451bacb23a3f2f31bfc042abf9bc6c8","modified":1577944163819},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1577944163000},{"_id":"source/uploads/spring/ioc/3.jpg","hash":"3515c2ab1efc3b9ee6322d666ac6647ec1ba8d62","modified":1577944163837},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1577944163000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1577944163000},{"_id":"public/search.xml","hash":"dfc8a928fd2ac7449f3726403b2c4a5c9edaf68a","modified":1581667188558},{"_id":"public/categories/index.html","hash":"71b4c5849426099d75a202ecc4d3af8e652360f5","modified":1581667190466},{"_id":"public/about/index.html","hash":"4c4378daa6dfc38d5b84efeb5ef4edd7d97d0e37","modified":1581667190485},{"_id":"public/tags/index.html","hash":"709a039b9fd4e793bfe06afb3d3fe6ad9abe989d","modified":1581667190485},{"_id":"public/20170417/start/index.html","hash":"0079ab873497f04d2d8128983fca5ae99ee08816","modified":1581667190485},{"_id":"public/20170502/java/2_volatile/index.html","hash":"7cafbbdf0b6d4ba0f3c9cc01bb7897969f77b8b3","modified":1581667190485},{"_id":"public/20170503/java/1_concurrentHashMap/index.html","hash":"c5a3853a96bac6b431ef3001443ac6a6056987e1","modified":1581667190485},{"_id":"public/20170616/Design_pattern/1_start/index.html","hash":"0fe3bb8c8bb7317bcdc720e94fde7b3b57a71893","modified":1581667190486},{"_id":"public/20170617/Design_pattern/2_factory_pattern/index.html","hash":"242681c3c7aa45071e4267cf516d215562553f41","modified":1581667190486},{"_id":"public/20170618/Design_pattern/3_abstract-factory-pattern/index.html","hash":"8a8994c5873587a40717a73c5b0addc19e3cf4b8","modified":1581667190486},{"_id":"public/20170619/Design_pattern/4_singleton-pattern/index.html","hash":"00c9ab2c7450438e04afbfa681a48881c829522e","modified":1581667190486},{"_id":"public/20170620/Design_pattern/5_double-checked-locking/index.html","hash":"1ff0209c65ee02ef5eb5b6cf9826a9c0c40e92fb","modified":1581667190486},{"_id":"public/20170716/Design_pattern/6_builder/index.html","hash":"80636fee3be16d157d293be98bdff671992dd1c7","modified":1581667190486},{"_id":"public/20170724/Design_pattern/7_Prototype/index.html","hash":"474ac2aa9205530f0915969471d43cdf021b1d4b","modified":1581667190486},{"_id":"public/20170725/Design_pattern/8_Adapter/index.html","hash":"f9979fcab71f341f396880a67c4b8e08b0d2f94f","modified":1581667190486},{"_id":"public/20170726/Design_pattern/9_Bridge/index.html","hash":"92450a6915472341325b2a38188eaf1b385cec2a","modified":1581667190486},{"_id":"public/20170729/Design_pattern/11_composite/index.html","hash":"4f6460af2a3614d633bad016ccc1a78b9b132d06","modified":1581667190486},{"_id":"public/20170801/Design_pattern/12_decorator/index.html","hash":"fbe8cc9dc3a8bfca6f64a7df7bc3bec8c6cab1fb","modified":1581667190487},{"_id":"public/20170801/Design_pattern/13_facede/index.html","hash":"9a064762186710ef5c97f63d79304918de03d0af","modified":1581667190487},{"_id":"public/20170801/Design_pattern/14_flyweight/index.html","hash":"5956cf193807d38c446648611ea8b148b49a6216","modified":1581667190487},{"_id":"public/20170803/Design_pattern/15_proxy/index.html","hash":"da4df8380f6eaf2249fb832b53696b19b572830d","modified":1581667190487},{"_id":"public/20170806/Design_pattern/16_chainOfResponsibility/index.html","hash":"65bacb6f07200b87a0505e76757239be6371ce1b","modified":1581667190487},{"_id":"public/20170808/Design_pattern/17_command/index.html","hash":"4efd8e64439f2af5114624ced0566bdf38835dbb","modified":1581667190487},{"_id":"public/20170811/Design_pattern/18_interpreter/index.html","hash":"65033e178baa92d183456a34683abc495a655e0f","modified":1581667190487},{"_id":"public/20170817/Design_pattern/19_iterator/index.html","hash":"302d7905f7b7d93a26da9da3d0f59652c2870691","modified":1581667190487},{"_id":"public/20191115/javasource/util/2_ExecutorService/index.html","hash":"1c860614119b9de9b1480ae387fce6cfa1b28717","modified":1581667190487},{"_id":"public/20191116/java/3_synchronizedAndlock/index.html","hash":"32cc0ea16f8aca4b6e66c761d78906fdb8cb82af","modified":1581667190487},{"_id":"public/20191118/javasource/util/3_AbstractQueuedSynchronizer/index.html","hash":"9baddd9fc67b342a513b851d4926c6cf8419014b","modified":1581667190487},{"_id":"public/20191121/javasource/util/4_ConcurrentHashMap/index.html","hash":"890a37ece8b1b77dca2de2bdfa84dd3a63881a87","modified":1581667190487},{"_id":"public/20191124/java/4_集合简介/index.html","hash":"f8fb64e9efa349531d235a925f4439dedbce3b42","modified":1581667190487},{"_id":"public/20191127/java/5_synchronized/index.html","hash":"cf00eefadf8ef73d772adb8617a74d4ff8f69a7e","modified":1581667190487},{"_id":"public/20191201/javasource/util/5_ReentrantLock/index.html","hash":"64d8c2021e2d7e67c85a725466823ecdc2bffecf","modified":1581667190487},{"_id":"public/20191202/javasource/util/8_CountDownLatch/index.html","hash":"fa05ba526150fbe319680f08618da5ae896ee0db","modified":1581667190487},{"_id":"public/20191203/javasource/util/9_Semaphore/index.html","hash":"a16cab46ad997607a6c6a0c59a1494520243c01c","modified":1581667190488},{"_id":"public/20191203/javasource/util/6_ReentrantReadWriteLock/index.html","hash":"8e21336b183b7de5f924192dcafe5e331e35ccea","modified":1581667190488},{"_id":"public/20191204/javasource/util/7_CyclicBarrier/index.html","hash":"bf06fbe3e5f389f01e35e97e8acc1c3c30398448","modified":1581667190488},{"_id":"public/20191205/jvm/1_JVM内存区域/index.html","hash":"39e8cb5d8d1c77f4c7046a1fe0a588292cbe4059","modified":1581667190488},{"_id":"public/20191206/structure/1_trie/index.html","hash":"0285ad7f81fbf0f80f64ca3928c45ff7a4fdf814","modified":1581667190488},{"_id":"public/20191207/jvm/2_JVM垃圾回收算法/index.html","hash":"96cafd2bd615a9bfeacac942f8f266fb627af7ab","modified":1581667190488},{"_id":"public/20191208/jvm/3_GC垃圾收集器/index.html","hash":"8accd884ce088479981a790bda9d6d3a913d3ae6","modified":1581667190488},{"_id":"public/20191209/jvm/4_JVM类加载机制/index.html","hash":"cfa1398980d3723de4cacc6e212e2ffcc4908be3","modified":1581667190488},{"_id":"public/20191211/jvm/5_JDK常用命令（虚拟机性能监控故障处理）/index.html","hash":"b6a83cc5bd2633c6d9cb5675de04be53e3049440","modified":1581667190488},{"_id":"public/20191216/algorithm/一致性hash/index.html","hash":"ac136de611d1940278651c2ac9afa1120a2007ff","modified":1581667190488},{"_id":"public/20191217/distributed/CAP/index.html","hash":"a9da91b390df33bdd4ee7a0ad8ef23dbc1a2b5eb","modified":1581667190488},{"_id":"public/20191218/javasource/util/10_PriorityQueue/index.html","hash":"e1c714e78aeca1c0c980d52a7e6971bfd1a0ff33","modified":1581667190488},{"_id":"public/20191221/mysql/存储引擎/index.html","hash":"0f1a0a3b3f10d45a3a45a3da3cf44b1707965a2e","modified":1581667190488},{"_id":"public/20191222/mysql/索引/index.html","hash":"0b808590d118ee761aa707f26dc94b21bbb5932b","modified":1581667190488},{"_id":"public/20191223/mysql/事务/index.html","hash":"eccba1e5d49f7969c3248b3664b766ff296fb448","modified":1581667190488},{"_id":"public/20191228/spring/ioc/index.html","hash":"086994d8e956998661af07f2509279add0f5ddae","modified":1581667190489},{"_id":"public/tags/其他/index.html","hash":"6eb854c7acdaf68caf577fc20c055b2a0cbf0684","modified":1581667190489},{"_id":"public/20191114/javasource/util/1_HashMap/index.html","hash":"fa858c16e6fa561657489b387c55d0b91a7a00db","modified":1581667190489},{"_id":"public/tags/设计模式/index.html","hash":"fae0cb53b10c7c117dde66ae6b801ca1ed7fc627","modified":1581667190489},{"_id":"public/20200106/spring/aop/index.html","hash":"85ff919ed0e7dfaeb1c2e6918f29e50d87b312bf","modified":1581667190841},{"_id":"public/20200107/zookeeper/zk/index.html","hash":"9603a68adbeb0af11eb66b6b314ed49319584c08","modified":1581667190849},{"_id":"public/20200112/structure/2_并查集/index.html","hash":"4cda47af994220f049eb07c13330c35f993b8cca","modified":1581667190849},{"_id":"public/20200213/redis/redis/index.html","hash":"5054cffe9e38c44ebc1b48b7d63092786419ccbc","modified":1581667190849},{"_id":"public/20200213/redis/分布式锁/index.html","hash":"d92fc8344f93ca3526221eaea1895135db1e6f93","modified":1581667190849},{"_id":"public/20200213/redis/HyperLogLog/index.html","hash":"e32d39439f685223217c8a49b861b573ef1b4063","modified":1581667190849},{"_id":"public/20200213/redis/布隆过滤器/index.html","hash":"82cafe6bd0ac54e08dcf9ebbe57e3f203191c7e5","modified":1581667190849},{"_id":"public/20200213/redis/限流/index.html","hash":"d113f6d59b0eea18977fb252ba9e67848c5d0099","modified":1581667190849},{"_id":"public/20200213/Design_pattern/21_strategy/index.html","hash":"a4789e27e723ac714bb5e4e1bfe8f78c12ba1ff8","modified":1581667190849},{"_id":"public/20200213/Design_pattern/20_template/index.html","hash":"4763754e0ecfed7fac0143980b718314659ff561","modified":1581667190849},{"_id":"public/tags/设计模式/page/2/index.html","hash":"8b994fd45cd2726d9424016260cbf91cc6175b9e","modified":1581667190850},{"_id":"public/tags/一致性hash/index.html","hash":"26cadf9c26fee66966e22a3824adc4a6635ec860","modified":1581667190850},{"_id":"public/tags/jvm/index.html","hash":"45e3b071ca0b0cfb32f410f5ab6fb5475b40aefb","modified":1581667190850},{"_id":"public/tags/垃圾回收/index.html","hash":"f2ba336c92c8f9138eb5d3f0a67f9f2854b9b9ed","modified":1581667190850},{"_id":"public/tags/JVM/index.html","hash":"cc6c13c80d53c8b9ef059b16bdd8d17e4a82f430","modified":1581667190850},{"_id":"public/tags/内存区域/index.html","hash":"7b4ac4f6a42ba160d7f81d57d707dd47a2a72bfb","modified":1581667190850},{"_id":"public/tags/垃圾收集器/index.html","hash":"d35731d4637797ba2a961b421ea33afdf65abefe","modified":1581667190850},{"_id":"public/tags/类加载机制/index.html","hash":"7c5d2fb5135ddaa913f2825b71c5ecfdce4d00ae","modified":1581667190850},{"_id":"public/tags/JDK/index.html","hash":"cba8da3a5e873a72a43c05f7a62d51bbf7bdf698","modified":1581667190850},{"_id":"public/tags/mysql/index.html","hash":"fc6019bec7ab93c91657038e18e917a40cc0286b","modified":1581667190850},{"_id":"public/tags/事务/index.html","hash":"52a072b9784dcbb4beba076231a76b8b57c29a7d","modified":1581667190850},{"_id":"public/tags/存储引擎/index.html","hash":"96492f53e03586e32466249776cae01796251b30","modified":1581667190850},{"_id":"public/tags/索引/index.html","hash":"d1975f6b9753dd0e6004206b67a808d1c0e8c599","modified":1581667190850},{"_id":"public/tags/B/index.html","hash":"9d6a4143e21c9bb4597b30777928d1781dfe94fc","modified":1581667190850},{"_id":"public/tags/CAP/index.html","hash":"0bacb3bbab5dd8f7e55f28c98311b7373fe6d9dc","modified":1581667190850},{"_id":"public/tags/java/index.html","hash":"64cf9ca0877c120c12abf4fc8f9d09071368b089","modified":1581667190851},{"_id":"public/tags/java/page/2/index.html","hash":"0411b649c4d19ba307c98c8188176021fc095547","modified":1581667190851},{"_id":"public/tags/spring/index.html","hash":"26f376ba3357bfabad2d6a93d63e0daa9b284c9d","modified":1581667190851},{"_id":"public/tags/IoC/index.html","hash":"7ce53ee499bb3d9ea49d41d7d36b19dcf454f3df","modified":1581667190851},{"_id":"public/tags/volatile/index.html","hash":"aea0bb5dca56121993ebd6ee29d45efae43331da","modified":1581667190851},{"_id":"public/tags/并发/index.html","hash":"8dbd66174c4575755011525ed2c64fea2d1728a1","modified":1581667190851},{"_id":"public/tags/ConcurrentHashMap/index.html","hash":"7e792b3f5df9c4865e6adecd20ac313fbbb0a995","modified":1581667190851},{"_id":"public/tags/synchronized/index.html","hash":"6e1744c14be0ee2f0a010a947d98bec1a389710e","modified":1581667190851},{"_id":"public/tags/lock/index.html","hash":"b789b62c985bbebefe9da6beeb076115609ec777","modified":1581667190851},{"_id":"public/tags/集合/index.html","hash":"1f39f881aee9338ce679eaeccb2bc9204f55d1d8","modified":1581667190851},{"_id":"public/tags/List/index.html","hash":"d195912c016b08900bc200038e6eac64c1457b35","modified":1581667190851},{"_id":"public/tags/Set/index.html","hash":"cb1f41999ad8da42a955aabab1f464d00b4149e4","modified":1581667190851},{"_id":"public/tags/Map/index.html","hash":"4f794cc12e130a871efd861512568ab07080bbc3","modified":1581667190851},{"_id":"public/tags/Collection/index.html","hash":"fa87cd59e9ed58160b14eb2d3bcc5fc0002c2107","modified":1581667190851},{"_id":"public/tags/锁/index.html","hash":"4dc12aaf41c3a9a1e8c2569284702e4ec5cebcbc","modified":1581667190851},{"_id":"public/tags/structure/index.html","hash":"2b637a54c5a9678cdbf4d94dd529701bead9960a","modified":1581667190851},{"_id":"public/tags/trie/index.html","hash":"75376cfcc68a557be7b7f4cae7482c99f4e351c4","modified":1581667190852},{"_id":"public/tags/字典数/index.html","hash":"48a3bad8b89803d67e99dca36679b6212a5da36f","modified":1581667190852},{"_id":"public/tags/PriorityQueue/index.html","hash":"e9ac0c5a5d5aab353813ddf6f066ea0ad1a20576","modified":1581667190852},{"_id":"public/tags/ExecutorService/index.html","hash":"3f935d85ab659c78f5550da00b2582e8e26fb6a3","modified":1581667190852},{"_id":"public/tags/ThreadPoolExecutor/index.html","hash":"7ef6ccc0709d32fd95fac015b9f1e070ebc99a32","modified":1581667190852},{"_id":"public/tags/线程池/index.html","hash":"cd6e4908b1420feb4b567cf26d1102e34df16a0e","modified":1581667190852},{"_id":"public/tags/aqs/index.html","hash":"401004146d255a9adcf8b06e330babd7556c1b7e","modified":1581667190852},{"_id":"public/tags/AbstractQueuedSynchronizer/index.html","hash":"c7a5d39ad7f22a5a98affe5d729be4245cf7eab8","modified":1581667190852},{"_id":"public/tags/同步/index.html","hash":"19a0527bef764508920a5d740adba2fd1a743bc0","modified":1581667190852},{"_id":"public/tags/HashMap/index.html","hash":"79da282d6ac70d3b6d61eaf59e0a897f1ffaad7f","modified":1581667190852},{"_id":"public/tags/ReentrantLock/index.html","hash":"1eb6dbd40b0002a61bfe21955b6ffb1439cfa4b6","modified":1581667190852},{"_id":"public/tags/公平锁/index.html","hash":"572810dccebd3fc85d287484e3ba617b77034515","modified":1581667190852},{"_id":"public/tags/非公平锁/index.html","hash":"9825b5fa6ed4ffb3e180a2c15218cf5111d39c41","modified":1581667190852},{"_id":"public/tags/CountDownLatch/index.html","hash":"a14e7cacb0c86b077f22fef25b702672d8c64a1f","modified":1581667190852},{"_id":"public/tags/Semaphore/index.html","hash":"5846e60d687531163d2eb4741e219fe4449f2030","modified":1581667190852},{"_id":"public/tags/ReentrantReadWriteLock/index.html","hash":"789e6f81f71ebadef4d097820b0080dfb03a29b2","modified":1581667190852},{"_id":"public/tags/CyclicBarrier/index.html","hash":"08bbbd555a10ec1996c6c3c8239ebbae295d6428","modified":1581667190852},{"_id":"public/archives/index.html","hash":"af70a4e61e7c6dbe90f2abbeb4df9c8d7c0c913d","modified":1581667190852},{"_id":"public/archives/page/2/index.html","hash":"b8eb40a9d266576037d8838ca255dec87282953d","modified":1581667190852},{"_id":"public/archives/page/3/index.html","hash":"abd489dd512d130079cda811a17e74a26a0bfbdf","modified":1581667190852},{"_id":"public/archives/page/4/index.html","hash":"b06201ede12eb221f596056d358891b22306e6a0","modified":1581667190853},{"_id":"public/archives/page/5/index.html","hash":"cebda97ddb55a57130a0cb162c27c93b8e28139e","modified":1581667190853},{"_id":"public/archives/2017/index.html","hash":"0983655af787a39b006d8717937285fa3704aaca","modified":1581667190853},{"_id":"public/archives/2017/page/2/index.html","hash":"5522d04b1c3de0938b7fe056249fa617a9aa3e45","modified":1581667190853},{"_id":"public/archives/2017/page/3/index.html","hash":"00ff0f965295f3d95cf2b39475939243c571deff","modified":1581667190853},{"_id":"public/archives/2017/04/index.html","hash":"35f33f3dbb0e1d1a82f89cc66de20edfab830fd3","modified":1581667190853},{"_id":"public/archives/2017/05/index.html","hash":"6e8f120e99c5e115ee3b01990ad5d4a33e16f90d","modified":1581667190853},{"_id":"public/archives/2017/06/index.html","hash":"5ccea474115971433daef3a12ba631270827cd90","modified":1581667190853},{"_id":"public/archives/2017/07/index.html","hash":"8b48c884a5848cc834d5dcbc2071e18cd6345f94","modified":1581667190853},{"_id":"public/archives/2017/08/index.html","hash":"2d0de277724b226f5373cc5d030ed6532609e1e5","modified":1581667190853},{"_id":"public/archives/2019/index.html","hash":"40850b7519b7bb16a90f6568d4a3a0dcc7ca51b5","modified":1581667190853},{"_id":"public/archives/2019/page/2/index.html","hash":"57308d4be6df057b76c91115c499b955b9778856","modified":1581667190853},{"_id":"public/archives/2019/page/3/index.html","hash":"f807a9a1cfbfe8a1a987b3a7b5627e0e15e73016","modified":1581667190853},{"_id":"public/archives/2019/11/index.html","hash":"cd68d1f6100ddaeba85e860aacfe58df250c372b","modified":1581667190853},{"_id":"public/archives/2019/12/index.html","hash":"89323e34e2b9cd2f0b02744334adf3365053f1e6","modified":1581667190854},{"_id":"public/archives/2019/12/page/2/index.html","hash":"b100aa43f33b3693e1fe9ab0a8bebcbde9903e70","modified":1581667190854},{"_id":"public/categories/其他/index.html","hash":"dc421f11e829118862ec7b51697ac01fe8191d84","modified":1581667190854},{"_id":"public/categories/设计模式/index.html","hash":"17d655acf7f5825f259c4a25d74daf04405902e8","modified":1581667190854},{"_id":"public/categories/设计模式/page/2/index.html","hash":"2af9ef57822d2cab32cac59840ce38b710682150","modified":1581667190854},{"_id":"public/categories/CAP/index.html","hash":"08c00bfaed0537cdf6be847bb7a738420d0fe70f","modified":1581667190854},{"_id":"public/categories/一致性hash/index.html","hash":"452c2b3343404c7003fa5fb909a4672ee676b32d","modified":1581667190854},{"_id":"public/categories/jvm/index.html","hash":"8a21b4824f3c1bdaf84dfb9f0260009f4e48ea79","modified":1581667190854},{"_id":"public/categories/JVM/index.html","hash":"a80816ad57a86ba20cbd44cd1935b560a23d65c3","modified":1581667190854},{"_id":"public/categories/JDK/index.html","hash":"e81d8142d1268ab35a43a3708d8afe0406645dd7","modified":1581667190854},{"_id":"public/categories/mysql/index.html","hash":"c26a26942883e849ce4fbc882db0f5a2d751578b","modified":1581667190854},{"_id":"public/categories/存储引擎/index.html","hash":"09f2ad385c0cd32b20f9f7def7094452b7aede9c","modified":1581667190854},{"_id":"public/categories/spring/index.html","hash":"cf5c4febb5d2f9047db410b33869786355754713","modified":1581667190854},{"_id":"public/categories/java/index.html","hash":"dd651964bfff9cc4b133427f1bff43e83d7a6d9c","modified":1581667190854},{"_id":"public/categories/java/page/2/index.html","hash":"a1de55b3367bd018ba00031d11ebdea7a6a2e7e4","modified":1581667190855},{"_id":"public/categories/mysql/事务/index.html","hash":"743532aa1e49f8bc3c6ce41ad85711adbfd64917","modified":1581667190855},{"_id":"public/categories/synchronized/index.html","hash":"461f1e05f5dbe8211f83fa6fbb0de7a1db5597bd","modified":1581667190855},{"_id":"public/categories/structure/index.html","hash":"f84706c9151eb64d550f7c8d607753157d9eed72","modified":1581667190855},{"_id":"public/categories/mysql/索引/index.html","hash":"8d8ae010a810d242ab21932d7f6e8bac88fbf9f6","modified":1581667190855},{"_id":"public/categories/mysql/索引/B/index.html","hash":"bb88836a16e5f7c4f8629b7c8b2ddac6b336c0ab","modified":1581667190855},{"_id":"public/index.html","hash":"587e61cbb5a1856f8c4a242491bbacc067668f6c","modified":1581667190855},{"_id":"public/page/2/index.html","hash":"383ddfc7638f41c7cb072dbfb24399e0f2b6ec7e","modified":1581667190855},{"_id":"public/page/3/index.html","hash":"cfeae0a2163ee08dfef67d6133068673b208d195","modified":1581667190855},{"_id":"public/page/4/index.html","hash":"390eb0f37f1eec9b4159bad451230114a7919c49","modified":1581667190855},{"_id":"public/page/5/index.html","hash":"6697a2d121396fb24ccbc571de2e5f13f35283d8","modified":1581667190855},{"_id":"public/tags/redis/index.html","hash":"a495843c531a3da8174464cf62b63c1cb127c991","modified":1581667190870},{"_id":"public/tags/HyperLogLog/index.html","hash":"00ed3cbdfc224b5884a410933f74e36f38722daa","modified":1581667190870},{"_id":"public/tags/分布式锁/index.html","hash":"efd1d3b5b569ff34198fe9ea8b831585290c4a39","modified":1581667190870},{"_id":"public/tags/布隆过滤器/index.html","hash":"06f7d836c25f4e893ab047f6d64d0becc71afb62","modified":1581667190870},{"_id":"public/tags/aop/index.html","hash":"f27831bd466febbda50cc8d29c0e3455e9dab1fe","modified":1581667190870},{"_id":"public/tags/zookeeper/index.html","hash":"9c6e9759cd5344b38bfef02efd927ab0298b5081","modified":1581667190870},{"_id":"public/tags/并查集/index.html","hash":"c81a5435ec48848ef21bc5f66b95cb9787a1ffa7","modified":1581667190870},{"_id":"public/archives/page/6/index.html","hash":"f9990314d213b986717a4d977c086306a6c59843","modified":1581667190871},{"_id":"public/archives/2020/index.html","hash":"aab604ce6a6793bc57f6b8026af42ab064695564","modified":1581667190871},{"_id":"public/archives/2020/01/index.html","hash":"d8eb3128c8a0a0f6344f1bfc6750c8a05bc01460","modified":1581667190871},{"_id":"public/archives/2020/02/index.html","hash":"a48f520238701efc27820724bbcbc1e01b1472ab","modified":1581667190871},{"_id":"public/categories/redis/index.html","hash":"b17d17a81a1b19807a09a52b38fd0ea57f5107c4","modified":1581667190871},{"_id":"public/categories/redis/HyperLogLog/index.html","hash":"b4f97b1e7b5da2986c04250f5b5226273874527b","modified":1581667190871},{"_id":"public/categories/zookeeper/index.html","hash":"6ff15d147a31bab41d8aa53a362b130f71847cf8","modified":1581667190871},{"_id":"public/categories/redis/分布式锁/index.html","hash":"48c618ae3738e95274ce07f39abdeee1f2626612","modified":1581667190871},{"_id":"public/categories/redis/布隆过滤器/index.html","hash":"d0cc2ec1945abd2ff7aad353afac44a38ec7a4b3","modified":1581667190871},{"_id":"public/categories/redis/限流/index.html","hash":"638dea96f1b3e2397a33b30ab12da03ac86dd07a","modified":1581667190871},{"_id":"public/categories/structure/并查集/index.html","hash":"5978be1537a54bd4684a6aa92bdbc6787dbf0f93","modified":1581667190875},{"_id":"public/page/6/index.html","hash":"0713f037b0957eef2d972542bcb21fc43f14bb90","modified":1581667190876},{"_id":"public/tags/限流/index.html","hash":"edb782d71d8f72a301a0730907f69eafade73480","modified":1581667190876},{"_id":"public/favicon.ico","hash":"781096cb74eaeea8e2fb26a37e810e6d688e28b4","modified":1581667190876},{"_id":"public/pay/zhifubao.png","hash":"e5f1b2b91d1c3a64e0f7f72f6c78c5ead9099b76","modified":1581667190876},{"_id":"public/pay/weixin.png","hash":"57dd56fecf6f6b3b95e3eb205ca360f0656f92fd","modified":1581667190876},{"_id":"public/about/zhifubao.png","hash":"e5f1b2b91d1c3a64e0f7f72f6c78c5ead9099b76","modified":1581667190876},{"_id":"public/uploads/concurrentHashMap.png","hash":"d1ab4315b91c992435e96ab6f8575a957e86b1e8","modified":1581667190876},{"_id":"public/uploads/chainOfResponsibility/1.png","hash":"f026078b3158711c42c15590a99b30acbdd730ef","modified":1581667190876},{"_id":"public/uploads/double_checked_locking/double_checked_lock1.png","hash":"ea0f57df87b459dfab9e82912d8e05f819881391","modified":1581667190877},{"_id":"public/uploads/interpreter/1.gif","hash":"41220026fc53ead3a405453d5c1328cd6ce69fe5","modified":1581667190877},{"_id":"public/uploads/iterator/1.jpg","hash":"af9a53090738130cfd114e3b678df937ebb323ec","modified":1581667190877},{"_id":"public/uploads/javasource/lock.jpeg","hash":"8c95d0fa616ffc48f7a346220964a150c708fc7f","modified":1581667190877},{"_id":"public/uploads/jvm/垃圾收集器.jpg","hash":"cde53c94df9427c944125e05d01a7f2feb50db31","modified":1581667190877},{"_id":"public/uploads/jvm/栈帧.jpg","hash":"dcaa9a7640f71f685ab494b52d3843d7392e3b3c","modified":1581667190877},{"_id":"public/uploads/jvm/运行时数据区.jpg","hash":"8568074c49c8086cb2330bd15b46a4aeff1f4956","modified":1581667190877},{"_id":"public/uploads/jvm/类加载过程.jpg","hash":"0c3ca0936abdd81064c4f1629faf7c84d25d97ba","modified":1581667190877},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1581667190877},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1581667190877},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1581667190877},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1581667190877},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1581667190878},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1581667190878},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1581667190878},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1581667190878},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1581667190878},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1581667190878},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1581667190878},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1581667190878},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1581667190878},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1581667190878},{"_id":"public/uploads/double_checked_locking/double_checked_lock.png","hash":"4e955d8760cc3f6a72c3ed28fc0321c7bc7153b4","modified":1581667190878},{"_id":"public/uploads/algorithm/cap/1.png","hash":"4ad86ee8d68aeb4c9b09e6dc649d06d2ae2ccff1","modified":1581667190878},{"_id":"public/uploads/javasource/util/aqs2.png","hash":"062cb5989e3a889fb0644479745bd233b56fb52f","modified":1581667190878},{"_id":"public/uploads/javasource/util/aqs4.png","hash":"59945212e2e73963c10d0cff87a855e869bf2535","modified":1581667190889},{"_id":"public/uploads/javasource/util/aqs3.png","hash":"ed7fe0239a42aefcb42bd877a895f5757a2335a4","modified":1581667190889},{"_id":"public/uploads/mysql/transaction/transaction1.jpg","hash":"5f7882851a78588b0c6de7686f9e009482cc113b","modified":1581667190889},{"_id":"public/uploads/spring/ioc/4.jpeg","hash":"dd716204df33624827ded150baf562b81bd0e82a","modified":1581667190889},{"_id":"public/uploads/spring/ioc/5.jpg","hash":"341ba1c44c85b71b68305e21d719b7074a61d71b","modified":1581667190889},{"_id":"public/uploads/spring/ioc/6.jpg","hash":"04c63491cb3b34a0c97aeb3ab3f437b4f69e961f","modified":1581667190889},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1581667190890},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1581667190890},{"_id":"public/uploads/algorithm/一致性hash/1.png","hash":"f1eec5563d27c2120a6c65a8de0e6f7969423aff","modified":1581667190890},{"_id":"public/uploads/javasource/util/ConcurrentHashMap.png","hash":"5b5b35ef819d56b38a5e455a10f17819ecc53cc5","modified":1581667190890},{"_id":"public/uploads/mysql/index/4.jpg","hash":"05746e6b33f73dd9bf58851ffb83ba1c844b8633","modified":1581667190890},{"_id":"public/uploads/spring/ioc/1.jpg","hash":"ec63366b4a3565aaa27b37d3feb8adbea168b799","modified":1581667190890},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1581667190890},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1581667190890},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1581667190890},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1581667190890},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1581667190890},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1581667190890},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1581667190890},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1581667190890},{"_id":"public/about/weixin.png","hash":"57dd56fecf6f6b3b95e3eb205ca360f0656f92fd","modified":1581667191388},{"_id":"public/uploads/author.jpg","hash":"64f368339dd0e50cb0e77ececff611f68fa8f5ca","modified":1581667191388},{"_id":"public/uploads/design-patterns.jpg","hash":"5533c4baa4a9ee3e2315d805f40f42fe7d4af6ce","modified":1581667191395},{"_id":"public/uploads/jvm/SerialOld.jpg","hash":"24db61ec0bbb08290bc421cde6ff583b4d15d7d0","modified":1581667191395},{"_id":"public/uploads/jvm/类加载器.jpeg","hash":"33dcc4737c95d48c53549f772a2f5c6f60f9db4b","modified":1581667191395},{"_id":"public/uploads/structure/trie.png","hash":"3e6c7d524d9103c3debd52dc01b0343326b274f5","modified":1581667191395},{"_id":"public/uploads/bridge/2.jpg","hash":"2b9e1e7cf3aee874637a4ea9a0be545df3a5abd6","modified":1581667191395},{"_id":"public/uploads/facade/1.png","hash":"b8d18ffdd8f7401724f30c51610aeb2e06f557a6","modified":1581667191395},{"_id":"public/uploads/decorator/1.jpg","hash":"f1df6b8a4036c40e4d916c3e3eb00433922ece64","modified":1581667191395},{"_id":"public/uploads/jvm/G1.jpg","hash":"3206ab67fb1f688c433342f5439f350a12bff258","modified":1581667191396},{"_id":"public/uploads/jvm/ParNew.jpg","hash":"0da964484bf05c270020fc0dc0ac9e0461986532","modified":1581667191396},{"_id":"public/uploads/jvm/ParallelOld.jpg","hash":"a3e01a02c3e781119a5363309b1fe56ad8759ac2","modified":1581667191396},{"_id":"public/uploads/jvm/ParallelScavenge.jpg","hash":"a3e01a02c3e781119a5363309b1fe56ad8759ac2","modified":1581667191396},{"_id":"public/uploads/jvm/可达性算法.png","hash":"30b34bcc2ff7014a80ea2de8bdd5398f0f450eae","modified":1581667191396},{"_id":"public/uploads/jvm/serial.jpg","hash":"a3e01a02c3e781119a5363309b1fe56ad8759ac2","modified":1581667191396},{"_id":"public/uploads/java/synchronize.png","hash":"5b9bdad3c6c5083a90374dd36a33d8fa912910e2","modified":1581667191396},{"_id":"public/uploads/jvm/CMS.jpg","hash":"e9169ffa04a4c3e3d227967f967048f05da66386","modified":1581667191396},{"_id":"public/uploads/structure/PriorityQueue.png","hash":"271da221bbc5aa798075b4ce0a65ff9ceaeaa60a","modified":1581667191396},{"_id":"public/uploads/bridge/1.jpg","hash":"ca09b943f8b76ff0eab45038b6a72b48ee59b213","modified":1581667191397},{"_id":"public/uploads/algorithm/一致性hash/3.png","hash":"89f397f0ba4e4805061d7f3aeb07c824992c775c","modified":1581667191397},{"_id":"public/uploads/algorithm/一致性hash/5.png","hash":"2e230820df9f77b698b8790e40b1a79512f4d273","modified":1581667191397},{"_id":"public/uploads/algorithm/一致性hash/2.png","hash":"ecb0a3869267ead01483137cb730e1a4e7e56e09","modified":1581667191397},{"_id":"public/uploads/algorithm/一致性hash/4.png","hash":"a83f646527f146390bd6979d8b660c87c49be69e","modified":1581667191397},{"_id":"public/uploads/algorithm/一致性hash/6.png","hash":"e84e272c22a0df97b2b00c1cf6e57e8db0efe7d8","modified":1581667191397},{"_id":"public/uploads/mysql/index/1.jpg","hash":"46d6fb043a2b75197191c5519d9adad15b2bb784","modified":1581667191397},{"_id":"public/uploads/mysql/index/2.jpg","hash":"2d1a3648506c6b2531303132026f642fb3319f18","modified":1581667191397},{"_id":"public/uploads/mysql/index/3.jpg","hash":"be8f76015d76b46f31cf93ab6c21fa7d6aa4963b","modified":1581667191397},{"_id":"public/uploads/spring/ioc/2.png","hash":"a1cce899c72187fa1b942433a3b6659634773510","modified":1581667191397},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1581667191398},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1581667191398},{"_id":"public/uploads/javasource/util/aqs1.png","hash":"454ba81041540da08cf9ab5b1988eeec3c81e36f","modified":1581667191398},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1581667191409},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1581667191409},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1581667191409},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1581667191409},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1581667191409},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1581667191409},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1581667191409},{"_id":"public/js/src/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1581667191409},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1581667191409},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1581667191409},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1581667191409},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1581667191409},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1581667191409},{"_id":"public/js/src/utils.js","hash":"2041eae5ac81c392067bfbd1bba4399cb37beea1","modified":1581667191409},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1581667191409},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1581667191410},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1581667191410},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1581667191410},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1581667191410},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1581667191410},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1581667191410},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1581667191410},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1581667191410},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1581667191410},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1581667191410},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1581667191410},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1581667191410},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1581667191410},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1581667191410},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1581667191410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1581667191410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1581667191410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1581667191410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1581667191410},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1581667191410},{"_id":"public/css/main.css","hash":"c9243dc1548d9dfbda8a63eaa310d79311674b61","modified":1581667191410},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1581667191410},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1581667191410},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1581667191410},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1581667191411},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1581667191411},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1581667191411},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1581667191411},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1581667191411},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1581667191411},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1581667191411},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1581667191411},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1581667191411},{"_id":"public/uploads/structure/PriorityQueue1.png","hash":"aa829389c79ce3e83eadc3f040969028866865a3","modified":1581667191411},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1581667191412},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1581667191412},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1581667191412},{"_id":"public/uploads/java/synchronize1.png","hash":"53acf97141d0a47a9a3e057d803546d63cd81799","modified":1581667191421},{"_id":"public/uploads/javasource/util/executor.jpeg","hash":"b8cb91f94f549f29f6369bbf0acc5cb4e90f9e4c","modified":1581667191440},{"_id":"public/uploads/jvm/标记整理.png","hash":"f08ef793e3c51369fc291207c08a2fa5e8bf1c5b","modified":1581667191446},{"_id":"public/uploads/jvm/标记清除.png","hash":"9cd58b1d9451bacb23a3f2f31bfc042abf9bc6c8","modified":1581667191452},{"_id":"public/uploads/spring/ioc/3.jpg","hash":"3515c2ab1efc3b9ee6322d666ac6647ec1ba8d62","modified":1581667191457},{"_id":"public/uploads/jvm/标记复制.png","hash":"3eadc25c4c06df9babbfddd908b62ac43b614a3d","modified":1581667191460},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1581667191463}],"Category":[{"name":"其他","_id":"ck6lvszmz0003n0ztmqql6n0l"},{"name":"设计模式","_id":"ck6lvszri000an0ztw3t55ws0"},{"name":"CAP","_id":"ck6lvszs2001un0ztpsw22hl3"},{"name":"一致性hash","_id":"ck6lvszs50025n0ztgvj4i59n"},{"name":"jvm","_id":"ck6lvszs6002dn0ztv94kvlgb"},{"name":"JVM","_id":"ck6lvszsd002vn0ztmqrxlpp4"},{"name":"JDK","_id":"ck6lvszse0031n0zty88gwslr"},{"name":"mysql","_id":"ck6lvszsg0037n0ztemwrxdc6"},{"name":"存储引擎","_id":"ck6lvszsk003en0zt2snvm7s1"},{"name":"redis","_id":"ck6lvszsm003jn0ztkr5djvof"},{"name":"spring","_id":"ck6lvszsu0047n0ztltgn7gud"},{"name":"java","_id":"ck6lvszsv004en0zt02oxi9vr"},{"name":"事务","parent":"ck6lvszsg0037n0ztemwrxdc6","_id":"ck6lvszsw004in0ztmrez0op9"},{"name":"synchronized","_id":"ck6lvszsz004yn0ztu1t09axw"},{"name":"structure","_id":"ck6lvszt00053n0ztl2lcajbj"},{"name":"HyperLogLog","parent":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt00057n0ztjh2b6pe1"},{"name":"zookeeper","_id":"ck6lvszt1005bn0ztm0rhnkbw"},{"name":"索引","parent":"ck6lvszsg0037n0ztemwrxdc6","_id":"ck6lvszt2005kn0zt4y5n3yl6"},{"name":"分布式锁","parent":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt3005nn0zt0brl5be8"},{"name":"布隆过滤器","parent":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt4005qn0zt89dflbu8"},{"name":"限流","parent":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt4005tn0ztrvuz6nld"},{"name":"并查集","parent":"ck6lvszt00053n0ztl2lcajbj","_id":"ck6lvszt5005yn0ztg365rdzt"},{"name":"B+","parent":"ck6lvszt2005kn0zt4y5n3yl6","_id":"ck6lvszt70064n0ztjaau5v32"}],"Data":[],"Page":[{"title":"categories","date":"2017-04-17T07:04:09.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-17 15:04:09\ntype: \"categories\" \ncomments: false\n---\n","updated":"2020-01-02T05:49:23.779Z","path":"categories/index.html","layout":"page","_id":"ck6lvszmu0000n0ztyrrfc6jp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2017-04-17T07:04:18.000Z","comments":0,"_content":"### fk5431的githubpage\n- [github](https://github.com/fk5431)： https://github.com/fk5431\n- [csdn](http://blog.csdn.net/fk5431)：http://blog.csdn.net/fk5431\n\n小菜鸟一个，欢迎讨论。\n\n坚持原创技术分享，您的支持将鼓励我继续创作！\n![支付宝](zhifubao.png)\n![微信](weixin.png)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-17 15:04:18\ncomments: false\n---\n### fk5431的githubpage\n- [github](https://github.com/fk5431)： https://github.com/fk5431\n- [csdn](http://blog.csdn.net/fk5431)：http://blog.csdn.net/fk5431\n\n小菜鸟一个，欢迎讨论。\n\n坚持原创技术分享，您的支持将鼓励我继续创作！\n![支付宝](zhifubao.png)\n![微信](weixin.png)","updated":"2020-01-02T05:49:23.777Z","path":"about/index.html","layout":"page","_id":"ck6lvszmy0002n0ztzeetjxpr","content":"<h3 id=\"fk5431的githubpage\"><a href=\"#fk5431的githubpage\" class=\"headerlink\" title=\"fk5431的githubpage\"></a>fk5431的githubpage</h3><ul>\n<li><a href=\"https://github.com/fk5431\" target=\"_blank\" rel=\"external\">github</a>： <a href=\"https://github.com/fk5431\" target=\"_blank\" rel=\"external\">https://github.com/fk5431</a></li>\n<li><a href=\"http://blog.csdn.net/fk5431\" target=\"_blank\" rel=\"external\">csdn</a>：<a href=\"http://blog.csdn.net/fk5431\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/fk5431</a></li>\n</ul>\n<p>小菜鸟一个，欢迎讨论。</p>\n<p>坚持原创技术分享，您的支持将鼓励我继续创作！<br><img src=\"zhifubao.png\" alt=\"支付宝\"><br><img src=\"weixin.png\" alt=\"微信\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"fk5431的githubpage\"><a href=\"#fk5431的githubpage\" class=\"headerlink\" title=\"fk5431的githubpage\"></a>fk5431的githubpage</h3><ul>\n<li><a href=\"https://github.com/fk5431\">github</a>： <a href=\"https://github.com/fk5431\">https://github.com/fk5431</a></li>\n<li><a href=\"http://blog.csdn.net/fk5431\">csdn</a>：<a href=\"http://blog.csdn.net/fk5431\">http://blog.csdn.net/fk5431</a></li>\n</ul>\n<p>小菜鸟一个，欢迎讨论。</p>\n<p>坚持原创技术分享，您的支持将鼓励我继续创作！<br><img src=\"zhifubao.png\" alt=\"支付宝\"><br><img src=\"weixin.png\" alt=\"微信\"></p>\n"},{"title":"tags","date":"2017-04-17T06:05:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-17 14:05:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2020-01-02T05:49:23.782Z","path":"tags/index.html","layout":"page","_id":"ck6lvszn00005n0ztz778ztaw","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo初步使用","date":"2017-04-17T06:40:10.000Z","comments":0,"keywords":"hexo, github","_content":"## Hexo\nHexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）\n\n### hexo的安装\nhexo只依赖于\n\n- Node.js\n- Git\n\n上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装\n\n```\nnpm install -g hexo-cli\n```\n### hexo的基本命令\n\n- hexo init [folder]   #新建一个网站\n- hexo n [layout] <title>    #新建一篇文章\n- hexo g   #生成静态文件\n- hexo d   #部署网站。\n- hexo publish [layout] <filename>   #发表草稿\n- hexo s   #启动服务器\n- hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)\n\n### hexo的配置\n\n配置内容来自官网\n\n#### 网站\n|参数|描述|\n|---|----|\n| title |\t网站标题|\n| subtitle |\t网站副标题|\n| description |\t网站描述|\n| author |\t您的名字|\n| language |\t网站使用的语言|\n| timezone\t|网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。|\n\n其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。\n\n#### 网址\n| 参数|\t描述|\t默认值|\n|---------|---------|--------|\n| url |\t网址\t|        |\n| root\t| 网站根目录\t|          |\n| permalink\t| 文章的 永久链接 格式\t|:year/:month/:day/:title/|\n| permalink_defaults|\t永久链接中各部分的默认值\t|     |\n\n>网站存放在子目录\n如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n\n#### 目录\n| 参数|\t描述|\t默认值|\n|------|------|-------|\n| source_dir|\t资源文件夹，这个文件夹用来存放内容。|\tsource|\n| public_dir\t| 公共文件夹，这个文件夹用于存放生成的站点文件。|\tpublic|\n| tag_dir\t| 标签文件夹|\ttags|\n| archive_dir|\t归档文件夹|\tarchives|\n| category_dir|\t分类文件夹\t| categories|\n| code_dir\t| Include code 文件夹|\tdownloads/code|\n| i18n_dir|\t国际化（i18n）文件夹\t|:lang|\n| skip_render\t| 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。\t|     |\n\n>提示\n如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。\n\n#### 文章\n| 参数|\t描述\t|默认值|\n|-----|--------|-----------|\n| new_post_name\t| 新文章的文件名称\t| :title.md|\n| _layout\t| 预设布局|\tpost|\n| auto_spacing\t| 在中文和英文之间加入空格\t| false|\n| titlecase\t| 把标题转换为 title case|\tfalse|\n| external_link\t| 在新标签中打开链接|\ttrue|\n| filename_case|\t把文件名称转换为 (1) 小写或 (2) 大写\t|0|\n| render_drafts\t| 显示草稿|\tfalse|\n| post_asset_folder\t| 启动 Asset 文件夹|\tfalse|\n| relative_link\t| 把链接改为与根目录的相对位址|\tfalse|\n| future\t| 显示未来的文章|\ttrue|\n| highlight\t| 代码块的设置|\t|\n\n>相对地址\n默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\n\n#### 分类 & 标签\n| 参数|\t描述|\t默认值|\n|-------|---------|------------|\n| default_category|\t默认分类|\tuncategorized|\n| category_map|\t分类别名\t|             |\n| tag_map|\t标签别名\t|            |\n\n#### 日期 / 时间格式         \nHexo 使用 Moment.js 来解析和显示时间。\n\n| 参数\t|描述\t|默认值|\n|---------|----------|-----------|\n| date_format\t| 日期格式|\tYYYY-MM-DD|\n| time_format\t| 时间格式|\tH:mm:ss|\n\n#### 分页\n| 参数\t|描述\t|默认值|\n|-------|---------|---------|\n| per_page|\t每页显示的文章量 (0 = 关闭分页功能)\t| 10|\n| pagination_dir|\t分页目录\t| page|\n\n#### 扩展\n|参数\t|描述|\n|----------|----------|\n|theme\t|当前主题名称。值为false时禁用主题|\n|deploy|\t部署部分的设置        |\n\n\n### 我的坑\n\n我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……\n然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。\n最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午","source":"_posts/start.md","raw":"---\ntitle: hexo初步使用\ndate: 2017-04-17 14:40:10\ncomments: false\ntags: \n- 其他\ncategories: \n- 其他\nkeywords: hexo, github\n---\n## Hexo\nHexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）\n\n### hexo的安装\nhexo只依赖于\n\n- Node.js\n- Git\n\n上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装\n\n```\nnpm install -g hexo-cli\n```\n### hexo的基本命令\n\n- hexo init [folder]   #新建一个网站\n- hexo n [layout] <title>    #新建一篇文章\n- hexo g   #生成静态文件\n- hexo d   #部署网站。\n- hexo publish [layout] <filename>   #发表草稿\n- hexo s   #启动服务器\n- hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)\n\n### hexo的配置\n\n配置内容来自官网\n\n#### 网站\n|参数|描述|\n|---|----|\n| title |\t网站标题|\n| subtitle |\t网站副标题|\n| description |\t网站描述|\n| author |\t您的名字|\n| language |\t网站使用的语言|\n| timezone\t|网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。|\n\n其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。\n\n#### 网址\n| 参数|\t描述|\t默认值|\n|---------|---------|--------|\n| url |\t网址\t|        |\n| root\t| 网站根目录\t|          |\n| permalink\t| 文章的 永久链接 格式\t|:year/:month/:day/:title/|\n| permalink_defaults|\t永久链接中各部分的默认值\t|     |\n\n>网站存放在子目录\n如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n\n#### 目录\n| 参数|\t描述|\t默认值|\n|------|------|-------|\n| source_dir|\t资源文件夹，这个文件夹用来存放内容。|\tsource|\n| public_dir\t| 公共文件夹，这个文件夹用于存放生成的站点文件。|\tpublic|\n| tag_dir\t| 标签文件夹|\ttags|\n| archive_dir|\t归档文件夹|\tarchives|\n| category_dir|\t分类文件夹\t| categories|\n| code_dir\t| Include code 文件夹|\tdownloads/code|\n| i18n_dir|\t国际化（i18n）文件夹\t|:lang|\n| skip_render\t| 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。\t|     |\n\n>提示\n如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。\n\n#### 文章\n| 参数|\t描述\t|默认值|\n|-----|--------|-----------|\n| new_post_name\t| 新文章的文件名称\t| :title.md|\n| _layout\t| 预设布局|\tpost|\n| auto_spacing\t| 在中文和英文之间加入空格\t| false|\n| titlecase\t| 把标题转换为 title case|\tfalse|\n| external_link\t| 在新标签中打开链接|\ttrue|\n| filename_case|\t把文件名称转换为 (1) 小写或 (2) 大写\t|0|\n| render_drafts\t| 显示草稿|\tfalse|\n| post_asset_folder\t| 启动 Asset 文件夹|\tfalse|\n| relative_link\t| 把链接改为与根目录的相对位址|\tfalse|\n| future\t| 显示未来的文章|\ttrue|\n| highlight\t| 代码块的设置|\t|\n\n>相对地址\n默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\n\n#### 分类 & 标签\n| 参数|\t描述|\t默认值|\n|-------|---------|------------|\n| default_category|\t默认分类|\tuncategorized|\n| category_map|\t分类别名\t|             |\n| tag_map|\t标签别名\t|            |\n\n#### 日期 / 时间格式         \nHexo 使用 Moment.js 来解析和显示时间。\n\n| 参数\t|描述\t|默认值|\n|---------|----------|-----------|\n| date_format\t| 日期格式|\tYYYY-MM-DD|\n| time_format\t| 时间格式|\tH:mm:ss|\n\n#### 分页\n| 参数\t|描述\t|默认值|\n|-------|---------|---------|\n| per_page|\t每页显示的文章量 (0 = 关闭分页功能)\t| 10|\n| pagination_dir|\t分页目录\t| page|\n\n#### 扩展\n|参数\t|描述|\n|----------|----------|\n|theme\t|当前主题名称。值为false时禁用主题|\n|deploy|\t部署部分的设置        |\n\n\n### 我的坑\n\n我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……\n然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。\n最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午","slug":"start","published":1,"updated":"2020-01-09T06:55:59.236Z","layout":"post","photos":[],"link":"","_id":"ck6lvszmv0001n0zta3g578go","content":"<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）</p>\n<h3 id=\"hexo的安装\"><a href=\"#hexo的安装\" class=\"headerlink\" title=\"hexo的安装\"></a>hexo的安装</h3><p>hexo只依赖于</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<p>上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"hexo的基本命令\"><a href=\"#hexo的基本命令\" class=\"headerlink\" title=\"hexo的基本命令\"></a>hexo的基本命令</h3><ul>\n<li>hexo init [folder]   #新建一个网站</li>\n<li>hexo n [layout] <title>    #新建一篇文章</title></li>\n<li>hexo g   #生成静态文件</li>\n<li>hexo d   #部署网站。</li>\n<li>hexo publish [layout] <filename>   #发表草稿</filename></li>\n<li>hexo s   #启动服务器</li>\n<li>hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>\n</ul>\n<h3 id=\"hexo的配置\"><a href=\"#hexo的配置\" class=\"headerlink\" title=\"hexo的配置\"></a>hexo的配置</h3><p>配置内容来自官网</p>\n<h4 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td>\n</tr>\n</tbody>\n</table>\n<p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p>\n<h4 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>网址</td>\n<td></td>\n</tr>\n<tr>\n<td>root</td>\n<td>网站根目录</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>文章的 永久链接 格式</td>\n<td>:year/:month/:day/:title/</td>\n</tr>\n<tr>\n<td>permalink_defaults</td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>网站存放在子目录<br>如果您的网站存放在子目录中，例如 <a href=\"http://yoursite.com/blog，则请将您的\">http://yoursite.com/blog，则请将您的</a> url 设为 <a href=\"http://yoursite.com/blog\">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source_dir</td>\n<td>资源文件夹，这个文件夹用来存放内容。</td>\n<td>source</td>\n</tr>\n<tr>\n<td>public_dir</td>\n<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>\n<td>public</td>\n</tr>\n<tr>\n<td>tag_dir</td>\n<td>标签文件夹</td>\n<td>tags</td>\n</tr>\n<tr>\n<td>archive_dir</td>\n<td>归档文件夹</td>\n<td>archives</td>\n</tr>\n<tr>\n<td>category_dir</td>\n<td>分类文件夹</td>\n<td>categories</td>\n</tr>\n<tr>\n<td>code_dir</td>\n<td>Include code 文件夹</td>\n<td>downloads/code</td>\n</tr>\n<tr>\n<td>i18n_dir</td>\n<td>国际化（i18n）文件夹</td>\n<td>:lang</td>\n</tr>\n<tr>\n<td>skip_render</td>\n<td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示<br>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p>\n</blockquote>\n<h4 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>new_post_name</td>\n<td>新文章的文件名称</td>\n<td>:title.md</td>\n</tr>\n<tr>\n<td>_layout</td>\n<td>预设布局</td>\n<td>post</td>\n</tr>\n<tr>\n<td>auto_spacing</td>\n<td>在中文和英文之间加入空格</td>\n<td>false</td>\n</tr>\n<tr>\n<td>titlecase</td>\n<td>把标题转换为 title case</td>\n<td>false</td>\n</tr>\n<tr>\n<td>external_link</td>\n<td>在新标签中打开链接</td>\n<td>true</td>\n</tr>\n<tr>\n<td>filename_case</td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n<td>0</td>\n</tr>\n<tr>\n<td>render_drafts</td>\n<td>显示草稿</td>\n<td>false</td>\n</tr>\n<tr>\n<td>post_asset_folder</td>\n<td>启动 Asset 文件夹</td>\n<td>false</td>\n</tr>\n<tr>\n<td>relative_link</td>\n<td>把链接改为与根目录的相对位址</td>\n<td>false</td>\n</tr>\n<tr>\n<td>future</td>\n<td>显示未来的文章</td>\n<td>true</td>\n</tr>\n<tr>\n<td>highlight</td>\n<td>代码块的设置</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>相对地址<br>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：<a href=\"http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\" target=\"_blank\" rel=\"external\">http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</a></p>\n</blockquote>\n<h4 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default_category</td>\n<td>默认分类</td>\n<td>uncategorized</td>\n</tr>\n<tr>\n<td>category_map</td>\n<td>分类别名</td>\n<td></td>\n</tr>\n<tr>\n<td>tag_map</td>\n<td>标签别名</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h4><p>Hexo 使用 Moment.js 来解析和显示时间。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>date_format</td>\n<td>日期格式</td>\n<td>YYYY-MM-DD</td>\n</tr>\n<tr>\n<td>time_format</td>\n<td>时间格式</td>\n<td>H:mm:ss</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>per_page</td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n<td>10</td>\n</tr>\n<tr>\n<td>pagination_dir</td>\n<td>分页目录</td>\n<td>page</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>theme</td>\n<td>当前主题名称。值为false时禁用主题</td>\n</tr>\n<tr>\n<td>deploy</td>\n<td>部署部分的设置</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"我的坑\"><a href=\"#我的坑\" class=\"headerlink\" title=\"我的坑\"></a>我的坑</h3><p>我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……<br>然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。<br>最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）</p>\n<h3 id=\"hexo的安装\"><a href=\"#hexo的安装\" class=\"headerlink\" title=\"hexo的安装\"></a>hexo的安装</h3><p>hexo只依赖于</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<p>上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"hexo的基本命令\"><a href=\"#hexo的基本命令\" class=\"headerlink\" title=\"hexo的基本命令\"></a>hexo的基本命令</h3><ul>\n<li>hexo init [folder]   #新建一个网站</li>\n<li>hexo n [layout] <title>    #新建一篇文章</li>\n<li>hexo g   #生成静态文件</li>\n<li>hexo d   #部署网站。</li>\n<li>hexo publish [layout] <filename>   #发表草稿</li>\n<li>hexo s   #启动服务器</li>\n<li>hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>\n</ul>\n<h3 id=\"hexo的配置\"><a href=\"#hexo的配置\" class=\"headerlink\" title=\"hexo的配置\"></a>hexo的配置</h3><p>配置内容来自官网</p>\n<h4 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td>\n</tr>\n</tbody>\n</table>\n<p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p>\n<h4 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>网址</td>\n<td></td>\n</tr>\n<tr>\n<td>root</td>\n<td>网站根目录</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>文章的 永久链接 格式</td>\n<td>:year/:month/:day/:title/</td>\n</tr>\n<tr>\n<td>permalink_defaults</td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>网站存放在子目录<br>如果您的网站存放在子目录中，例如 <a href=\"http://yoursite.com/blog，则请将您的\">http://yoursite.com/blog，则请将您的</a> url 设为 <a href=\"http://yoursite.com/blog\">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source_dir</td>\n<td>资源文件夹，这个文件夹用来存放内容。</td>\n<td>source</td>\n</tr>\n<tr>\n<td>public_dir</td>\n<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>\n<td>public</td>\n</tr>\n<tr>\n<td>tag_dir</td>\n<td>标签文件夹</td>\n<td>tags</td>\n</tr>\n<tr>\n<td>archive_dir</td>\n<td>归档文件夹</td>\n<td>archives</td>\n</tr>\n<tr>\n<td>category_dir</td>\n<td>分类文件夹</td>\n<td>categories</td>\n</tr>\n<tr>\n<td>code_dir</td>\n<td>Include code 文件夹</td>\n<td>downloads/code</td>\n</tr>\n<tr>\n<td>i18n_dir</td>\n<td>国际化（i18n）文件夹</td>\n<td>:lang</td>\n</tr>\n<tr>\n<td>skip_render</td>\n<td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示<br>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p>\n</blockquote>\n<h4 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>new_post_name</td>\n<td>新文章的文件名称</td>\n<td>:title.md</td>\n</tr>\n<tr>\n<td>_layout</td>\n<td>预设布局</td>\n<td>post</td>\n</tr>\n<tr>\n<td>auto_spacing</td>\n<td>在中文和英文之间加入空格</td>\n<td>false</td>\n</tr>\n<tr>\n<td>titlecase</td>\n<td>把标题转换为 title case</td>\n<td>false</td>\n</tr>\n<tr>\n<td>external_link</td>\n<td>在新标签中打开链接</td>\n<td>true</td>\n</tr>\n<tr>\n<td>filename_case</td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n<td>0</td>\n</tr>\n<tr>\n<td>render_drafts</td>\n<td>显示草稿</td>\n<td>false</td>\n</tr>\n<tr>\n<td>post_asset_folder</td>\n<td>启动 Asset 文件夹</td>\n<td>false</td>\n</tr>\n<tr>\n<td>relative_link</td>\n<td>把链接改为与根目录的相对位址</td>\n<td>false</td>\n</tr>\n<tr>\n<td>future</td>\n<td>显示未来的文章</td>\n<td>true</td>\n</tr>\n<tr>\n<td>highlight</td>\n<td>代码块的设置</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>相对地址<br>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：<a href=\"http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\">http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</a></p>\n</blockquote>\n<h4 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default_category</td>\n<td>默认分类</td>\n<td>uncategorized</td>\n</tr>\n<tr>\n<td>category_map</td>\n<td>分类别名</td>\n<td></td>\n</tr>\n<tr>\n<td>tag_map</td>\n<td>标签别名</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h4><p>Hexo 使用 Moment.js 来解析和显示时间。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>date_format</td>\n<td>日期格式</td>\n<td>YYYY-MM-DD</td>\n</tr>\n<tr>\n<td>time_format</td>\n<td>时间格式</td>\n<td>H:mm:ss</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>per_page</td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n<td>10</td>\n</tr>\n<tr>\n<td>pagination_dir</td>\n<td>分页目录</td>\n<td>page</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>theme</td>\n<td>当前主题名称。值为false时禁用主题</td>\n</tr>\n<tr>\n<td>deploy</td>\n<td>部署部分的设置</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"我的坑\"><a href=\"#我的坑\" class=\"headerlink\" title=\"我的坑\"></a>我的坑</h3><p>我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……<br>然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。<br>最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午</p>\n"},{"title":"组合模式","date":"2017-07-29T10:25:22.000Z","keywords":"设计模式 组合模式","_content":"## 组合模式\n\n### 介绍\n\n组合模式将对象组合成树形结构表示“部分-整体”的层次结构，组合模式使用户对单个对象和组合对象的使用具有一致性。（结构型）\n就像文件系统一样，文件由目录和文件组成，每个目录都可以装载目录，目录的内容既可以是文件，也可以是目录。计算机的文件系统就是以递归结构来组织的，这种情景就适用于组合模式。\n\n### 使用场景和涉及的角色\n\n#### 适用性\n\n1. 你想表示对象的部分-整体层次结构\n2. 你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。\n\n#### 涉及角色\n\n1. Component 是组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。\n2. Leaf 在组合中表示叶子结点对象，叶子结点没有子结点。\n3. Composite 定义有枝节点行为，用来存储子部件，在Component接口中实现与子部件有关操作，如增加(add)和删除(remove)等。\n\n\n#### DEMO\n\n```\npackage factory.pattern.composite.test;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic abstract class Component {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Component(){}\n\n    public Component(String name) {\n        this.name = name;\n    }\n\n    protected abstract void add(Component company);\n\n    protected abstract void remove(Component company);\n\n    protected abstract void display(int depth);\n\n\n}\n```\n\n枝节点行为，具体目录类\n```\npackage factory.pattern.composite.test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic class CatalogComponent extends Component {\n\n    List<Component> list;\n\n    public List<Component> getList() {\n        return list;\n    }\n\n    public void setList(List<Component> list) {\n        this.list = list;\n    }\n\n    public CatalogComponent() {\n        list = new ArrayList<>();\n    }\n\n    public CatalogComponent(String name) {\n        super(name);\n        list = new ArrayList<>();\n    }\n\n    @Override\n    protected void add(Component company) {\n        list.add(company);\n    }\n\n    @Override\n    protected void remove(Component company) {\n        list.remove(company);\n    }\n\n    @Override\n    protected void display(int depth) {\n        StringBuffer sb = new StringBuffer();\n        for(int i=0;i<depth;i++){\n            sb.append(\"-\");\n        }\n        System.out.println(new String(sb) + this.getName());\n        for(Component c : list){\n            c.display(depth + 2);\n        }\n    }\n}\n```\n\n叶子结点对象,文件\n```\npackage factory.pattern.composite.test;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic class Leaf extends Component {\n    public Leaf() {\n        super();\n    }\n\n    public Leaf(String name) {\n        super(name);\n    }\n\n    @Override\n    protected void add(Component company) {\n\n    }\n\n    @Override\n    protected void remove(Component company) {\n\n    }\n\n    @Override\n    protected void display(int depth) {\n        StringBuffer sb = new StringBuffer();\n        for(int i=0;i<depth;i++){\n            sb.append(\"-\");\n        }\n        System.out.println(new String(sb) + this.getName());\n    }\n}\n```\n测试类\n```\npackage factory.pattern.composite.test;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Component c = new CatalogComponent();\n        Component c1 = new CatalogComponent(\"一级目录1\");\n        Component c2 = new CatalogComponent(\"二级目录1\");\n        c2.add(new Leaf(\"文件1\"));\n        c1.add(c2);\n        c.add(c1);\n        c.add(new CatalogComponent(\"一级目录2\"));\n        c.display(0);\n    }\n}\n```\n\n\n","source":"_posts/Design_pattern/11_composite.md","raw":"---\ntitle: 组合模式\ndate: 2017-07-29 18:25:22\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 组合模式\n---\n## 组合模式\n\n### 介绍\n\n组合模式将对象组合成树形结构表示“部分-整体”的层次结构，组合模式使用户对单个对象和组合对象的使用具有一致性。（结构型）\n就像文件系统一样，文件由目录和文件组成，每个目录都可以装载目录，目录的内容既可以是文件，也可以是目录。计算机的文件系统就是以递归结构来组织的，这种情景就适用于组合模式。\n\n### 使用场景和涉及的角色\n\n#### 适用性\n\n1. 你想表示对象的部分-整体层次结构\n2. 你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。\n\n#### 涉及角色\n\n1. Component 是组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。\n2. Leaf 在组合中表示叶子结点对象，叶子结点没有子结点。\n3. Composite 定义有枝节点行为，用来存储子部件，在Component接口中实现与子部件有关操作，如增加(add)和删除(remove)等。\n\n\n#### DEMO\n\n```\npackage factory.pattern.composite.test;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic abstract class Component {\n    private String name;\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Component(){}\n\n    public Component(String name) {\n        this.name = name;\n    }\n\n    protected abstract void add(Component company);\n\n    protected abstract void remove(Component company);\n\n    protected abstract void display(int depth);\n\n\n}\n```\n\n枝节点行为，具体目录类\n```\npackage factory.pattern.composite.test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic class CatalogComponent extends Component {\n\n    List<Component> list;\n\n    public List<Component> getList() {\n        return list;\n    }\n\n    public void setList(List<Component> list) {\n        this.list = list;\n    }\n\n    public CatalogComponent() {\n        list = new ArrayList<>();\n    }\n\n    public CatalogComponent(String name) {\n        super(name);\n        list = new ArrayList<>();\n    }\n\n    @Override\n    protected void add(Component company) {\n        list.add(company);\n    }\n\n    @Override\n    protected void remove(Component company) {\n        list.remove(company);\n    }\n\n    @Override\n    protected void display(int depth) {\n        StringBuffer sb = new StringBuffer();\n        for(int i=0;i<depth;i++){\n            sb.append(\"-\");\n        }\n        System.out.println(new String(sb) + this.getName());\n        for(Component c : list){\n            c.display(depth + 2);\n        }\n    }\n}\n```\n\n叶子结点对象,文件\n```\npackage factory.pattern.composite.test;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic class Leaf extends Component {\n    public Leaf() {\n        super();\n    }\n\n    public Leaf(String name) {\n        super(name);\n    }\n\n    @Override\n    protected void add(Component company) {\n\n    }\n\n    @Override\n    protected void remove(Component company) {\n\n    }\n\n    @Override\n    protected void display(int depth) {\n        StringBuffer sb = new StringBuffer();\n        for(int i=0;i<depth;i++){\n            sb.append(\"-\");\n        }\n        System.out.println(new String(sb) + this.getName());\n    }\n}\n```\n测试类\n```\npackage factory.pattern.composite.test;\n\n/**\n * Created by FK on 2017/7/30.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Component c = new CatalogComponent();\n        Component c1 = new CatalogComponent(\"一级目录1\");\n        Component c2 = new CatalogComponent(\"二级目录1\");\n        c2.add(new Leaf(\"文件1\"));\n        c1.add(c2);\n        c.add(c1);\n        c.add(new CatalogComponent(\"一级目录2\"));\n        c.display(0);\n    }\n}\n```\n\n\n","slug":"Design_pattern/11_composite","published":1,"updated":"2020-01-02T05:49:23.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrh0008n0zt8xxuhfd6","content":"<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>组合模式将对象组合成树形结构表示“部分-整体”的层次结构，组合模式使用户对单个对象和组合对象的使用具有一致性。（结构型）<br>就像文件系统一样，文件由目录和文件组成，每个目录都可以装载目录，目录的内容既可以是文件，也可以是目录。计算机的文件系统就是以递归结构来组织的，这种情景就适用于组合模式。</p>\n<h3 id=\"使用场景和涉及的角色\"><a href=\"#使用场景和涉及的角色\" class=\"headerlink\" title=\"使用场景和涉及的角色\"></a>使用场景和涉及的角色</h3><h4 id=\"适用性\"><a href=\"#适用性\" class=\"headerlink\" title=\"适用性\"></a>适用性</h4><ol>\n<li>你想表示对象的部分-整体层次结构</li>\n<li>你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li>\n</ol>\n<h4 id=\"涉及角色\"><a href=\"#涉及角色\" class=\"headerlink\" title=\"涉及角色\"></a>涉及角色</h4><ol>\n<li>Component 是组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。</li>\n<li>Leaf 在组合中表示叶子结点对象，叶子结点没有子结点。</li>\n<li>Composite 定义有枝节点行为，用来存储子部件，在Component接口中实现与子部件有关操作，如增加(add)和删除(remove)等。</li>\n</ol>\n<h4 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class Component &#123;</div><div class=\"line\">    private String name;</div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setName(String name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Component()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public Component(String name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected abstract void add(Component company);</div><div class=\"line\"></div><div class=\"line\">    protected abstract void remove(Component company);</div><div class=\"line\"></div><div class=\"line\">    protected abstract void display(int depth);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枝节点行为，具体目录类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public class CatalogComponent extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">    List&lt;Component&gt; list;</div><div class=\"line\"></div><div class=\"line\">    public List&lt;Component&gt; getList() &#123;</div><div class=\"line\">        return list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setList(List&lt;Component&gt; list) &#123;</div><div class=\"line\">        this.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public CatalogComponent() &#123;</div><div class=\"line\">        list = new ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public CatalogComponent(String name) &#123;</div><div class=\"line\">        super(name);</div><div class=\"line\">        list = new ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void add(Component company) &#123;</div><div class=\"line\">        list.add(company);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void remove(Component company) &#123;</div><div class=\"line\">        list.remove(company);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void display(int depth) &#123;</div><div class=\"line\">        StringBuffer sb = new StringBuffer();</div><div class=\"line\">        for(int i=0;i&lt;depth;i++)&#123;</div><div class=\"line\">            sb.append(&quot;-&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(new String(sb) + this.getName());</div><div class=\"line\">        for(Component c : list)&#123;</div><div class=\"line\">            c.display(depth + 2);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>叶子结点对象,文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public class Leaf extends Component &#123;</div><div class=\"line\">    public Leaf() &#123;</div><div class=\"line\">        super();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Leaf(String name) &#123;</div><div class=\"line\">        super(name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void add(Component company) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void remove(Component company) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void display(int depth) &#123;</div><div class=\"line\">        StringBuffer sb = new StringBuffer();</div><div class=\"line\">        for(int i=0;i&lt;depth;i++)&#123;</div><div class=\"line\">            sb.append(&quot;-&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(new String(sb) + this.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Component c = new CatalogComponent();</div><div class=\"line\">        Component c1 = new CatalogComponent(&quot;一级目录1&quot;);</div><div class=\"line\">        Component c2 = new CatalogComponent(&quot;二级目录1&quot;);</div><div class=\"line\">        c2.add(new Leaf(&quot;文件1&quot;));</div><div class=\"line\">        c1.add(c2);</div><div class=\"line\">        c.add(c1);</div><div class=\"line\">        c.add(new CatalogComponent(&quot;一级目录2&quot;));</div><div class=\"line\">        c.display(0);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>组合模式将对象组合成树形结构表示“部分-整体”的层次结构，组合模式使用户对单个对象和组合对象的使用具有一致性。（结构型）<br>就像文件系统一样，文件由目录和文件组成，每个目录都可以装载目录，目录的内容既可以是文件，也可以是目录。计算机的文件系统就是以递归结构来组织的，这种情景就适用于组合模式。</p>\n<h3 id=\"使用场景和涉及的角色\"><a href=\"#使用场景和涉及的角色\" class=\"headerlink\" title=\"使用场景和涉及的角色\"></a>使用场景和涉及的角色</h3><h4 id=\"适用性\"><a href=\"#适用性\" class=\"headerlink\" title=\"适用性\"></a>适用性</h4><ol>\n<li>你想表示对象的部分-整体层次结构</li>\n<li>你希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li>\n</ol>\n<h4 id=\"涉及角色\"><a href=\"#涉及角色\" class=\"headerlink\" title=\"涉及角色\"></a>涉及角色</h4><ol>\n<li>Component 是组合中的对象声明接口，在适当的情况下，实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。</li>\n<li>Leaf 在组合中表示叶子结点对象，叶子结点没有子结点。</li>\n<li>Composite 定义有枝节点行为，用来存储子部件，在Component接口中实现与子部件有关操作，如增加(add)和删除(remove)等。</li>\n</ol>\n<h4 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class Component &#123;</div><div class=\"line\">    private String name;</div><div class=\"line\"></div><div class=\"line\">    public String getName() &#123;</div><div class=\"line\">        return name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setName(String name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Component()&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    public Component(String name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected abstract void add(Component company);</div><div class=\"line\"></div><div class=\"line\">    protected abstract void remove(Component company);</div><div class=\"line\"></div><div class=\"line\">    protected abstract void display(int depth);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枝节点行为，具体目录类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public class CatalogComponent extends Component &#123;</div><div class=\"line\"></div><div class=\"line\">    List&lt;Component&gt; list;</div><div class=\"line\"></div><div class=\"line\">    public List&lt;Component&gt; getList() &#123;</div><div class=\"line\">        return list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setList(List&lt;Component&gt; list) &#123;</div><div class=\"line\">        this.list = list;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public CatalogComponent() &#123;</div><div class=\"line\">        list = new ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public CatalogComponent(String name) &#123;</div><div class=\"line\">        super(name);</div><div class=\"line\">        list = new ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void add(Component company) &#123;</div><div class=\"line\">        list.add(company);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void remove(Component company) &#123;</div><div class=\"line\">        list.remove(company);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void display(int depth) &#123;</div><div class=\"line\">        StringBuffer sb = new StringBuffer();</div><div class=\"line\">        for(int i=0;i&lt;depth;i++)&#123;</div><div class=\"line\">            sb.append(&quot;-&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(new String(sb) + this.getName());</div><div class=\"line\">        for(Component c : list)&#123;</div><div class=\"line\">            c.display(depth + 2);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>叶子结点对象,文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public class Leaf extends Component &#123;</div><div class=\"line\">    public Leaf() &#123;</div><div class=\"line\">        super();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Leaf(String name) &#123;</div><div class=\"line\">        super(name);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void add(Component company) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void remove(Component company) &#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void display(int depth) &#123;</div><div class=\"line\">        StringBuffer sb = new StringBuffer();</div><div class=\"line\">        for(int i=0;i&lt;depth;i++)&#123;</div><div class=\"line\">            sb.append(&quot;-&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        System.out.println(new String(sb) + this.getName());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.composite.test;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/30.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Component c = new CatalogComponent();</div><div class=\"line\">        Component c1 = new CatalogComponent(&quot;一级目录1&quot;);</div><div class=\"line\">        Component c2 = new CatalogComponent(&quot;二级目录1&quot;);</div><div class=\"line\">        c2.add(new Leaf(&quot;文件1&quot;));</div><div class=\"line\">        c1.add(c2);</div><div class=\"line\">        c.add(c1);</div><div class=\"line\">        c.add(new CatalogComponent(&quot;一级目录2&quot;));</div><div class=\"line\">        c.display(0);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"装饰器模式","date":"2017-08-01T03:38:21.000Z","keywords":"设计模式 装饰器模式","_content":"\n## 装饰器模式\n\n### 介绍\n\n装饰器模式允许向一个现有的对象添加新功能，同时又不改变其结构。（结构型模式）\n这种形式在没有原类文件和使用继承的情况下动态的扩展了一个对象的功能。类的继承是在编译是时候增加的功能，而装饰器模式在运行时增加的功能\n\n### 装饰器模式构成\n\n![装饰器模式UML](../../../uploads/decorator/1.jpg)\n\nComponent : 组件对象接口，可以给这些对象动态添加职责\n\nConcreteComponent ： 具体的组件对象，实现了组件接口。这个对象通常是被装饰器修饰的原始对象，可以给这个对象添加职责。\n\nDecorate : 所有装饰器的父类，需要定义一个与组件接口一直的接口（实现装饰器的复用），并持有component对象，这个对象就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。\n\nConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。\n \n### DEMO\n \nComponent\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic interface Shape {\n    void draw();\n}\n```\nConcreteComponent\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Shape : Circle\");\n    }\n}\n\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Shape : Rectangle\");\n    }\n}\n\n```\n\nDecorate\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic abstract class ShapeDecorator implements Shape {\n    protected Shape decoratorShape;\n\n    public ShapeDecorator(Shape decoratorShape) {\n        this.decoratorShape = decoratorShape;\n    }\n\n    public void draw(){\n        decoratorShape.draw();\n    }\n\n}\n```\n\nConcreteDecorator\n\n```\npackage factory.pattern.Decorator;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class RedShapeDecorator extends ShapeDecorator {\n    public RedShapeDecorator(Shape decoratorShape) {\n        super(decoratorShape);\n    }\n\n    @Override\n    public void draw() {\n        decoratorShape.draw();\n        setRedBorder(decoratorShape);\n    }\n\n    public void setRedBorder(Shape redBorder) {\n        System.out.println(\"Border Color : Red\");\n        List<String> list = new ArrayList<>();\n    }\n}\n```\n\nTEST\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class DecoratorPatternDemo {\n    public static void main(String[] args) {\n        Shape shape = new Circle();\n        Shape redCircle = new RedShapeDecorator(new Circle());\n        Shape redRectangle = new RedShapeDecorator(new Rectangle());\n        System.out.println(\"Circle with normal border\");\n        shape.draw();\n        System.out.println(\"\\nCircle of red border\");\n        redCircle.draw();\n\n        System.out.println(\"\\nRectangle of red border\");\n        redRectangle.draw();\n    }\n}\n```","source":"_posts/Design_pattern/12_decorator.md","raw":"---\ntitle: 装饰器模式\ndate: 2017-08-01 11:38:21\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 装饰器模式\n---\n\n## 装饰器模式\n\n### 介绍\n\n装饰器模式允许向一个现有的对象添加新功能，同时又不改变其结构。（结构型模式）\n这种形式在没有原类文件和使用继承的情况下动态的扩展了一个对象的功能。类的继承是在编译是时候增加的功能，而装饰器模式在运行时增加的功能\n\n### 装饰器模式构成\n\n![装饰器模式UML](../../../uploads/decorator/1.jpg)\n\nComponent : 组件对象接口，可以给这些对象动态添加职责\n\nConcreteComponent ： 具体的组件对象，实现了组件接口。这个对象通常是被装饰器修饰的原始对象，可以给这个对象添加职责。\n\nDecorate : 所有装饰器的父类，需要定义一个与组件接口一直的接口（实现装饰器的复用），并持有component对象，这个对象就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。\n\nConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。\n \n### DEMO\n \nComponent\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic interface Shape {\n    void draw();\n}\n```\nConcreteComponent\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Shape : Circle\");\n    }\n}\n\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Shape : Rectangle\");\n    }\n}\n\n```\n\nDecorate\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic abstract class ShapeDecorator implements Shape {\n    protected Shape decoratorShape;\n\n    public ShapeDecorator(Shape decoratorShape) {\n        this.decoratorShape = decoratorShape;\n    }\n\n    public void draw(){\n        decoratorShape.draw();\n    }\n\n}\n```\n\nConcreteDecorator\n\n```\npackage factory.pattern.Decorator;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class RedShapeDecorator extends ShapeDecorator {\n    public RedShapeDecorator(Shape decoratorShape) {\n        super(decoratorShape);\n    }\n\n    @Override\n    public void draw() {\n        decoratorShape.draw();\n        setRedBorder(decoratorShape);\n    }\n\n    public void setRedBorder(Shape redBorder) {\n        System.out.println(\"Border Color : Red\");\n        List<String> list = new ArrayList<>();\n    }\n}\n```\n\nTEST\n\n```\npackage factory.pattern.Decorator;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class DecoratorPatternDemo {\n    public static void main(String[] args) {\n        Shape shape = new Circle();\n        Shape redCircle = new RedShapeDecorator(new Circle());\n        Shape redRectangle = new RedShapeDecorator(new Rectangle());\n        System.out.println(\"Circle with normal border\");\n        shape.draw();\n        System.out.println(\"\\nCircle of red border\");\n        redCircle.draw();\n\n        System.out.println(\"\\nRectangle of red border\");\n        redRectangle.draw();\n    }\n}\n```","slug":"Design_pattern/12_decorator","published":1,"updated":"2020-02-13T14:24:29.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszri0009n0zt742vxfnd","content":"<h2 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>装饰器模式允许向一个现有的对象添加新功能，同时又不改变其结构。（结构型模式）<br>这种形式在没有原类文件和使用继承的情况下动态的扩展了一个对象的功能。类的继承是在编译是时候增加的功能，而装饰器模式在运行时增加的功能</p>\n<h3 id=\"装饰器模式构成\"><a href=\"#装饰器模式构成\" class=\"headerlink\" title=\"装饰器模式构成\"></a>装饰器模式构成</h3><p><img src=\"../../../uploads/decorator/1.jpg\" alt=\"装饰器模式UML\"></p>\n<p>Component : 组件对象接口，可以给这些对象动态添加职责</p>\n<p>ConcreteComponent ： 具体的组件对象，实现了组件接口。这个对象通常是被装饰器修饰的原始对象，可以给这个对象添加职责。</p>\n<p>Decorate : 所有装饰器的父类，需要定义一个与组件接口一直的接口（实现装饰器的复用），并持有component对象，这个对象就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。</p>\n<p>ConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>Component</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcreteComponent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Shape : Circle&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Shape : Rectangle&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Decorate</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class ShapeDecorator implements Shape &#123;</div><div class=\"line\">    protected Shape decoratorShape;</div><div class=\"line\"></div><div class=\"line\">    public ShapeDecorator(Shape decoratorShape) &#123;</div><div class=\"line\">        this.decoratorShape = decoratorShape;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void draw()&#123;</div><div class=\"line\">        decoratorShape.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcreteDecorator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class RedShapeDecorator extends ShapeDecorator &#123;</div><div class=\"line\">    public RedShapeDecorator(Shape decoratorShape) &#123;</div><div class=\"line\">        super(decoratorShape);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        decoratorShape.draw();</div><div class=\"line\">        setRedBorder(decoratorShape);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setRedBorder(Shape redBorder) &#123;</div><div class=\"line\">        System.out.println(&quot;Border Color : Red&quot;);</div><div class=\"line\">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TEST</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class DecoratorPatternDemo &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Shape shape = new Circle();</div><div class=\"line\">        Shape redCircle = new RedShapeDecorator(new Circle());</div><div class=\"line\">        Shape redRectangle = new RedShapeDecorator(new Rectangle());</div><div class=\"line\">        System.out.println(&quot;Circle with normal border&quot;);</div><div class=\"line\">        shape.draw();</div><div class=\"line\">        System.out.println(&quot;\\nCircle of red border&quot;);</div><div class=\"line\">        redCircle.draw();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;\\nRectangle of red border&quot;);</div><div class=\"line\">        redRectangle.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>装饰器模式允许向一个现有的对象添加新功能，同时又不改变其结构。（结构型模式）<br>这种形式在没有原类文件和使用继承的情况下动态的扩展了一个对象的功能。类的继承是在编译是时候增加的功能，而装饰器模式在运行时增加的功能</p>\n<h3 id=\"装饰器模式构成\"><a href=\"#装饰器模式构成\" class=\"headerlink\" title=\"装饰器模式构成\"></a>装饰器模式构成</h3><p><img src=\"../../../uploads/decorator/1.jpg\" alt=\"装饰器模式UML\"></p>\n<p>Component : 组件对象接口，可以给这些对象动态添加职责</p>\n<p>ConcreteComponent ： 具体的组件对象，实现了组件接口。这个对象通常是被装饰器修饰的原始对象，可以给这个对象添加职责。</p>\n<p>Decorate : 所有装饰器的父类，需要定义一个与组件接口一直的接口（实现装饰器的复用），并持有component对象，这个对象就是被装饰的对象。如果不继承组件接口类，则只能为某个组件添加单一的功能，即装饰器对象不能在装饰其他的装饰器对象。</p>\n<p>ConcreteDecorator：具体的装饰器类，实现具体要向被装饰对象添加的功能。用来装饰具体的组件对象或者另外一个具体的装饰器对象。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>Component</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcreteComponent</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Shape : Circle&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Shape : Rectangle&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Decorate</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class ShapeDecorator implements Shape &#123;</div><div class=\"line\">    protected Shape decoratorShape;</div><div class=\"line\"></div><div class=\"line\">    public ShapeDecorator(Shape decoratorShape) &#123;</div><div class=\"line\">        this.decoratorShape = decoratorShape;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void draw()&#123;</div><div class=\"line\">        decoratorShape.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcreteDecorator</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class RedShapeDecorator extends ShapeDecorator &#123;</div><div class=\"line\">    public RedShapeDecorator(Shape decoratorShape) &#123;</div><div class=\"line\">        super(decoratorShape);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        decoratorShape.draw();</div><div class=\"line\">        setRedBorder(decoratorShape);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setRedBorder(Shape redBorder) &#123;</div><div class=\"line\">        System.out.println(&quot;Border Color : Red&quot;);</div><div class=\"line\">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>TEST</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Decorator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class DecoratorPatternDemo &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Shape shape = new Circle();</div><div class=\"line\">        Shape redCircle = new RedShapeDecorator(new Circle());</div><div class=\"line\">        Shape redRectangle = new RedShapeDecorator(new Rectangle());</div><div class=\"line\">        System.out.println(&quot;Circle with normal border&quot;);</div><div class=\"line\">        shape.draw();</div><div class=\"line\">        System.out.println(&quot;\\nCircle of red border&quot;);</div><div class=\"line\">        redCircle.draw();</div><div class=\"line\"></div><div class=\"line\">        System.out.println(&quot;\\nRectangle of red border&quot;);</div><div class=\"line\">        redRectangle.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"享元模式","date":"2017-08-01T13:45:44.000Z","keywords":"设计模式 享元模式","_content":"\n## 享元模式\n\n### 介绍\n\n享元模式使用共享来避免大量拥有相同内容对象的开销，避免内存的损耗。享元对象能做到共享的关键是区分**内蕴状态**和**外蕴状态**。\n内蕴状态是存储在享元对象内部的，不会随环境的改变而有所不同（内蕴状态可以共享）。\n外蕴状态是随环境的改变而改变的，不可以共享，外蕴状态不可以影响享元对象的内蕴状态，它们是相互独立的。\n\n#### 优点\n\n- 大幅度地降低内存中对象的数量\n\n#### 缺点\n\n- 使得系统更加复杂\n- 享元模式将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长\n\n### 结构(涉及角色)\n\n- Flyweight：抽象享元角色，规定具体享元角色要实现的方法。\n- ConcreteFlyweight：具体享元角色，实现抽象享元规定的接口。\n- FlyweightFactory：享元工厂角色，负责创建和管理享元角色。\n\n### DEMO\n\n抽象享元角色，抽象享元中接受一个参数state，state是外蕴状态，由外部传入的不可被共享。\n\n```\npackage factory.pattern.flyweight;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic interface FlyWeight {\n    public void operation(String state);\n}\n```\n\n具体享元角色，内部intrinsticState是内蕴状态，内蕴状态在被对象创建后就不会在改变了。\n\n```\npackage factory.pattern.flyweight;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class ConcreteFlyWeight implements FlyWeight {\n    private Character intrinsicState = null;\n\n    public ConcreteFlyWeight(Character intrinsicState) {\n        this.intrinsicState = intrinsicState;\n    }\n\n    @Override\n    public void operation(String state) {\n        System.out.println(\"Intrinsic State = \" + this.intrinsicState);\n        System.out.println(\"Extrinsic State = \" + state);\n    }\n}\n```\n\n享元工厂类（客户端不可以直接将具体享元类实例化， 必须通过一个工厂对象得到享元对象）\n\n```\npackage factory.pattern.flyweight;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class FlyWeightFactory {\n    private Map<Character, FlyWeight> files = new HashMap<>();\n    //享元工厂在系统中只有一个，可以使用单利模式来获取    \n    private static FlyWeightFactory flyWeightFactory = new FlyWeightFactory();\n    private FlyWeightFactory(){}\n    public static FlyWeightFactory getInstance(){\n        return flyWeightFactory;        \n    }\n    \n    public FlyWeight factory(Character state){\n        FlyWeight fly = files.get(state);\n        if(fly == null){\n            fly = new ConcreteFlyWeight(state);\n            files.put(state, fly);\n        }\n        return fly;\n    }\n\n}\n```\n\n测试：\n```\npackage factory.pattern.flyweight;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Test {\n    public static void main(String[] args) {\n        FlyWeightFactory factory = FlyWeightFactory.getInstance();\n\n        FlyWeight fly = factory.factory(new Character('a'));\n        fly.operation(\"first call\");\n\n        fly = factory.factory(new Character('b'));\n        fly.operation(\"Second Call\");\n\n        fly = factory.factory(new Character('a'));\n        fly.operation(\"Third Call\");\n    }\n\n}\n```\n","source":"_posts/Design_pattern/14_flyweight.md","raw":"---\ntitle: 享元模式\ndate: 2017-08-01 21:45:44\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 享元模式\n---\n\n## 享元模式\n\n### 介绍\n\n享元模式使用共享来避免大量拥有相同内容对象的开销，避免内存的损耗。享元对象能做到共享的关键是区分**内蕴状态**和**外蕴状态**。\n内蕴状态是存储在享元对象内部的，不会随环境的改变而有所不同（内蕴状态可以共享）。\n外蕴状态是随环境的改变而改变的，不可以共享，外蕴状态不可以影响享元对象的内蕴状态，它们是相互独立的。\n\n#### 优点\n\n- 大幅度地降低内存中对象的数量\n\n#### 缺点\n\n- 使得系统更加复杂\n- 享元模式将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长\n\n### 结构(涉及角色)\n\n- Flyweight：抽象享元角色，规定具体享元角色要实现的方法。\n- ConcreteFlyweight：具体享元角色，实现抽象享元规定的接口。\n- FlyweightFactory：享元工厂角色，负责创建和管理享元角色。\n\n### DEMO\n\n抽象享元角色，抽象享元中接受一个参数state，state是外蕴状态，由外部传入的不可被共享。\n\n```\npackage factory.pattern.flyweight;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic interface FlyWeight {\n    public void operation(String state);\n}\n```\n\n具体享元角色，内部intrinsticState是内蕴状态，内蕴状态在被对象创建后就不会在改变了。\n\n```\npackage factory.pattern.flyweight;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class ConcreteFlyWeight implements FlyWeight {\n    private Character intrinsicState = null;\n\n    public ConcreteFlyWeight(Character intrinsicState) {\n        this.intrinsicState = intrinsicState;\n    }\n\n    @Override\n    public void operation(String state) {\n        System.out.println(\"Intrinsic State = \" + this.intrinsicState);\n        System.out.println(\"Extrinsic State = \" + state);\n    }\n}\n```\n\n享元工厂类（客户端不可以直接将具体享元类实例化， 必须通过一个工厂对象得到享元对象）\n\n```\npackage factory.pattern.flyweight;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class FlyWeightFactory {\n    private Map<Character, FlyWeight> files = new HashMap<>();\n    //享元工厂在系统中只有一个，可以使用单利模式来获取    \n    private static FlyWeightFactory flyWeightFactory = new FlyWeightFactory();\n    private FlyWeightFactory(){}\n    public static FlyWeightFactory getInstance(){\n        return flyWeightFactory;        \n    }\n    \n    public FlyWeight factory(Character state){\n        FlyWeight fly = files.get(state);\n        if(fly == null){\n            fly = new ConcreteFlyWeight(state);\n            files.put(state, fly);\n        }\n        return fly;\n    }\n\n}\n```\n\n测试：\n```\npackage factory.pattern.flyweight;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Test {\n    public static void main(String[] args) {\n        FlyWeightFactory factory = FlyWeightFactory.getInstance();\n\n        FlyWeight fly = factory.factory(new Character('a'));\n        fly.operation(\"first call\");\n\n        fly = factory.factory(new Character('b'));\n        fly.operation(\"Second Call\");\n\n        fly = factory.factory(new Character('a'));\n        fly.operation(\"Third Call\");\n    }\n\n}\n```\n","slug":"Design_pattern/14_flyweight","published":1,"updated":"2020-01-02T05:49:23.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszri000cn0zty6p83tka","content":"<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>享元模式使用共享来避免大量拥有相同内容对象的开销，避免内存的损耗。享元对象能做到共享的关键是区分<strong>内蕴状态</strong>和<strong>外蕴状态</strong>。<br>内蕴状态是存储在享元对象内部的，不会随环境的改变而有所不同（内蕴状态可以共享）。<br>外蕴状态是随环境的改变而改变的，不可以共享，外蕴状态不可以影响享元对象的内蕴状态，它们是相互独立的。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>大幅度地降低内存中对象的数量</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>使得系统更加复杂</li>\n<li>享元模式将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长</li>\n</ul>\n<h3 id=\"结构-涉及角色\"><a href=\"#结构-涉及角色\" class=\"headerlink\" title=\"结构(涉及角色)\"></a>结构(涉及角色)</h3><ul>\n<li>Flyweight：抽象享元角色，规定具体享元角色要实现的方法。</li>\n<li>ConcreteFlyweight：具体享元角色，实现抽象享元规定的接口。</li>\n<li>FlyweightFactory：享元工厂角色，负责创建和管理享元角色。</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>抽象享元角色，抽象享元中接受一个参数state，state是外蕴状态，由外部传入的不可被共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public interface FlyWeight &#123;</div><div class=\"line\">    public void operation(String state);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体享元角色，内部intrinsticState是内蕴状态，内蕴状态在被对象创建后就不会在改变了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class ConcreteFlyWeight implements FlyWeight &#123;</div><div class=\"line\">    private Character intrinsicState = null;</div><div class=\"line\"></div><div class=\"line\">    public ConcreteFlyWeight(Character intrinsicState) &#123;</div><div class=\"line\">        this.intrinsicState = intrinsicState;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void operation(String state) &#123;</div><div class=\"line\">        System.out.println(&quot;Intrinsic State = &quot; + this.intrinsicState);</div><div class=\"line\">        System.out.println(&quot;Extrinsic State = &quot; + state);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>享元工厂类（客户端不可以直接将具体享元类实例化， 必须通过一个工厂对象得到享元对象）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class FlyWeightFactory &#123;</div><div class=\"line\">    private Map&lt;Character, FlyWeight&gt; files = new HashMap&lt;&gt;();</div><div class=\"line\">    //享元工厂在系统中只有一个，可以使用单利模式来获取    </div><div class=\"line\">    private static FlyWeightFactory flyWeightFactory = new FlyWeightFactory();</div><div class=\"line\">    private FlyWeightFactory()&#123;&#125;</div><div class=\"line\">    public static FlyWeightFactory getInstance()&#123;</div><div class=\"line\">        return flyWeightFactory;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public FlyWeight factory(Character state)&#123;</div><div class=\"line\">        FlyWeight fly = files.get(state);</div><div class=\"line\">        if(fly == null)&#123;</div><div class=\"line\">            fly = new ConcreteFlyWeight(state);</div><div class=\"line\">            files.put(state, fly);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return fly;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        FlyWeightFactory factory = FlyWeightFactory.getInstance();</div><div class=\"line\"></div><div class=\"line\">        FlyWeight fly = factory.factory(new Character(&apos;a&apos;));</div><div class=\"line\">        fly.operation(&quot;first call&quot;);</div><div class=\"line\"></div><div class=\"line\">        fly = factory.factory(new Character(&apos;b&apos;));</div><div class=\"line\">        fly.operation(&quot;Second Call&quot;);</div><div class=\"line\"></div><div class=\"line\">        fly = factory.factory(new Character(&apos;a&apos;));</div><div class=\"line\">        fly.operation(&quot;Third Call&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>享元模式使用共享来避免大量拥有相同内容对象的开销，避免内存的损耗。享元对象能做到共享的关键是区分<strong>内蕴状态</strong>和<strong>外蕴状态</strong>。<br>内蕴状态是存储在享元对象内部的，不会随环境的改变而有所不同（内蕴状态可以共享）。<br>外蕴状态是随环境的改变而改变的，不可以共享，外蕴状态不可以影响享元对象的内蕴状态，它们是相互独立的。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>大幅度地降低内存中对象的数量</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>使得系统更加复杂</li>\n<li>享元模式将享元对象的状态外部化，而读取外部状态使得运行时间稍微变长</li>\n</ul>\n<h3 id=\"结构-涉及角色\"><a href=\"#结构-涉及角色\" class=\"headerlink\" title=\"结构(涉及角色)\"></a>结构(涉及角色)</h3><ul>\n<li>Flyweight：抽象享元角色，规定具体享元角色要实现的方法。</li>\n<li>ConcreteFlyweight：具体享元角色，实现抽象享元规定的接口。</li>\n<li>FlyweightFactory：享元工厂角色，负责创建和管理享元角色。</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>抽象享元角色，抽象享元中接受一个参数state，state是外蕴状态，由外部传入的不可被共享。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public interface FlyWeight &#123;</div><div class=\"line\">    public void operation(String state);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体享元角色，内部intrinsticState是内蕴状态，内蕴状态在被对象创建后就不会在改变了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class ConcreteFlyWeight implements FlyWeight &#123;</div><div class=\"line\">    private Character intrinsicState = null;</div><div class=\"line\"></div><div class=\"line\">    public ConcreteFlyWeight(Character intrinsicState) &#123;</div><div class=\"line\">        this.intrinsicState = intrinsicState;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void operation(String state) &#123;</div><div class=\"line\">        System.out.println(&quot;Intrinsic State = &quot; + this.intrinsicState);</div><div class=\"line\">        System.out.println(&quot;Extrinsic State = &quot; + state);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>享元工厂类（客户端不可以直接将具体享元类实例化， 必须通过一个工厂对象得到享元对象）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Map;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class FlyWeightFactory &#123;</div><div class=\"line\">    private Map&lt;Character, FlyWeight&gt; files = new HashMap&lt;&gt;();</div><div class=\"line\">    //享元工厂在系统中只有一个，可以使用单利模式来获取    </div><div class=\"line\">    private static FlyWeightFactory flyWeightFactory = new FlyWeightFactory();</div><div class=\"line\">    private FlyWeightFactory()&#123;&#125;</div><div class=\"line\">    public static FlyWeightFactory getInstance()&#123;</div><div class=\"line\">        return flyWeightFactory;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    public FlyWeight factory(Character state)&#123;</div><div class=\"line\">        FlyWeight fly = files.get(state);</div><div class=\"line\">        if(fly == null)&#123;</div><div class=\"line\">            fly = new ConcreteFlyWeight(state);</div><div class=\"line\">            files.put(state, fly);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return fly;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.flyweight;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        FlyWeightFactory factory = FlyWeightFactory.getInstance();</div><div class=\"line\"></div><div class=\"line\">        FlyWeight fly = factory.factory(new Character(&apos;a&apos;));</div><div class=\"line\">        fly.operation(&quot;first call&quot;);</div><div class=\"line\"></div><div class=\"line\">        fly = factory.factory(new Character(&apos;b&apos;));</div><div class=\"line\">        fly.operation(&quot;Second Call&quot;);</div><div class=\"line\"></div><div class=\"line\">        fly = factory.factory(new Character(&apos;a&apos;));</div><div class=\"line\">        fly.operation(&quot;Third Call&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"外观模式","date":"2017-08-01T09:54:34.000Z","keywords":"设计模式 外观模式","_content":"\n## 外观模式\n\n### 介绍\n\n为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。\n就像下图，facade把众多子系统中通过一个接口统一起来：\n![外观模式](../../../uploads/facade/1.png)\n\n#### 适用场景\n\n1. 设计初期阶段，应该有意识的将不同层分离，层与层之间建立外观模式。\n2.  开发阶段，子系统越来越复杂，增加外观模式提供一个简单的调用接口。\n3.  维护一个大型遗留系统的时候，可能这个系统已经非常难以维护和扩展，但又包含非常重要的功能，为其开发一个外观类，以便新系统与其交互。\n\n\n#### 优点\n\n1. 实现了子系统与客户端之间的松耦合关系。\n2. 客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。\n3. 提高了安全性。\n\n### DEMO\n\n子系统：\n```\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic interface Shape {\n    void draw();\n}\n\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Circle::draw()\");\n    }\n}\n\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle::draw()\");\n    }\n}\n\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Square implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Square::draw()\");\n    }\n}\n```\n\nfacade :\n```\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class ShapeFacade {\n    private Shape circle;\n    private Shape rectangle;\n    private Shape square;\n\n    public ShapeFacade() {\n        circle = new Circle();\n        rectangle = new Rectangle();\n        square = new Square();\n    }\n\n    public void drawCircle(){\n        circle.draw();\n    }\n\n    public void drawRectangle(){\n        rectangle.draw();\n    }\n\n    public void drawSquare(){\n        square.draw();\n    }\n}\n```\n测试类：\n```\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class FacadeTest {\n    public static void main(String[] args) {\n        ShapeFacade shapeFacade = new ShapeFacade();\n\n        shapeFacade.drawCircle();\n        shapeFacade.drawRectangle();\n        shapeFacade.drawSquare();\n    }\n}\n```\n\n\n\n","source":"_posts/Design_pattern/13_facede.md","raw":"---\ntitle: 外观模式\ndate: 2017-08-01 17:54:34\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 外观模式\n---\n\n## 外观模式\n\n### 介绍\n\n为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。\n就像下图，facade把众多子系统中通过一个接口统一起来：\n![外观模式](../../../uploads/facade/1.png)\n\n#### 适用场景\n\n1. 设计初期阶段，应该有意识的将不同层分离，层与层之间建立外观模式。\n2.  开发阶段，子系统越来越复杂，增加外观模式提供一个简单的调用接口。\n3.  维护一个大型遗留系统的时候，可能这个系统已经非常难以维护和扩展，但又包含非常重要的功能，为其开发一个外观类，以便新系统与其交互。\n\n\n#### 优点\n\n1. 实现了子系统与客户端之间的松耦合关系。\n2. 客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。\n3. 提高了安全性。\n\n### DEMO\n\n子系统：\n```\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic interface Shape {\n    void draw();\n}\n\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Circle::draw()\");\n    }\n}\n\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle::draw()\");\n    }\n}\n\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class Square implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Square::draw()\");\n    }\n}\n```\n\nfacade :\n```\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class ShapeFacade {\n    private Shape circle;\n    private Shape rectangle;\n    private Shape square;\n\n    public ShapeFacade() {\n        circle = new Circle();\n        rectangle = new Rectangle();\n        square = new Square();\n    }\n\n    public void drawCircle(){\n        circle.draw();\n    }\n\n    public void drawRectangle(){\n        rectangle.draw();\n    }\n\n    public void drawSquare(){\n        square.draw();\n    }\n}\n```\n测试类：\n```\npackage factory.pattern.facade;\n\n/**\n * Created by FK on 2017/8/1.\n */\npublic class FacadeTest {\n    public static void main(String[] args) {\n        ShapeFacade shapeFacade = new ShapeFacade();\n\n        shapeFacade.drawCircle();\n        shapeFacade.drawRectangle();\n        shapeFacade.drawSquare();\n    }\n}\n```\n\n\n\n","slug":"Design_pattern/13_facede","published":1,"updated":"2020-02-13T14:27:13.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrj000dn0ztowmb5nxz","content":"<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。<br>就像下图，facade把众多子系统中通过一个接口统一起来：<br><img src=\"../../../uploads/facade/1.png\" alt=\"外观模式\"></p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ol>\n<li>设计初期阶段，应该有意识的将不同层分离，层与层之间建立外观模式。</li>\n<li>开发阶段，子系统越来越复杂，增加外观模式提供一个简单的调用接口。</li>\n<li>维护一个大型遗留系统的时候，可能这个系统已经非常难以维护和扩展，但又包含非常重要的功能，为其开发一个外观类，以便新系统与其交互。</li>\n</ol>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>实现了子系统与客户端之间的松耦合关系。</li>\n<li>客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。</li>\n<li>提高了安全性。</li>\n</ol>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>子系统：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle::draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle::draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Square implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Square::draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>facade :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFacade &#123;</div><div class=\"line\">    private Shape circle;</div><div class=\"line\">    private Shape rectangle;</div><div class=\"line\">    private Shape square;</div><div class=\"line\"></div><div class=\"line\">    public ShapeFacade() &#123;</div><div class=\"line\">        circle = new Circle();</div><div class=\"line\">        rectangle = new Rectangle();</div><div class=\"line\">        square = new Square();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void drawCircle()&#123;</div><div class=\"line\">        circle.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void drawRectangle()&#123;</div><div class=\"line\">        rectangle.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void drawSquare()&#123;</div><div class=\"line\">        square.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class FacadeTest &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        ShapeFacade shapeFacade = new ShapeFacade();</div><div class=\"line\"></div><div class=\"line\">        shapeFacade.drawCircle();</div><div class=\"line\">        shapeFacade.drawRectangle();</div><div class=\"line\">        shapeFacade.drawSquare();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为子系统中的一组接口提供一个一致的界面，定义一个高层接口，这个接口使得这一子系统更加容易使用。<br>就像下图，facade把众多子系统中通过一个接口统一起来：<br><img src=\"../../../uploads/facade/1.png\" alt=\"外观模式\"></p>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><ol>\n<li>设计初期阶段，应该有意识的将不同层分离，层与层之间建立外观模式。</li>\n<li>开发阶段，子系统越来越复杂，增加外观模式提供一个简单的调用接口。</li>\n<li>维护一个大型遗留系统的时候，可能这个系统已经非常难以维护和扩展，但又包含非常重要的功能，为其开发一个外观类，以便新系统与其交互。</li>\n</ol>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ol>\n<li>实现了子系统与客户端之间的松耦合关系。</li>\n<li>客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易。</li>\n<li>提高了安全性。</li>\n</ol>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>子系统：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle::draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle::draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class Square implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Square::draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>facade :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFacade &#123;</div><div class=\"line\">    private Shape circle;</div><div class=\"line\">    private Shape rectangle;</div><div class=\"line\">    private Shape square;</div><div class=\"line\"></div><div class=\"line\">    public ShapeFacade() &#123;</div><div class=\"line\">        circle = new Circle();</div><div class=\"line\">        rectangle = new Rectangle();</div><div class=\"line\">        square = new Square();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void drawCircle()&#123;</div><div class=\"line\">        circle.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void drawRectangle()&#123;</div><div class=\"line\">        rectangle.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void drawSquare()&#123;</div><div class=\"line\">        square.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.facade;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/1.</div><div class=\"line\"> */</div><div class=\"line\">public class FacadeTest &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        ShapeFacade shapeFacade = new ShapeFacade();</div><div class=\"line\"></div><div class=\"line\">        shapeFacade.drawCircle();</div><div class=\"line\">        shapeFacade.drawRectangle();</div><div class=\"line\">        shapeFacade.drawSquare();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"解释器模式","date":"2017-08-11T01:08:34.000Z","keywords":"设计模式 解释器模式","_content":"## 解释器模式\n\n### 介绍\n\n解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。（行为型模式）\n\n解释器模式uml图一般如下：\n\n![解释器模式](../../../../uploads/interpreter/1.gif)\n\n- AbstractExpression 抽象解释器\n\n&nbsp;&nbsp;&nbsp;&nbsp; 具体的解释任务由各个实现类完成，具体的解释器分别由TerminalExpression和NonterminalExpression完成。\n\n- TerminalExpression终结符表达式\n\n&nbsp;&nbsp;&nbsp;&nbsp;实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。具体到我们例子就是VarExpression类，表达式中的每个终结符都在堆栈中产生了一个VarExpression对象。\n\n- NonterminalExpression 非终结符表达式\n\n&nbsp;&nbsp;&nbsp;&nbsp;文法中的每条规则对应于一个非终结表达式，具体到我们的例子就是加减法规则分别对应到AddExpression和SubExpression两个类。非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。\n\n- Context 环境角色\n\n&nbsp;&nbsp;&nbsp;&nbsp;具体到我们的例子中是采用HashMap代替。\n\n> 正则表达式就是使用了解释器模式\n> 解释器模式在实际的系统开发中使用的非常少，因为它会引起效率、性能以及维护等问题，一般在大中型的框架型项目能够找到它的身影，比如一些数据分析工具、报表设计工具、科学计算工具等等，若你确实遇到“一种特定类型的问题发生的频率足够高”的情况，准备使用解释器模式时，可以考虑一下Expression4J、MESP（Math Expression String Parser）、Jep等开源的解析工具包，功能都异常强大，而且非常容易使用，效率也还不错，实现大多数的数学运算完全没有问题.\n\n### 优缺点\n\n#### 优点\n\n解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结符表达式就可以了，若扩展语法，则只要增加非终结符类就可以了。\n\n#### 缺点\n\n- 每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就可能产生*大量的类文件*，为维护带来了非常多的麻烦。\n\n- 解释器模式采用递归调用方法，如果要排查一个语法错误，要一个一个断点的调试下去，会很麻烦。\n\n- 解释器模式使用了大量的循环和递归，特别是用于解析复杂、冗长的语法时，效率会很低。\n\n### DEMO\n\n设计一个四则运算（这里只写了加减），可以应用各种模型公式。uml图如下：\n\n![解释器模式](../../../uploads/interpreter/2.gif)\n\n代码如下：\n \n抽象解释器\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic abstract class Expression {\n   public abstract int interpreter(HashMap<String, Integer> var);\n}\n```\n\n抽象非终结符表达式，定义文法中的规则\n\n```\npackage factory.pattern.interpreter;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic abstract class SymbolExpression extends Expression {\n    protected Expression left;\n    protected Expression right;\n\n    public SymbolExpression(Expression left, Expression right) {\n        this.left = left;\n        this.right = right;\n    }\n}\n```\n\n具体的非终结符表达式\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class AddExpression  extends SymbolExpression{\n\n    public AddExpression(Expression left, Expression right) {\n        super(left, right);\n    }\n\n    @Override\n    public int interpreter(HashMap<String, Integer> var) {\n        return super.left.interpreter(var) + super.right.interpreter(var);\n    }\n}\n```\n\n具体的非终结符表达式\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class SubExpression extends SymbolExpression {\n    public SubExpression(Expression left, Expression right) {\n        super(left, right);\n    }\n\n    @Override\n    public int interpreter(HashMap<String, Integer> var) {\n        return super.left.interpreter(var) - super.right.interpreter(var);\n    }\n}\n```\n\n终结符表达式\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class VarExpression extends Expression {\n    private String key;\n\n    public VarExpression(String key) {\n        this.key = key;\n    }\n\n    @Override\n    public int interpreter(HashMap<String, Integer> var) {\n        return var.get(key);\n    }\n}\n```\n\nCalcuator的作用是封装，根据迪米特原则，Client只与直接的朋友Calcuator交流，与其他类没关系。\n \n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\nimport java.util.Stack;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class Calculator {\n    //表达式\n    private Expression expression;\n\n    public Calculator(String expStr){\n        Stack<Expression> stack = new Stack<>();\n        //表达式拆分为字符数组\n        char[] charArray = expStr.toCharArray();\n\n        Expression left = null;\n        Expression right = null;\n        for(int i=0;i<charArray.length;i++){\n            switch (charArray[i]){\n                case '+' :\n                    left = stack.pop();\n                    right = new VarExpression(String.valueOf(charArray[++i]));\n                    stack.push(new AddExpression(left, right));\n                    break;\n                case '-':\n                    left = stack.pop();\n                    right = new VarExpression(String.valueOf(charArray[++i]));\n                    stack.push(new SubExpression(left,right));\n                    break;\n                default:\n                    stack.push(new VarExpression(String.valueOf(charArray[i])));\n            }\n        }\n        this.expression = stack.pop();\n    }\n\n    public int run(HashMap<String, Integer> var){\n        return this.expression.interpreter(var);\n    }\n}\n```\n\n测试\n```\npackage factory.pattern.interpreter;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class Test {\n    public static void main(String[] args) throws IOException {\n        String expStr = getExpStr();\n\n        HashMap<String, Integer> var = getValue(expStr);\n\n        Calculator calculator = new Calculator(expStr);\n        System.out.println(\"运算结果为：\"+expStr +\"=\"+calculator.run(var));\n    }\n\n    public static String getExpStr() throws IOException {\n        System.out.println(\"输入表达式\");\n        return (new BufferedReader((new InputStreamReader(System.in)))).readLine();\n    }\n\n    public static HashMap<String, Integer> getValue(String expreStr) throws IOException {\n        HashMap<String, Integer> map = new HashMap<>();\n        for(char ch : expreStr.toCharArray()){\n            if(ch != '+' && ch != '-'){\n                if(!map.containsKey(String.valueOf(ch))){\n                    System.out.print(\"请输入\"+ch+\"的值:\");\n                    String in = (new BufferedReader(new InputStreamReader(System.in))).readLine();\n                    map.put(String.valueOf(ch),Integer.valueOf(in));\n                }\n            }\n        }\n        return map;\n    }\n\n}\n```\n\n输出结果\n\n```\n输入表达式\na+b-c\n请输入a的值:100\n请输入b的值:20\n请输入c的值:40\n运算结果为：a+b-c=80\n```","source":"_posts/Design_pattern/18_interpreter.md","raw":"---\ntitle: 解释器模式\ndate: 2017-08-11 9:08:34\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 解释器模式\n---\n## 解释器模式\n\n### 介绍\n\n解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。（行为型模式）\n\n解释器模式uml图一般如下：\n\n![解释器模式](../../../../uploads/interpreter/1.gif)\n\n- AbstractExpression 抽象解释器\n\n&nbsp;&nbsp;&nbsp;&nbsp; 具体的解释任务由各个实现类完成，具体的解释器分别由TerminalExpression和NonterminalExpression完成。\n\n- TerminalExpression终结符表达式\n\n&nbsp;&nbsp;&nbsp;&nbsp;实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。具体到我们例子就是VarExpression类，表达式中的每个终结符都在堆栈中产生了一个VarExpression对象。\n\n- NonterminalExpression 非终结符表达式\n\n&nbsp;&nbsp;&nbsp;&nbsp;文法中的每条规则对应于一个非终结表达式，具体到我们的例子就是加减法规则分别对应到AddExpression和SubExpression两个类。非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。\n\n- Context 环境角色\n\n&nbsp;&nbsp;&nbsp;&nbsp;具体到我们的例子中是采用HashMap代替。\n\n> 正则表达式就是使用了解释器模式\n> 解释器模式在实际的系统开发中使用的非常少，因为它会引起效率、性能以及维护等问题，一般在大中型的框架型项目能够找到它的身影，比如一些数据分析工具、报表设计工具、科学计算工具等等，若你确实遇到“一种特定类型的问题发生的频率足够高”的情况，准备使用解释器模式时，可以考虑一下Expression4J、MESP（Math Expression String Parser）、Jep等开源的解析工具包，功能都异常强大，而且非常容易使用，效率也还不错，实现大多数的数学运算完全没有问题.\n\n### 优缺点\n\n#### 优点\n\n解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结符表达式就可以了，若扩展语法，则只要增加非终结符类就可以了。\n\n#### 缺点\n\n- 每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就可能产生*大量的类文件*，为维护带来了非常多的麻烦。\n\n- 解释器模式采用递归调用方法，如果要排查一个语法错误，要一个一个断点的调试下去，会很麻烦。\n\n- 解释器模式使用了大量的循环和递归，特别是用于解析复杂、冗长的语法时，效率会很低。\n\n### DEMO\n\n设计一个四则运算（这里只写了加减），可以应用各种模型公式。uml图如下：\n\n![解释器模式](../../../uploads/interpreter/2.gif)\n\n代码如下：\n \n抽象解释器\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic abstract class Expression {\n   public abstract int interpreter(HashMap<String, Integer> var);\n}\n```\n\n抽象非终结符表达式，定义文法中的规则\n\n```\npackage factory.pattern.interpreter;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic abstract class SymbolExpression extends Expression {\n    protected Expression left;\n    protected Expression right;\n\n    public SymbolExpression(Expression left, Expression right) {\n        this.left = left;\n        this.right = right;\n    }\n}\n```\n\n具体的非终结符表达式\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class AddExpression  extends SymbolExpression{\n\n    public AddExpression(Expression left, Expression right) {\n        super(left, right);\n    }\n\n    @Override\n    public int interpreter(HashMap<String, Integer> var) {\n        return super.left.interpreter(var) + super.right.interpreter(var);\n    }\n}\n```\n\n具体的非终结符表达式\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class SubExpression extends SymbolExpression {\n    public SubExpression(Expression left, Expression right) {\n        super(left, right);\n    }\n\n    @Override\n    public int interpreter(HashMap<String, Integer> var) {\n        return super.left.interpreter(var) - super.right.interpreter(var);\n    }\n}\n```\n\n终结符表达式\n\n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class VarExpression extends Expression {\n    private String key;\n\n    public VarExpression(String key) {\n        this.key = key;\n    }\n\n    @Override\n    public int interpreter(HashMap<String, Integer> var) {\n        return var.get(key);\n    }\n}\n```\n\nCalcuator的作用是封装，根据迪米特原则，Client只与直接的朋友Calcuator交流，与其他类没关系。\n \n```\npackage factory.pattern.interpreter;\n\nimport java.util.HashMap;\nimport java.util.Stack;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class Calculator {\n    //表达式\n    private Expression expression;\n\n    public Calculator(String expStr){\n        Stack<Expression> stack = new Stack<>();\n        //表达式拆分为字符数组\n        char[] charArray = expStr.toCharArray();\n\n        Expression left = null;\n        Expression right = null;\n        for(int i=0;i<charArray.length;i++){\n            switch (charArray[i]){\n                case '+' :\n                    left = stack.pop();\n                    right = new VarExpression(String.valueOf(charArray[++i]));\n                    stack.push(new AddExpression(left, right));\n                    break;\n                case '-':\n                    left = stack.pop();\n                    right = new VarExpression(String.valueOf(charArray[++i]));\n                    stack.push(new SubExpression(left,right));\n                    break;\n                default:\n                    stack.push(new VarExpression(String.valueOf(charArray[i])));\n            }\n        }\n        this.expression = stack.pop();\n    }\n\n    public int run(HashMap<String, Integer> var){\n        return this.expression.interpreter(var);\n    }\n}\n```\n\n测试\n```\npackage factory.pattern.interpreter;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\n\n/**\n * Created by FK on 2017/8/11.\n */\npublic class Test {\n    public static void main(String[] args) throws IOException {\n        String expStr = getExpStr();\n\n        HashMap<String, Integer> var = getValue(expStr);\n\n        Calculator calculator = new Calculator(expStr);\n        System.out.println(\"运算结果为：\"+expStr +\"=\"+calculator.run(var));\n    }\n\n    public static String getExpStr() throws IOException {\n        System.out.println(\"输入表达式\");\n        return (new BufferedReader((new InputStreamReader(System.in)))).readLine();\n    }\n\n    public static HashMap<String, Integer> getValue(String expreStr) throws IOException {\n        HashMap<String, Integer> map = new HashMap<>();\n        for(char ch : expreStr.toCharArray()){\n            if(ch != '+' && ch != '-'){\n                if(!map.containsKey(String.valueOf(ch))){\n                    System.out.print(\"请输入\"+ch+\"的值:\");\n                    String in = (new BufferedReader(new InputStreamReader(System.in))).readLine();\n                    map.put(String.valueOf(ch),Integer.valueOf(in));\n                }\n            }\n        }\n        return map;\n    }\n\n}\n```\n\n输出结果\n\n```\n输入表达式\na+b-c\n请输入a的值:100\n请输入b的值:20\n请输入c的值:40\n运算结果为：a+b-c=80\n```","slug":"Design_pattern/18_interpreter","published":1,"updated":"2020-02-13T14:45:31.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrk000en0zt9lnefceu","content":"<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。（行为型模式）</p>\n<p>解释器模式uml图一般如下：</p>\n<p><img src=\"../../../../uploads/interpreter/1.gif\" alt=\"解释器模式\"></p>\n<ul>\n<li>AbstractExpression 抽象解释器</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp; 具体的解释任务由各个实现类完成，具体的解释器分别由TerminalExpression和NonterminalExpression完成。</p>\n<ul>\n<li>TerminalExpression终结符表达式</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。具体到我们例子就是VarExpression类，表达式中的每个终结符都在堆栈中产生了一个VarExpression对象。</p>\n<ul>\n<li>NonterminalExpression 非终结符表达式</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;文法中的每条规则对应于一个非终结表达式，具体到我们的例子就是加减法规则分别对应到AddExpression和SubExpression两个类。非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。</p>\n<ul>\n<li>Context 环境角色</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;具体到我们的例子中是采用HashMap代替。</p>\n<blockquote>\n<p>正则表达式就是使用了解释器模式<br>解释器模式在实际的系统开发中使用的非常少，因为它会引起效率、性能以及维护等问题，一般在大中型的框架型项目能够找到它的身影，比如一些数据分析工具、报表设计工具、科学计算工具等等，若你确实遇到“一种特定类型的问题发生的频率足够高”的情况，准备使用解释器模式时，可以考虑一下Expression4J、MESP（Math Expression String Parser）、Jep等开源的解析工具包，功能都异常强大，而且非常容易使用，效率也还不错，实现大多数的数学运算完全没有问题.</p>\n</blockquote>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结符表达式就可以了，若扩展语法，则只要增加非终结符类就可以了。</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li><p>每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就可能产生<em>大量的类文件</em>，为维护带来了非常多的麻烦。</p>\n</li>\n<li><p>解释器模式采用递归调用方法，如果要排查一个语法错误，要一个一个断点的调试下去，会很麻烦。</p>\n</li>\n<li><p>解释器模式使用了大量的循环和递归，特别是用于解析复杂、冗长的语法时，效率会很低。</p>\n</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>设计一个四则运算（这里只写了加减），可以应用各种模型公式。uml图如下：</p>\n<p><img src=\"../../../uploads/interpreter/2.gif\" alt=\"解释器模式\"></p>\n<p>代码如下：</p>\n<p>抽象解释器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class Expression &#123;</div><div class=\"line\">   public abstract int interpreter(HashMap&lt;String, Integer&gt; var);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>抽象非终结符表达式，定义文法中的规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class SymbolExpression extends Expression &#123;</div><div class=\"line\">    protected Expression left;</div><div class=\"line\">    protected Expression right;</div><div class=\"line\"></div><div class=\"line\">    public SymbolExpression(Expression left, Expression right) &#123;</div><div class=\"line\">        this.left = left;</div><div class=\"line\">        this.right = right;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体的非终结符表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class AddExpression  extends SymbolExpression&#123;</div><div class=\"line\"></div><div class=\"line\">    public AddExpression(Expression left, Expression right) &#123;</div><div class=\"line\">        super(left, right);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int interpreter(HashMap&lt;String, Integer&gt; var) &#123;</div><div class=\"line\">        return super.left.interpreter(var) + super.right.interpreter(var);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体的非终结符表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class SubExpression extends SymbolExpression &#123;</div><div class=\"line\">    public SubExpression(Expression left, Expression right) &#123;</div><div class=\"line\">        super(left, right);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int interpreter(HashMap&lt;String, Integer&gt; var) &#123;</div><div class=\"line\">        return super.left.interpreter(var) - super.right.interpreter(var);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>终结符表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class VarExpression extends Expression &#123;</div><div class=\"line\">    private String key;</div><div class=\"line\"></div><div class=\"line\">    public VarExpression(String key) &#123;</div><div class=\"line\">        this.key = key;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int interpreter(HashMap&lt;String, Integer&gt; var) &#123;</div><div class=\"line\">        return var.get(key);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Calcuator的作用是封装，根据迪米特原则，Client只与直接的朋友Calcuator交流，与其他类没关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Stack;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class Calculator &#123;</div><div class=\"line\">    //表达式</div><div class=\"line\">    private Expression expression;</div><div class=\"line\"></div><div class=\"line\">    public Calculator(String expStr)&#123;</div><div class=\"line\">        Stack&lt;Expression&gt; stack = new Stack&lt;&gt;();</div><div class=\"line\">        //表达式拆分为字符数组</div><div class=\"line\">        char[] charArray = expStr.toCharArray();</div><div class=\"line\"></div><div class=\"line\">        Expression left = null;</div><div class=\"line\">        Expression right = null;</div><div class=\"line\">        for(int i=0;i&lt;charArray.length;i++)&#123;</div><div class=\"line\">            switch (charArray[i])&#123;</div><div class=\"line\">                case &apos;+&apos; :</div><div class=\"line\">                    left = stack.pop();</div><div class=\"line\">                    right = new VarExpression(String.valueOf(charArray[++i]));</div><div class=\"line\">                    stack.push(new AddExpression(left, right));</div><div class=\"line\">                    break;</div><div class=\"line\">                case &apos;-&apos;:</div><div class=\"line\">                    left = stack.pop();</div><div class=\"line\">                    right = new VarExpression(String.valueOf(charArray[++i]));</div><div class=\"line\">                    stack.push(new SubExpression(left,right));</div><div class=\"line\">                    break;</div><div class=\"line\">                default:</div><div class=\"line\">                    stack.push(new VarExpression(String.valueOf(charArray[i])));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.expression = stack.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int run(HashMap&lt;String, Integer&gt; var)&#123;</div><div class=\"line\">        return this.expression.interpreter(var);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) throws IOException &#123;</div><div class=\"line\">        String expStr = getExpStr();</div><div class=\"line\"></div><div class=\"line\">        HashMap&lt;String, Integer&gt; var = getValue(expStr);</div><div class=\"line\"></div><div class=\"line\">        Calculator calculator = new Calculator(expStr);</div><div class=\"line\">        System.out.println(&quot;运算结果为：&quot;+expStr +&quot;=&quot;+calculator.run(var));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String getExpStr() throws IOException &#123;</div><div class=\"line\">        System.out.println(&quot;输入表达式&quot;);</div><div class=\"line\">        return (new BufferedReader((new InputStreamReader(System.in)))).readLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static HashMap&lt;String, Integer&gt; getValue(String expreStr) throws IOException &#123;</div><div class=\"line\">        HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</div><div class=\"line\">        for(char ch : expreStr.toCharArray())&#123;</div><div class=\"line\">            if(ch != &apos;+&apos; &amp;&amp; ch != &apos;-&apos;)&#123;</div><div class=\"line\">                if(!map.containsKey(String.valueOf(ch)))&#123;</div><div class=\"line\">                    System.out.print(&quot;请输入&quot;+ch+&quot;的值:&quot;);</div><div class=\"line\">                    String in = (new BufferedReader(new InputStreamReader(System.in))).readLine();</div><div class=\"line\">                    map.put(String.valueOf(ch),Integer.valueOf(in));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入表达式</div><div class=\"line\">a+b-c</div><div class=\"line\">请输入a的值:100</div><div class=\"line\">请输入b的值:20</div><div class=\"line\">请输入c的值:40</div><div class=\"line\">运算结果为：a+b-c=80</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。（行为型模式）</p>\n<p>解释器模式uml图一般如下：</p>\n<p><img src=\"../../../../uploads/interpreter/1.gif\" alt=\"解释器模式\"></p>\n<ul>\n<li>AbstractExpression 抽象解释器</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp; 具体的解释任务由各个实现类完成，具体的解释器分别由TerminalExpression和NonterminalExpression完成。</p>\n<ul>\n<li>TerminalExpression终结符表达式</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。具体到我们例子就是VarExpression类，表达式中的每个终结符都在堆栈中产生了一个VarExpression对象。</p>\n<ul>\n<li>NonterminalExpression 非终结符表达式</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;文法中的每条规则对应于一个非终结表达式，具体到我们的例子就是加减法规则分别对应到AddExpression和SubExpression两个类。非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。</p>\n<ul>\n<li>Context 环境角色</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;具体到我们的例子中是采用HashMap代替。</p>\n<blockquote>\n<p>正则表达式就是使用了解释器模式<br>解释器模式在实际的系统开发中使用的非常少，因为它会引起效率、性能以及维护等问题，一般在大中型的框架型项目能够找到它的身影，比如一些数据分析工具、报表设计工具、科学计算工具等等，若你确实遇到“一种特定类型的问题发生的频率足够高”的情况，准备使用解释器模式时，可以考虑一下Expression4J、MESP（Math Expression String Parser）、Jep等开源的解析工具包，功能都异常强大，而且非常容易使用，效率也还不错，实现大多数的数学运算完全没有问题.</p>\n</blockquote>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><p>解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结符表达式就可以了，若扩展语法，则只要增加非终结符类就可以了。</p>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li><p>每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就可能产生<em>大量的类文件</em>，为维护带来了非常多的麻烦。</p>\n</li>\n<li><p>解释器模式采用递归调用方法，如果要排查一个语法错误，要一个一个断点的调试下去，会很麻烦。</p>\n</li>\n<li><p>解释器模式使用了大量的循环和递归，特别是用于解析复杂、冗长的语法时，效率会很低。</p>\n</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>设计一个四则运算（这里只写了加减），可以应用各种模型公式。uml图如下：</p>\n<p><img src=\"../../../uploads/interpreter/2.gif\" alt=\"解释器模式\"></p>\n<p>代码如下：</p>\n<p>抽象解释器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class Expression &#123;</div><div class=\"line\">   public abstract int interpreter(HashMap&lt;String, Integer&gt; var);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>抽象非终结符表达式，定义文法中的规则</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class SymbolExpression extends Expression &#123;</div><div class=\"line\">    protected Expression left;</div><div class=\"line\">    protected Expression right;</div><div class=\"line\"></div><div class=\"line\">    public SymbolExpression(Expression left, Expression right) &#123;</div><div class=\"line\">        this.left = left;</div><div class=\"line\">        this.right = right;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体的非终结符表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class AddExpression  extends SymbolExpression&#123;</div><div class=\"line\"></div><div class=\"line\">    public AddExpression(Expression left, Expression right) &#123;</div><div class=\"line\">        super(left, right);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int interpreter(HashMap&lt;String, Integer&gt; var) &#123;</div><div class=\"line\">        return super.left.interpreter(var) + super.right.interpreter(var);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>具体的非终结符表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class SubExpression extends SymbolExpression &#123;</div><div class=\"line\">    public SubExpression(Expression left, Expression right) &#123;</div><div class=\"line\">        super(left, right);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int interpreter(HashMap&lt;String, Integer&gt; var) &#123;</div><div class=\"line\">        return super.left.interpreter(var) - super.right.interpreter(var);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>终结符表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class VarExpression extends Expression &#123;</div><div class=\"line\">    private String key;</div><div class=\"line\"></div><div class=\"line\">    public VarExpression(String key) &#123;</div><div class=\"line\">        this.key = key;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int interpreter(HashMap&lt;String, Integer&gt; var) &#123;</div><div class=\"line\">        return var.get(key);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Calcuator的作用是封装，根据迪米特原则，Client只与直接的朋友Calcuator交流，与其他类没关系。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\">import java.util.Stack;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class Calculator &#123;</div><div class=\"line\">    //表达式</div><div class=\"line\">    private Expression expression;</div><div class=\"line\"></div><div class=\"line\">    public Calculator(String expStr)&#123;</div><div class=\"line\">        Stack&lt;Expression&gt; stack = new Stack&lt;&gt;();</div><div class=\"line\">        //表达式拆分为字符数组</div><div class=\"line\">        char[] charArray = expStr.toCharArray();</div><div class=\"line\"></div><div class=\"line\">        Expression left = null;</div><div class=\"line\">        Expression right = null;</div><div class=\"line\">        for(int i=0;i&lt;charArray.length;i++)&#123;</div><div class=\"line\">            switch (charArray[i])&#123;</div><div class=\"line\">                case &apos;+&apos; :</div><div class=\"line\">                    left = stack.pop();</div><div class=\"line\">                    right = new VarExpression(String.valueOf(charArray[++i]));</div><div class=\"line\">                    stack.push(new AddExpression(left, right));</div><div class=\"line\">                    break;</div><div class=\"line\">                case &apos;-&apos;:</div><div class=\"line\">                    left = stack.pop();</div><div class=\"line\">                    right = new VarExpression(String.valueOf(charArray[++i]));</div><div class=\"line\">                    stack.push(new SubExpression(left,right));</div><div class=\"line\">                    break;</div><div class=\"line\">                default:</div><div class=\"line\">                    stack.push(new VarExpression(String.valueOf(charArray[i])));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.expression = stack.pop();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int run(HashMap&lt;String, Integer&gt; var)&#123;</div><div class=\"line\">        return this.expression.interpreter(var);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.interpreter;</div><div class=\"line\"></div><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.util.HashMap;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/11.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) throws IOException &#123;</div><div class=\"line\">        String expStr = getExpStr();</div><div class=\"line\"></div><div class=\"line\">        HashMap&lt;String, Integer&gt; var = getValue(expStr);</div><div class=\"line\"></div><div class=\"line\">        Calculator calculator = new Calculator(expStr);</div><div class=\"line\">        System.out.println(&quot;运算结果为：&quot;+expStr +&quot;=&quot;+calculator.run(var));</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static String getExpStr() throws IOException &#123;</div><div class=\"line\">        System.out.println(&quot;输入表达式&quot;);</div><div class=\"line\">        return (new BufferedReader((new InputStreamReader(System.in)))).readLine();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static HashMap&lt;String, Integer&gt; getValue(String expreStr) throws IOException &#123;</div><div class=\"line\">        HashMap&lt;String, Integer&gt; map = new HashMap&lt;&gt;();</div><div class=\"line\">        for(char ch : expreStr.toCharArray())&#123;</div><div class=\"line\">            if(ch != &apos;+&apos; &amp;&amp; ch != &apos;-&apos;)&#123;</div><div class=\"line\">                if(!map.containsKey(String.valueOf(ch)))&#123;</div><div class=\"line\">                    System.out.print(&quot;请输入&quot;+ch+&quot;的值:&quot;);</div><div class=\"line\">                    String in = (new BufferedReader(new InputStreamReader(System.in))).readLine();</div><div class=\"line\">                    map.put(String.valueOf(ch),Integer.valueOf(in));</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return map;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入表达式</div><div class=\"line\">a+b-c</div><div class=\"line\">请输入a的值:100</div><div class=\"line\">请输入b的值:20</div><div class=\"line\">请输入c的值:40</div><div class=\"line\">运算结果为：a+b-c=80</div></pre></td></tr></table></figure>"},{"title":"命令模式","date":"2017-08-08T06:54:23.000Z","keywords":"设计模式 命令模式","_content":"\n## 命令模式\n\n### 介绍\n\n> 在软件系统中，行为请求者与行为实现者通常是一种紧耦合关系，但是有时候，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合关系就不大合适。\n\n将一个请求封装成一个对象，从而是你可用不同的请求对客户进行参数化，对请求排队和记录请求日志，以及支持可撤销的操作。\n命令模式就是对命令进行封装，把发出命令和执行命令分开，请求方并不知道命令是怎么被接受，也不知道命令是否执行，什么时候执行，怎么被执行的；使用命令模式可以使请求成为一个对象，这个对象可以和其他对象一样被存储和传递。\n\n## 涉及角色\n\n- 抽象命令（command）：定义命令的接口，申明执行的方法。\n- 具体命令（concreteCommand）：具体命令，实现要执行的方法，它通常是“虚”的表现；通常会有接受者，并调用接受者的功能来完成命令要执行的操作。\n- 接受者（receiver）：真正执行命令的对象。任何类都可能成为一个接受者，只要实现命令要求实现的相应功能。\n- 调用者（invoker）：要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。\n\n## 优缺点\n\n### 优点\n\n- 解除了请求者与实现者之间的耦合，降低了系统的耦合度\n- 对请求排队或记录请求日志，支持撤销操作\n- 可以容易地设计一个组合命令\n- 新命令可以容易地加入到系统中\n\n### 缺点\n\n- 因为针对每一个命令都需要设计一个具体命令类，使用命令模式可能会导致系统有过多的具体命令类\n\n### 适用场景\n\n- 当需要对行为进行“记录、撤销/重做”等处理时。\n- 系统需要将请求者和接收者解耦，使得调用者和接收者不直接交互。\n- 系统需要在不同时间指定请求、请求排队和执行请求。\n- 系统需要将一组操作组合在一起，即支持宏命令。\n\n## DEMO\n\ncommand\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic interface Order {\n    void execute();\n}\n```\nconcreteCommand\n\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class BuyStock implements  Order{\n\n    private Stock abcStock;\n\n    public BuyStock(Stock abcStock) {\n        this.abcStock = abcStock;\n    }\n\n    @Override\n    public void execute() {\n        abcStock.buy();\n    }\n}\n```\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class SellStock implements Order {\n    private Stock abcStock;\n\n    public SellStock(Stock abcStock){\n        this.abcStock = abcStock;\n    }\n\n    @Override\n    public void execute() {\n        abcStock.sell();\n    }\n}\n```\nreceive\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class Stock {\n    private String name = \"ABC\";\n    private int quantity = 10;\n\n    public void buy(){\n        System.out.println(\"Stock [ Name: \"+name+\",Quantity: \" + quantity +\" ] bought\");\n    }\n\n    public void sell(){\n        System.out.println(\"Stock [ Name: \"+name+\",Quantity: \" + quantity +\" ] sold\");\n    }\n}\n```\ninvoker\n```\npackage factory.pattern.command.demo1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class Broker {\n    private List<Order> orderList = new ArrayList<Order>();\n\n    public void takeOrder(Order order){\n        orderList.add(order);\n    }\n\n    public void placeOrders(){\n        for (Order order : orderList) {\n            order.execute();\n        }\n        orderList.clear();\n    }\n}\n```\nTEST\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Stock abcStock = new Stock();\n\n        BuyStock buyStock = new BuyStock(abcStock);\n        SellStock sellStock = new SellStock(abcStock);\n\n        Broker broker = new Broker();\n        broker.takeOrder(buyStock);\n        broker.takeOrder(sellStock);\n        broker.placeOrders();\n    }\n}\n```","source":"_posts/Design_pattern/17_command.md","raw":"---\ntitle: 命令模式\ndate: 2017-08-08 14:54:23\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 命令模式\n---\n\n## 命令模式\n\n### 介绍\n\n> 在软件系统中，行为请求者与行为实现者通常是一种紧耦合关系，但是有时候，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合关系就不大合适。\n\n将一个请求封装成一个对象，从而是你可用不同的请求对客户进行参数化，对请求排队和记录请求日志，以及支持可撤销的操作。\n命令模式就是对命令进行封装，把发出命令和执行命令分开，请求方并不知道命令是怎么被接受，也不知道命令是否执行，什么时候执行，怎么被执行的；使用命令模式可以使请求成为一个对象，这个对象可以和其他对象一样被存储和传递。\n\n## 涉及角色\n\n- 抽象命令（command）：定义命令的接口，申明执行的方法。\n- 具体命令（concreteCommand）：具体命令，实现要执行的方法，它通常是“虚”的表现；通常会有接受者，并调用接受者的功能来完成命令要执行的操作。\n- 接受者（receiver）：真正执行命令的对象。任何类都可能成为一个接受者，只要实现命令要求实现的相应功能。\n- 调用者（invoker）：要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。\n\n## 优缺点\n\n### 优点\n\n- 解除了请求者与实现者之间的耦合，降低了系统的耦合度\n- 对请求排队或记录请求日志，支持撤销操作\n- 可以容易地设计一个组合命令\n- 新命令可以容易地加入到系统中\n\n### 缺点\n\n- 因为针对每一个命令都需要设计一个具体命令类，使用命令模式可能会导致系统有过多的具体命令类\n\n### 适用场景\n\n- 当需要对行为进行“记录、撤销/重做”等处理时。\n- 系统需要将请求者和接收者解耦，使得调用者和接收者不直接交互。\n- 系统需要在不同时间指定请求、请求排队和执行请求。\n- 系统需要将一组操作组合在一起，即支持宏命令。\n\n## DEMO\n\ncommand\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic interface Order {\n    void execute();\n}\n```\nconcreteCommand\n\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class BuyStock implements  Order{\n\n    private Stock abcStock;\n\n    public BuyStock(Stock abcStock) {\n        this.abcStock = abcStock;\n    }\n\n    @Override\n    public void execute() {\n        abcStock.buy();\n    }\n}\n```\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class SellStock implements Order {\n    private Stock abcStock;\n\n    public SellStock(Stock abcStock){\n        this.abcStock = abcStock;\n    }\n\n    @Override\n    public void execute() {\n        abcStock.sell();\n    }\n}\n```\nreceive\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class Stock {\n    private String name = \"ABC\";\n    private int quantity = 10;\n\n    public void buy(){\n        System.out.println(\"Stock [ Name: \"+name+\",Quantity: \" + quantity +\" ] bought\");\n    }\n\n    public void sell(){\n        System.out.println(\"Stock [ Name: \"+name+\",Quantity: \" + quantity +\" ] sold\");\n    }\n}\n```\ninvoker\n```\npackage factory.pattern.command.demo1;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class Broker {\n    private List<Order> orderList = new ArrayList<Order>();\n\n    public void takeOrder(Order order){\n        orderList.add(order);\n    }\n\n    public void placeOrders(){\n        for (Order order : orderList) {\n            order.execute();\n        }\n        orderList.clear();\n    }\n}\n```\nTEST\n```\npackage factory.pattern.command.demo1;\n\n/**\n * Created by FK on 2017/8/8.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Stock abcStock = new Stock();\n\n        BuyStock buyStock = new BuyStock(abcStock);\n        SellStock sellStock = new SellStock(abcStock);\n\n        Broker broker = new Broker();\n        broker.takeOrder(buyStock);\n        broker.takeOrder(sellStock);\n        broker.placeOrders();\n    }\n}\n```","slug":"Design_pattern/17_command","published":1,"updated":"2020-01-02T05:49:23.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrn000in0ztplf8edey","content":"<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>在软件系统中，行为请求者与行为实现者通常是一种紧耦合关系，但是有时候，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合关系就不大合适。</p>\n</blockquote>\n<p>将一个请求封装成一个对象，从而是你可用不同的请求对客户进行参数化，对请求排队和记录请求日志，以及支持可撤销的操作。<br>命令模式就是对命令进行封装，把发出命令和执行命令分开，请求方并不知道命令是怎么被接受，也不知道命令是否执行，什么时候执行，怎么被执行的；使用命令模式可以使请求成为一个对象，这个对象可以和其他对象一样被存储和传递。</p>\n<h2 id=\"涉及角色\"><a href=\"#涉及角色\" class=\"headerlink\" title=\"涉及角色\"></a>涉及角色</h2><ul>\n<li>抽象命令（command）：定义命令的接口，申明执行的方法。</li>\n<li>具体命令（concreteCommand）：具体命令，实现要执行的方法，它通常是“虚”的表现；通常会有接受者，并调用接受者的功能来完成命令要执行的操作。</li>\n<li>接受者（receiver）：真正执行命令的对象。任何类都可能成为一个接受者，只要实现命令要求实现的相应功能。</li>\n<li>调用者（invoker）：要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。</li>\n</ul>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>解除了请求者与实现者之间的耦合，降低了系统的耦合度</li>\n<li>对请求排队或记录请求日志，支持撤销操作</li>\n<li>可以容易地设计一个组合命令</li>\n<li>新命令可以容易地加入到系统中</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>因为针对每一个命令都需要设计一个具体命令类，使用命令模式可能会导致系统有过多的具体命令类</li>\n</ul>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>当需要对行为进行“记录、撤销/重做”等处理时。</li>\n<li>系统需要将请求者和接收者解耦，使得调用者和接收者不直接交互。</li>\n<li>系统需要在不同时间指定请求、请求排队和执行请求。</li>\n<li>系统需要将一组操作组合在一起，即支持宏命令。</li>\n</ul>\n<h2 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h2><p>command<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public interface Order &#123;</div><div class=\"line\">    void execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>concreteCommand</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class BuyStock implements  Order&#123;</div><div class=\"line\"></div><div class=\"line\">    private Stock abcStock;</div><div class=\"line\"></div><div class=\"line\">    public BuyStock(Stock abcStock) &#123;</div><div class=\"line\">        this.abcStock = abcStock;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        abcStock.buy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class SellStock implements Order &#123;</div><div class=\"line\">    private Stock abcStock;</div><div class=\"line\"></div><div class=\"line\">    public SellStock(Stock abcStock)&#123;</div><div class=\"line\">        this.abcStock = abcStock;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        abcStock.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>receive<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class Stock &#123;</div><div class=\"line\">    private String name = &quot;ABC&quot;;</div><div class=\"line\">    private int quantity = 10;</div><div class=\"line\"></div><div class=\"line\">    public void buy()&#123;</div><div class=\"line\">        System.out.println(&quot;Stock [ Name: &quot;+name+&quot;,Quantity: &quot; + quantity +&quot; ] bought&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void sell()&#123;</div><div class=\"line\">        System.out.println(&quot;Stock [ Name: &quot;+name+&quot;,Quantity: &quot; + quantity +&quot; ] sold&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>invoker<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class Broker &#123;</div><div class=\"line\">    private List&lt;Order&gt; orderList = new ArrayList&lt;Order&gt;();</div><div class=\"line\"></div><div class=\"line\">    public void takeOrder(Order order)&#123;</div><div class=\"line\">        orderList.add(order);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void placeOrders()&#123;</div><div class=\"line\">        for (Order order : orderList) &#123;</div><div class=\"line\">            order.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">        orderList.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>TEST<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Stock abcStock = new Stock();</div><div class=\"line\"></div><div class=\"line\">        BuyStock buyStock = new BuyStock(abcStock);</div><div class=\"line\">        SellStock sellStock = new SellStock(abcStock);</div><div class=\"line\"></div><div class=\"line\">        Broker broker = new Broker();</div><div class=\"line\">        broker.takeOrder(buyStock);</div><div class=\"line\">        broker.takeOrder(sellStock);</div><div class=\"line\">        broker.placeOrders();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><blockquote>\n<p>在软件系统中，行为请求者与行为实现者通常是一种紧耦合关系，但是有时候，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合关系就不大合适。</p>\n</blockquote>\n<p>将一个请求封装成一个对象，从而是你可用不同的请求对客户进行参数化，对请求排队和记录请求日志，以及支持可撤销的操作。<br>命令模式就是对命令进行封装，把发出命令和执行命令分开，请求方并不知道命令是怎么被接受，也不知道命令是否执行，什么时候执行，怎么被执行的；使用命令模式可以使请求成为一个对象，这个对象可以和其他对象一样被存储和传递。</p>\n<h2 id=\"涉及角色\"><a href=\"#涉及角色\" class=\"headerlink\" title=\"涉及角色\"></a>涉及角色</h2><ul>\n<li>抽象命令（command）：定义命令的接口，申明执行的方法。</li>\n<li>具体命令（concreteCommand）：具体命令，实现要执行的方法，它通常是“虚”的表现；通常会有接受者，并调用接受者的功能来完成命令要执行的操作。</li>\n<li>接受者（receiver）：真正执行命令的对象。任何类都可能成为一个接受者，只要实现命令要求实现的相应功能。</li>\n<li>调用者（invoker）：要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。</li>\n</ul>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>解除了请求者与实现者之间的耦合，降低了系统的耦合度</li>\n<li>对请求排队或记录请求日志，支持撤销操作</li>\n<li>可以容易地设计一个组合命令</li>\n<li>新命令可以容易地加入到系统中</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>因为针对每一个命令都需要设计一个具体命令类，使用命令模式可能会导致系统有过多的具体命令类</li>\n</ul>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><ul>\n<li>当需要对行为进行“记录、撤销/重做”等处理时。</li>\n<li>系统需要将请求者和接收者解耦，使得调用者和接收者不直接交互。</li>\n<li>系统需要在不同时间指定请求、请求排队和执行请求。</li>\n<li>系统需要将一组操作组合在一起，即支持宏命令。</li>\n</ul>\n<h2 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h2><p>command<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public interface Order &#123;</div><div class=\"line\">    void execute();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>concreteCommand</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class BuyStock implements  Order&#123;</div><div class=\"line\"></div><div class=\"line\">    private Stock abcStock;</div><div class=\"line\"></div><div class=\"line\">    public BuyStock(Stock abcStock) &#123;</div><div class=\"line\">        this.abcStock = abcStock;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        abcStock.buy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class SellStock implements Order &#123;</div><div class=\"line\">    private Stock abcStock;</div><div class=\"line\"></div><div class=\"line\">    public SellStock(Stock abcStock)&#123;</div><div class=\"line\">        this.abcStock = abcStock;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void execute() &#123;</div><div class=\"line\">        abcStock.sell();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>receive<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class Stock &#123;</div><div class=\"line\">    private String name = &quot;ABC&quot;;</div><div class=\"line\">    private int quantity = 10;</div><div class=\"line\"></div><div class=\"line\">    public void buy()&#123;</div><div class=\"line\">        System.out.println(&quot;Stock [ Name: &quot;+name+&quot;,Quantity: &quot; + quantity +&quot; ] bought&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void sell()&#123;</div><div class=\"line\">        System.out.println(&quot;Stock [ Name: &quot;+name+&quot;,Quantity: &quot; + quantity +&quot; ] sold&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>invoker<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class Broker &#123;</div><div class=\"line\">    private List&lt;Order&gt; orderList = new ArrayList&lt;Order&gt;();</div><div class=\"line\"></div><div class=\"line\">    public void takeOrder(Order order)&#123;</div><div class=\"line\">        orderList.add(order);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void placeOrders()&#123;</div><div class=\"line\">        for (Order order : orderList) &#123;</div><div class=\"line\">            order.execute();</div><div class=\"line\">        &#125;</div><div class=\"line\">        orderList.clear();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>TEST<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.command.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/8.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Stock abcStock = new Stock();</div><div class=\"line\"></div><div class=\"line\">        BuyStock buyStock = new BuyStock(abcStock);</div><div class=\"line\">        SellStock sellStock = new SellStock(abcStock);</div><div class=\"line\"></div><div class=\"line\">        Broker broker = new Broker();</div><div class=\"line\">        broker.takeOrder(buyStock);</div><div class=\"line\">        broker.takeOrder(sellStock);</div><div class=\"line\">        broker.placeOrders();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"责任链模式","date":"2017-08-06T13:00:13.000Z","keywords":"设计模式 责任链模式","_content":"\n## 责任链模式\n\n### 介绍\n\n在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求会在这个链上传递，直到链上某一个对象可以处理这个请求。（行为型模式）\n\n### 结构图\n\n责任链模式的结构像下面这样：\n\n![责任链模式](../../../uploads/chainOfResponsibility/1.png)\n\n- 抽象处理者角色（handler）：定义一个处理请求的接口，还可以定义一个后继连接（可选）。\n- 具体处理者角色（ConcreteHandler）：具体处理者接到请求后，如果可以处理就处理请求，如果不能处理就把请求传给下一个继承。\n\n### 优缺点\n\n#### 优点\n\n- 降低耦合度：client发送请求并不需要知道是哪个对象处理的请求。\n- 责任链可简化对象的相互链接：它们仅需保持一个指向其后继者的引用，而不需保持它所有的候选接受者的引用。\n- 增强给对象指派职责的灵活性： 通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。\n- 加新的请求处理类很方便。\n\n#### 缺点\n\n- 不能保证请求一定被处理。\n- 系统性能有一定影响，调试时候不方面，可能造成循环调用。\n\n### DEMO\n\n责任链模式经常用于过滤，如果要过滤一句话中的文字是，首先定义一个过滤器接口\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic interface Filter {\n    String doFilter(String str);\n}\n```\n实现过滤HTML标记\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class HtmlFilter implements Filter {\n    @Override\n    public String doFilter(String str) {\n        String r = str;\n        //过滤msg中的HTML标记\n        r = r.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n        return r;\n    }\n}\n```\n实现敏感词过滤\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class SensitiveFilter implements  Filter {\n    @Override\n    public String doFilter(String str) {\n        String r = str;\n        //过滤敏感词\n        r = r.replace(\"敏感\", \"\").replace(\"被就业\", \"就业\");\n        return r;\n    }\n}\n```\n控制整个链\n```\npackage factory.pattern.chainOfResponsibility;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class FilterChain implements Filter {\n    public List<Filter> filters = new ArrayList<>();\n\n    public FilterChain addFilter(Filter f){\n        filters.add(f);\n        return this;\n    }\n\n    @Override\n    public String doFilter(String str) {\n        String r = str;\n        for(Filter f : filters){\n            r = f.doFilter(r);\n        }\n        return r;\n    }\n}\n```\n测试\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class Test {\n    public static void main(String[] args) {\n        //需要被过滤的语句\n        String str = \"被就业了：），敏感信息，<script>\";\n\n        //搞一个过过滤链\n        FilterChain chain = new FilterChain();\n        chain.addFilter(new HtmlFilter()).addFilter(new SensitiveFilter());\n        String s = chain.doFilter(str);\n        System.out.println(s);\n    }\n}\n```","source":"_posts/Design_pattern/16_chainOfResponsibility.md","raw":"---\ntitle: 责任链模式\ndate: 2017-08-06 21:00:13\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 责任链模式\n---\n\n## 责任链模式\n\n### 介绍\n\n在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求会在这个链上传递，直到链上某一个对象可以处理这个请求。（行为型模式）\n\n### 结构图\n\n责任链模式的结构像下面这样：\n\n![责任链模式](../../../uploads/chainOfResponsibility/1.png)\n\n- 抽象处理者角色（handler）：定义一个处理请求的接口，还可以定义一个后继连接（可选）。\n- 具体处理者角色（ConcreteHandler）：具体处理者接到请求后，如果可以处理就处理请求，如果不能处理就把请求传给下一个继承。\n\n### 优缺点\n\n#### 优点\n\n- 降低耦合度：client发送请求并不需要知道是哪个对象处理的请求。\n- 责任链可简化对象的相互链接：它们仅需保持一个指向其后继者的引用，而不需保持它所有的候选接受者的引用。\n- 增强给对象指派职责的灵活性： 通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。\n- 加新的请求处理类很方便。\n\n#### 缺点\n\n- 不能保证请求一定被处理。\n- 系统性能有一定影响，调试时候不方面，可能造成循环调用。\n\n### DEMO\n\n责任链模式经常用于过滤，如果要过滤一句话中的文字是，首先定义一个过滤器接口\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic interface Filter {\n    String doFilter(String str);\n}\n```\n实现过滤HTML标记\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class HtmlFilter implements Filter {\n    @Override\n    public String doFilter(String str) {\n        String r = str;\n        //过滤msg中的HTML标记\n        r = r.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\");\n        return r;\n    }\n}\n```\n实现敏感词过滤\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class SensitiveFilter implements  Filter {\n    @Override\n    public String doFilter(String str) {\n        String r = str;\n        //过滤敏感词\n        r = r.replace(\"敏感\", \"\").replace(\"被就业\", \"就业\");\n        return r;\n    }\n}\n```\n控制整个链\n```\npackage factory.pattern.chainOfResponsibility;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class FilterChain implements Filter {\n    public List<Filter> filters = new ArrayList<>();\n\n    public FilterChain addFilter(Filter f){\n        filters.add(f);\n        return this;\n    }\n\n    @Override\n    public String doFilter(String str) {\n        String r = str;\n        for(Filter f : filters){\n            r = f.doFilter(r);\n        }\n        return r;\n    }\n}\n```\n测试\n```\npackage factory.pattern.chainOfResponsibility;\n\n/**\n * Created by FK on 2017/8/6.\n */\npublic class Test {\n    public static void main(String[] args) {\n        //需要被过滤的语句\n        String str = \"被就业了：），敏感信息，<script>\";\n\n        //搞一个过过滤链\n        FilterChain chain = new FilterChain();\n        chain.addFilter(new HtmlFilter()).addFilter(new SensitiveFilter());\n        String s = chain.doFilter(str);\n        System.out.println(s);\n    }\n}\n```","slug":"Design_pattern/16_chainOfResponsibility","published":1,"updated":"2020-02-13T14:38:30.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszro000ln0zt67z7or19","content":"<h2 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求会在这个链上传递，直到链上某一个对象可以处理这个请求。（行为型模式）</p>\n<h3 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h3><p>责任链模式的结构像下面这样：</p>\n<p><img src=\"../../../uploads/chainOfResponsibility/1.png\" alt=\"责任链模式\"></p>\n<ul>\n<li>抽象处理者角色（handler）：定义一个处理请求的接口，还可以定义一个后继连接（可选）。</li>\n<li>具体处理者角色（ConcreteHandler）：具体处理者接到请求后，如果可以处理就处理请求，如果不能处理就把请求传给下一个继承。</li>\n</ul>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>降低耦合度：client发送请求并不需要知道是哪个对象处理的请求。</li>\n<li>责任链可简化对象的相互链接：它们仅需保持一个指向其后继者的引用，而不需保持它所有的候选接受者的引用。</li>\n<li>增强给对象指派职责的灵活性： 通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。</li>\n<li>加新的请求处理类很方便。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>不能保证请求一定被处理。</li>\n<li>系统性能有一定影响，调试时候不方面，可能造成循环调用。</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>责任链模式经常用于过滤，如果要过滤一句话中的文字是，首先定义一个过滤器接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public interface Filter &#123;</div><div class=\"line\">    String doFilter(String str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现过滤HTML标记<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class HtmlFilter implements Filter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public String doFilter(String str) &#123;</div><div class=\"line\">        String r = str;</div><div class=\"line\">        //过滤msg中的HTML标记</div><div class=\"line\">        r = r.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;).replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;);</div><div class=\"line\">        return r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现敏感词过滤<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class SensitiveFilter implements  Filter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public String doFilter(String str) &#123;</div><div class=\"line\">        String r = str;</div><div class=\"line\">        //过滤敏感词</div><div class=\"line\">        r = r.replace(&quot;敏感&quot;, &quot;&quot;).replace(&quot;被就业&quot;, &quot;就业&quot;);</div><div class=\"line\">        return r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制整个链<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class FilterChain implements Filter &#123;</div><div class=\"line\">    public List&lt;Filter&gt; filters = new ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    public FilterChain addFilter(Filter f)&#123;</div><div class=\"line\">        filters.add(f);</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String doFilter(String str) &#123;</div><div class=\"line\">        String r = str;</div><div class=\"line\">        for(Filter f : filters)&#123;</div><div class=\"line\">            r = f.doFilter(r);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //需要被过滤的语句</div><div class=\"line\">        String str = &quot;被就业了：），敏感信息，&lt;script&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        //搞一个过过滤链</div><div class=\"line\">        FilterChain chain = new FilterChain();</div><div class=\"line\">        chain.addFilter(new HtmlFilter()).addFilter(new SensitiveFilter());</div><div class=\"line\">        String s = chain.doFilter(str);</div><div class=\"line\">        System.out.println(s);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求会在这个链上传递，直到链上某一个对象可以处理这个请求。（行为型模式）</p>\n<h3 id=\"结构图\"><a href=\"#结构图\" class=\"headerlink\" title=\"结构图\"></a>结构图</h3><p>责任链模式的结构像下面这样：</p>\n<p><img src=\"../../../uploads/chainOfResponsibility/1.png\" alt=\"责任链模式\"></p>\n<ul>\n<li>抽象处理者角色（handler）：定义一个处理请求的接口，还可以定义一个后继连接（可选）。</li>\n<li>具体处理者角色（ConcreteHandler）：具体处理者接到请求后，如果可以处理就处理请求，如果不能处理就把请求传给下一个继承。</li>\n</ul>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>降低耦合度：client发送请求并不需要知道是哪个对象处理的请求。</li>\n<li>责任链可简化对象的相互链接：它们仅需保持一个指向其后继者的引用，而不需保持它所有的候选接受者的引用。</li>\n<li>增强给对象指派职责的灵活性： 通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。</li>\n<li>加新的请求处理类很方便。</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>不能保证请求一定被处理。</li>\n<li>系统性能有一定影响，调试时候不方面，可能造成循环调用。</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>责任链模式经常用于过滤，如果要过滤一句话中的文字是，首先定义一个过滤器接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public interface Filter &#123;</div><div class=\"line\">    String doFilter(String str);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现过滤HTML标记<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class HtmlFilter implements Filter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public String doFilter(String str) &#123;</div><div class=\"line\">        String r = str;</div><div class=\"line\">        //过滤msg中的HTML标记</div><div class=\"line\">        r = r.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;).replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;);</div><div class=\"line\">        return r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>实现敏感词过滤<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class SensitiveFilter implements  Filter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public String doFilter(String str) &#123;</div><div class=\"line\">        String r = str;</div><div class=\"line\">        //过滤敏感词</div><div class=\"line\">        r = r.replace(&quot;敏感&quot;, &quot;&quot;).replace(&quot;被就业&quot;, &quot;就业&quot;);</div><div class=\"line\">        return r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>控制整个链<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class FilterChain implements Filter &#123;</div><div class=\"line\">    public List&lt;Filter&gt; filters = new ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    public FilterChain addFilter(Filter f)&#123;</div><div class=\"line\">        filters.add(f);</div><div class=\"line\">        return this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public String doFilter(String str) &#123;</div><div class=\"line\">        String r = str;</div><div class=\"line\">        for(Filter f : filters)&#123;</div><div class=\"line\">            r = f.doFilter(r);</div><div class=\"line\">        &#125;</div><div class=\"line\">        return r;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.chainOfResponsibility;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/6.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //需要被过滤的语句</div><div class=\"line\">        String str = &quot;被就业了：），敏感信息，&lt;script&gt;&quot;;</div><div class=\"line\"></div><div class=\"line\">        //搞一个过过滤链</div><div class=\"line\">        FilterChain chain = new FilterChain();</div><div class=\"line\">        chain.addFilter(new HtmlFilter()).addFilter(new SensitiveFilter());</div><div class=\"line\">        String s = chain.doFilter(str);</div><div class=\"line\">        System.out.println(s);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"策略模式","date":"2020-02-13T14:52:00.000Z","comments":0,"keywords":["设计模式 策略模式"],"_content":"","source":"_posts/Design_pattern/21_strategy.md","raw":"---\ntitle: 策略模式\ndate: 2020-02-13 22:52\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords:\n- 设计模式 策略模式 \n---","slug":"Design_pattern/21_strategy","published":1,"updated":"2020-02-13T14:53:44.695Z","layout":"post","photos":[],"link":"","_id":"ck6lvszrq000qn0ztdokch5uq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"代理模式","date":"2017-08-03T14:15:23.000Z","keywords":"设计模式 代理模式","_content":"\n## 代理模式\n\n### 介绍\n \n代理模式为其他对象提供一种代理以控制对这个对象的访问。（结构型模式）\n代理模式提供三种角色：\n- 抽象角色：声明真实对象和代理对象的共同接口。\n- 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。\n- 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。\n代理模式对外部提供统一的接口方法，而代理类在接口中实现对真实类的附加操作行为，从而可以在不影响外部调用情况下，进行系统扩展。\n\n### 分类\n\n#### 静态代理\n\n静态代理就是我们自己静态定义的代理类，例如我们要进行图片加载的时候，可以通过一个代理类减少图片对象加载的内存占用：\n\n#### DEMO\n\n图片接口\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic interface Image {\n    void dispalay();\n}\n```\n接口实体类\n\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic class RealImage implements Image {\n    private String fileName;\n\n    public RealImage(String fileName) {\n        this.fileName = fileName;\n        loadFormDisk(fileName);\n    }\n\n    private void loadFormDisk(String fileName) {\n        System.out.println(\"Loading \" + fileName);\n    }\n\n    @Override\n    public void dispalay() {\n        System.out.println(\"Displaying \" + fileName);\n    }\n}\n```\n\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic class ProxyImage implements Image {\n    private RealImage realImage;\n    private String fileNmme;\n\n    public ProxyImage(String fileNmme) {\n        this.fileNmme = fileNmme;\n    }\n\n    @Override\n    public void dispalay() {\n        if( realImage == null){\n            realImage = new RealImage(fileNmme);\n        }\n        realImage.dispalay();\n    }\n}\n```\n\n测试\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Image image = new ProxyImage(\"test.jpg\");\n        image.dispalay();\n        System.out.println();\n        image.dispalay();\n    }\n}\n```\n\n#### 动态代理\n\n动态代理也需要实现接口，是利用JDK的API来实现代理对象的生成，所以动态代理也是JDK代理。\n\n> JDK中生成代理对象的API\n>  代理类所在包:java.lang.reflect.Proxy\n>  JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:\n> ```\n> static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h )\n> ```\n> 注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:\n> \n> - ClassLoader loader,:指定当前目标对象使用类加载器,获取加载器的方法是固定的\n> - Class<?>[] interfaces,:目标对象实现的接口的类型,使用泛型方式确认类型\n> - InvocationHandler h:事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入\n\n#### DEMO \n\n```\npackage factory.pattern.proxy.demo2;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\n/**\n * Created by FK on 2017/8/4.\n */\npublic class ProxyFactory {\n    private Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    public Object getProxyInstance(){\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        Object returnValue = method.invoke(target, args);\n                        return returnValue;\n                    }\n                });\n    }\n}\n```\n\n测试\n\n```\npackage factory.pattern.proxy.demo2;\n\nimport factory.pattern.proxy.demo1.Image;\nimport factory.pattern.proxy.demo1.RealImage;\n\n/**\n * Created by FK on 2017/8/4.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Image image = new RealImage(\"test1.jpg\");\n        System.out.println(image.getClass());\n        Image proxy = (Image) new ProxyFactory(image).getProxyInstance();\n        System.out.println(proxy.getClass());\n        proxy.dispalay();\n    }\n}\n```\n\n### 应用场合\n\n#### 远程代理\n\n就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象存在不同地址空间的事实。\n\n#### 虚拟代理\n\n根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。\n\n> html网页加载的时候图片是下载之后才能看到，未打开的图片框只存放了真实图片的路径和尺寸。\n\n#### 安全代理\n\n安全代理用来控制真实对象访问时的权限。\n\n#### 智能指引\n\n当调用真实的对象时，代理处理另外一些事。\n\n> 计算真是对象的引用次数，当该对象没有引用时，可以自动释放它；或当第一次引用一个持久化对象，将它装载如内存。","source":"_posts/Design_pattern/15_proxy.md","raw":"---\ntitle: 代理模式\ndate: 2017-08-03 22:15:23\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 代理模式\n---\n\n## 代理模式\n\n### 介绍\n \n代理模式为其他对象提供一种代理以控制对这个对象的访问。（结构型模式）\n代理模式提供三种角色：\n- 抽象角色：声明真实对象和代理对象的共同接口。\n- 代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。\n- 真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。\n代理模式对外部提供统一的接口方法，而代理类在接口中实现对真实类的附加操作行为，从而可以在不影响外部调用情况下，进行系统扩展。\n\n### 分类\n\n#### 静态代理\n\n静态代理就是我们自己静态定义的代理类，例如我们要进行图片加载的时候，可以通过一个代理类减少图片对象加载的内存占用：\n\n#### DEMO\n\n图片接口\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic interface Image {\n    void dispalay();\n}\n```\n接口实体类\n\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic class RealImage implements Image {\n    private String fileName;\n\n    public RealImage(String fileName) {\n        this.fileName = fileName;\n        loadFormDisk(fileName);\n    }\n\n    private void loadFormDisk(String fileName) {\n        System.out.println(\"Loading \" + fileName);\n    }\n\n    @Override\n    public void dispalay() {\n        System.out.println(\"Displaying \" + fileName);\n    }\n}\n```\n\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic class ProxyImage implements Image {\n    private RealImage realImage;\n    private String fileNmme;\n\n    public ProxyImage(String fileNmme) {\n        this.fileNmme = fileNmme;\n    }\n\n    @Override\n    public void dispalay() {\n        if( realImage == null){\n            realImage = new RealImage(fileNmme);\n        }\n        realImage.dispalay();\n    }\n}\n```\n\n测试\n```\npackage factory.pattern.proxy.demo1;\n\n/**\n * Created by FK on 2017/8/3.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Image image = new ProxyImage(\"test.jpg\");\n        image.dispalay();\n        System.out.println();\n        image.dispalay();\n    }\n}\n```\n\n#### 动态代理\n\n动态代理也需要实现接口，是利用JDK的API来实现代理对象的生成，所以动态代理也是JDK代理。\n\n> JDK中生成代理对象的API\n>  代理类所在包:java.lang.reflect.Proxy\n>  JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:\n> ```\n> static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces,InvocationHandler h )\n> ```\n> 注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:\n> \n> - ClassLoader loader,:指定当前目标对象使用类加载器,获取加载器的方法是固定的\n> - Class<?>[] interfaces,:目标对象实现的接口的类型,使用泛型方式确认类型\n> - InvocationHandler h:事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入\n\n#### DEMO \n\n```\npackage factory.pattern.proxy.demo2;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\n/**\n * Created by FK on 2017/8/4.\n */\npublic class ProxyFactory {\n    private Object target;\n\n    public ProxyFactory(Object target) {\n        this.target = target;\n    }\n\n    public Object getProxyInstance(){\n        return Proxy.newProxyInstance(target.getClass().getClassLoader(),\n                target.getClass().getInterfaces(),\n                new InvocationHandler() {\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n                        Object returnValue = method.invoke(target, args);\n                        return returnValue;\n                    }\n                });\n    }\n}\n```\n\n测试\n\n```\npackage factory.pattern.proxy.demo2;\n\nimport factory.pattern.proxy.demo1.Image;\nimport factory.pattern.proxy.demo1.RealImage;\n\n/**\n * Created by FK on 2017/8/4.\n */\npublic class Test {\n    public static void main(String[] args) {\n        Image image = new RealImage(\"test1.jpg\");\n        System.out.println(image.getClass());\n        Image proxy = (Image) new ProxyFactory(image).getProxyInstance();\n        System.out.println(proxy.getClass());\n        proxy.dispalay();\n    }\n}\n```\n\n### 应用场合\n\n#### 远程代理\n\n就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象存在不同地址空间的事实。\n\n#### 虚拟代理\n\n根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。\n\n> html网页加载的时候图片是下载之后才能看到，未打开的图片框只存放了真实图片的路径和尺寸。\n\n#### 安全代理\n\n安全代理用来控制真实对象访问时的权限。\n\n#### 智能指引\n\n当调用真实的对象时，代理处理另外一些事。\n\n> 计算真是对象的引用次数，当该对象没有引用时，可以自动释放它；或当第一次引用一个持久化对象，将它装载如内存。","slug":"Design_pattern/15_proxy","published":1,"updated":"2020-01-09T06:55:59.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrr000tn0zt65n03d9y","content":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>代理模式为其他对象提供一种代理以控制对这个对象的访问。（结构型模式）<br>代理模式提供三种角色：</p>\n<ul>\n<li>抽象角色：声明真实对象和代理对象的共同接口。</li>\n<li>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</li>\n<li>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。<br>代理模式对外部提供统一的接口方法，而代理类在接口中实现对真实类的附加操作行为，从而可以在不影响外部调用情况下，进行系统扩展。</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><p>静态代理就是我们自己静态定义的代理类，例如我们要进行图片加载的时候，可以通过一个代理类减少图片对象加载的内存占用：</p>\n<h4 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><p>图片接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public interface Image &#123;</div><div class=\"line\">    void dispalay();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接口实体类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public class RealImage implements Image &#123;</div><div class=\"line\">    private String fileName;</div><div class=\"line\"></div><div class=\"line\">    public RealImage(String fileName) &#123;</div><div class=\"line\">        this.fileName = fileName;</div><div class=\"line\">        loadFormDisk(fileName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void loadFormDisk(String fileName) &#123;</div><div class=\"line\">        System.out.println(&quot;Loading &quot; + fileName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void dispalay() &#123;</div><div class=\"line\">        System.out.println(&quot;Displaying &quot; + fileName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public class ProxyImage implements Image &#123;</div><div class=\"line\">    private RealImage realImage;</div><div class=\"line\">    private String fileNmme;</div><div class=\"line\"></div><div class=\"line\">    public ProxyImage(String fileNmme) &#123;</div><div class=\"line\">        this.fileNmme = fileNmme;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void dispalay() &#123;</div><div class=\"line\">        if( realImage == null)&#123;</div><div class=\"line\">            realImage = new RealImage(fileNmme);</div><div class=\"line\">        &#125;</div><div class=\"line\">        realImage.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Image image = new ProxyImage(&quot;test.jpg&quot;);</div><div class=\"line\">        image.dispalay();</div><div class=\"line\">        System.out.println();</div><div class=\"line\">        image.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h4><p>动态代理也需要实现接口，是利用JDK的API来实现代理对象的生成，所以动态代理也是JDK代理。</p>\n<blockquote>\n<p>JDK中生成代理对象的API<br> 代理类所在包:java.lang.reflect.Proxy<br> JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:</p>\n<ul>\n<li>ClassLoader loader,:指定当前目标对象使用类加载器,获取加载器的方法是固定的</li>\n<li>Class&lt;?&gt;[] interfaces,:目标对象实现的接口的类型,使用泛型方式确认类型</li>\n<li>InvocationHandler h:事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入</li>\n</ul>\n</blockquote>\n<h4 id=\"DEMO-1\"><a href=\"#DEMO-1\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo2;</div><div class=\"line\"></div><div class=\"line\">import java.lang.reflect.InvocationHandler;</div><div class=\"line\">import java.lang.reflect.Method;</div><div class=\"line\">import java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/4.</div><div class=\"line\"> */</div><div class=\"line\">public class ProxyFactory &#123;</div><div class=\"line\">    private Object target;</div><div class=\"line\"></div><div class=\"line\">    public ProxyFactory(Object target) &#123;</div><div class=\"line\">        this.target = target;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Object getProxyInstance()&#123;</div><div class=\"line\">        return Proxy.newProxyInstance(target.getClass().getClassLoader(),</div><div class=\"line\">                target.getClass().getInterfaces(),</div><div class=\"line\">                new InvocationHandler() &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</div><div class=\"line\">                        Object returnValue = method.invoke(target, args);</div><div class=\"line\">                        return returnValue;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo2;</div><div class=\"line\"></div><div class=\"line\">import factory.pattern.proxy.demo1.Image;</div><div class=\"line\">import factory.pattern.proxy.demo1.RealImage;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/4.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Image image = new RealImage(&quot;test1.jpg&quot;);</div><div class=\"line\">        System.out.println(image.getClass());</div><div class=\"line\">        Image proxy = (Image) new ProxyFactory(image).getProxyInstance();</div><div class=\"line\">        System.out.println(proxy.getClass());</div><div class=\"line\">        proxy.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"应用场合\"><a href=\"#应用场合\" class=\"headerlink\" title=\"应用场合\"></a>应用场合</h3><h4 id=\"远程代理\"><a href=\"#远程代理\" class=\"headerlink\" title=\"远程代理\"></a>远程代理</h4><p>就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象存在不同地址空间的事实。</p>\n<h4 id=\"虚拟代理\"><a href=\"#虚拟代理\" class=\"headerlink\" title=\"虚拟代理\"></a>虚拟代理</h4><p>根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。</p>\n<blockquote>\n<p>html网页加载的时候图片是下载之后才能看到，未打开的图片框只存放了真实图片的路径和尺寸。</p>\n</blockquote>\n<h4 id=\"安全代理\"><a href=\"#安全代理\" class=\"headerlink\" title=\"安全代理\"></a>安全代理</h4><p>安全代理用来控制真实对象访问时的权限。</p>\n<h4 id=\"智能指引\"><a href=\"#智能指引\" class=\"headerlink\" title=\"智能指引\"></a>智能指引</h4><p>当调用真实的对象时，代理处理另外一些事。</p>\n<blockquote>\n<p>计算真是对象的引用次数，当该对象没有引用时，可以自动释放它；或当第一次引用一个持久化对象，将它装载如内存。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>代理模式为其他对象提供一种代理以控制对这个对象的访问。（结构型模式）<br>代理模式提供三种角色：</p>\n<ul>\n<li>抽象角色：声明真实对象和代理对象的共同接口。</li>\n<li>代理角色：代理对象角色内部含有对真实对象的引用，从而可以操作真实对象，同时代理对象提供与真实对象相同的接口以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他的操作，相当于对真实对象进行封装。</li>\n<li>真实角色：代理角色所代表的真实对象，是我们最终要引用的对象。<br>代理模式对外部提供统一的接口方法，而代理类在接口中实现对真实类的附加操作行为，从而可以在不影响外部调用情况下，进行系统扩展。</li>\n</ul>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><h4 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h4><p>静态代理就是我们自己静态定义的代理类，例如我们要进行图片加载的时候，可以通过一个代理类减少图片对象加载的内存占用：</p>\n<h4 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><p>图片接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public interface Image &#123;</div><div class=\"line\">    void dispalay();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>接口实体类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public class RealImage implements Image &#123;</div><div class=\"line\">    private String fileName;</div><div class=\"line\"></div><div class=\"line\">    public RealImage(String fileName) &#123;</div><div class=\"line\">        this.fileName = fileName;</div><div class=\"line\">        loadFormDisk(fileName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void loadFormDisk(String fileName) &#123;</div><div class=\"line\">        System.out.println(&quot;Loading &quot; + fileName);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void dispalay() &#123;</div><div class=\"line\">        System.out.println(&quot;Displaying &quot; + fileName);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public class ProxyImage implements Image &#123;</div><div class=\"line\">    private RealImage realImage;</div><div class=\"line\">    private String fileNmme;</div><div class=\"line\"></div><div class=\"line\">    public ProxyImage(String fileNmme) &#123;</div><div class=\"line\">        this.fileNmme = fileNmme;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void dispalay() &#123;</div><div class=\"line\">        if( realImage == null)&#123;</div><div class=\"line\">            realImage = new RealImage(fileNmme);</div><div class=\"line\">        &#125;</div><div class=\"line\">        realImage.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo1;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/3.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Image image = new ProxyImage(&quot;test.jpg&quot;);</div><div class=\"line\">        image.dispalay();</div><div class=\"line\">        System.out.println();</div><div class=\"line\">        image.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h4><p>动态代理也需要实现接口，是利用JDK的API来实现代理对象的生成，所以动态代理也是JDK代理。</p>\n<blockquote>\n<p>JDK中生成代理对象的API<br> 代理类所在包:java.lang.reflect.Proxy<br> JDK实现代理只需要使用newProxyInstance方法,但是该方法需要接收三个参数,完整的写法是:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,InvocationHandler h )</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>注意该方法是在Proxy类中是静态方法,且接收的三个参数依次为:</p>\n<ul>\n<li>ClassLoader loader,:指定当前目标对象使用类加载器,获取加载器的方法是固定的</li>\n<li>Class&lt;?&gt;[] interfaces,:目标对象实现的接口的类型,使用泛型方式确认类型</li>\n<li>InvocationHandler h:事件处理,执行目标对象的方法时,会触发事件处理器的方法,会把当前执行目标对象的方法作为参数传入</li>\n</ul>\n</blockquote>\n<h4 id=\"DEMO-1\"><a href=\"#DEMO-1\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo2;</div><div class=\"line\"></div><div class=\"line\">import java.lang.reflect.InvocationHandler;</div><div class=\"line\">import java.lang.reflect.Method;</div><div class=\"line\">import java.lang.reflect.Proxy;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/4.</div><div class=\"line\"> */</div><div class=\"line\">public class ProxyFactory &#123;</div><div class=\"line\">    private Object target;</div><div class=\"line\"></div><div class=\"line\">    public ProxyFactory(Object target) &#123;</div><div class=\"line\">        this.target = target;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Object getProxyInstance()&#123;</div><div class=\"line\">        return Proxy.newProxyInstance(target.getClass().getClassLoader(),</div><div class=\"line\">                target.getClass().getInterfaces(),</div><div class=\"line\">                new InvocationHandler() &#123;</div><div class=\"line\">                    @Override</div><div class=\"line\">                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</div><div class=\"line\">                        Object returnValue = method.invoke(target, args);</div><div class=\"line\">                        return returnValue;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.proxy.demo2;</div><div class=\"line\"></div><div class=\"line\">import factory.pattern.proxy.demo1.Image;</div><div class=\"line\">import factory.pattern.proxy.demo1.RealImage;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/4.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Image image = new RealImage(&quot;test1.jpg&quot;);</div><div class=\"line\">        System.out.println(image.getClass());</div><div class=\"line\">        Image proxy = (Image) new ProxyFactory(image).getProxyInstance();</div><div class=\"line\">        System.out.println(proxy.getClass());</div><div class=\"line\">        proxy.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"应用场合\"><a href=\"#应用场合\" class=\"headerlink\" title=\"应用场合\"></a>应用场合</h3><h4 id=\"远程代理\"><a href=\"#远程代理\" class=\"headerlink\" title=\"远程代理\"></a>远程代理</h4><p>就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象存在不同地址空间的事实。</p>\n<h4 id=\"虚拟代理\"><a href=\"#虚拟代理\" class=\"headerlink\" title=\"虚拟代理\"></a>虚拟代理</h4><p>根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。</p>\n<blockquote>\n<p>html网页加载的时候图片是下载之后才能看到，未打开的图片框只存放了真实图片的路径和尺寸。</p>\n</blockquote>\n<h4 id=\"安全代理\"><a href=\"#安全代理\" class=\"headerlink\" title=\"安全代理\"></a>安全代理</h4><p>安全代理用来控制真实对象访问时的权限。</p>\n<h4 id=\"智能指引\"><a href=\"#智能指引\" class=\"headerlink\" title=\"智能指引\"></a>智能指引</h4><p>当调用真实的对象时，代理处理另外一些事。</p>\n<blockquote>\n<p>计算真是对象的引用次数，当该对象没有引用时，可以自动释放它；或当第一次引用一个持久化对象，将它装载如内存。</p>\n</blockquote>\n"},{"title":"模板模式","date":"2020-02-13T14:52:00.000Z","comments":0,"keywords":["设计模式 模板模式"],"_content":"","source":"_posts/Design_pattern/20_template.md","raw":"---\ntitle: 模板模式\ndate: 2020-02-13 22:52\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords:\n- 设计模式 模板模式 \n---","slug":"Design_pattern/20_template","published":1,"updated":"2020-02-13T14:53:32.835Z","layout":"post","photos":[],"link":"","_id":"ck6lvszrs000wn0zt4mzjwxqx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"设计模式","date":"2017-06-16T13:09:10.000Z","comments":0,"keywords":"设计模式","_content":"\n## 设计模式\n设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。\n使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。\n\n## 设计原则\n\n### 开闭原则\n\n模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）\n\n### 里氏替换原则\n\n任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（子类可以扩展父类但不能改变父类的功能）（里氏替换原则可以说继承复用的基础）\n\n### 依赖倒转原则\n\n程序要依赖于抽象接口，不要依赖于具体实现。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。\n\n### 接口隔离原则\n\n使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。\n\n### 最少知道原则（迪米特法则）\n\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。\n\n### 合成复用原则\n\n尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。\n\n## 设计模式的分类\n\n- **创建型模式**：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。\n- **结构型模式**：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n- **行为型模式**：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。\n- **J2EE模式**：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。\n\n\n![design_patterns](../../../uploads/design-patterns.jpg)(图片来自菜鸟教程)","source":"_posts/Design_pattern/1_start.md","raw":"---\ntitle: 设计模式\ndate: 2017-06-16 21:09:10\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式\n---\n\n## 设计模式\n设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。\n使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。\n\n## 设计原则\n\n### 开闭原则\n\n模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）\n\n### 里氏替换原则\n\n任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（子类可以扩展父类但不能改变父类的功能）（里氏替换原则可以说继承复用的基础）\n\n### 依赖倒转原则\n\n程序要依赖于抽象接口，不要依赖于具体实现。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。\n\n### 接口隔离原则\n\n使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。\n\n### 最少知道原则（迪米特法则）\n\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。\n\n### 合成复用原则\n\n尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。\n\n## 设计模式的分类\n\n- **创建型模式**：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。\n- **结构型模式**：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n- **行为型模式**：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。\n- **J2EE模式**：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。\n\n\n![design_patterns](../../../uploads/design-patterns.jpg)(图片来自菜鸟教程)","slug":"Design_pattern/1_start","published":1,"updated":"2020-01-02T05:49:23.750Z","layout":"post","photos":[],"link":"","_id":"ck6lvszrt000zn0ztv4d4lxok","content":"<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。<br>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><p>模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）</p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（子类可以扩展父类但不能改变父类的功能）（里氏替换原则可以说继承复用的基础）</p>\n<h3 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h3><p>程序要依赖于抽象接口，不要依赖于具体实现。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。</p>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><p>使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。</p>\n<h3 id=\"最少知道原则（迪米特法则）\"><a href=\"#最少知道原则（迪米特法则）\" class=\"headerlink\" title=\"最少知道原则（迪米特法则）\"></a>最少知道原则（迪米特法则）</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。</p>\n<h3 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h3><p>尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><ul>\n<li><strong>创建型模式</strong>：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</li>\n<li><strong>结构型模式</strong>：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li>\n<li><strong>行为型模式</strong>：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。</li>\n<li><strong>J2EE模式</strong>：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。</li>\n</ul>\n<p><img src=\"../../../uploads/design-patterns.jpg\" alt=\"design_patterns\">(图片来自菜鸟教程)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。<br>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><p>模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）</p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（子类可以扩展父类但不能改变父类的功能）（里氏替换原则可以说继承复用的基础）</p>\n<h3 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h3><p>程序要依赖于抽象接口，不要依赖于具体实现。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。</p>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><p>使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。</p>\n<h3 id=\"最少知道原则（迪米特法则）\"><a href=\"#最少知道原则（迪米特法则）\" class=\"headerlink\" title=\"最少知道原则（迪米特法则）\"></a>最少知道原则（迪米特法则）</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。</p>\n<h3 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h3><p>尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><ul>\n<li><strong>创建型模式</strong>：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</li>\n<li><strong>结构型模式</strong>：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li>\n<li><strong>行为型模式</strong>：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。</li>\n<li><strong>J2EE模式</strong>：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。</li>\n</ul>\n<p><img src=\"../../../uploads/design-patterns.jpg\" alt=\"design_patterns\">(图片来自菜鸟教程)</p>\n"},{"title":"设计模式——工厂模式","date":"2017-06-17T13:21:50.000Z","comments":0,"keywords":"设计模式 工厂模式","_content":"\n## 工厂模式\n\n### 介绍\n\n定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）\n\n### 使用场景\n\n例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。\n\n- 优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。\n- 缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）\n\n### DEMO\n\n工厂模式比较简单，就写个最常用的例子：图形。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic interface Shape {\n    void draw();\n}\n\n```\n创建 shape抽象类\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\nrectangle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\ncircle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Square : draw()\");\n    }\n}\n\n```\nsquare实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class ShapeFactory {\n\n    public Shape getShape(String shapeType){\n        if(shapeType == null){\n            return null;\n        }\n        if(shapeType.equalsIgnoreCase(\"CIRCLE\")){\n            return new Circle();\n        } else if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\n            return new Rectangle();\n        } else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\n            return new Square();\n        }\n        return null;\n    }\n\n}\n```\n创建一个工厂，生成基于给传入值的实体类的对象。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class FactoryPattern {\n    public static void main(String[] args) {\n        ShapeFactory shapeFactory = new ShapeFactory();\n        Shape circle = shapeFactory.getShape(\"CIRCLE\");\n        //调用 Circle 的 draw 方法\n        circle.draw();\n        Shape rectangle = shapeFactory.getShape(\"RECTANGLE\");\n        //调用 Rectangle 的 draw 方法\n        rectangle.draw();\n        Shape square = shapeFactory.getShape(\"SQUARE\");\n        //调用 Square 的 draw 方法\n        square.draw();\n    }\n}\n```\n写个demo来测试下输出是否实现了工厂模式，输出如下：\n```\nCircle : draw()\nRectangle : draw()\nSquare : draw()\n```","source":"_posts/Design_pattern/2_factory_pattern.md","raw":"---\ntitle: 设计模式——工厂模式\ndate: 2017-06-17 21:21:50\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 工厂模式\n---\n\n## 工厂模式\n\n### 介绍\n\n定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）\n\n### 使用场景\n\n例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。\n\n- 优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。\n- 缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）\n\n### DEMO\n\n工厂模式比较简单，就写个最常用的例子：图形。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic interface Shape {\n    void draw();\n}\n\n```\n创建 shape抽象类\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\nrectangle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\ncircle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Square : draw()\");\n    }\n}\n\n```\nsquare实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class ShapeFactory {\n\n    public Shape getShape(String shapeType){\n        if(shapeType == null){\n            return null;\n        }\n        if(shapeType.equalsIgnoreCase(\"CIRCLE\")){\n            return new Circle();\n        } else if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\n            return new Rectangle();\n        } else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\n            return new Square();\n        }\n        return null;\n    }\n\n}\n```\n创建一个工厂，生成基于给传入值的实体类的对象。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class FactoryPattern {\n    public static void main(String[] args) {\n        ShapeFactory shapeFactory = new ShapeFactory();\n        Shape circle = shapeFactory.getShape(\"CIRCLE\");\n        //调用 Circle 的 draw 方法\n        circle.draw();\n        Shape rectangle = shapeFactory.getShape(\"RECTANGLE\");\n        //调用 Rectangle 的 draw 方法\n        rectangle.draw();\n        Shape square = shapeFactory.getShape(\"SQUARE\");\n        //调用 Square 的 draw 方法\n        square.draw();\n    }\n}\n```\n写个demo来测试下输出是否实现了工厂模式，输出如下：\n```\nCircle : draw()\nRectangle : draw()\nSquare : draw()\n```","slug":"Design_pattern/2_factory_pattern","published":1,"updated":"2020-01-02T05:49:23.750Z","layout":"post","photos":[],"link":"","_id":"ck6lvszru0012n0ztatfexnkm","content":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。</p>\n<ul>\n<li>优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。</li>\n<li>缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>工厂模式比较简单，就写个最常用的例子：图形。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 shape抽象类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>rectangle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>circle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Square implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Square : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>square实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public Shape getShape(String shapeType)&#123;</div><div class=\"line\">        if(shapeType == null)&#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;SQUARE&quot;))&#123;</div><div class=\"line\">            return new Square();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建一个工厂，生成基于给传入值的实体类的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryPattern &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        ShapeFactory shapeFactory = new ShapeFactory();</div><div class=\"line\">        Shape circle = shapeFactory.getShape(&quot;CIRCLE&quot;);</div><div class=\"line\">        //调用 Circle 的 draw 方法</div><div class=\"line\">        circle.draw();</div><div class=\"line\">        Shape rectangle = shapeFactory.getShape(&quot;RECTANGLE&quot;);</div><div class=\"line\">        //调用 Rectangle 的 draw 方法</div><div class=\"line\">        rectangle.draw();</div><div class=\"line\">        Shape square = shapeFactory.getShape(&quot;SQUARE&quot;);</div><div class=\"line\">        //调用 Square 的 draw 方法</div><div class=\"line\">        square.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>写个demo来测试下输出是否实现了工厂模式，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Square : draw()</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。</p>\n<ul>\n<li>优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。</li>\n<li>缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>工厂模式比较简单，就写个最常用的例子：图形。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 shape抽象类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>rectangle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>circle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Square implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Square : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>square实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public Shape getShape(String shapeType)&#123;</div><div class=\"line\">        if(shapeType == null)&#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;SQUARE&quot;))&#123;</div><div class=\"line\">            return new Square();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建一个工厂，生成基于给传入值的实体类的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryPattern &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        ShapeFactory shapeFactory = new ShapeFactory();</div><div class=\"line\">        Shape circle = shapeFactory.getShape(&quot;CIRCLE&quot;);</div><div class=\"line\">        //调用 Circle 的 draw 方法</div><div class=\"line\">        circle.draw();</div><div class=\"line\">        Shape rectangle = shapeFactory.getShape(&quot;RECTANGLE&quot;);</div><div class=\"line\">        //调用 Rectangle 的 draw 方法</div><div class=\"line\">        rectangle.draw();</div><div class=\"line\">        Shape square = shapeFactory.getShape(&quot;SQUARE&quot;);</div><div class=\"line\">        //调用 Square 的 draw 方法</div><div class=\"line\">        square.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>写个demo来测试下输出是否实现了工厂模式，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Square : draw()</div></pre></td></tr></table></figure></p>\n"},{"title":"抽象工厂模式","date":"2017-06-18T06:39:16.000Z","comments":0,"keywords":"设计模式 抽象工厂模式","_content":"## 抽象工厂模式\n\n### 介绍\n\n为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）\n\n### 和工厂模式区别\n\n工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。\n\n> QQ换皮肤可以使用抽象工厂模式\n\n**优点**：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n**缺点**：扩展非常麻烦，需要修改很多代码。\n\n### DEMO\n\n可以在前一个例子上给图形增加颜色，就相当于一个产品族了：\n\n先创建一个图形和颜色的接口类：\n\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Color {\n    void fill();\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Shape {\n    void draw();\n}\n```\n\n然后分别实现各自两个类进行测试：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Black implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Black : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Red implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Red : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\n\n然后实现工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic abstract class AbstractFactory {\n    abstract Color getColorFactory(String color);\n    abstract Shape getShapeFactory(String shape);\n}\n```\n然后扩展工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ShapeFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        return null;\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        if(shape == null) {\n            return null;\n        }\n        if (\"rectangle\".equals(shape)){\n            return new Rectangle();\n        }else if (\"circle\".equals(shape)){\n            return new Circle();\n        }else {\n            return null;\n        }\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ColorFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        if(color == null) {\n            return null;\n        }\n        if(\"red\".equals(color)){\n            return new Red();\n        }else if(\"black\".equals(color)){\n            return new Black();\n        }else {\n            return null;\n        }\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        return null;\n    }\n}\n```\n然后写一个工厂创造器：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice){\n        if(choice.equalsIgnoreCase(\"shape\")){\n            return new ShapeFactory();\n        } else if(choice.equalsIgnoreCase(\"color\")){\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n最后写一个测试类来试试输出：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class AbstractFactoryPattern {\n\n    public static void main(String[] args) {\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"shape\");\n        Shape shape1 = shapeFactory.getShapeFactory(\"circle\");\n        shape1.draw();\n        Shape shape2 = shapeFactory.getShapeFactory(\"rectangle\");\n        shape2.draw();\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"color\");\n        Color color1 = colorFactory.getColorFactory(\"red\");\n        color1.fill();\n        Color color2 = colorFactory.getColorFactory(\"black\");\n        color2.fill();\n    }\n\n}\n```\n\n输出如果如下:\n```\nCircle : draw()\nRectangle : draw()\nRed : fill()\nBlack : fill()\n```","source":"_posts/Design_pattern/3_abstract-factory-pattern.md","raw":"---\ntitle: 抽象工厂模式\ndate: 2017-06-18 14:39:16\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 抽象工厂模式\n---\n## 抽象工厂模式\n\n### 介绍\n\n为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）\n\n### 和工厂模式区别\n\n工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。\n\n> QQ换皮肤可以使用抽象工厂模式\n\n**优点**：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n**缺点**：扩展非常麻烦，需要修改很多代码。\n\n### DEMO\n\n可以在前一个例子上给图形增加颜色，就相当于一个产品族了：\n\n先创建一个图形和颜色的接口类：\n\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Color {\n    void fill();\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Shape {\n    void draw();\n}\n```\n\n然后分别实现各自两个类进行测试：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Black implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Black : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Red implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Red : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\n\n然后实现工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic abstract class AbstractFactory {\n    abstract Color getColorFactory(String color);\n    abstract Shape getShapeFactory(String shape);\n}\n```\n然后扩展工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ShapeFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        return null;\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        if(shape == null) {\n            return null;\n        }\n        if (\"rectangle\".equals(shape)){\n            return new Rectangle();\n        }else if (\"circle\".equals(shape)){\n            return new Circle();\n        }else {\n            return null;\n        }\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ColorFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        if(color == null) {\n            return null;\n        }\n        if(\"red\".equals(color)){\n            return new Red();\n        }else if(\"black\".equals(color)){\n            return new Black();\n        }else {\n            return null;\n        }\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        return null;\n    }\n}\n```\n然后写一个工厂创造器：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice){\n        if(choice.equalsIgnoreCase(\"shape\")){\n            return new ShapeFactory();\n        } else if(choice.equalsIgnoreCase(\"color\")){\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n最后写一个测试类来试试输出：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class AbstractFactoryPattern {\n\n    public static void main(String[] args) {\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"shape\");\n        Shape shape1 = shapeFactory.getShapeFactory(\"circle\");\n        shape1.draw();\n        Shape shape2 = shapeFactory.getShapeFactory(\"rectangle\");\n        shape2.draw();\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"color\");\n        Color color1 = colorFactory.getColorFactory(\"red\");\n        color1.fill();\n        Color color2 = colorFactory.getColorFactory(\"black\");\n        color2.fill();\n    }\n\n}\n```\n\n输出如果如下:\n```\nCircle : draw()\nRectangle : draw()\nRed : fill()\nBlack : fill()\n```","slug":"Design_pattern/3_abstract-factory-pattern","published":1,"updated":"2020-01-02T05:49:23.751Z","layout":"post","photos":[],"link":"","_id":"ck6lvszrv0015n0zt27ys9ap4","content":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）</p>\n<h3 id=\"和工厂模式区别\"><a href=\"#和工厂模式区别\" class=\"headerlink\" title=\"和工厂模式区别\"></a>和工厂模式区别</h3><p>工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。</p>\n<blockquote>\n<p>QQ换皮肤可以使用抽象工厂模式</p>\n</blockquote>\n<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：扩展非常麻烦，需要修改很多代码。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>可以在前一个例子上给图形增加颜色，就相当于一个产品族了：</p>\n<p>先创建一个图形和颜色的接口类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Color &#123;</div><div class=\"line\">    void fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后分别实现各自两个类进行测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Black implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Black : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Red implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Red : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后实现工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class AbstractFactory &#123;</div><div class=\"line\">    abstract Color getColorFactory(String color);</div><div class=\"line\">    abstract Shape getShapeFactory(String shape);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后扩展工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        if(shape == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (&quot;rectangle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125;else if (&quot;circle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ColorFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        if(color == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(&quot;red&quot;.equals(color))&#123;</div><div class=\"line\">            return new Red();</div><div class=\"line\">        &#125;else if(&quot;black&quot;.equals(color))&#123;</div><div class=\"line\">            return new Black();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后写一个工厂创造器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryProducer &#123;</div><div class=\"line\">    public static AbstractFactory getFactory(String choice)&#123;</div><div class=\"line\">        if(choice.equalsIgnoreCase(&quot;shape&quot;))&#123;</div><div class=\"line\">            return new ShapeFactory();</div><div class=\"line\">        &#125; else if(choice.equalsIgnoreCase(&quot;color&quot;))&#123;</div><div class=\"line\">            return new ColorFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后写一个测试类来试试输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class AbstractFactoryPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        AbstractFactory shapeFactory = FactoryProducer.getFactory(&quot;shape&quot;);</div><div class=\"line\">        Shape shape1 = shapeFactory.getShapeFactory(&quot;circle&quot;);</div><div class=\"line\">        shape1.draw();</div><div class=\"line\">        Shape shape2 = shapeFactory.getShapeFactory(&quot;rectangle&quot;);</div><div class=\"line\">        shape2.draw();</div><div class=\"line\">        AbstractFactory colorFactory = FactoryProducer.getFactory(&quot;color&quot;);</div><div class=\"line\">        Color color1 = colorFactory.getColorFactory(&quot;red&quot;);</div><div class=\"line\">        color1.fill();</div><div class=\"line\">        Color color2 = colorFactory.getColorFactory(&quot;black&quot;);</div><div class=\"line\">        color2.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出如果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Red : fill()</div><div class=\"line\">Black : fill()</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）</p>\n<h3 id=\"和工厂模式区别\"><a href=\"#和工厂模式区别\" class=\"headerlink\" title=\"和工厂模式区别\"></a>和工厂模式区别</h3><p>工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。</p>\n<blockquote>\n<p>QQ换皮肤可以使用抽象工厂模式</p>\n</blockquote>\n<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：扩展非常麻烦，需要修改很多代码。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>可以在前一个例子上给图形增加颜色，就相当于一个产品族了：</p>\n<p>先创建一个图形和颜色的接口类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Color &#123;</div><div class=\"line\">    void fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后分别实现各自两个类进行测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Black implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Black : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Red implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Red : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后实现工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class AbstractFactory &#123;</div><div class=\"line\">    abstract Color getColorFactory(String color);</div><div class=\"line\">    abstract Shape getShapeFactory(String shape);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后扩展工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        if(shape == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (&quot;rectangle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125;else if (&quot;circle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ColorFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        if(color == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(&quot;red&quot;.equals(color))&#123;</div><div class=\"line\">            return new Red();</div><div class=\"line\">        &#125;else if(&quot;black&quot;.equals(color))&#123;</div><div class=\"line\">            return new Black();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后写一个工厂创造器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryProducer &#123;</div><div class=\"line\">    public static AbstractFactory getFactory(String choice)&#123;</div><div class=\"line\">        if(choice.equalsIgnoreCase(&quot;shape&quot;))&#123;</div><div class=\"line\">            return new ShapeFactory();</div><div class=\"line\">        &#125; else if(choice.equalsIgnoreCase(&quot;color&quot;))&#123;</div><div class=\"line\">            return new ColorFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后写一个测试类来试试输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class AbstractFactoryPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        AbstractFactory shapeFactory = FactoryProducer.getFactory(&quot;shape&quot;);</div><div class=\"line\">        Shape shape1 = shapeFactory.getShapeFactory(&quot;circle&quot;);</div><div class=\"line\">        shape1.draw();</div><div class=\"line\">        Shape shape2 = shapeFactory.getShapeFactory(&quot;rectangle&quot;);</div><div class=\"line\">        shape2.draw();</div><div class=\"line\">        AbstractFactory colorFactory = FactoryProducer.getFactory(&quot;color&quot;);</div><div class=\"line\">        Color color1 = colorFactory.getColorFactory(&quot;red&quot;);</div><div class=\"line\">        color1.fill();</div><div class=\"line\">        Color color2 = colorFactory.getColorFactory(&quot;black&quot;);</div><div class=\"line\">        color2.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出如果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Red : fill()</div><div class=\"line\">Black : fill()</div></pre></td></tr></table></figure></p>\n"},{"title":"单例模式","date":"2017-06-19T04:18:25.000Z","comments":0,"keywords":"设计模式 单例模式","_content":"\n## 单例模式\n\n### 定义\n一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)\n设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:\n\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n### 使用场景\n- 需要频繁实例化然后销毁的对象。\n- 创建对象时耗时过多或者耗资源过多，但又经常用到的对象。\n- 有状态的工具类对象。\n- 频繁访问数据库或文件的对象。\n\n### 单例模式的实现\n\n单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.\n\n#### 懒汉式典型实现\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazy {\n    private static SingletonLazy singletonLazy;\n    private SingletonLazy (){}\n    public static SingletonLazy getInstance(){\n        if( singletonLazy == null){\n            singletonLazy = new SingletonLazy();\n        }\n        return singletonLazy;\n    }\n}\n```\n懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.\n\n#### 懒汉式线程安全形式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazeSafe {\n    private static SingletonLazeSafe singletonLazeSafe;\n    private SingletonLazeSafe(){}\n    public static synchronized SingletonLazeSafe getInstance(){\n        if(singletonLazeSafe == null){\n            singletonLazeSafe = new SingletonLazeSafe();\n        }\n        return singletonLazeSafe;\n    }\n}\n```\n懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.\n\n#### 饿汉式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonHungary {\n    private static SingletonHungary singletonHungary = new SingletonHungary();\n    private SingletonHungary(){}\n    public static SingletonHungary getInstance(){\n        return singletonHungary;\n    }\n}\n```\n饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.\n\n#### ~~双重校验锁~~\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class DoubleCheckedLocking {\n    private static DoubleCheckedLocking doubleCheckedLocking;\n    private DoubleCheckedLocking(){}\n    public DoubleCheckedLocking getInstance(){\n        if(doubleCheckedLocking == null){\n            synchronized (DoubleCheckedLocking.class){\n                if(doubleCheckedLocking == null){\n                    doubleCheckedLocking = new DoubleCheckedLocking();\n                }\n            }\n        }\n        return doubleCheckedLocking;\n    }\n}\n```\n这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.\n但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.\n(双重检查锁定的问题下次专门写个文章)\n\n#### 静态内部类\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.\n\n#### 枚举的方式\n````\npublic enum EnumSingleton {\n    INSTANCE;\n}\n````\n枚举的方式最简单，又是线程安全的（默认枚举实例的创建是线程安全的）\n","source":"_posts/Design_pattern/4_singleton-pattern.md","raw":"---\ntitle: 单例模式\ndate: 2017-06-19 12:18:25\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 单例模式\n---\n\n## 单例模式\n\n### 定义\n一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)\n设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:\n\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n### 使用场景\n- 需要频繁实例化然后销毁的对象。\n- 创建对象时耗时过多或者耗资源过多，但又经常用到的对象。\n- 有状态的工具类对象。\n- 频繁访问数据库或文件的对象。\n\n### 单例模式的实现\n\n单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.\n\n#### 懒汉式典型实现\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazy {\n    private static SingletonLazy singletonLazy;\n    private SingletonLazy (){}\n    public static SingletonLazy getInstance(){\n        if( singletonLazy == null){\n            singletonLazy = new SingletonLazy();\n        }\n        return singletonLazy;\n    }\n}\n```\n懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.\n\n#### 懒汉式线程安全形式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazeSafe {\n    private static SingletonLazeSafe singletonLazeSafe;\n    private SingletonLazeSafe(){}\n    public static synchronized SingletonLazeSafe getInstance(){\n        if(singletonLazeSafe == null){\n            singletonLazeSafe = new SingletonLazeSafe();\n        }\n        return singletonLazeSafe;\n    }\n}\n```\n懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.\n\n#### 饿汉式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonHungary {\n    private static SingletonHungary singletonHungary = new SingletonHungary();\n    private SingletonHungary(){}\n    public static SingletonHungary getInstance(){\n        return singletonHungary;\n    }\n}\n```\n饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.\n\n#### ~~双重校验锁~~\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class DoubleCheckedLocking {\n    private static DoubleCheckedLocking doubleCheckedLocking;\n    private DoubleCheckedLocking(){}\n    public DoubleCheckedLocking getInstance(){\n        if(doubleCheckedLocking == null){\n            synchronized (DoubleCheckedLocking.class){\n                if(doubleCheckedLocking == null){\n                    doubleCheckedLocking = new DoubleCheckedLocking();\n                }\n            }\n        }\n        return doubleCheckedLocking;\n    }\n}\n```\n这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.\n但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.\n(双重检查锁定的问题下次专门写个文章)\n\n#### 静态内部类\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.\n\n#### 枚举的方式\n````\npublic enum EnumSingleton {\n    INSTANCE;\n}\n````\n枚举的方式最简单，又是线程安全的（默认枚举实例的创建是线程安全的）\n","slug":"Design_pattern/4_singleton-pattern","published":1,"updated":"2020-01-02T05:49:23.752Z","layout":"post","photos":[],"link":"","_id":"ck6lvszrv0018n0zt3m5z63c3","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)<br>设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>需要频繁实例化然后销毁的对象。</li>\n<li>创建对象时耗时过多或者耗资源过多，但又经常用到的对象。</li>\n<li>有状态的工具类对象。</li>\n<li>频繁访问数据库或文件的对象。</li>\n</ul>\n<h3 id=\"单例模式的实现\"><a href=\"#单例模式的实现\" class=\"headerlink\" title=\"单例模式的实现\"></a>单例模式的实现</h3><p>单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.</p>\n<h4 id=\"懒汉式典型实现\"><a href=\"#懒汉式典型实现\" class=\"headerlink\" title=\"懒汉式典型实现\"></a>懒汉式典型实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazy &#123;</div><div class=\"line\">    private static SingletonLazy singletonLazy;</div><div class=\"line\">    private SingletonLazy ()&#123;&#125;</div><div class=\"line\">    public static SingletonLazy getInstance()&#123;</div><div class=\"line\">        if( singletonLazy == null)&#123;</div><div class=\"line\">            singletonLazy = new SingletonLazy();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazy;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.</p>\n<h4 id=\"懒汉式线程安全形式\"><a href=\"#懒汉式线程安全形式\" class=\"headerlink\" title=\"懒汉式线程安全形式\"></a>懒汉式线程安全形式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazeSafe &#123;</div><div class=\"line\">    private static SingletonLazeSafe singletonLazeSafe;</div><div class=\"line\">    private SingletonLazeSafe()&#123;&#125;</div><div class=\"line\">    public static synchronized SingletonLazeSafe getInstance()&#123;</div><div class=\"line\">        if(singletonLazeSafe == null)&#123;</div><div class=\"line\">            singletonLazeSafe = new SingletonLazeSafe();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazeSafe;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.</p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonHungary &#123;</div><div class=\"line\">    private static SingletonHungary singletonHungary = new SingletonHungary();</div><div class=\"line\">    private SingletonHungary()&#123;&#125;</div><div class=\"line\">    public static SingletonHungary getInstance()&#123;</div><div class=\"line\">        return singletonHungary;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.</p>\n<h4 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a><del>双重校验锁</del></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class DoubleCheckedLocking &#123;</div><div class=\"line\">    private static DoubleCheckedLocking doubleCheckedLocking;</div><div class=\"line\">    private DoubleCheckedLocking()&#123;&#125;</div><div class=\"line\">    public DoubleCheckedLocking getInstance()&#123;</div><div class=\"line\">        if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">            synchronized (DoubleCheckedLocking.class)&#123;</div><div class=\"line\">                if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">                    doubleCheckedLocking = new DoubleCheckedLocking();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return doubleCheckedLocking;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.<br>但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.<br>(双重检查锁定的问题下次专门写个文章)</p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.</p>\n<h4 id=\"枚举的方式\"><a href=\"#枚举的方式\" class=\"headerlink\" title=\"枚举的方式\"></a>枚举的方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum EnumSingleton &#123;</div><div class=\"line\">    INSTANCE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枚举的方式最简单，又是线程安全的（默认枚举实例的创建是线程安全的）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)<br>设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>需要频繁实例化然后销毁的对象。</li>\n<li>创建对象时耗时过多或者耗资源过多，但又经常用到的对象。</li>\n<li>有状态的工具类对象。</li>\n<li>频繁访问数据库或文件的对象。</li>\n</ul>\n<h3 id=\"单例模式的实现\"><a href=\"#单例模式的实现\" class=\"headerlink\" title=\"单例模式的实现\"></a>单例模式的实现</h3><p>单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.</p>\n<h4 id=\"懒汉式典型实现\"><a href=\"#懒汉式典型实现\" class=\"headerlink\" title=\"懒汉式典型实现\"></a>懒汉式典型实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazy &#123;</div><div class=\"line\">    private static SingletonLazy singletonLazy;</div><div class=\"line\">    private SingletonLazy ()&#123;&#125;</div><div class=\"line\">    public static SingletonLazy getInstance()&#123;</div><div class=\"line\">        if( singletonLazy == null)&#123;</div><div class=\"line\">            singletonLazy = new SingletonLazy();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazy;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.</p>\n<h4 id=\"懒汉式线程安全形式\"><a href=\"#懒汉式线程安全形式\" class=\"headerlink\" title=\"懒汉式线程安全形式\"></a>懒汉式线程安全形式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazeSafe &#123;</div><div class=\"line\">    private static SingletonLazeSafe singletonLazeSafe;</div><div class=\"line\">    private SingletonLazeSafe()&#123;&#125;</div><div class=\"line\">    public static synchronized SingletonLazeSafe getInstance()&#123;</div><div class=\"line\">        if(singletonLazeSafe == null)&#123;</div><div class=\"line\">            singletonLazeSafe = new SingletonLazeSafe();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazeSafe;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.</p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonHungary &#123;</div><div class=\"line\">    private static SingletonHungary singletonHungary = new SingletonHungary();</div><div class=\"line\">    private SingletonHungary()&#123;&#125;</div><div class=\"line\">    public static SingletonHungary getInstance()&#123;</div><div class=\"line\">        return singletonHungary;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.</p>\n<h4 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a><del>双重校验锁</del></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class DoubleCheckedLocking &#123;</div><div class=\"line\">    private static DoubleCheckedLocking doubleCheckedLocking;</div><div class=\"line\">    private DoubleCheckedLocking()&#123;&#125;</div><div class=\"line\">    public DoubleCheckedLocking getInstance()&#123;</div><div class=\"line\">        if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">            synchronized (DoubleCheckedLocking.class)&#123;</div><div class=\"line\">                if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">                    doubleCheckedLocking = new DoubleCheckedLocking();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return doubleCheckedLocking;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.<br>但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.<br>(双重检查锁定的问题下次专门写个文章)</p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.</p>\n<h4 id=\"枚举的方式\"><a href=\"#枚举的方式\" class=\"headerlink\" title=\"枚举的方式\"></a>枚举的方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public enum EnumSingleton &#123;</div><div class=\"line\">    INSTANCE;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>枚举的方式最简单，又是线程安全的（默认枚举实例的创建是线程安全的）</p>\n"},{"title":"双重检查锁定","date":"2017-06-20T11:57:37.000Z","keywords":"双重检查锁定","_content":"\n## 双重检查锁定\n\n### 产生原因\n在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.\n\n处理这个可以加同步锁,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public synchronized static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.\n所以通过双重检查锁定来实现延迟初始化,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n上面这种方法看起很好\n- 在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。\n- 在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。\n\n但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.\n\n###问题根源\n\n> 在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> ctorInstance(memory);  //2：初始化对象\n> instance = memory;     //3：设置instance指向刚分配的内存地址 \n> ```\n> 上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> instance = memory;     //3：设置instance指向刚分配的内存地址\n>                        //注意，此时对象还没有被初始化！\n> ctorInstance(memory);  //2：初始化对象\n> ```\n> 根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。\n> 为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock.png)\n> 只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。\n> 但是在多线程执行并发的时候示意图如下:\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock1.png)\n> 由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。\n> 所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：\n \n> |   时间 |  线程A |  线程B |\n> | ------ | ----- | ------ |\n> | t1  | A1：分配对象的内存空间 |   | \n> | t2 | A3：设置instance指向内存空间 |  |\n> | t3 |  | B1：判断instance是否为空 |\n> | t4 |  | B2：由于instance不为null，线程B将访问instance引用的对象 | \n> | t5 | A2：初始化对象 | |\n> | t6 | A4：访问instance引用的对象 |  |\n\n> 这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。\n  \n> 在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：\n> 1. 不允许2和3重排序；\n> 2. 允许2和3重排序，但不允许其他线程“看到”这个重排序。\n\n以上引用内容来自 http://ifeve.com/double-checked-locking-with-delay-initialization/\n\n### 解决方案\n\n#### 基于volatile的双重检定\n只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:\n```\npublic class UnsafeLazyLoading {\n    private volatile static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。\n\n#### 基于类初始化\n\n> JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。\n因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. \n","source":"_posts/Design_pattern/5_double-checked-locking.md","raw":"---\ntitle: 双重检查锁定\ndate: 2017-06-20 19:57:37\ntags: \n- 其他\ncategories: \n- 其他\nkeywords: 双重检查锁定\n---\n\n## 双重检查锁定\n\n### 产生原因\n在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.\n\n处理这个可以加同步锁,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public synchronized static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.\n所以通过双重检查锁定来实现延迟初始化,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n上面这种方法看起很好\n- 在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。\n- 在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。\n\n但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.\n\n###问题根源\n\n> 在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> ctorInstance(memory);  //2：初始化对象\n> instance = memory;     //3：设置instance指向刚分配的内存地址 \n> ```\n> 上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> instance = memory;     //3：设置instance指向刚分配的内存地址\n>                        //注意，此时对象还没有被初始化！\n> ctorInstance(memory);  //2：初始化对象\n> ```\n> 根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。\n> 为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock.png)\n> 只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。\n> 但是在多线程执行并发的时候示意图如下:\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock1.png)\n> 由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。\n> 所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：\n \n> |   时间 |  线程A |  线程B |\n> | ------ | ----- | ------ |\n> | t1  | A1：分配对象的内存空间 |   | \n> | t2 | A3：设置instance指向内存空间 |  |\n> | t3 |  | B1：判断instance是否为空 |\n> | t4 |  | B2：由于instance不为null，线程B将访问instance引用的对象 | \n> | t5 | A2：初始化对象 | |\n> | t6 | A4：访问instance引用的对象 |  |\n\n> 这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。\n  \n> 在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：\n> 1. 不允许2和3重排序；\n> 2. 允许2和3重排序，但不允许其他线程“看到”这个重排序。\n\n以上引用内容来自 http://ifeve.com/double-checked-locking-with-delay-initialization/\n\n### 解决方案\n\n#### 基于volatile的双重检定\n只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:\n```\npublic class UnsafeLazyLoading {\n    private volatile static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。\n\n#### 基于类初始化\n\n> JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。\n因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. \n","slug":"Design_pattern/5_double-checked-locking","published":1,"updated":"2020-01-09T07:44:26.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrw001bn0zt9ykmm1fh","content":"<h2 id=\"双重检查锁定\"><a href=\"#双重检查锁定\" class=\"headerlink\" title=\"双重检查锁定\"></a>双重检查锁定</h2><h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h3><p>在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.</p>\n<p>处理这个可以加同步锁,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public synchronized static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.<br>所以通过双重检查锁定来实现延迟初始化,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面这种方法看起很好</p>\n<ul>\n<li>在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。</li>\n<li>在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。</li>\n</ul>\n<p>但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.</p>\n<p>###问题根源</p>\n<blockquote>\n<p>在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址 </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址</div><div class=\"line\">&gt;                        //注意，此时对象还没有被初始化！</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。<br>为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock.png\" alt=\"intra-thread semantics\"><br>只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。<br>但是在多线程执行并发的时候示意图如下:<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock1.png\" alt=\"intra-thread semantics\"><br>由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。<br>所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>线程A</th>\n<th>线程B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>t1</td>\n<td>A1：分配对象的内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>A3：设置instance指向内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>B1：判断instance是否为空</td>\n</tr>\n<tr>\n<td>t4</td>\n<td></td>\n<td>B2：由于instance不为null，线程B将访问instance引用的对象</td>\n</tr>\n<tr>\n<td>t5</td>\n<td>A2：初始化对象</td>\n<td></td>\n</tr>\n<tr>\n<td>t6</td>\n<td>A4：访问instance引用的对象</td>\n</tr>\n</tbody>\n</table>\n<p>这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。</p>\n<p>在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：</p>\n<ol>\n<li>不允许2和3重排序；</li>\n<li>允许2和3重排序，但不允许其他线程“看到”这个重排序。</li>\n</ol>\n</blockquote>\n<p>以上引用内容来自 <a href=\"http://ifeve.com/double-checked-locking-with-delay-initialization/\" target=\"_blank\" rel=\"external\">http://ifeve.com/double-checked-locking-with-delay-initialization/</a></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"基于volatile的双重检定\"><a href=\"#基于volatile的双重检定\" class=\"headerlink\" title=\"基于volatile的双重检定\"></a>基于volatile的双重检定</h4><p>只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private volatile static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。</p>\n<h4 id=\"基于类初始化\"><a href=\"#基于类初始化\" class=\"headerlink\" title=\"基于类初始化\"></a>基于类初始化</h4><blockquote>\n<p>JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。<br>因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"双重检查锁定\"><a href=\"#双重检查锁定\" class=\"headerlink\" title=\"双重检查锁定\"></a>双重检查锁定</h2><h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h3><p>在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.</p>\n<p>处理这个可以加同步锁,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public synchronized static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.<br>所以通过双重检查锁定来实现延迟初始化,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面这种方法看起很好</p>\n<ul>\n<li>在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。</li>\n<li>在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。</li>\n</ul>\n<p>但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.</p>\n<p>###问题根源</p>\n<blockquote>\n<p>在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址 </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址</div><div class=\"line\">&gt;                        //注意，此时对象还没有被初始化！</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。<br>为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock.png\" alt=\"intra-thread semantics\"><br>只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。<br>但是在多线程执行并发的时候示意图如下:<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock1.png\" alt=\"intra-thread semantics\"><br>由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。<br>所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>线程A</th>\n<th>线程B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>t1</td>\n<td>A1：分配对象的内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>A3：设置instance指向内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>B1：判断instance是否为空</td>\n</tr>\n<tr>\n<td>t4</td>\n<td></td>\n<td>B2：由于instance不为null，线程B将访问instance引用的对象</td>\n</tr>\n<tr>\n<td>t5</td>\n<td>A2：初始化对象</td>\n<td></td>\n</tr>\n<tr>\n<td>t6</td>\n<td>A4：访问instance引用的对象</td>\n</tr>\n</tbody>\n</table>\n<p>这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。</p>\n<p>在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：</p>\n<ol>\n<li>不允许2和3重排序；</li>\n<li>允许2和3重排序，但不允许其他线程“看到”这个重排序。</li>\n</ol>\n</blockquote>\n<p>以上引用内容来自 <a href=\"http://ifeve.com/double-checked-locking-with-delay-initialization/\">http://ifeve.com/double-checked-locking-with-delay-initialization/</a></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"基于volatile的双重检定\"><a href=\"#基于volatile的双重检定\" class=\"headerlink\" title=\"基于volatile的双重检定\"></a>基于volatile的双重检定</h4><p>只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private volatile static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。</p>\n<h4 id=\"基于类初始化\"><a href=\"#基于类初始化\" class=\"headerlink\" title=\"基于类初始化\"></a>基于类初始化</h4><blockquote>\n<p>JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。<br>因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. </p>\n"},{"title":"原型模式","date":"2017-07-24T02:47:09.000Z","keywords":"设计模式 原型模式","_content":"## 原型模式\n\n### 介绍\n\n用原型实例制定创建对象的种类，并通过拷贝这些原型创建新的对象。（创建型模式）\n原型模式比较简单的一种模式，实现一个接口就完成了原型模式。一般原型模式很少单独出现，会与其他模式混用。\n\n### 适用场景\n\n使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。\n使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。\n因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。\n\n### 注意事项\n- 使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用到类的构造方法。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。还记得单例模式吗？单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。\n- 深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。\n如果有数组等等其他对象要进行深拷贝时候：\n```\npublic class Prototype implements Cloneable {  \n    private ArrayList list = new ArrayList();  \n    public Prototype clone(){  \n        Prototype prototype = null;  \n        try{  \n            prototype = (Prototype)super.clone();  \n            prototype.list = (ArrayList) this.list.clone();  \n        }catch(CloneNotSupportedException e){  \n            e.printStackTrace();  \n        }  \n        return prototype;   \n    }  \n}  \n```\n\n### DEMO\n```\npackage factory.pattern.Proto;\n\n/**\n * Created by FK on 2017/7/25.\n */\npublic class Prototype implements Cloneable{\n    public Prototype clone(){\n        Prototype prototype = null;\n        try {\n            prototype = (Prototype) super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return  prototype;\n    }\n}\n```","source":"_posts/Design_pattern/7_Prototype.md","raw":"---\ntitle: 原型模式\ndate: 2017-07-24 10:47:09\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 原型模式\n---\n## 原型模式\n\n### 介绍\n\n用原型实例制定创建对象的种类，并通过拷贝这些原型创建新的对象。（创建型模式）\n原型模式比较简单的一种模式，实现一个接口就完成了原型模式。一般原型模式很少单独出现，会与其他模式混用。\n\n### 适用场景\n\n使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。\n使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。\n因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。\n\n### 注意事项\n- 使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用到类的构造方法。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。还记得单例模式吗？单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。\n- 深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。\n如果有数组等等其他对象要进行深拷贝时候：\n```\npublic class Prototype implements Cloneable {  \n    private ArrayList list = new ArrayList();  \n    public Prototype clone(){  \n        Prototype prototype = null;  \n        try{  \n            prototype = (Prototype)super.clone();  \n            prototype.list = (ArrayList) this.list.clone();  \n        }catch(CloneNotSupportedException e){  \n            e.printStackTrace();  \n        }  \n        return prototype;   \n    }  \n}  \n```\n\n### DEMO\n```\npackage factory.pattern.Proto;\n\n/**\n * Created by FK on 2017/7/25.\n */\npublic class Prototype implements Cloneable{\n    public Prototype clone(){\n        Prototype prototype = null;\n        try {\n            prototype = (Prototype) super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return  prototype;\n    }\n}\n```","slug":"Design_pattern/7_Prototype","published":1,"updated":"2020-01-02T05:49:23.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrx001en0ztilfa7mme","content":"<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>用原型实例制定创建对象的种类，并通过拷贝这些原型创建新的对象。（创建型模式）<br>原型模式比较简单的一种模式，实现一个接口就完成了原型模式。一般原型模式很少单独出现，会与其他模式混用。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。<br>使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。<br>因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用到类的构造方法。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。还记得单例模式吗？单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。</li>\n<li>深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。<br>如果有数组等等其他对象要进行深拷贝时候：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Prototype implements Cloneable &#123;  </div><div class=\"line\">    private ArrayList list = new ArrayList();  </div><div class=\"line\">    public Prototype clone()&#123;  </div><div class=\"line\">        Prototype prototype = null;  </div><div class=\"line\">        try&#123;  </div><div class=\"line\">            prototype = (Prototype)super.clone();  </div><div class=\"line\">            prototype.list = (ArrayList) this.list.clone();  </div><div class=\"line\">        &#125;catch(CloneNotSupportedException e)&#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        return prototype;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Proto;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/25.</div><div class=\"line\"> */</div><div class=\"line\">public class Prototype implements Cloneable&#123;</div><div class=\"line\">    public Prototype clone()&#123;</div><div class=\"line\">        Prototype prototype = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            prototype = (Prototype) super.clone();</div><div class=\"line\">        &#125; catch (CloneNotSupportedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return  prototype;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>用原型实例制定创建对象的种类，并通过拷贝这些原型创建新的对象。（创建型模式）<br>原型模式比较简单的一种模式，实现一个接口就完成了原型模式。一般原型模式很少单独出现，会与其他模式混用。</p>\n<h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3><p>使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。<br>使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。<br>因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，而且可以使系统的整体性能提高很多。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，它直接在内存中复制数据，因此不会调用到类的构造方法。不但构造方法中的代码不会执行，甚至连访问权限都对原型模式无效。还记得单例模式吗？单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。</li>\n<li>深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。如果要实现深拷贝，必须将原型模式中的数组、容器对象、引用对象等另行拷贝。<br>如果有数组等等其他对象要进行深拷贝时候：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Prototype implements Cloneable &#123;  </div><div class=\"line\">    private ArrayList list = new ArrayList();  </div><div class=\"line\">    public Prototype clone()&#123;  </div><div class=\"line\">        Prototype prototype = null;  </div><div class=\"line\">        try&#123;  </div><div class=\"line\">            prototype = (Prototype)super.clone();  </div><div class=\"line\">            prototype.list = (ArrayList) this.list.clone();  </div><div class=\"line\">        &#125;catch(CloneNotSupportedException e)&#123;  </div><div class=\"line\">            e.printStackTrace();  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        return prototype;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Proto;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/25.</div><div class=\"line\"> */</div><div class=\"line\">public class Prototype implements Cloneable&#123;</div><div class=\"line\">    public Prototype clone()&#123;</div><div class=\"line\">        Prototype prototype = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            prototype = (Prototype) super.clone();</div><div class=\"line\">        &#125; catch (CloneNotSupportedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return  prototype;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"迭代器模式","date":"2017-08-17T01:19:52.000Z","keywords":"设计模式 迭代器模式","_content":"\n## 迭代器模式\n\n### 介绍\n\n迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。（行为型模式）\n迭代器模式是应该是java中使用的最多的一种设计模式，迭代器模式如下：\n![迭代器模式](../../../uploads/iterator/1.jpg)\n\n- 抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。\n\n- 具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。\n\n- 抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove(),\n\n- 迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代。\n\n### 优缺点和适用场景\n\n#### 优点\n \n- 迭代器简化了聚合的接口\n\n- 可以提供多种遍历方式\n\n- 在同一个聚合上可以有多个遍历\n\n#### 缺点\n\n- 对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像ArrayList，我们宁可愿意使用for循环和get方法来遍历集合\n\n#### 适用场景\n\n一般来说，我们只要实现一个集合，就需要同时提供这个集合的迭代器，就像java中的Collection，List、Set、Map等，这些集合都有自己的迭代器。java本身已经把迭代器做到内部中了，我们一般情况自己很少自定义的迭代器。\n\n### DEMO\n\n看了JDK源码简单写了一个\n\n首先是抽象迭代器\n\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n * 抽象迭代器类\n */\npublic interface Iterator<E> {\n    public boolean hasNext();\n    public E next();\n}\n```\n\n抽象集合\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic interface List<E> extends Iterable<E> {\n    void add(E e);\n    E get(int index);\n    Iterator<E> iterator();\n    int getSize();\n}\n```\n抽象集合继承了iterable,iterable可以使得多个迭代器互不干扰\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic interface Iterable<T> {\n    Iterator<T> iterator();\n}\n```\n具体的集合实现\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic class ArrayList<E> implements List<E> {\n\n    private Object[] elementData;\n    private int size = 0;\n    private int index = 0;\n\n    public ArrayList() {\n        this.elementData = new Object[10];\n        this.size = 0;\n        this.index = 0;\n    }\n\n    @Override\n    public void add(E e) {\n        elementData[index++] = e;\n        size++;\n    }\n\n    @Override\n    public E get(int index) {\n        return (E) elementData[index];\n    }\n\n    @Override\n    public Iterator<E> iterator() {\n        return new ConcreteIterator();\n    }\n\n    @Override\n    public int getSize() {\n        return size;\n    }\n\n    private class ConcreteIterator implements Iterator<E>{\n        int cursor;\n        @Override\n        public boolean hasNext() {\n            return cursor != size ;\n        }\n\n        @Override\n        public E next() {\n            return (E) elementData[cursor++];\n        }\n    }\n}\n```\n\n测试类\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"one\");\n        list.add(\"two\");\n        list.add(\"three\");\n        list.add(\"four\");\n        Iterator<String> iterator = list.iterator();\n        while (iterator.hasNext()){\n            String str = iterator.next();\n            System.out.println(str);\n        }\n    }\n}\n```","source":"_posts/Design_pattern/19_iterator.md","raw":"---\ntitle: 迭代器模式\ndate: 2017-08-17 09:19:52\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 迭代器模式\n---\n\n## 迭代器模式\n\n### 介绍\n\n迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。（行为型模式）\n迭代器模式是应该是java中使用的最多的一种设计模式，迭代器模式如下：\n![迭代器模式](../../../uploads/iterator/1.jpg)\n\n- 抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。\n\n- 具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。\n\n- 抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove(),\n\n- 迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代。\n\n### 优缺点和适用场景\n\n#### 优点\n \n- 迭代器简化了聚合的接口\n\n- 可以提供多种遍历方式\n\n- 在同一个聚合上可以有多个遍历\n\n#### 缺点\n\n- 对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像ArrayList，我们宁可愿意使用for循环和get方法来遍历集合\n\n#### 适用场景\n\n一般来说，我们只要实现一个集合，就需要同时提供这个集合的迭代器，就像java中的Collection，List、Set、Map等，这些集合都有自己的迭代器。java本身已经把迭代器做到内部中了，我们一般情况自己很少自定义的迭代器。\n\n### DEMO\n\n看了JDK源码简单写了一个\n\n首先是抽象迭代器\n\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n * 抽象迭代器类\n */\npublic interface Iterator<E> {\n    public boolean hasNext();\n    public E next();\n}\n```\n\n抽象集合\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic interface List<E> extends Iterable<E> {\n    void add(E e);\n    E get(int index);\n    Iterator<E> iterator();\n    int getSize();\n}\n```\n抽象集合继承了iterable,iterable可以使得多个迭代器互不干扰\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic interface Iterable<T> {\n    Iterator<T> iterator();\n}\n```\n具体的集合实现\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic class ArrayList<E> implements List<E> {\n\n    private Object[] elementData;\n    private int size = 0;\n    private int index = 0;\n\n    public ArrayList() {\n        this.elementData = new Object[10];\n        this.size = 0;\n        this.index = 0;\n    }\n\n    @Override\n    public void add(E e) {\n        elementData[index++] = e;\n        size++;\n    }\n\n    @Override\n    public E get(int index) {\n        return (E) elementData[index];\n    }\n\n    @Override\n    public Iterator<E> iterator() {\n        return new ConcreteIterator();\n    }\n\n    @Override\n    public int getSize() {\n        return size;\n    }\n\n    private class ConcreteIterator implements Iterator<E>{\n        int cursor;\n        @Override\n        public boolean hasNext() {\n            return cursor != size ;\n        }\n\n        @Override\n        public E next() {\n            return (E) elementData[cursor++];\n        }\n    }\n}\n```\n\n测试类\n```\npackage factory.pattern.iterator;\n\n/**\n * Created by FK on 2017/8/17.\n */\npublic class Test {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"one\");\n        list.add(\"two\");\n        list.add(\"three\");\n        list.add(\"four\");\n        Iterator<String> iterator = list.iterator();\n        while (iterator.hasNext()){\n            String str = iterator.next();\n            System.out.println(str);\n        }\n    }\n}\n```","slug":"Design_pattern/19_iterator","published":1,"updated":"2020-02-13T14:48:36.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszrx001hn0zt9fr9uls0","content":"<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。（行为型模式）<br>迭代器模式是应该是java中使用的最多的一种设计模式，迭代器模式如下：<br><img src=\"../../../uploads/iterator/1.jpg\" alt=\"迭代器模式\"></p>\n<ul>\n<li><p>抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。</p>\n</li>\n<li><p>具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。</p>\n</li>\n<li><p>抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove(),</p>\n</li>\n<li><p>迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代。</p>\n</li>\n</ul>\n<h3 id=\"优缺点和适用场景\"><a href=\"#优缺点和适用场景\" class=\"headerlink\" title=\"优缺点和适用场景\"></a>优缺点和适用场景</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><p>迭代器简化了聚合的接口</p>\n</li>\n<li><p>可以提供多种遍历方式</p>\n</li>\n<li><p>在同一个聚合上可以有多个遍历</p>\n</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像ArrayList，我们宁可愿意使用for循环和get方法来遍历集合</li>\n</ul>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>一般来说，我们只要实现一个集合，就需要同时提供这个集合的迭代器，就像java中的Collection，List、Set、Map等，这些集合都有自己的迭代器。java本身已经把迭代器做到内部中了，我们一般情况自己很少自定义的迭代器。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>看了JDK源码简单写了一个</p>\n<p>首先是抽象迭代器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> * 抽象迭代器类</div><div class=\"line\"> */</div><div class=\"line\">public interface Iterator&lt;E&gt; &#123;</div><div class=\"line\">    public boolean hasNext();</div><div class=\"line\">    public E next();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>抽象集合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface List&lt;E&gt; extends Iterable&lt;E&gt; &#123;</div><div class=\"line\">    void add(E e);</div><div class=\"line\">    E get(int index);</div><div class=\"line\">    Iterator&lt;E&gt; iterator();</div><div class=\"line\">    int getSize();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>抽象集合继承了iterable,iterable可以使得多个迭代器互不干扰<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface Iterable&lt;T&gt; &#123;</div><div class=\"line\">    Iterator&lt;T&gt; iterator();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>具体的集合实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ArrayList&lt;E&gt; implements List&lt;E&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    private Object[] elementData;</div><div class=\"line\">    private int size = 0;</div><div class=\"line\">    private int index = 0;</div><div class=\"line\"></div><div class=\"line\">    public ArrayList() &#123;</div><div class=\"line\">        this.elementData = new Object[10];</div><div class=\"line\">        this.size = 0;</div><div class=\"line\">        this.index = 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void add(E e) &#123;</div><div class=\"line\">        elementData[index++] = e;</div><div class=\"line\">        size++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public E get(int index) &#123;</div><div class=\"line\">        return (E) elementData[index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Iterator&lt;E&gt; iterator() &#123;</div><div class=\"line\">        return new ConcreteIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getSize() &#123;</div><div class=\"line\">        return size;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private class ConcreteIterator implements Iterator&lt;E&gt;&#123;</div><div class=\"line\">        int cursor;</div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\">            return cursor != size ;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public E next() &#123;</div><div class=\"line\">            return (E) elementData[cursor++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class=\"line\">        list.add(&quot;one&quot;);</div><div class=\"line\">        list.add(&quot;two&quot;);</div><div class=\"line\">        list.add(&quot;three&quot;);</div><div class=\"line\">        list.add(&quot;four&quot;);</div><div class=\"line\">        Iterator&lt;String&gt; iterator = list.iterator();</div><div class=\"line\">        while (iterator.hasNext())&#123;</div><div class=\"line\">            String str = iterator.next();</div><div class=\"line\">            System.out.println(str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>迭代器模式：提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。（行为型模式）<br>迭代器模式是应该是java中使用的最多的一种设计模式，迭代器模式如下：<br><img src=\"../../../uploads/iterator/1.jpg\" alt=\"迭代器模式\"></p>\n<ul>\n<li><p>抽象容器：一般是一个接口，提供一个iterator()方法，例如java中的Collection接口，List接口，Set接口等。</p>\n</li>\n<li><p>具体容器：就是抽象容器的具体实现类，比如List接口的有序列表实现ArrayList，List接口的链表实现LinkList，Set接口的哈希列表的实现HashSet等。</p>\n</li>\n<li><p>抽象迭代器：定义遍历元素所需要的方法，一般来说会有这么三个方法：取得第一个元素的方法first()，取得下一个元素的方法next()，判断是否遍历结束的方法isDone()（或者叫hasNext()），移出当前对象的方法remove(),</p>\n</li>\n<li><p>迭代器实现：实现迭代器接口中定义的方法，完成集合的迭代。</p>\n</li>\n</ul>\n<h3 id=\"优缺点和适用场景\"><a href=\"#优缺点和适用场景\" class=\"headerlink\" title=\"优缺点和适用场景\"></a>优缺点和适用场景</h3><h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li><p>迭代器简化了聚合的接口</p>\n</li>\n<li><p>可以提供多种遍历方式</p>\n</li>\n<li><p>在同一个聚合上可以有多个遍历</p>\n</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><ul>\n<li>对于比较简单的遍历（像数组或者有序列表），使用迭代器方式遍历较为繁琐，大家可能都有感觉，像ArrayList，我们宁可愿意使用for循环和get方法来遍历集合</li>\n</ul>\n<h4 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h4><p>一般来说，我们只要实现一个集合，就需要同时提供这个集合的迭代器，就像java中的Collection，List、Set、Map等，这些集合都有自己的迭代器。java本身已经把迭代器做到内部中了，我们一般情况自己很少自定义的迭代器。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>看了JDK源码简单写了一个</p>\n<p>首先是抽象迭代器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> * 抽象迭代器类</div><div class=\"line\"> */</div><div class=\"line\">public interface Iterator&lt;E&gt; &#123;</div><div class=\"line\">    public boolean hasNext();</div><div class=\"line\">    public E next();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>抽象集合<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface List&lt;E&gt; extends Iterable&lt;E&gt; &#123;</div><div class=\"line\">    void add(E e);</div><div class=\"line\">    E get(int index);</div><div class=\"line\">    Iterator&lt;E&gt; iterator();</div><div class=\"line\">    int getSize();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>抽象集合继承了iterable,iterable可以使得多个迭代器互不干扰<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface Iterable&lt;T&gt; &#123;</div><div class=\"line\">    Iterator&lt;T&gt; iterator();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>具体的集合实现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ArrayList&lt;E&gt; implements List&lt;E&gt; &#123;</div><div class=\"line\"></div><div class=\"line\">    private Object[] elementData;</div><div class=\"line\">    private int size = 0;</div><div class=\"line\">    private int index = 0;</div><div class=\"line\"></div><div class=\"line\">    public ArrayList() &#123;</div><div class=\"line\">        this.elementData = new Object[10];</div><div class=\"line\">        this.size = 0;</div><div class=\"line\">        this.index = 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void add(E e) &#123;</div><div class=\"line\">        elementData[index++] = e;</div><div class=\"line\">        size++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public E get(int index) &#123;</div><div class=\"line\">        return (E) elementData[index];</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public Iterator&lt;E&gt; iterator() &#123;</div><div class=\"line\">        return new ConcreteIterator();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public int getSize() &#123;</div><div class=\"line\">        return size;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private class ConcreteIterator implements Iterator&lt;E&gt;&#123;</div><div class=\"line\">        int cursor;</div><div class=\"line\">        @Override</div><div class=\"line\">        public boolean hasNext() &#123;</div><div class=\"line\">            return cursor != size ;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @Override</div><div class=\"line\">        public E next() &#123;</div><div class=\"line\">            return (E) elementData[cursor++];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.iterator;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/8/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        List&lt;String&gt; list = new ArrayList&lt;&gt;();</div><div class=\"line\">        list.add(&quot;one&quot;);</div><div class=\"line\">        list.add(&quot;two&quot;);</div><div class=\"line\">        list.add(&quot;three&quot;);</div><div class=\"line\">        list.add(&quot;four&quot;);</div><div class=\"line\">        Iterator&lt;String&gt; iterator = list.iterator();</div><div class=\"line\">        while (iterator.hasNext())&#123;</div><div class=\"line\">            String str = iterator.next();</div><div class=\"line\">            System.out.println(str);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"适配器模式","date":"2017-07-25T06:32:38.000Z","keywords":"设计模式 适配器模式","_content":"\n## 适配器模式\n\n### 介绍\n\n适配器模式讲一个类的接口转换为被期望用到的另一个接口,使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作.(结构型模式)\n\n### 适配器模式中的角色\n\n一般适配器模式中有以下三个角色:\n\n- 目标接口(Target) : 客户期待的接口.\n- 需要适配的类(Adaptee) : 需要适配的类.\n- 适配器(Adapter) : 包装一个需要适配的对象,吧原接口转换为目标接口.\n\n### 优点 \n\n- 通过适配器,客户端调用同一接口.\n- 复用的现存的类\n- 将目标类和适配者类解耦\n\n### 缺点\n过多的使用适配器，会让系统非常零乱，不易整体进行把握.\n\n### DEMO\n目标接口\n```\npackage factory.pattern.Adapter;\n\n/**\n * Created by fk5431 on 7/25/17.\n */\npublic class Target {\n    public void Request(){\n        System.out.println(\"普通请求\");\n    }\n}\n```\n需要适配的类\n```\npackage factory.pattern.Adapter;\n\n/**\n * Created by fk5431 on 7/25/17.\n */\npublic class Adaptee {\n    public void SpecificRequest(){\n        System.out.println(\"特殊请求\");\n    }\n}\n```\n适配器\n```\npackage factory.pattern.Adapter;\n\n/**\n * Created by fk5431 on 7/25/17.\n */\npublic class Adapter extends Target {\n    private Adaptee adaptee = new Adaptee();\n\n    @Override\n    public void Request() {\n        adaptee.SpecificRequest();\n    }\n}\n```\n测试\n```\npackage factory.pattern.Adapter;\n   \n   /**\n    * Created by fk5431 on 7/25/17.\n    */\n   public class Test {\n       public static void main(String[] args) {\n           Target target = new Adapter();\n           target.Request();\n       }\n   }\n```","source":"_posts/Design_pattern/8_Adapter.md","raw":"---\ntitle: 适配器模式\ndate: 2017-07-25 14:32:38\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 适配器模式\n---\n\n## 适配器模式\n\n### 介绍\n\n适配器模式讲一个类的接口转换为被期望用到的另一个接口,使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作.(结构型模式)\n\n### 适配器模式中的角色\n\n一般适配器模式中有以下三个角色:\n\n- 目标接口(Target) : 客户期待的接口.\n- 需要适配的类(Adaptee) : 需要适配的类.\n- 适配器(Adapter) : 包装一个需要适配的对象,吧原接口转换为目标接口.\n\n### 优点 \n\n- 通过适配器,客户端调用同一接口.\n- 复用的现存的类\n- 将目标类和适配者类解耦\n\n### 缺点\n过多的使用适配器，会让系统非常零乱，不易整体进行把握.\n\n### DEMO\n目标接口\n```\npackage factory.pattern.Adapter;\n\n/**\n * Created by fk5431 on 7/25/17.\n */\npublic class Target {\n    public void Request(){\n        System.out.println(\"普通请求\");\n    }\n}\n```\n需要适配的类\n```\npackage factory.pattern.Adapter;\n\n/**\n * Created by fk5431 on 7/25/17.\n */\npublic class Adaptee {\n    public void SpecificRequest(){\n        System.out.println(\"特殊请求\");\n    }\n}\n```\n适配器\n```\npackage factory.pattern.Adapter;\n\n/**\n * Created by fk5431 on 7/25/17.\n */\npublic class Adapter extends Target {\n    private Adaptee adaptee = new Adaptee();\n\n    @Override\n    public void Request() {\n        adaptee.SpecificRequest();\n    }\n}\n```\n测试\n```\npackage factory.pattern.Adapter;\n   \n   /**\n    * Created by fk5431 on 7/25/17.\n    */\n   public class Test {\n       public static void main(String[] args) {\n           Target target = new Adapter();\n           target.Request();\n       }\n   }\n```","slug":"Design_pattern/8_Adapter","published":1,"updated":"2020-01-02T05:49:23.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszry001kn0zttpvcfnzx","content":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>适配器模式讲一个类的接口转换为被期望用到的另一个接口,使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作.(结构型模式)</p>\n<h3 id=\"适配器模式中的角色\"><a href=\"#适配器模式中的角色\" class=\"headerlink\" title=\"适配器模式中的角色\"></a>适配器模式中的角色</h3><p>一般适配器模式中有以下三个角色:</p>\n<ul>\n<li>目标接口(Target) : 客户期待的接口.</li>\n<li>需要适配的类(Adaptee) : 需要适配的类.</li>\n<li>适配器(Adapter) : 包装一个需要适配的对象,吧原接口转换为目标接口.</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>通过适配器,客户端调用同一接口.</li>\n<li>复用的现存的类</li>\n<li>将目标类和适配者类解耦</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>过多的使用适配器，会让系统非常零乱，不易整体进行把握.</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>目标接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/25/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Target &#123;</div><div class=\"line\">    public void Request()&#123;</div><div class=\"line\">        System.out.println(&quot;普通请求&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要适配的类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/25/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Adaptee &#123;</div><div class=\"line\">    public void SpecificRequest()&#123;</div><div class=\"line\">        System.out.println(&quot;特殊请求&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>适配器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/25/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Adapter extends Target &#123;</div><div class=\"line\">    private Adaptee adaptee = new Adaptee();</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void Request() &#123;</div><div class=\"line\">        adaptee.SpecificRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\">   </div><div class=\"line\">   /**</div><div class=\"line\">    * Created by fk5431 on 7/25/17.</div><div class=\"line\">    */</div><div class=\"line\">   public class Test &#123;</div><div class=\"line\">       public static void main(String[] args) &#123;</div><div class=\"line\">           Target target = new Adapter();</div><div class=\"line\">           target.Request();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>适配器模式讲一个类的接口转换为被期望用到的另一个接口,使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作.(结构型模式)</p>\n<h3 id=\"适配器模式中的角色\"><a href=\"#适配器模式中的角色\" class=\"headerlink\" title=\"适配器模式中的角色\"></a>适配器模式中的角色</h3><p>一般适配器模式中有以下三个角色:</p>\n<ul>\n<li>目标接口(Target) : 客户期待的接口.</li>\n<li>需要适配的类(Adaptee) : 需要适配的类.</li>\n<li>适配器(Adapter) : 包装一个需要适配的对象,吧原接口转换为目标接口.</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>通过适配器,客户端调用同一接口.</li>\n<li>复用的现存的类</li>\n<li>将目标类和适配者类解耦</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><p>过多的使用适配器，会让系统非常零乱，不易整体进行把握.</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>目标接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/25/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Target &#123;</div><div class=\"line\">    public void Request()&#123;</div><div class=\"line\">        System.out.println(&quot;普通请求&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>需要适配的类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/25/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Adaptee &#123;</div><div class=\"line\">    public void SpecificRequest()&#123;</div><div class=\"line\">        System.out.println(&quot;特殊请求&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>适配器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/25/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Adapter extends Target &#123;</div><div class=\"line\">    private Adaptee adaptee = new Adaptee();</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void Request() &#123;</div><div class=\"line\">        adaptee.SpecificRequest();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Adapter;</div><div class=\"line\">   </div><div class=\"line\">   /**</div><div class=\"line\">    * Created by fk5431 on 7/25/17.</div><div class=\"line\">    */</div><div class=\"line\">   public class Test &#123;</div><div class=\"line\">       public static void main(String[] args) &#123;</div><div class=\"line\">           Target target = new Adapter();</div><div class=\"line\">           target.Request();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"建造者模式","date":"2017-07-16T01:35:56.000Z","keywords":"设计模式 建造者模式","_content":"\n## 建造者模式\n\n### 定义\n\n将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)\n\n### 使用场景\n\n1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。\n2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 \n\n**优点**:\n\n1. 使用建造者模式可以让客户端不知道产品内部的组成细节.\n2. 具体的建造类之间是相互独立的,对系统的扩展是非常有利的.\n3. 由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.\n\n### 建造者模式一般包含的角色\n\n1. builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,\n2. ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.\n3. Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.\n4. Product: 要创建的负责对象.\n\n### Demo\n\n如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:\n\n首先是Persion\n```\npackage factory.pattern.Builder;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Persion {\n    private List<String> parts = new ArrayList<String>();\n\n    public void Add(String part){\n        parts.add(part);\n    }\n\n    public void Show(){\n        for(String part : parts){\n            System.out.println(part);\n        }\n    }\n\n}\n```\n然后是Builder\n```\npackage factory.pattern.Builder;\n   \n   /**\n    * Created by fk5431 on 7/24/17.\n    */\n   public interface Builder {\n       void BuildHead();\n       void BuildBody();\n       void BuildHand();\n       void BuildFeet();\n       Persion getResult();\n   }\n```\n然后瘦人胖人类分别实现接口\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class FatPersonBuilder implements Builder {\n    private Persion product;\n    public FatPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"胖人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"胖人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"胖人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"胖人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class ThinPersonBuilder implements Builder {\n    Persion product;\n    public ThinPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"瘦人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"瘦人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"瘦人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"瘦人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n然后是指导者\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Director {\n    public Persion Persion(Builder builder){\n        builder.BuildBody();\n        builder.BuildFeet();\n        builder.BuildHand();\n        builder.BuildHead();\n        return builder.getResult();\n    }\n}\n```\n最后测试一下\n```\npublic class Test {\n\n    public static void main(String[] args) {\n        Director d = new Director();\n        Persion p = d.Persion(new ThinPersonBuilder());\n        p.Show();\n    }\n}\n```","source":"_posts/Design_pattern/6_builder.md","raw":"---\ntitle: 建造者模式\ndate: 2017-07-16 09:35:56\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 建造者模式\n---\n\n## 建造者模式\n\n### 定义\n\n将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)\n\n### 使用场景\n\n1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。\n2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 \n\n**优点**:\n\n1. 使用建造者模式可以让客户端不知道产品内部的组成细节.\n2. 具体的建造类之间是相互独立的,对系统的扩展是非常有利的.\n3. 由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.\n\n### 建造者模式一般包含的角色\n\n1. builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,\n2. ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.\n3. Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.\n4. Product: 要创建的负责对象.\n\n### Demo\n\n如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:\n\n首先是Persion\n```\npackage factory.pattern.Builder;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Persion {\n    private List<String> parts = new ArrayList<String>();\n\n    public void Add(String part){\n        parts.add(part);\n    }\n\n    public void Show(){\n        for(String part : parts){\n            System.out.println(part);\n        }\n    }\n\n}\n```\n然后是Builder\n```\npackage factory.pattern.Builder;\n   \n   /**\n    * Created by fk5431 on 7/24/17.\n    */\n   public interface Builder {\n       void BuildHead();\n       void BuildBody();\n       void BuildHand();\n       void BuildFeet();\n       Persion getResult();\n   }\n```\n然后瘦人胖人类分别实现接口\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class FatPersonBuilder implements Builder {\n    private Persion product;\n    public FatPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"胖人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"胖人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"胖人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"胖人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class ThinPersonBuilder implements Builder {\n    Persion product;\n    public ThinPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"瘦人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"瘦人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"瘦人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"瘦人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n然后是指导者\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Director {\n    public Persion Persion(Builder builder){\n        builder.BuildBody();\n        builder.BuildFeet();\n        builder.BuildHand();\n        builder.BuildHead();\n        return builder.getResult();\n    }\n}\n```\n最后测试一下\n```\npublic class Test {\n\n    public static void main(String[] args) {\n        Director d = new Director();\n        Persion p = d.Persion(new ThinPersonBuilder());\n        p.Show();\n    }\n}\n```","slug":"Design_pattern/6_builder","published":1,"updated":"2020-01-02T05:49:23.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszs0001nn0zt9z6iwxlg","content":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。<br>2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 </p>\n<p><strong>优点</strong>:</p>\n<ol>\n<li>使用建造者模式可以让客户端不知道产品内部的组成细节.</li>\n<li>具体的建造类之间是相互独立的,对系统的扩展是非常有利的.</li>\n<li>由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.</li>\n</ol>\n<h3 id=\"建造者模式一般包含的角色\"><a href=\"#建造者模式一般包含的角色\" class=\"headerlink\" title=\"建造者模式一般包含的角色\"></a>建造者模式一般包含的角色</h3><ol>\n<li>builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,</li>\n<li>ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.</li>\n<li>Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.</li>\n<li>Product: 要创建的负责对象.</li>\n</ol>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><p>如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:</p>\n<p>首先是Persion<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Persion &#123;</div><div class=\"line\">    private List&lt;String&gt; parts = new ArrayList&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">    public void Add(String part)&#123;</div><div class=\"line\">        parts.add(part);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void Show()&#123;</div><div class=\"line\">        for(String part : parts)&#123;</div><div class=\"line\">            System.out.println(part);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是Builder<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\">   </div><div class=\"line\">   /**</div><div class=\"line\">    * Created by fk5431 on 7/24/17.</div><div class=\"line\">    */</div><div class=\"line\">   public interface Builder &#123;</div><div class=\"line\">       void BuildHead();</div><div class=\"line\">       void BuildBody();</div><div class=\"line\">       void BuildHand();</div><div class=\"line\">       void BuildFeet();</div><div class=\"line\">       Persion getResult();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>然后瘦人胖人类分别实现接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FatPersonBuilder implements Builder &#123;</div><div class=\"line\">    private Persion product;</div><div class=\"line\">    public FatPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;胖人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;胖人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;胖人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;胖人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ThinPersonBuilder implements Builder &#123;</div><div class=\"line\">    Persion product;</div><div class=\"line\">    public ThinPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后是指导者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Director &#123;</div><div class=\"line\">    public Persion Persion(Builder builder)&#123;</div><div class=\"line\">        builder.BuildBody();</div><div class=\"line\">        builder.BuildFeet();</div><div class=\"line\">        builder.BuildHand();</div><div class=\"line\">        builder.BuildHead();</div><div class=\"line\">        return builder.getResult();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后测试一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Director d = new Director();</div><div class=\"line\">        Persion p = d.Persion(new ThinPersonBuilder());</div><div class=\"line\">        p.Show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。<br>2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 </p>\n<p><strong>优点</strong>:</p>\n<ol>\n<li>使用建造者模式可以让客户端不知道产品内部的组成细节.</li>\n<li>具体的建造类之间是相互独立的,对系统的扩展是非常有利的.</li>\n<li>由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.</li>\n</ol>\n<h3 id=\"建造者模式一般包含的角色\"><a href=\"#建造者模式一般包含的角色\" class=\"headerlink\" title=\"建造者模式一般包含的角色\"></a>建造者模式一般包含的角色</h3><ol>\n<li>builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,</li>\n<li>ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.</li>\n<li>Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.</li>\n<li>Product: 要创建的负责对象.</li>\n</ol>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><p>如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:</p>\n<p>首先是Persion<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Persion &#123;</div><div class=\"line\">    private List&lt;String&gt; parts = new ArrayList&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">    public void Add(String part)&#123;</div><div class=\"line\">        parts.add(part);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void Show()&#123;</div><div class=\"line\">        for(String part : parts)&#123;</div><div class=\"line\">            System.out.println(part);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是Builder<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\">   </div><div class=\"line\">   /**</div><div class=\"line\">    * Created by fk5431 on 7/24/17.</div><div class=\"line\">    */</div><div class=\"line\">   public interface Builder &#123;</div><div class=\"line\">       void BuildHead();</div><div class=\"line\">       void BuildBody();</div><div class=\"line\">       void BuildHand();</div><div class=\"line\">       void BuildFeet();</div><div class=\"line\">       Persion getResult();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>然后瘦人胖人类分别实现接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FatPersonBuilder implements Builder &#123;</div><div class=\"line\">    private Persion product;</div><div class=\"line\">    public FatPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;胖人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;胖人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;胖人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;胖人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ThinPersonBuilder implements Builder &#123;</div><div class=\"line\">    Persion product;</div><div class=\"line\">    public ThinPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后是指导者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Director &#123;</div><div class=\"line\">    public Persion Persion(Builder builder)&#123;</div><div class=\"line\">        builder.BuildBody();</div><div class=\"line\">        builder.BuildFeet();</div><div class=\"line\">        builder.BuildHand();</div><div class=\"line\">        builder.BuildHead();</div><div class=\"line\">        return builder.getResult();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后测试一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Director d = new Director();</div><div class=\"line\">        Persion p = d.Persion(new ThinPersonBuilder());</div><div class=\"line\">        p.Show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"CAP","date":"2019-12-17T15:03:00.000Z","comments":0,"keywords":"CAP","_content":"\n### CAP理论\n\nCAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP原则指的是，这三个要素最多只能同时实现两点，不能三者兼顾。\n\n- 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否完全一致。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。CAP中说，不可能同时满足的这个一致性指的是强一致性。\n- 可用性（A）：在集群中一部分节点故障后，集群整体是否还能对请求作出响应。\n- 分区容错性（P）：是指在分布式系统在遇到某节点或者网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。\n\n#### CAP证明\n\n假设有两台服务器，一台放着应用A和数据库，一台放着应用B和数据库，他们之间的网络可以互通，也就相当于分布式系统的两个部分。\n\n在满足一致性的时候，两台服务器 N1和N2，一开始两台服务器的数据是一样的，DB0=DB0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。       \n\n![CAP](../../../uploads/algorithm/cap/1.png)\n\n当用户通过N1中的A应用请求数据更新到服务器DB0后，这时N1中的服务器DB0变为DB1，通过分布式系统的数据同步更新操作，N2服务器中的数据库也更新为了DB1，这时，用户通过B向数据库发起请求得到的数据就是即时更新后的数据DB1。\n上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，N1和N2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性。\n假设N1和N2之间通信的时候网络突然出现故障，有用户向N1发送数据更新请求，那N1中的数据DB0将被更新为DB1，由于网络是断开的，N2中的数据库仍旧是DB0；如果这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据DB1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据DB0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据DB1。\n这就说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。\n#### CAP权衡\n\n- CA：这种情况在分布式系统几乎不存在。因为在分布式环境下，网络分区是一个自然的事实。所以分区是必然的，如果舍弃了P，那就没有分布式系统的概念了，就没有必要讨论CAP原则了。对于一个分布式系统来说，P是一个基本要求，CAP三者中，只能在CA两者之间做权衡，并且要想尽办法提升P。\n- CP：如果一个分布式系统不要求强的可用性，容许系统停机或者长时间无响应，那可以舍弃A。设计成CP的系统其实也不少，其中最典型的就是很多分布式数据库，他们都是设计成CP的。在发生极端情况时，优先保证数据的强一致性，代价就是舍弃系统的可用性。如Redis、HBase等，还有分布式系统中常用的Zookeeper也是在CAP三者之中选择优先保证CP的。\n- AP：要高可用并允许分区，则需放弃一致性。一旦网络问题发生，节点之间可能会失去联系。为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。但是大部分系统中舍弃了一致性选择可用性，其实舍弃了强一致性，保证了最终一次性。例如买火车票时，下单时还有票但是实际可能没票了，会出现短暂的数据不一致的情况，但是最终数据会保证一致。\n","source":"_posts/distributed/CAP.md","raw":"---\ntitle: CAP\ndate: 2019-12-17 23:03\ncomments: false\ntags: \n- CAP\ncategories: \n- CAP\nkeywords: CAP\n---\n\n### CAP理论\n\nCAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP原则指的是，这三个要素最多只能同时实现两点，不能三者兼顾。\n\n- 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否完全一致。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。CAP中说，不可能同时满足的这个一致性指的是强一致性。\n- 可用性（A）：在集群中一部分节点故障后，集群整体是否还能对请求作出响应。\n- 分区容错性（P）：是指在分布式系统在遇到某节点或者网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。\n\n#### CAP证明\n\n假设有两台服务器，一台放着应用A和数据库，一台放着应用B和数据库，他们之间的网络可以互通，也就相当于分布式系统的两个部分。\n\n在满足一致性的时候，两台服务器 N1和N2，一开始两台服务器的数据是一样的，DB0=DB0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。       \n\n![CAP](../../../uploads/algorithm/cap/1.png)\n\n当用户通过N1中的A应用请求数据更新到服务器DB0后，这时N1中的服务器DB0变为DB1，通过分布式系统的数据同步更新操作，N2服务器中的数据库也更新为了DB1，这时，用户通过B向数据库发起请求得到的数据就是即时更新后的数据DB1。\n上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，N1和N2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性。\n假设N1和N2之间通信的时候网络突然出现故障，有用户向N1发送数据更新请求，那N1中的数据DB0将被更新为DB1，由于网络是断开的，N2中的数据库仍旧是DB0；如果这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据DB1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据DB0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据DB1。\n这就说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。\n#### CAP权衡\n\n- CA：这种情况在分布式系统几乎不存在。因为在分布式环境下，网络分区是一个自然的事实。所以分区是必然的，如果舍弃了P，那就没有分布式系统的概念了，就没有必要讨论CAP原则了。对于一个分布式系统来说，P是一个基本要求，CAP三者中，只能在CA两者之间做权衡，并且要想尽办法提升P。\n- CP：如果一个分布式系统不要求强的可用性，容许系统停机或者长时间无响应，那可以舍弃A。设计成CP的系统其实也不少，其中最典型的就是很多分布式数据库，他们都是设计成CP的。在发生极端情况时，优先保证数据的强一致性，代价就是舍弃系统的可用性。如Redis、HBase等，还有分布式系统中常用的Zookeeper也是在CAP三者之中选择优先保证CP的。\n- AP：要高可用并允许分区，则需放弃一致性。一旦网络问题发生，节点之间可能会失去联系。为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。但是大部分系统中舍弃了一致性选择可用性，其实舍弃了强一致性，保证了最终一次性。例如买火车票时，下单时还有票但是实际可能没票了，会出现短暂的数据不一致的情况，但是最终数据会保证一致。\n","slug":"distributed/CAP","published":1,"updated":"2020-01-02T05:49:23.758Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs1001qn0zt6492qdov","content":"<h3 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h3><p>CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP原则指的是，这三个要素最多只能同时实现两点，不能三者兼顾。</p>\n<ul>\n<li>一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否完全一致。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。CAP中说，不可能同时满足的这个一致性指的是强一致性。</li>\n<li>可用性（A）：在集群中一部分节点故障后，集群整体是否还能对请求作出响应。</li>\n<li>分区容错性（P）：是指在分布式系统在遇到某节点或者网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</li>\n</ul>\n<h4 id=\"CAP证明\"><a href=\"#CAP证明\" class=\"headerlink\" title=\"CAP证明\"></a>CAP证明</h4><p>假设有两台服务器，一台放着应用A和数据库，一台放着应用B和数据库，他们之间的网络可以互通，也就相当于分布式系统的两个部分。</p>\n<p>在满足一致性的时候，两台服务器 N1和N2，一开始两台服务器的数据是一样的，DB0=DB0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。       </p>\n<p><img src=\"../../../uploads/algorithm/cap/1.png\" alt=\"CAP\"></p>\n<p>当用户通过N1中的A应用请求数据更新到服务器DB0后，这时N1中的服务器DB0变为DB1，通过分布式系统的数据同步更新操作，N2服务器中的数据库也更新为了DB1，这时，用户通过B向数据库发起请求得到的数据就是即时更新后的数据DB1。<br>上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，N1和N2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性。<br>假设N1和N2之间通信的时候网络突然出现故障，有用户向N1发送数据更新请求，那N1中的数据DB0将被更新为DB1，由于网络是断开的，N2中的数据库仍旧是DB0；如果这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据DB1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据DB0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据DB1。<br>这就说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。</p>\n<h4 id=\"CAP权衡\"><a href=\"#CAP权衡\" class=\"headerlink\" title=\"CAP权衡\"></a>CAP权衡</h4><ul>\n<li>CA：这种情况在分布式系统几乎不存在。因为在分布式环境下，网络分区是一个自然的事实。所以分区是必然的，如果舍弃了P，那就没有分布式系统的概念了，就没有必要讨论CAP原则了。对于一个分布式系统来说，P是一个基本要求，CAP三者中，只能在CA两者之间做权衡，并且要想尽办法提升P。</li>\n<li>CP：如果一个分布式系统不要求强的可用性，容许系统停机或者长时间无响应，那可以舍弃A。设计成CP的系统其实也不少，其中最典型的就是很多分布式数据库，他们都是设计成CP的。在发生极端情况时，优先保证数据的强一致性，代价就是舍弃系统的可用性。如Redis、HBase等，还有分布式系统中常用的Zookeeper也是在CAP三者之中选择优先保证CP的。</li>\n<li>AP：要高可用并允许分区，则需放弃一致性。一旦网络问题发生，节点之间可能会失去联系。为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。但是大部分系统中舍弃了一致性选择可用性，其实舍弃了强一致性，保证了最终一次性。例如买火车票时，下单时还有票但是实际可能没票了，会出现短暂的数据不一致的情况，但是最终数据会保证一致。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CAP理论\"><a href=\"#CAP理论\" class=\"headerlink\" title=\"CAP理论\"></a>CAP理论</h3><p>CAP原则又称CAP定理，指的是在一个分布式系统中，一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）。CAP原则指的是，这三个要素最多只能同时实现两点，不能三者兼顾。</p>\n<ul>\n<li>一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否完全一致。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。CAP中说，不可能同时满足的这个一致性指的是强一致性。</li>\n<li>可用性（A）：在集群中一部分节点故障后，集群整体是否还能对请求作出响应。</li>\n<li>分区容错性（P）：是指在分布式系统在遇到某节点或者网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</li>\n</ul>\n<h4 id=\"CAP证明\"><a href=\"#CAP证明\" class=\"headerlink\" title=\"CAP证明\"></a>CAP证明</h4><p>假设有两台服务器，一台放着应用A和数据库，一台放着应用B和数据库，他们之间的网络可以互通，也就相当于分布式系统的两个部分。</p>\n<p>在满足一致性的时候，两台服务器 N1和N2，一开始两台服务器的数据是一样的，DB0=DB0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。       </p>\n<p><img src=\"../../../uploads/algorithm/cap/1.png\" alt=\"CAP\"></p>\n<p>当用户通过N1中的A应用请求数据更新到服务器DB0后，这时N1中的服务器DB0变为DB1，通过分布式系统的数据同步更新操作，N2服务器中的数据库也更新为了DB1，这时，用户通过B向数据库发起请求得到的数据就是即时更新后的数据DB1。<br>上面是正常运作的情况，但分布式系统中，最大的问题就是网络传输问题，现在假设一种极端情况，N1和N2之间的网络断开了，但我们仍要支持这种网络异常，也就是满足分区容错性。<br>假设N1和N2之间通信的时候网络突然出现故障，有用户向N1发送数据更新请求，那N1中的数据DB0将被更新为DB1，由于网络是断开的，N2中的数据库仍旧是DB0；如果这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据DB1，怎么办呢？有二种选择，第一，牺牲数据一致性，响应旧的数据DB0给用户；第二，牺牲可用性，阻塞等待，直到网络连接恢复，数据更新操作完成之后，再给用户响应最新的数据DB1。<br>这就说明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。也就是说分布式系统不可能同时满足三个特性。</p>\n<h4 id=\"CAP权衡\"><a href=\"#CAP权衡\" class=\"headerlink\" title=\"CAP权衡\"></a>CAP权衡</h4><ul>\n<li>CA：这种情况在分布式系统几乎不存在。因为在分布式环境下，网络分区是一个自然的事实。所以分区是必然的，如果舍弃了P，那就没有分布式系统的概念了，就没有必要讨论CAP原则了。对于一个分布式系统来说，P是一个基本要求，CAP三者中，只能在CA两者之间做权衡，并且要想尽办法提升P。</li>\n<li>CP：如果一个分布式系统不要求强的可用性，容许系统停机或者长时间无响应，那可以舍弃A。设计成CP的系统其实也不少，其中最典型的就是很多分布式数据库，他们都是设计成CP的。在发生极端情况时，优先保证数据的强一致性，代价就是舍弃系统的可用性。如Redis、HBase等，还有分布式系统中常用的Zookeeper也是在CAP三者之中选择优先保证CP的。</li>\n<li>AP：要高可用并允许分区，则需放弃一致性。一旦网络问题发生，节点之间可能会失去联系。为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。但是大部分系统中舍弃了一致性选择可用性，其实舍弃了强一致性，保证了最终一次性。例如买火车票时，下单时还有票但是实际可能没票了，会出现短暂的数据不一致的情况，但是最终数据会保证一致。</li>\n</ul>\n"},{"title":"桥接模式","date":"2017-07-26T06:35:26.000Z","keywords":"设计模式 桥接模式","_content":"\n## 桥接模式\n\n### 介绍\n\n桥接适用于把抽象化与实现化解耦，使得二者可以独立变化。（结构型模式）\n用来解决两个或者多个纬度的变化，使用桥接模式可以降低复杂度。将两个角色之间的继承关系改为聚合关系，这样两者可以独立的变化。\n\n### 例子\n\n就像大话设计模式中讲的一样，每个手机都有其对应的功能（软件），而这些功能在不同手机上可能不兼容，那么列出一个手机品牌和其对应的部分功能的结构图如下：\n![结构图](../../../uploads/bridge/1.jpg)\n但是这样的话，不管要增加一个手机品牌还是要增加一个软件，操作都会很复杂。\n因此用桥接模式把这这两个维度之间的继承关系改为聚合关系会使这个问题变得简单，聚合关系的结构图如下：\n![结构图](../../../uploads/bridge/2.jpg)\n\n### DEMO\n手机软件抽象类\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic abstract class HandSetSoft {\n    public abstract void run();\n}\n```\n手机游戏\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetGame extends HandSetSoft {\n    @Override\n    public void run() {\n        System.out.println(\"运行手机游戏\");\n    }\n}\n```\n手机通讯录\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetAdressList extends HandSetSoft {\n    @Override\n    public void run() {\n        System.out.println(\"运行手机通讯录\");\n    }\n}\n```\n手机品牌\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic abstract class HandSetBrand {\n    HandSetSoft handSetSoft;\n\n    public void setHandSetSoft(HandSetSoft handSetSoft){\n        this.handSetSoft = handSetSoft;\n    }\n\n    public abstract void run();\n}\n```\n手机品牌N\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetBrandN extends HandSetBrand {\n    @Override\n    public void run() {\n        handSetSoft.run();\n    }\n}\n```\n手机品牌A\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetBrandA extends HandSetBrand {\n    @Override\n    public void run() {\n        handSetSoft.run();\n    }\n}\n```\n测试类\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class Test {\n    public static void main(String[] args) {\n        HandSetBrand hb ;\n        hb = new HandSetBrandA();\n        hb.setHandSetSoft(new HandSetGame());\n        hb.run();\n        hb.setHandSetSoft(new HandSetAdressList());\n        hb.run();\n        hb = new HandSetBrandN();\n        hb.setHandSetSoft(new HandSetGame());\n        hb.run();\n        hb.setHandSetSoft(new HandSetAdressList());\n        hb.run();\n    }\n}\n```","source":"_posts/Design_pattern/9_Bridge.md","raw":"---\ntitle: 桥接模式\ndate: 2017-07-26 14:35:26\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式 桥接模式\n---\n\n## 桥接模式\n\n### 介绍\n\n桥接适用于把抽象化与实现化解耦，使得二者可以独立变化。（结构型模式）\n用来解决两个或者多个纬度的变化，使用桥接模式可以降低复杂度。将两个角色之间的继承关系改为聚合关系，这样两者可以独立的变化。\n\n### 例子\n\n就像大话设计模式中讲的一样，每个手机都有其对应的功能（软件），而这些功能在不同手机上可能不兼容，那么列出一个手机品牌和其对应的部分功能的结构图如下：\n![结构图](../../../uploads/bridge/1.jpg)\n但是这样的话，不管要增加一个手机品牌还是要增加一个软件，操作都会很复杂。\n因此用桥接模式把这这两个维度之间的继承关系改为聚合关系会使这个问题变得简单，聚合关系的结构图如下：\n![结构图](../../../uploads/bridge/2.jpg)\n\n### DEMO\n手机软件抽象类\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic abstract class HandSetSoft {\n    public abstract void run();\n}\n```\n手机游戏\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetGame extends HandSetSoft {\n    @Override\n    public void run() {\n        System.out.println(\"运行手机游戏\");\n    }\n}\n```\n手机通讯录\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetAdressList extends HandSetSoft {\n    @Override\n    public void run() {\n        System.out.println(\"运行手机通讯录\");\n    }\n}\n```\n手机品牌\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic abstract class HandSetBrand {\n    HandSetSoft handSetSoft;\n\n    public void setHandSetSoft(HandSetSoft handSetSoft){\n        this.handSetSoft = handSetSoft;\n    }\n\n    public abstract void run();\n}\n```\n手机品牌N\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetBrandN extends HandSetBrand {\n    @Override\n    public void run() {\n        handSetSoft.run();\n    }\n}\n```\n手机品牌A\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class HandSetBrandA extends HandSetBrand {\n    @Override\n    public void run() {\n        handSetSoft.run();\n    }\n}\n```\n测试类\n```\npackage factory.pattern.bridge;\n\n/**\n * Created by FK on 2017/7/26.\n */\npublic class Test {\n    public static void main(String[] args) {\n        HandSetBrand hb ;\n        hb = new HandSetBrandA();\n        hb.setHandSetSoft(new HandSetGame());\n        hb.run();\n        hb.setHandSetSoft(new HandSetAdressList());\n        hb.run();\n        hb = new HandSetBrandN();\n        hb.setHandSetSoft(new HandSetGame());\n        hb.run();\n        hb.setHandSetSoft(new HandSetAdressList());\n        hb.run();\n    }\n}\n```","slug":"Design_pattern/9_Bridge","published":1,"updated":"2020-01-02T05:49:23.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck6lvszs2001tn0ztj39adhqs","content":"<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>桥接适用于把抽象化与实现化解耦，使得二者可以独立变化。（结构型模式）<br>用来解决两个或者多个纬度的变化，使用桥接模式可以降低复杂度。将两个角色之间的继承关系改为聚合关系，这样两者可以独立的变化。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>就像大话设计模式中讲的一样，每个手机都有其对应的功能（软件），而这些功能在不同手机上可能不兼容，那么列出一个手机品牌和其对应的部分功能的结构图如下：<br><img src=\"../../../uploads/bridge/1.jpg\" alt=\"结构图\"><br>但是这样的话，不管要增加一个手机品牌还是要增加一个软件，操作都会很复杂。<br>因此用桥接模式把这这两个维度之间的继承关系改为聚合关系会使这个问题变得简单，聚合关系的结构图如下：<br><img src=\"../../../uploads/bridge/2.jpg\" alt=\"结构图\"></p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>手机软件抽象类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class HandSetSoft &#123;</div><div class=\"line\">    public abstract void run();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机游戏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetGame extends HandSetSoft &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(&quot;运行手机游戏&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机通讯录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetAdressList extends HandSetSoft &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(&quot;运行手机通讯录&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机品牌<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class HandSetBrand &#123;</div><div class=\"line\">    HandSetSoft handSetSoft;</div><div class=\"line\"></div><div class=\"line\">    public void setHandSetSoft(HandSetSoft handSetSoft)&#123;</div><div class=\"line\">        this.handSetSoft = handSetSoft;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public abstract void run();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机品牌N<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetBrandN extends HandSetBrand &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        handSetSoft.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机品牌A<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetBrandA extends HandSetBrand &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        handSetSoft.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        HandSetBrand hb ;</div><div class=\"line\">        hb = new HandSetBrandA();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetGame());</div><div class=\"line\">        hb.run();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetAdressList());</div><div class=\"line\">        hb.run();</div><div class=\"line\">        hb = new HandSetBrandN();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetGame());</div><div class=\"line\">        hb.run();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetAdressList());</div><div class=\"line\">        hb.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>桥接适用于把抽象化与实现化解耦，使得二者可以独立变化。（结构型模式）<br>用来解决两个或者多个纬度的变化，使用桥接模式可以降低复杂度。将两个角色之间的继承关系改为聚合关系，这样两者可以独立的变化。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>就像大话设计模式中讲的一样，每个手机都有其对应的功能（软件），而这些功能在不同手机上可能不兼容，那么列出一个手机品牌和其对应的部分功能的结构图如下：<br><img src=\"../../../uploads/bridge/1.jpg\" alt=\"结构图\"><br>但是这样的话，不管要增加一个手机品牌还是要增加一个软件，操作都会很复杂。<br>因此用桥接模式把这这两个维度之间的继承关系改为聚合关系会使这个问题变得简单，聚合关系的结构图如下：<br><img src=\"../../../uploads/bridge/2.jpg\" alt=\"结构图\"></p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>手机软件抽象类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class HandSetSoft &#123;</div><div class=\"line\">    public abstract void run();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机游戏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetGame extends HandSetSoft &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(&quot;运行手机游戏&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机通讯录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetAdressList extends HandSetSoft &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        System.out.println(&quot;运行手机通讯录&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机品牌<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class HandSetBrand &#123;</div><div class=\"line\">    HandSetSoft handSetSoft;</div><div class=\"line\"></div><div class=\"line\">    public void setHandSetSoft(HandSetSoft handSetSoft)&#123;</div><div class=\"line\">        this.handSetSoft = handSetSoft;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public abstract void run();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机品牌N<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetBrandN extends HandSetBrand &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        handSetSoft.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>手机品牌A<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class HandSetBrandA extends HandSetBrand &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        handSetSoft.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.bridge;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/7/26.</div><div class=\"line\"> */</div><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        HandSetBrand hb ;</div><div class=\"line\">        hb = new HandSetBrandA();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetGame());</div><div class=\"line\">        hb.run();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetAdressList());</div><div class=\"line\">        hb.run();</div><div class=\"line\">        hb = new HandSetBrandN();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetGame());</div><div class=\"line\">        hb.run();</div><div class=\"line\">        hb.setHandSetSoft(new HandSetAdressList());</div><div class=\"line\">        hb.run();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"一致性hash","date":"2019-12-16T14:17:00.000Z","comments":0,"keywords":"一致性hash","_content":"\n### 一致性hash\n\n一致性hash算法是一种特殊的hash算法，在移除或添加一个服务器时，能尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。\n普通的hash算法通过hash某个维度的值去得到余数，这样在新增或者下线服务的时候，原来的映射关系就会发生大量失效。例如使用分布式缓存来缓存用户的数据，通过用户id % 服务数，当增加一个缓存服务时，原有的hash映射关系大部分都失效，这会造成缓存雪崩，导致严重的后果。\n\n#### 原理\n\n一致性哈希算法将整个哈希值空间映射成一个虚拟的圆环，整个哈希空间的取值范围为0~2^32-1。整个空间按顺时针方向组织。0~2^32-1在零点方向重合。接下来使用如下算法对服务请求进行映射，将服务请求使用哈希算法算出对应的hash值，然后根据hash值的位置沿圆环顺时针查找，第一台遇到的服务器就是所对应的处理请求服务器。当增加一台新的服务器，受影响的数据仅仅是新添加的服务器到其环空间中前一台的服务器（也就是顺着逆时针方向遇到的第一台服务器）之间的数据，其他都不会受到影响。综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性 。\n\n假设有4台服务器，地址为ip1,ip2,ip3,ip4。一致性hash会先计算四个ip对应的hash值，这样四个服务在一致性hash环上如下：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/1.png)\n\n此时用户在请求时，根据hash(userId)计算路由规则，看hash到环上哪个位置，然后从环上位置顺时针找到下一个服务作为请求的服务。\n\n![一致性hash](../../../uploads/algorithm/一致性hash/2.png)\n\n如上图可知user1,user2的请求会落到服务器ip2进行处理，User3的请求会落到服务器ip3进行处理，user4的请求会落到服务器ip4进行处理，user5,user6的请求会落到服务器ip1进行处理。\n\n当ip2的服务器挂了的时候，一致性hash环大致如下图：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/3.png)\n\n\n根据顺时针规则可知user1,user2的请求会被服务器ip3进行处理，而其它用户的请求对应的处理服务器不变，只有ip1到iP2环之间的请求映射关系会被破坏。\n\n如果是新增一个ip5服务：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/4.png)\n\n也只有ip4到ip5之间的请求映射关系会被改变，从请求到ip1变为了请求到ip5。\n\n#### 特性\n\n- 单调性：单调性是指如果已经有一些请求通过hash分派到了相应的服务器进行处理，又有新的服务器加入系统时，应保证原有的请求可以被映射到原有的或新的服务器中，而不会被映射到原来的其他服务器上。\n- 分散性：分布式环境中，客户端请求的时候可能不知道所有的服务器，可能只知道一部分服务器，在客户端看来他看到部分服务器会形成一个完整的还。如果多个客户端把部分服务器作为一个完整的hash环，那么可能导致，同一个用户的请求被路由到不同的服务进行处理。这种情况是应该避免的，因为不能保证同一个用户的请求落到同一个服务器。分散性就是只上述情况发生的严重程度。一致性hash具有很低的分散性。\n- 平衡性：平衡性也就是说负载均衡，是指客户端hash后的请求应该能够分散到不同的服务器去。一致性hash可以做到每个服务器都进行处理请求，但是不能保证每个服务器处理的请求大致相同（如下）。\n\n![一致性hash](../../../uploads/algorithm/一致性hash/5.png)\n\n服务器ip1,ip2,ip3经过hash后落到了一致性hash环上，从图中hash值分布可知ip1会负责处理大概80%的请求，而ip2和ip3则只会负责处理大概20%的请求，虽然三个机器都在处理请求，但是明显每个机器的负载不均衡，这样称为一致性hash的倾斜，虚拟节点的出现就是为了解决这个问题。\n\n#### 虚拟节点\n\n当服务器节点比较少的时候会出现上节所说的一致性hash倾斜的问题，一个解决方法是多加机器，但是加机器是有成本的，那么就加虚拟节点，比如上面三个机器，每个机器引入1个虚拟节点后的一致性hash环的图如下：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/6.png)\n\n其中ip1-1是ip1的虚拟节点，ip2-1是ip2的虚拟节点，ip3-1是ip3的虚拟节点。\n可知当物理机器数目为M，虚拟节点为N的时候，实际hash环上节点个数为M*N。比如当客户端计算的hash值处于ip2和ip3或者处于ip2-1和ip3-1之间时候使用ip3服务器进行处理。\n\n\n","source":"_posts/algorithm/一致性hash.md","raw":"---\ntitle: 一致性hash\ndate: 2019-12-16 22:17\ncomments: false\ntags: \n- 一致性hash\ncategories: \n- 一致性hash\nkeywords: 一致性hash\n---\n\n### 一致性hash\n\n一致性hash算法是一种特殊的hash算法，在移除或添加一个服务器时，能尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。\n普通的hash算法通过hash某个维度的值去得到余数，这样在新增或者下线服务的时候，原来的映射关系就会发生大量失效。例如使用分布式缓存来缓存用户的数据，通过用户id % 服务数，当增加一个缓存服务时，原有的hash映射关系大部分都失效，这会造成缓存雪崩，导致严重的后果。\n\n#### 原理\n\n一致性哈希算法将整个哈希值空间映射成一个虚拟的圆环，整个哈希空间的取值范围为0~2^32-1。整个空间按顺时针方向组织。0~2^32-1在零点方向重合。接下来使用如下算法对服务请求进行映射，将服务请求使用哈希算法算出对应的hash值，然后根据hash值的位置沿圆环顺时针查找，第一台遇到的服务器就是所对应的处理请求服务器。当增加一台新的服务器，受影响的数据仅仅是新添加的服务器到其环空间中前一台的服务器（也就是顺着逆时针方向遇到的第一台服务器）之间的数据，其他都不会受到影响。综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性 。\n\n假设有4台服务器，地址为ip1,ip2,ip3,ip4。一致性hash会先计算四个ip对应的hash值，这样四个服务在一致性hash环上如下：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/1.png)\n\n此时用户在请求时，根据hash(userId)计算路由规则，看hash到环上哪个位置，然后从环上位置顺时针找到下一个服务作为请求的服务。\n\n![一致性hash](../../../uploads/algorithm/一致性hash/2.png)\n\n如上图可知user1,user2的请求会落到服务器ip2进行处理，User3的请求会落到服务器ip3进行处理，user4的请求会落到服务器ip4进行处理，user5,user6的请求会落到服务器ip1进行处理。\n\n当ip2的服务器挂了的时候，一致性hash环大致如下图：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/3.png)\n\n\n根据顺时针规则可知user1,user2的请求会被服务器ip3进行处理，而其它用户的请求对应的处理服务器不变，只有ip1到iP2环之间的请求映射关系会被破坏。\n\n如果是新增一个ip5服务：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/4.png)\n\n也只有ip4到ip5之间的请求映射关系会被改变，从请求到ip1变为了请求到ip5。\n\n#### 特性\n\n- 单调性：单调性是指如果已经有一些请求通过hash分派到了相应的服务器进行处理，又有新的服务器加入系统时，应保证原有的请求可以被映射到原有的或新的服务器中，而不会被映射到原来的其他服务器上。\n- 分散性：分布式环境中，客户端请求的时候可能不知道所有的服务器，可能只知道一部分服务器，在客户端看来他看到部分服务器会形成一个完整的还。如果多个客户端把部分服务器作为一个完整的hash环，那么可能导致，同一个用户的请求被路由到不同的服务进行处理。这种情况是应该避免的，因为不能保证同一个用户的请求落到同一个服务器。分散性就是只上述情况发生的严重程度。一致性hash具有很低的分散性。\n- 平衡性：平衡性也就是说负载均衡，是指客户端hash后的请求应该能够分散到不同的服务器去。一致性hash可以做到每个服务器都进行处理请求，但是不能保证每个服务器处理的请求大致相同（如下）。\n\n![一致性hash](../../../uploads/algorithm/一致性hash/5.png)\n\n服务器ip1,ip2,ip3经过hash后落到了一致性hash环上，从图中hash值分布可知ip1会负责处理大概80%的请求，而ip2和ip3则只会负责处理大概20%的请求，虽然三个机器都在处理请求，但是明显每个机器的负载不均衡，这样称为一致性hash的倾斜，虚拟节点的出现就是为了解决这个问题。\n\n#### 虚拟节点\n\n当服务器节点比较少的时候会出现上节所说的一致性hash倾斜的问题，一个解决方法是多加机器，但是加机器是有成本的，那么就加虚拟节点，比如上面三个机器，每个机器引入1个虚拟节点后的一致性hash环的图如下：\n\n![一致性hash](../../../uploads/algorithm/一致性hash/6.png)\n\n其中ip1-1是ip1的虚拟节点，ip2-1是ip2的虚拟节点，ip3-1是ip3的虚拟节点。\n可知当物理机器数目为M，虚拟节点为N的时候，实际hash环上节点个数为M*N。比如当客户端计算的hash值处于ip2和ip3或者处于ip2-1和ip3-1之间时候使用ip3服务器进行处理。\n\n\n","slug":"algorithm/一致性hash","published":1,"updated":"2020-01-02T05:49:23.757Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs3001yn0zt74fo401g","content":"<h3 id=\"一致性hash\"><a href=\"#一致性hash\" class=\"headerlink\" title=\"一致性hash\"></a>一致性hash</h3><p>一致性hash算法是一种特殊的hash算法，在移除或添加一个服务器时，能尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。<br>普通的hash算法通过hash某个维度的值去得到余数，这样在新增或者下线服务的时候，原来的映射关系就会发生大量失效。例如使用分布式缓存来缓存用户的数据，通过用户id % 服务数，当增加一个缓存服务时，原有的hash映射关系大部分都失效，这会造成缓存雪崩，导致严重的后果。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>一致性哈希算法将整个哈希值空间映射成一个虚拟的圆环，整个哈希空间的取值范围为0~2^32-1。整个空间按顺时针方向组织。0~2^32-1在零点方向重合。接下来使用如下算法对服务请求进行映射，将服务请求使用哈希算法算出对应的hash值，然后根据hash值的位置沿圆环顺时针查找，第一台遇到的服务器就是所对应的处理请求服务器。当增加一台新的服务器，受影响的数据仅仅是新添加的服务器到其环空间中前一台的服务器（也就是顺着逆时针方向遇到的第一台服务器）之间的数据，其他都不会受到影响。综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性 。</p>\n<p>假设有4台服务器，地址为ip1,ip2,ip3,ip4。一致性hash会先计算四个ip对应的hash值，这样四个服务在一致性hash环上如下：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/1.png\" alt=\"一致性hash\"></p>\n<p>此时用户在请求时，根据hash(userId)计算路由规则，看hash到环上哪个位置，然后从环上位置顺时针找到下一个服务作为请求的服务。</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/2.png\" alt=\"一致性hash\"></p>\n<p>如上图可知user1,user2的请求会落到服务器ip2进行处理，User3的请求会落到服务器ip3进行处理，user4的请求会落到服务器ip4进行处理，user5,user6的请求会落到服务器ip1进行处理。</p>\n<p>当ip2的服务器挂了的时候，一致性hash环大致如下图：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/3.png\" alt=\"一致性hash\"></p>\n<p>根据顺时针规则可知user1,user2的请求会被服务器ip3进行处理，而其它用户的请求对应的处理服务器不变，只有ip1到iP2环之间的请求映射关系会被破坏。</p>\n<p>如果是新增一个ip5服务：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/4.png\" alt=\"一致性hash\"></p>\n<p>也只有ip4到ip5之间的请求映射关系会被改变，从请求到ip1变为了请求到ip5。</p>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>单调性：单调性是指如果已经有一些请求通过hash分派到了相应的服务器进行处理，又有新的服务器加入系统时，应保证原有的请求可以被映射到原有的或新的服务器中，而不会被映射到原来的其他服务器上。</li>\n<li>分散性：分布式环境中，客户端请求的时候可能不知道所有的服务器，可能只知道一部分服务器，在客户端看来他看到部分服务器会形成一个完整的还。如果多个客户端把部分服务器作为一个完整的hash环，那么可能导致，同一个用户的请求被路由到不同的服务进行处理。这种情况是应该避免的，因为不能保证同一个用户的请求落到同一个服务器。分散性就是只上述情况发生的严重程度。一致性hash具有很低的分散性。</li>\n<li>平衡性：平衡性也就是说负载均衡，是指客户端hash后的请求应该能够分散到不同的服务器去。一致性hash可以做到每个服务器都进行处理请求，但是不能保证每个服务器处理的请求大致相同（如下）。</li>\n</ul>\n<p><img src=\"../../../uploads/algorithm/一致性hash/5.png\" alt=\"一致性hash\"></p>\n<p>服务器ip1,ip2,ip3经过hash后落到了一致性hash环上，从图中hash值分布可知ip1会负责处理大概80%的请求，而ip2和ip3则只会负责处理大概20%的请求，虽然三个机器都在处理请求，但是明显每个机器的负载不均衡，这样称为一致性hash的倾斜，虚拟节点的出现就是为了解决这个问题。</p>\n<h4 id=\"虚拟节点\"><a href=\"#虚拟节点\" class=\"headerlink\" title=\"虚拟节点\"></a>虚拟节点</h4><p>当服务器节点比较少的时候会出现上节所说的一致性hash倾斜的问题，一个解决方法是多加机器，但是加机器是有成本的，那么就加虚拟节点，比如上面三个机器，每个机器引入1个虚拟节点后的一致性hash环的图如下：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/6.png\" alt=\"一致性hash\"></p>\n<p>其中ip1-1是ip1的虚拟节点，ip2-1是ip2的虚拟节点，ip3-1是ip3的虚拟节点。<br>可知当物理机器数目为M，虚拟节点为N的时候，实际hash环上节点个数为M*N。比如当客户端计算的hash值处于ip2和ip3或者处于ip2-1和ip3-1之间时候使用ip3服务器进行处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一致性hash\"><a href=\"#一致性hash\" class=\"headerlink\" title=\"一致性hash\"></a>一致性hash</h3><p>一致性hash算法是一种特殊的hash算法，在移除或添加一个服务器时，能尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。<br>普通的hash算法通过hash某个维度的值去得到余数，这样在新增或者下线服务的时候，原来的映射关系就会发生大量失效。例如使用分布式缓存来缓存用户的数据，通过用户id % 服务数，当增加一个缓存服务时，原有的hash映射关系大部分都失效，这会造成缓存雪崩，导致严重的后果。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>一致性哈希算法将整个哈希值空间映射成一个虚拟的圆环，整个哈希空间的取值范围为0~2^32-1。整个空间按顺时针方向组织。0~2^32-1在零点方向重合。接下来使用如下算法对服务请求进行映射，将服务请求使用哈希算法算出对应的hash值，然后根据hash值的位置沿圆环顺时针查找，第一台遇到的服务器就是所对应的处理请求服务器。当增加一台新的服务器，受影响的数据仅仅是新添加的服务器到其环空间中前一台的服务器（也就是顺着逆时针方向遇到的第一台服务器）之间的数据，其他都不会受到影响。综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性 。</p>\n<p>假设有4台服务器，地址为ip1,ip2,ip3,ip4。一致性hash会先计算四个ip对应的hash值，这样四个服务在一致性hash环上如下：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/1.png\" alt=\"一致性hash\"></p>\n<p>此时用户在请求时，根据hash(userId)计算路由规则，看hash到环上哪个位置，然后从环上位置顺时针找到下一个服务作为请求的服务。</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/2.png\" alt=\"一致性hash\"></p>\n<p>如上图可知user1,user2的请求会落到服务器ip2进行处理，User3的请求会落到服务器ip3进行处理，user4的请求会落到服务器ip4进行处理，user5,user6的请求会落到服务器ip1进行处理。</p>\n<p>当ip2的服务器挂了的时候，一致性hash环大致如下图：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/3.png\" alt=\"一致性hash\"></p>\n<p>根据顺时针规则可知user1,user2的请求会被服务器ip3进行处理，而其它用户的请求对应的处理服务器不变，只有ip1到iP2环之间的请求映射关系会被破坏。</p>\n<p>如果是新增一个ip5服务：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/4.png\" alt=\"一致性hash\"></p>\n<p>也只有ip4到ip5之间的请求映射关系会被改变，从请求到ip1变为了请求到ip5。</p>\n<h4 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h4><ul>\n<li>单调性：单调性是指如果已经有一些请求通过hash分派到了相应的服务器进行处理，又有新的服务器加入系统时，应保证原有的请求可以被映射到原有的或新的服务器中，而不会被映射到原来的其他服务器上。</li>\n<li>分散性：分布式环境中，客户端请求的时候可能不知道所有的服务器，可能只知道一部分服务器，在客户端看来他看到部分服务器会形成一个完整的还。如果多个客户端把部分服务器作为一个完整的hash环，那么可能导致，同一个用户的请求被路由到不同的服务进行处理。这种情况是应该避免的，因为不能保证同一个用户的请求落到同一个服务器。分散性就是只上述情况发生的严重程度。一致性hash具有很低的分散性。</li>\n<li>平衡性：平衡性也就是说负载均衡，是指客户端hash后的请求应该能够分散到不同的服务器去。一致性hash可以做到每个服务器都进行处理请求，但是不能保证每个服务器处理的请求大致相同（如下）。</li>\n</ul>\n<p><img src=\"../../../uploads/algorithm/一致性hash/5.png\" alt=\"一致性hash\"></p>\n<p>服务器ip1,ip2,ip3经过hash后落到了一致性hash环上，从图中hash值分布可知ip1会负责处理大概80%的请求，而ip2和ip3则只会负责处理大概20%的请求，虽然三个机器都在处理请求，但是明显每个机器的负载不均衡，这样称为一致性hash的倾斜，虚拟节点的出现就是为了解决这个问题。</p>\n<h4 id=\"虚拟节点\"><a href=\"#虚拟节点\" class=\"headerlink\" title=\"虚拟节点\"></a>虚拟节点</h4><p>当服务器节点比较少的时候会出现上节所说的一致性hash倾斜的问题，一个解决方法是多加机器，但是加机器是有成本的，那么就加虚拟节点，比如上面三个机器，每个机器引入1个虚拟节点后的一致性hash环的图如下：</p>\n<p><img src=\"../../../uploads/algorithm/一致性hash/6.png\" alt=\"一致性hash\"></p>\n<p>其中ip1-1是ip1的虚拟节点，ip2-1是ip2的虚拟节点，ip3-1是ip3的虚拟节点。<br>可知当物理机器数目为M，虚拟节点为N的时候，实际hash环上节点个数为M*N。比如当客户端计算的hash值处于ip2和ip3或者处于ip2-1和ip3-1之间时候使用ip3服务器进行处理。</p>\n"},{"title":"JVM垃圾回收算法","date":"2019-12-07T14:42:00.000Z","comments":0,"keywords":["jvm","垃圾回收"],"_content":"\n### 垃圾回收\n\n在java运行过程中，程序计数器、虚拟机栈、本地方法栈3个区域都是线程私有的，都会随着线程而创建，随着线程而销毁。这三个区域不需要考虑内存的回收，在方法结束或者线程结束后，内存就会被回收。\n但是在java堆和方法区却不能这样，只有在程序运行的过程中才能知道会创建哪些对象，这些对象的创建和回收都是动态的，因为这部分区域的内容是需要垃圾回收的。\n\n#### 如何确定垃圾\n\n##### 引用计数法\n\n给对象添加一个引用计数器，每当有一个地方引用它时，计数器就+1；当引用失效的时候，计数器就-1；在任何时候，计数器为0的对象就是不可在被使用的，这个对象就是可回收对象。\n\n> 引用计数法的实现很简单，判定效率也比较高，但是它无法解决对象之前相互引用的问题。\n\n```\npublic class Test {\n    public Object instance = null;\n    public static void main(String[] args) {\n        Test t1 = new Test();\n        Test t2 = new Test();\n        t1.instance = t2;\n        t2.instance = t1;\n        t1 = null;\n        t2 = null;\n    }\n}\n```\n\n以上两个对象都已经为空且无任何引用，而且已经不可被访问，但是它们相互引用的对方，它们的引用计数器都不为0，使用引用计数法就无法进行回收内存。\n\n##### 可达性分析\n\n这个算法就是通过一系列 GC Roots的对象作为起点，从这些节点开始向下搜索，搜索走过的路径就是引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。\n\n![可行性算法](../../../uploads/jvm/可达性算法.png)\n\n像上图，对象o5-o6虽然互相有关联，但是到GC Roots都是不可达的，因此都会被判为可回收对象。\n\n在java中，可被作为GC Roots对象的包括：\n- 虚拟机栈中引用的对象。\n- 方法区中类静态属性引用的对象。\n- 方法区中常量引用的对象。\n- 本地方法栈中JNI（Native）引用的对象。\n\n##### java中的引用\n\nJava中因为可分为强引用、软引用、弱引用、虚引用4种，这四种引用强度依次逐渐减弱。\n\n- 强引用：强引用就是平时new 出来的对象的这类的引用，只要强引用存在，对象就不会被回收。\n- 软引用：用来描述一些有用但是不是必须的对象。在系统要发生内存溢出之前，会将这些对象列入回收范围内进行第二次回收，如果还没有足够内存才会抛出异常。（SoftReference来实现）\n- 弱引用：被弱引用关联的对象只能生存到下一次垃圾回收之前。（WeakReference来实现）\n- 虚引用：为一个对象设置虚引用关联的唯一目的是能在这个对象被垃圾回收器回收时能得到一个系统通知。（PhantomReference来实现）\n\n##### 垃圾的自救\n\n被标记为不可用的对象也不会直接被回收，一个对象的回收至少要经历两次标记的过程。如果一个对象经过可达性分析后没有与GC Roots相连接的引用链，那就会被进行第一次标记并进行一个筛选，筛选的条件是这个对象是否有必要执行finalize方法。如果没有覆盖finalize方法或者finalize方法已经被执行过，这都没有必要执行。\n\n如果这个对象有必要执行finalize方法，那这个对象会放在是一个F-Queue队列中，由虚拟机自动建立的、优先级低的Finalizer线程来执行，即这个方法会被触发，但是不保证会等待运行结束。如果对象在finalize方法中重新与引用链上的任何一个对象相关联，则在第二次标记时就会被移出即将回收的集合，否则就会被回收。\n\n```\npublic class FinalizeGC {\n    public static FinalizeGC gc = null;\n\n    @Override\n    protected void finalize() throws Throwable {\n        System.out.println(\"finalize method executed\");\n        FinalizeGC.gc = this;\n    }\n\n    public static void main(String[] args) throws Exception {\n        gc = new FinalizeGC();\n        //第一次自救\n        gc = null;\n        System.gc();\n        Thread.sleep(500);//优先级很低，等待执行下\n        if(gc != null) {\n            System.out.println(\"still alive\");\n        } else {\n            System.out.println(\"dead\");\n        }\n\n        //第二次\n        gc = null;\n        System.gc();\n        Thread.sleep(500);\n        if(gc != null) {\n            System.out.println(\"still alive\");\n        } else {\n            System.out.println(\"dead\");\n        }\n    }\n}\n```\n\n以上代码会输出\n\n```\nfinalize method executed\nstill alive\ndead\n```\n\n可以看出gc对象的finalize方法的确被执行过了，而且也自救了一次。\n\n#### 垃圾回收算法\n\n##### 标记-清除算法\n\n标记-清除（Mark-Sweep）算法分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。（后续的收集算法都是基于这种思路并对其不足进行改造而得到的）\n\nMark-Sweeo的不足：\n- 效率问题，标记和清除两个过程的效率都不高\n- 空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多可能导致以后在程序运行的过程中分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾回收。\n\n![标记清除](../../../uploads/jvm/标记清除.png)\n\n从上图可以看出在进行标记清除后，内存碎片化非常严重。\n\n##### 复制算法\n\n复制算法将可用容量划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完了就将还存储着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样每次都是对整个半区进行内存回收，内存分配也不需要考虑内存碎片的问题。\n这种算法虽然实现简单，运行高效，只是代价是将内存缩小为原来的一半，代价太高了。\n\n> 现在的商业虚拟机都采用这种回收算法来回收新生代，但是研究表明新生代中的对象98%是朝生夕死，所以不需要按1:1划分内存空间，而是将内存分为一块较大的Eden空间和两次较小的Survivor空间，每次使用Eden和其中一块Survivor空间。HotSpot默认Eden和Survivor大小比例是8:1（也就是只有百分10的空间会被浪费）。当Survivor空间不够用时，需要依赖其他内存（老年代）进行分配担保。\n\n![标记清除](../../../uploads/jvm/标记复制.png)\n\n##### 标记-整理算法\n\n复制算法在对象存活率较高时就要进行较多的复制操作，复制效率就会变低，老年代一般不直接使用复制算法。\n根据老年代的特征，有人提出了标记整理算法，在对对象进行标记之后，让所有活的对象都想一端移动，然后直接清理掉边界以外的内存。\n\n![标记整理](../../../uploads/jvm/标记整理.png)\n\n##### 分代收集算法\n\n分代收集法是目前大部分JVM所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将GC堆划分为老生代和新生代。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。\n\n###### 新生代与复制算法\n\n目前大部分JVM的GC对于新生代都采取复制算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1:1 来划分新生代。一般将新生代划分为一块较大的Eden空间和两个较小的Survivor空间(From Space, To Space)，每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另一块Survivor空间中。\n\n###### 老年代与标记复制算法\n\n而老年代因为每次只回收少量对象，因而采用标记整理算法。\n\n对象从新生代到老年代：\n1. 当新生代的 Eden Space 和 From Space 空间不足时就会发生一次GC，进行GC后，Eden Space 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 From Space 进行清理。\n2. 如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。\n3. 在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。\n4. 当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达15的对象会被移到老生代中。\n","source":"_posts/jvm/2_JVM垃圾回收算法.md","raw":"---\ntitle: JVM垃圾回收算法\ndate: 2019-12-07 22:42\ncomments: false\ntags: \n- jvm\n- 垃圾回收\ncategories: \n- jvm\nkeywords: \n- jvm\n- 垃圾回收\n---\n\n### 垃圾回收\n\n在java运行过程中，程序计数器、虚拟机栈、本地方法栈3个区域都是线程私有的，都会随着线程而创建，随着线程而销毁。这三个区域不需要考虑内存的回收，在方法结束或者线程结束后，内存就会被回收。\n但是在java堆和方法区却不能这样，只有在程序运行的过程中才能知道会创建哪些对象，这些对象的创建和回收都是动态的，因为这部分区域的内容是需要垃圾回收的。\n\n#### 如何确定垃圾\n\n##### 引用计数法\n\n给对象添加一个引用计数器，每当有一个地方引用它时，计数器就+1；当引用失效的时候，计数器就-1；在任何时候，计数器为0的对象就是不可在被使用的，这个对象就是可回收对象。\n\n> 引用计数法的实现很简单，判定效率也比较高，但是它无法解决对象之前相互引用的问题。\n\n```\npublic class Test {\n    public Object instance = null;\n    public static void main(String[] args) {\n        Test t1 = new Test();\n        Test t2 = new Test();\n        t1.instance = t2;\n        t2.instance = t1;\n        t1 = null;\n        t2 = null;\n    }\n}\n```\n\n以上两个对象都已经为空且无任何引用，而且已经不可被访问，但是它们相互引用的对方，它们的引用计数器都不为0，使用引用计数法就无法进行回收内存。\n\n##### 可达性分析\n\n这个算法就是通过一系列 GC Roots的对象作为起点，从这些节点开始向下搜索，搜索走过的路径就是引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。\n\n![可行性算法](../../../uploads/jvm/可达性算法.png)\n\n像上图，对象o5-o6虽然互相有关联，但是到GC Roots都是不可达的，因此都会被判为可回收对象。\n\n在java中，可被作为GC Roots对象的包括：\n- 虚拟机栈中引用的对象。\n- 方法区中类静态属性引用的对象。\n- 方法区中常量引用的对象。\n- 本地方法栈中JNI（Native）引用的对象。\n\n##### java中的引用\n\nJava中因为可分为强引用、软引用、弱引用、虚引用4种，这四种引用强度依次逐渐减弱。\n\n- 强引用：强引用就是平时new 出来的对象的这类的引用，只要强引用存在，对象就不会被回收。\n- 软引用：用来描述一些有用但是不是必须的对象。在系统要发生内存溢出之前，会将这些对象列入回收范围内进行第二次回收，如果还没有足够内存才会抛出异常。（SoftReference来实现）\n- 弱引用：被弱引用关联的对象只能生存到下一次垃圾回收之前。（WeakReference来实现）\n- 虚引用：为一个对象设置虚引用关联的唯一目的是能在这个对象被垃圾回收器回收时能得到一个系统通知。（PhantomReference来实现）\n\n##### 垃圾的自救\n\n被标记为不可用的对象也不会直接被回收，一个对象的回收至少要经历两次标记的过程。如果一个对象经过可达性分析后没有与GC Roots相连接的引用链，那就会被进行第一次标记并进行一个筛选，筛选的条件是这个对象是否有必要执行finalize方法。如果没有覆盖finalize方法或者finalize方法已经被执行过，这都没有必要执行。\n\n如果这个对象有必要执行finalize方法，那这个对象会放在是一个F-Queue队列中，由虚拟机自动建立的、优先级低的Finalizer线程来执行，即这个方法会被触发，但是不保证会等待运行结束。如果对象在finalize方法中重新与引用链上的任何一个对象相关联，则在第二次标记时就会被移出即将回收的集合，否则就会被回收。\n\n```\npublic class FinalizeGC {\n    public static FinalizeGC gc = null;\n\n    @Override\n    protected void finalize() throws Throwable {\n        System.out.println(\"finalize method executed\");\n        FinalizeGC.gc = this;\n    }\n\n    public static void main(String[] args) throws Exception {\n        gc = new FinalizeGC();\n        //第一次自救\n        gc = null;\n        System.gc();\n        Thread.sleep(500);//优先级很低，等待执行下\n        if(gc != null) {\n            System.out.println(\"still alive\");\n        } else {\n            System.out.println(\"dead\");\n        }\n\n        //第二次\n        gc = null;\n        System.gc();\n        Thread.sleep(500);\n        if(gc != null) {\n            System.out.println(\"still alive\");\n        } else {\n            System.out.println(\"dead\");\n        }\n    }\n}\n```\n\n以上代码会输出\n\n```\nfinalize method executed\nstill alive\ndead\n```\n\n可以看出gc对象的finalize方法的确被执行过了，而且也自救了一次。\n\n#### 垃圾回收算法\n\n##### 标记-清除算法\n\n标记-清除（Mark-Sweep）算法分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。（后续的收集算法都是基于这种思路并对其不足进行改造而得到的）\n\nMark-Sweeo的不足：\n- 效率问题，标记和清除两个过程的效率都不高\n- 空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多可能导致以后在程序运行的过程中分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾回收。\n\n![标记清除](../../../uploads/jvm/标记清除.png)\n\n从上图可以看出在进行标记清除后，内存碎片化非常严重。\n\n##### 复制算法\n\n复制算法将可用容量划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完了就将还存储着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样每次都是对整个半区进行内存回收，内存分配也不需要考虑内存碎片的问题。\n这种算法虽然实现简单，运行高效，只是代价是将内存缩小为原来的一半，代价太高了。\n\n> 现在的商业虚拟机都采用这种回收算法来回收新生代，但是研究表明新生代中的对象98%是朝生夕死，所以不需要按1:1划分内存空间，而是将内存分为一块较大的Eden空间和两次较小的Survivor空间，每次使用Eden和其中一块Survivor空间。HotSpot默认Eden和Survivor大小比例是8:1（也就是只有百分10的空间会被浪费）。当Survivor空间不够用时，需要依赖其他内存（老年代）进行分配担保。\n\n![标记清除](../../../uploads/jvm/标记复制.png)\n\n##### 标记-整理算法\n\n复制算法在对象存活率较高时就要进行较多的复制操作，复制效率就会变低，老年代一般不直接使用复制算法。\n根据老年代的特征，有人提出了标记整理算法，在对对象进行标记之后，让所有活的对象都想一端移动，然后直接清理掉边界以外的内存。\n\n![标记整理](../../../uploads/jvm/标记整理.png)\n\n##### 分代收集算法\n\n分代收集法是目前大部分JVM所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将GC堆划分为老生代和新生代。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。\n\n###### 新生代与复制算法\n\n目前大部分JVM的GC对于新生代都采取复制算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1:1 来划分新生代。一般将新生代划分为一块较大的Eden空间和两个较小的Survivor空间(From Space, To Space)，每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另一块Survivor空间中。\n\n###### 老年代与标记复制算法\n\n而老年代因为每次只回收少量对象，因而采用标记整理算法。\n\n对象从新生代到老年代：\n1. 当新生代的 Eden Space 和 From Space 空间不足时就会发生一次GC，进行GC后，Eden Space 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 From Space 进行清理。\n2. 如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。\n3. 在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。\n4. 当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达15的对象会被移到老生代中。\n","slug":"jvm/2_JVM垃圾回收算法","published":1,"updated":"2020-01-02T05:49:23.772Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs30021n0ztpy3mxd5u","content":"<h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><p>在java运行过程中，程序计数器、虚拟机栈、本地方法栈3个区域都是线程私有的，都会随着线程而创建，随着线程而销毁。这三个区域不需要考虑内存的回收，在方法结束或者线程结束后，内存就会被回收。<br>但是在java堆和方法区却不能这样，只有在程序运行的过程中才能知道会创建哪些对象，这些对象的创建和回收都是动态的，因为这部分区域的内容是需要垃圾回收的。</p>\n<h4 id=\"如何确定垃圾\"><a href=\"#如何确定垃圾\" class=\"headerlink\" title=\"如何确定垃圾\"></a>如何确定垃圾</h4><h5 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h5><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器就+1；当引用失效的时候，计数器就-1；在任何时候，计数器为0的对象就是不可在被使用的，这个对象就是可回收对象。</p>\n<blockquote>\n<p>引用计数法的实现很简单，判定效率也比较高，但是它无法解决对象之前相互引用的问题。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public Object instance = null;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Test t1 = new Test();</div><div class=\"line\">        Test t2 = new Test();</div><div class=\"line\">        t1.instance = t2;</div><div class=\"line\">        t2.instance = t1;</div><div class=\"line\">        t1 = null;</div><div class=\"line\">        t2 = null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上两个对象都已经为空且无任何引用，而且已经不可被访问，但是它们相互引用的对方，它们的引用计数器都不为0，使用引用计数法就无法进行回收内存。</p>\n<h5 id=\"可达性分析\"><a href=\"#可达性分析\" class=\"headerlink\" title=\"可达性分析\"></a>可达性分析</h5><p>这个算法就是通过一系列 GC Roots的对象作为起点，从这些节点开始向下搜索，搜索走过的路径就是引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p>\n<p><img src=\"../../../uploads/jvm/可达性算法.png\" alt=\"可行性算法\"></p>\n<p>像上图，对象o5-o6虽然互相有关联，但是到GC Roots都是不可达的，因此都会被判为可回收对象。</p>\n<p>在java中，可被作为GC Roots对象的包括：</p>\n<ul>\n<li>虚拟机栈中引用的对象。</li>\n<li>方法区中类静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI（Native）引用的对象。</li>\n</ul>\n<h5 id=\"java中的引用\"><a href=\"#java中的引用\" class=\"headerlink\" title=\"java中的引用\"></a>java中的引用</h5><p>Java中因为可分为强引用、软引用、弱引用、虚引用4种，这四种引用强度依次逐渐减弱。</p>\n<ul>\n<li>强引用：强引用就是平时new 出来的对象的这类的引用，只要强引用存在，对象就不会被回收。</li>\n<li>软引用：用来描述一些有用但是不是必须的对象。在系统要发生内存溢出之前，会将这些对象列入回收范围内进行第二次回收，如果还没有足够内存才会抛出异常。（SoftReference来实现）</li>\n<li>弱引用：被弱引用关联的对象只能生存到下一次垃圾回收之前。（WeakReference来实现）</li>\n<li>虚引用：为一个对象设置虚引用关联的唯一目的是能在这个对象被垃圾回收器回收时能得到一个系统通知。（PhantomReference来实现）</li>\n</ul>\n<h5 id=\"垃圾的自救\"><a href=\"#垃圾的自救\" class=\"headerlink\" title=\"垃圾的自救\"></a>垃圾的自救</h5><p>被标记为不可用的对象也不会直接被回收，一个对象的回收至少要经历两次标记的过程。如果一个对象经过可达性分析后没有与GC Roots相连接的引用链，那就会被进行第一次标记并进行一个筛选，筛选的条件是这个对象是否有必要执行finalize方法。如果没有覆盖finalize方法或者finalize方法已经被执行过，这都没有必要执行。</p>\n<p>如果这个对象有必要执行finalize方法，那这个对象会放在是一个F-Queue队列中，由虚拟机自动建立的、优先级低的Finalizer线程来执行，即这个方法会被触发，但是不保证会等待运行结束。如果对象在finalize方法中重新与引用链上的任何一个对象相关联，则在第二次标记时就会被移出即将回收的集合，否则就会被回收。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class FinalizeGC &#123;</div><div class=\"line\">    public static FinalizeGC gc = null;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void finalize() throws Throwable &#123;</div><div class=\"line\">        System.out.println(&quot;finalize method executed&quot;);</div><div class=\"line\">        FinalizeGC.gc = this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        gc = new FinalizeGC();</div><div class=\"line\">        //第一次自救</div><div class=\"line\">        gc = null;</div><div class=\"line\">        System.gc();</div><div class=\"line\">        Thread.sleep(500);//优先级很低，等待执行下</div><div class=\"line\">        if(gc != null) &#123;</div><div class=\"line\">            System.out.println(&quot;still alive&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            System.out.println(&quot;dead&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //第二次</div><div class=\"line\">        gc = null;</div><div class=\"line\">        System.gc();</div><div class=\"line\">        Thread.sleep(500);</div><div class=\"line\">        if(gc != null) &#123;</div><div class=\"line\">            System.out.println(&quot;still alive&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            System.out.println(&quot;dead&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码会输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">finalize method executed</div><div class=\"line\">still alive</div><div class=\"line\">dead</div></pre></td></tr></table></figure>\n<p>可以看出gc对象的finalize方法的确被执行过了，而且也自救了一次。</p>\n<h4 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h4><h5 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h5><p>标记-清除（Mark-Sweep）算法分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。（后续的收集算法都是基于这种思路并对其不足进行改造而得到的）</p>\n<p>Mark-Sweeo的不足：</p>\n<ul>\n<li>效率问题，标记和清除两个过程的效率都不高</li>\n<li>空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多可能导致以后在程序运行的过程中分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾回收。</li>\n</ul>\n<p><img src=\"../../../uploads/jvm/标记清除.png\" alt=\"标记清除\"></p>\n<p>从上图可以看出在进行标记清除后，内存碎片化非常严重。</p>\n<h5 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h5><p>复制算法将可用容量划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完了就将还存储着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样每次都是对整个半区进行内存回收，内存分配也不需要考虑内存碎片的问题。<br>这种算法虽然实现简单，运行高效，只是代价是将内存缩小为原来的一半，代价太高了。</p>\n<blockquote>\n<p>现在的商业虚拟机都采用这种回收算法来回收新生代，但是研究表明新生代中的对象98%是朝生夕死，所以不需要按1:1划分内存空间，而是将内存分为一块较大的Eden空间和两次较小的Survivor空间，每次使用Eden和其中一块Survivor空间。HotSpot默认Eden和Survivor大小比例是8:1（也就是只有百分10的空间会被浪费）。当Survivor空间不够用时，需要依赖其他内存（老年代）进行分配担保。</p>\n</blockquote>\n<p><img src=\"../../../uploads/jvm/标记复制.png\" alt=\"标记清除\"></p>\n<h5 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h5><p>复制算法在对象存活率较高时就要进行较多的复制操作，复制效率就会变低，老年代一般不直接使用复制算法。<br>根据老年代的特征，有人提出了标记整理算法，在对对象进行标记之后，让所有活的对象都想一端移动，然后直接清理掉边界以外的内存。</p>\n<p><img src=\"../../../uploads/jvm/标记整理.png\" alt=\"标记整理\"></p>\n<h5 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h5><p>分代收集法是目前大部分JVM所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将GC堆划分为老生代和新生代。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。</p>\n<h6 id=\"新生代与复制算法\"><a href=\"#新生代与复制算法\" class=\"headerlink\" title=\"新生代与复制算法\"></a>新生代与复制算法</h6><p>目前大部分JVM的GC对于新生代都采取复制算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1:1 来划分新生代。一般将新生代划分为一块较大的Eden空间和两个较小的Survivor空间(From Space, To Space)，每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另一块Survivor空间中。</p>\n<h6 id=\"老年代与标记复制算法\"><a href=\"#老年代与标记复制算法\" class=\"headerlink\" title=\"老年代与标记复制算法\"></a>老年代与标记复制算法</h6><p>而老年代因为每次只回收少量对象，因而采用标记整理算法。</p>\n<p>对象从新生代到老年代：</p>\n<ol>\n<li>当新生代的 Eden Space 和 From Space 空间不足时就会发生一次GC，进行GC后，Eden Space 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 From Space 进行清理。</li>\n<li>如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</li>\n<li>在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</li>\n<li>当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达15的对象会被移到老生代中。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h3><p>在java运行过程中，程序计数器、虚拟机栈、本地方法栈3个区域都是线程私有的，都会随着线程而创建，随着线程而销毁。这三个区域不需要考虑内存的回收，在方法结束或者线程结束后，内存就会被回收。<br>但是在java堆和方法区却不能这样，只有在程序运行的过程中才能知道会创建哪些对象，这些对象的创建和回收都是动态的，因为这部分区域的内容是需要垃圾回收的。</p>\n<h4 id=\"如何确定垃圾\"><a href=\"#如何确定垃圾\" class=\"headerlink\" title=\"如何确定垃圾\"></a>如何确定垃圾</h4><h5 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h5><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器就+1；当引用失效的时候，计数器就-1；在任何时候，计数器为0的对象就是不可在被使用的，这个对象就是可回收对象。</p>\n<blockquote>\n<p>引用计数法的实现很简单，判定效率也比较高，但是它无法解决对象之前相互引用的问题。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\">    public Object instance = null;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Test t1 = new Test();</div><div class=\"line\">        Test t2 = new Test();</div><div class=\"line\">        t1.instance = t2;</div><div class=\"line\">        t2.instance = t1;</div><div class=\"line\">        t1 = null;</div><div class=\"line\">        t2 = null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上两个对象都已经为空且无任何引用，而且已经不可被访问，但是它们相互引用的对方，它们的引用计数器都不为0，使用引用计数法就无法进行回收内存。</p>\n<h5 id=\"可达性分析\"><a href=\"#可达性分析\" class=\"headerlink\" title=\"可达性分析\"></a>可达性分析</h5><p>这个算法就是通过一系列 GC Roots的对象作为起点，从这些节点开始向下搜索，搜索走过的路径就是引用链，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p>\n<p><img src=\"../../../uploads/jvm/可达性算法.png\" alt=\"可行性算法\"></p>\n<p>像上图，对象o5-o6虽然互相有关联，但是到GC Roots都是不可达的，因此都会被判为可回收对象。</p>\n<p>在java中，可被作为GC Roots对象的包括：</p>\n<ul>\n<li>虚拟机栈中引用的对象。</li>\n<li>方法区中类静态属性引用的对象。</li>\n<li>方法区中常量引用的对象。</li>\n<li>本地方法栈中JNI（Native）引用的对象。</li>\n</ul>\n<h5 id=\"java中的引用\"><a href=\"#java中的引用\" class=\"headerlink\" title=\"java中的引用\"></a>java中的引用</h5><p>Java中因为可分为强引用、软引用、弱引用、虚引用4种，这四种引用强度依次逐渐减弱。</p>\n<ul>\n<li>强引用：强引用就是平时new 出来的对象的这类的引用，只要强引用存在，对象就不会被回收。</li>\n<li>软引用：用来描述一些有用但是不是必须的对象。在系统要发生内存溢出之前，会将这些对象列入回收范围内进行第二次回收，如果还没有足够内存才会抛出异常。（SoftReference来实现）</li>\n<li>弱引用：被弱引用关联的对象只能生存到下一次垃圾回收之前。（WeakReference来实现）</li>\n<li>虚引用：为一个对象设置虚引用关联的唯一目的是能在这个对象被垃圾回收器回收时能得到一个系统通知。（PhantomReference来实现）</li>\n</ul>\n<h5 id=\"垃圾的自救\"><a href=\"#垃圾的自救\" class=\"headerlink\" title=\"垃圾的自救\"></a>垃圾的自救</h5><p>被标记为不可用的对象也不会直接被回收，一个对象的回收至少要经历两次标记的过程。如果一个对象经过可达性分析后没有与GC Roots相连接的引用链，那就会被进行第一次标记并进行一个筛选，筛选的条件是这个对象是否有必要执行finalize方法。如果没有覆盖finalize方法或者finalize方法已经被执行过，这都没有必要执行。</p>\n<p>如果这个对象有必要执行finalize方法，那这个对象会放在是一个F-Queue队列中，由虚拟机自动建立的、优先级低的Finalizer线程来执行，即这个方法会被触发，但是不保证会等待运行结束。如果对象在finalize方法中重新与引用链上的任何一个对象相关联，则在第二次标记时就会被移出即将回收的集合，否则就会被回收。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class FinalizeGC &#123;</div><div class=\"line\">    public static FinalizeGC gc = null;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    protected void finalize() throws Throwable &#123;</div><div class=\"line\">        System.out.println(&quot;finalize method executed&quot;);</div><div class=\"line\">        FinalizeGC.gc = this;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        gc = new FinalizeGC();</div><div class=\"line\">        //第一次自救</div><div class=\"line\">        gc = null;</div><div class=\"line\">        System.gc();</div><div class=\"line\">        Thread.sleep(500);//优先级很低，等待执行下</div><div class=\"line\">        if(gc != null) &#123;</div><div class=\"line\">            System.out.println(&quot;still alive&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            System.out.println(&quot;dead&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //第二次</div><div class=\"line\">        gc = null;</div><div class=\"line\">        System.gc();</div><div class=\"line\">        Thread.sleep(500);</div><div class=\"line\">        if(gc != null) &#123;</div><div class=\"line\">            System.out.println(&quot;still alive&quot;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            System.out.println(&quot;dead&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码会输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">finalize method executed</div><div class=\"line\">still alive</div><div class=\"line\">dead</div></pre></td></tr></table></figure>\n<p>可以看出gc对象的finalize方法的确被执行过了，而且也自救了一次。</p>\n<h4 id=\"垃圾回收算法\"><a href=\"#垃圾回收算法\" class=\"headerlink\" title=\"垃圾回收算法\"></a>垃圾回收算法</h4><h5 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h5><p>标记-清除（Mark-Sweep）算法分为标记和清除两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。（后续的收集算法都是基于这种思路并对其不足进行改造而得到的）</p>\n<p>Mark-Sweeo的不足：</p>\n<ul>\n<li>效率问题，标记和清除两个过程的效率都不高</li>\n<li>空间问题，标记清除后会产生大量不连续的内存碎片，空间碎片太多可能导致以后在程序运行的过程中分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾回收。</li>\n</ul>\n<p><img src=\"../../../uploads/jvm/标记清除.png\" alt=\"标记清除\"></p>\n<p>从上图可以看出在进行标记清除后，内存碎片化非常严重。</p>\n<h5 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h5><p>复制算法将可用容量划分为大小相等的两块，每次只使用其中的一块，当这一块内存用完了就将还存储着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样每次都是对整个半区进行内存回收，内存分配也不需要考虑内存碎片的问题。<br>这种算法虽然实现简单，运行高效，只是代价是将内存缩小为原来的一半，代价太高了。</p>\n<blockquote>\n<p>现在的商业虚拟机都采用这种回收算法来回收新生代，但是研究表明新生代中的对象98%是朝生夕死，所以不需要按1:1划分内存空间，而是将内存分为一块较大的Eden空间和两次较小的Survivor空间，每次使用Eden和其中一块Survivor空间。HotSpot默认Eden和Survivor大小比例是8:1（也就是只有百分10的空间会被浪费）。当Survivor空间不够用时，需要依赖其他内存（老年代）进行分配担保。</p>\n</blockquote>\n<p><img src=\"../../../uploads/jvm/标记复制.png\" alt=\"标记清除\"></p>\n<h5 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h5><p>复制算法在对象存活率较高时就要进行较多的复制操作，复制效率就会变低，老年代一般不直接使用复制算法。<br>根据老年代的特征，有人提出了标记整理算法，在对对象进行标记之后，让所有活的对象都想一端移动，然后直接清理掉边界以外的内存。</p>\n<p><img src=\"../../../uploads/jvm/标记整理.png\" alt=\"标记整理\"></p>\n<h5 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h5><p>分代收集法是目前大部分JVM所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将GC堆划分为老生代和新生代。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。</p>\n<h6 id=\"新生代与复制算法\"><a href=\"#新生代与复制算法\" class=\"headerlink\" title=\"新生代与复制算法\"></a>新生代与复制算法</h6><p>目前大部分JVM的GC对于新生代都采取复制算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1:1 来划分新生代。一般将新生代划分为一块较大的Eden空间和两个较小的Survivor空间(From Space, To Space)，每次使用Eden空间和其中的一块Survivor空间，当进行回收时，将该两块空间中还存活的对象复制到另一块Survivor空间中。</p>\n<h6 id=\"老年代与标记复制算法\"><a href=\"#老年代与标记复制算法\" class=\"headerlink\" title=\"老年代与标记复制算法\"></a>老年代与标记复制算法</h6><p>而老年代因为每次只回收少量对象，因而采用标记整理算法。</p>\n<p>对象从新生代到老年代：</p>\n<ol>\n<li>当新生代的 Eden Space 和 From Space 空间不足时就会发生一次GC，进行GC后，Eden Space 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 From Space 进行清理。</li>\n<li>如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</li>\n<li>在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</li>\n<li>当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达15的对象会被移到老生代中。</li>\n</ol>\n"},{"title":"JVM内存区域","date":"2019-12-05T13:52:13.000Z","comments":0,"keywords":["jvm","JVM","内存区域"],"_content":"\n### JVM内存区域\n\nJava虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域。\nJava虚拟机所管理的内存将会包括以下几个运行时数据区域（Java虚拟机规范（Java SE7））：\n\n![运行时数据区](../../../uploads/jvm/运行时数据区.jpg)\n\n线程隔离的数据区生命周期与线程相同，依赖用户线程的启动/结束。线程共享区随着虚拟机的启动/关闭而创建/销毁。\n\n#### 程序计数器\n\n程序计数器是一块比较小的空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要程序计数器来完成。\n\n如果线程在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果是Native方法则为空。\n\n> 这是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。\n\n#### 虚拟机栈\n\n每个方法在执行的时候都会去创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法调用到执行完成就对应着一个栈帧在虚拟机中入栈到出栈的过程。\n\n局部变量存放了编译期可知的各种基本数据类型、对象引用和returnAddress类型（指向了一条字节码指令的地址）。\n\n> 此区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机栈所允许的深度，将抛出StackOverflowError；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，将会抛出OutOfMemoryError异常。\n\n![栈帧](../../../uploads/jvm/栈帧.jpg)\n\n#### 本地方法栈\n\n本地方法栈和虚拟机栈的作用很相似，它们之间的区别是虚拟机栈为虚拟机执行java方法服务，而本地方法栈为虚拟机使用到的Native方法服务。如果一个VM实现使用C-linkage模型支持Native调用，那么该栈将是一个C栈，但HotSpot VM直接把本地方法栈和虚拟机栈合二为一。\n\n> 与虚拟机栈区域一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。\n\n#### java堆\n\njava堆是被所有线程共享的一块区域，在虚拟机启动时创建。几乎所有的对象实例都会在java堆上分配内存。（java虚拟机规范中描述的是：所有对象实例以及数组都要在堆上分配）\n\nJava堆是垃圾收集器管理的主要区域，从内存回收的角度来看，现在的收集器基本采用分代收集算法，所以java堆还可以细分为：新生代和老年代；在细一点有Eden空间、From Survivor空间、To Survivor空间等。\n\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。如果在堆中没有内存完成实例分配，并且堆也无法在扩展时，就是抛出OutOfMemoryError异常。\n\n#### 方法区（永久代）\n\n方法区与Java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。HotSpot VM把GC分代收集扩展至方法区，即使用Java堆的永久代来实现方法区，这样HotSpot的垃圾收集器就可以像管理Java堆一样管理这部分内存，而不用为方法区开发专门的内存管理器。\n\n> 当方法区无法满足内存分配需求，就是抛出OutOfMemoryError异常。\n\n##### 运行时常量池\n\n运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述符信息外，还有一项信息就是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法的运行时常量池中的存放。\n\n> 当常量池无法再申请到内存时会抛出OutOfMemoryError异常。\n\n### 直接内存\n\n直接内存不是虚拟机运行时数据的一部分，也不是java虚拟机规范中定义的内存区域。但是这部分内存也频繁被使用，也可能导致OutOfMemoryError异常出现。\n在JDK1.4引入的NIO提供了基于通道（Channel）与缓冲区（Buffer）的IO方式，它可以使用Native函数直接分配对外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象座位这块内存的引用进行数据。这样可以在一些场景中显著提升性能，因为避免了在Java堆和Native堆中来回复制数据。","source":"_posts/jvm/1_JVM内存区域.markdown","raw":"---\ntitle: JVM内存区域\ndate: 2019-12-05 21:52:13\ncomments: false\ntags: \n- jvm\n- JVM\n- 内存区域\ncategories: \n- jvm\nkeywords:  \n- jvm\n- JVM\n- 内存区域\n---\n\n### JVM内存区域\n\nJava虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域。\nJava虚拟机所管理的内存将会包括以下几个运行时数据区域（Java虚拟机规范（Java SE7））：\n\n![运行时数据区](../../../uploads/jvm/运行时数据区.jpg)\n\n线程隔离的数据区生命周期与线程相同，依赖用户线程的启动/结束。线程共享区随着虚拟机的启动/关闭而创建/销毁。\n\n#### 程序计数器\n\n程序计数器是一块比较小的空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要程序计数器来完成。\n\n如果线程在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果是Native方法则为空。\n\n> 这是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。\n\n#### 虚拟机栈\n\n每个方法在执行的时候都会去创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法调用到执行完成就对应着一个栈帧在虚拟机中入栈到出栈的过程。\n\n局部变量存放了编译期可知的各种基本数据类型、对象引用和returnAddress类型（指向了一条字节码指令的地址）。\n\n> 此区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机栈所允许的深度，将抛出StackOverflowError；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，将会抛出OutOfMemoryError异常。\n\n![栈帧](../../../uploads/jvm/栈帧.jpg)\n\n#### 本地方法栈\n\n本地方法栈和虚拟机栈的作用很相似，它们之间的区别是虚拟机栈为虚拟机执行java方法服务，而本地方法栈为虚拟机使用到的Native方法服务。如果一个VM实现使用C-linkage模型支持Native调用，那么该栈将是一个C栈，但HotSpot VM直接把本地方法栈和虚拟机栈合二为一。\n\n> 与虚拟机栈区域一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。\n\n#### java堆\n\njava堆是被所有线程共享的一块区域，在虚拟机启动时创建。几乎所有的对象实例都会在java堆上分配内存。（java虚拟机规范中描述的是：所有对象实例以及数组都要在堆上分配）\n\nJava堆是垃圾收集器管理的主要区域，从内存回收的角度来看，现在的收集器基本采用分代收集算法，所以java堆还可以细分为：新生代和老年代；在细一点有Eden空间、From Survivor空间、To Survivor空间等。\n\nJava堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。如果在堆中没有内存完成实例分配，并且堆也无法在扩展时，就是抛出OutOfMemoryError异常。\n\n#### 方法区（永久代）\n\n方法区与Java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。HotSpot VM把GC分代收集扩展至方法区，即使用Java堆的永久代来实现方法区，这样HotSpot的垃圾收集器就可以像管理Java堆一样管理这部分内存，而不用为方法区开发专门的内存管理器。\n\n> 当方法区无法满足内存分配需求，就是抛出OutOfMemoryError异常。\n\n##### 运行时常量池\n\n运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述符信息外，还有一项信息就是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法的运行时常量池中的存放。\n\n> 当常量池无法再申请到内存时会抛出OutOfMemoryError异常。\n\n### 直接内存\n\n直接内存不是虚拟机运行时数据的一部分，也不是java虚拟机规范中定义的内存区域。但是这部分内存也频繁被使用，也可能导致OutOfMemoryError异常出现。\n在JDK1.4引入的NIO提供了基于通道（Channel）与缓冲区（Buffer）的IO方式，它可以使用Native函数直接分配对外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象座位这块内存的引用进行数据。这样可以在一些场景中显著提升性能，因为避免了在Java堆和Native堆中来回复制数据。","slug":"jvm/1_JVM内存区域","published":1,"updated":"2020-01-02T05:49:23.771Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs40024n0zt3gai4tyg","content":"<h3 id=\"JVM内存区域\"><a href=\"#JVM内存区域\" class=\"headerlink\" title=\"JVM内存区域\"></a>JVM内存区域</h3><p>Java虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域。<br>Java虚拟机所管理的内存将会包括以下几个运行时数据区域（Java虚拟机规范（Java SE7））：</p>\n<p><img src=\"../../../uploads/jvm/运行时数据区.jpg\" alt=\"运行时数据区\"></p>\n<p>线程隔离的数据区生命周期与线程相同，依赖用户线程的启动/结束。线程共享区随着虚拟机的启动/关闭而创建/销毁。</p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器是一块比较小的空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要程序计数器来完成。</p>\n<p>如果线程在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果是Native方法则为空。</p>\n<blockquote>\n<p>这是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>\n</blockquote>\n<h4 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h4><p>每个方法在执行的时候都会去创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法调用到执行完成就对应着一个栈帧在虚拟机中入栈到出栈的过程。</p>\n<p>局部变量存放了编译期可知的各种基本数据类型、对象引用和returnAddress类型（指向了一条字节码指令的地址）。</p>\n<blockquote>\n<p>此区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机栈所允许的深度，将抛出StackOverflowError；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，将会抛出OutOfMemoryError异常。</p>\n</blockquote>\n<p><img src=\"../../../uploads/jvm/栈帧.jpg\" alt=\"栈帧\"></p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈和虚拟机栈的作用很相似，它们之间的区别是虚拟机栈为虚拟机执行java方法服务，而本地方法栈为虚拟机使用到的Native方法服务。如果一个VM实现使用C-linkage模型支持Native调用，那么该栈将是一个C栈，但HotSpot VM直接把本地方法栈和虚拟机栈合二为一。</p>\n<blockquote>\n<p>与虚拟机栈区域一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p>\n</blockquote>\n<h4 id=\"java堆\"><a href=\"#java堆\" class=\"headerlink\" title=\"java堆\"></a>java堆</h4><p>java堆是被所有线程共享的一块区域，在虚拟机启动时创建。几乎所有的对象实例都会在java堆上分配内存。（java虚拟机规范中描述的是：所有对象实例以及数组都要在堆上分配）</p>\n<p>Java堆是垃圾收集器管理的主要区域，从内存回收的角度来看，现在的收集器基本采用分代收集算法，所以java堆还可以细分为：新生代和老年代；在细一点有Eden空间、From Survivor空间、To Survivor空间等。</p>\n<p>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。如果在堆中没有内存完成实例分配，并且堆也无法在扩展时，就是抛出OutOfMemoryError异常。</p>\n<h4 id=\"方法区（永久代）\"><a href=\"#方法区（永久代）\" class=\"headerlink\" title=\"方法区（永久代）\"></a>方法区（永久代）</h4><p>方法区与Java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。HotSpot VM把GC分代收集扩展至方法区，即使用Java堆的永久代来实现方法区，这样HotSpot的垃圾收集器就可以像管理Java堆一样管理这部分内存，而不用为方法区开发专门的内存管理器。</p>\n<blockquote>\n<p>当方法区无法满足内存分配需求，就是抛出OutOfMemoryError异常。</p>\n</blockquote>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述符信息外，还有一项信息就是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法的运行时常量池中的存放。</p>\n<blockquote>\n<p>当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p>\n</blockquote>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>直接内存不是虚拟机运行时数据的一部分，也不是java虚拟机规范中定义的内存区域。但是这部分内存也频繁被使用，也可能导致OutOfMemoryError异常出现。<br>在JDK1.4引入的NIO提供了基于通道（Channel）与缓冲区（Buffer）的IO方式，它可以使用Native函数直接分配对外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象座位这块内存的引用进行数据。这样可以在一些场景中显著提升性能，因为避免了在Java堆和Native堆中来回复制数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"JVM内存区域\"><a href=\"#JVM内存区域\" class=\"headerlink\" title=\"JVM内存区域\"></a>JVM内存区域</h3><p>Java虚拟机在执行Java程序的过程中会把所管理的内存划分为若干个不同的数据区域。<br>Java虚拟机所管理的内存将会包括以下几个运行时数据区域（Java虚拟机规范（Java SE7））：</p>\n<p><img src=\"../../../uploads/jvm/运行时数据区.jpg\" alt=\"运行时数据区\"></p>\n<p>线程隔离的数据区生命周期与线程相同，依赖用户线程的启动/结束。线程共享区随着虚拟机的启动/关闭而创建/销毁。</p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><p>程序计数器是一块比较小的空间，可以看作是当前线程所执行的字节码的行号指示器。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要程序计数器来完成。</p>\n<p>如果线程在执行的是一个java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果是Native方法则为空。</p>\n<blockquote>\n<p>这是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>\n</blockquote>\n<h4 id=\"虚拟机栈\"><a href=\"#虚拟机栈\" class=\"headerlink\" title=\"虚拟机栈\"></a>虚拟机栈</h4><p>每个方法在执行的时候都会去创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法调用到执行完成就对应着一个栈帧在虚拟机中入栈到出栈的过程。</p>\n<p>局部变量存放了编译期可知的各种基本数据类型、对象引用和returnAddress类型（指向了一条字节码指令的地址）。</p>\n<blockquote>\n<p>此区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机栈所允许的深度，将抛出StackOverflowError；如果虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，将会抛出OutOfMemoryError异常。</p>\n</blockquote>\n<p><img src=\"../../../uploads/jvm/栈帧.jpg\" alt=\"栈帧\"></p>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><p>本地方法栈和虚拟机栈的作用很相似，它们之间的区别是虚拟机栈为虚拟机执行java方法服务，而本地方法栈为虚拟机使用到的Native方法服务。如果一个VM实现使用C-linkage模型支持Native调用，那么该栈将是一个C栈，但HotSpot VM直接把本地方法栈和虚拟机栈合二为一。</p>\n<blockquote>\n<p>与虚拟机栈区域一样，本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</p>\n</blockquote>\n<h4 id=\"java堆\"><a href=\"#java堆\" class=\"headerlink\" title=\"java堆\"></a>java堆</h4><p>java堆是被所有线程共享的一块区域，在虚拟机启动时创建。几乎所有的对象实例都会在java堆上分配内存。（java虚拟机规范中描述的是：所有对象实例以及数组都要在堆上分配）</p>\n<p>Java堆是垃圾收集器管理的主要区域，从内存回收的角度来看，现在的收集器基本采用分代收集算法，所以java堆还可以细分为：新生代和老年代；在细一点有Eden空间、From Survivor空间、To Survivor空间等。</p>\n<p>Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像磁盘空间一样。如果在堆中没有内存完成实例分配，并且堆也无法在扩展时，就是抛出OutOfMemoryError异常。</p>\n<h4 id=\"方法区（永久代）\"><a href=\"#方法区（永久代）\" class=\"headerlink\" title=\"方法区（永久代）\"></a>方法区（永久代）</h4><p>方法区与Java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。HotSpot VM把GC分代收集扩展至方法区，即使用Java堆的永久代来实现方法区，这样HotSpot的垃圾收集器就可以像管理Java堆一样管理这部分内存，而不用为方法区开发专门的内存管理器。</p>\n<blockquote>\n<p>当方法区无法满足内存分配需求，就是抛出OutOfMemoryError异常。</p>\n</blockquote>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><p>运行时常量池是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述符信息外，还有一项信息就是常量池，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法的运行时常量池中的存放。</p>\n<blockquote>\n<p>当常量池无法再申请到内存时会抛出OutOfMemoryError异常。</p>\n</blockquote>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>直接内存不是虚拟机运行时数据的一部分，也不是java虚拟机规范中定义的内存区域。但是这部分内存也频繁被使用，也可能导致OutOfMemoryError异常出现。<br>在JDK1.4引入的NIO提供了基于通道（Channel）与缓冲区（Buffer）的IO方式，它可以使用Native函数直接分配对外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象座位这块内存的引用进行数据。这样可以在一些场景中显著提升性能，因为避免了在Java堆和Native堆中来回复制数据。</p>\n"},{"title":"GC垃圾收集器","date":"2019-12-08T04:02:00.000Z","comments":0,"keywords":["jvm","垃圾收集器"],"_content":"\n### 垃圾收集器\n\njava虚拟机规范没有对垃圾收集器如何实现做任何规定，因此不同厂商、版本提供的垃圾收集器都不一样，JDK1.7中垃圾收集器如下:\n\n![垃圾收集器](../../../uploads/jvm/垃圾收集器.jpg)\n\n如果两个收集器之间存在连线，则说明他们之间可以搭配使用。\n\n#### Serial收集器（单线程复制算法）\n\n这个收集器是一个单线程的收集器，但它单线程的意义不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾回收，它在进行垃圾回收的时，必须暂停其他所有工作线程，直到它收集完毕。\n\nSerial收集器运行时如下：\n\n![Serial](../../../uploads/jvm/serial.jpg)\n\n当Serial收集器工作时候，会造成Stop-The-World，这对很多应用是不可能接受的。但是对于限定单个CPU的环境来说，没有线程交互的开销，专心做GC，和其他收集器相比是简单而高效的（单线程情况）。在用户的桌面应用场景中，可用内存一般不大（几十M至一两百M），可以在较短时间内完成垃圾收集（几十MS至一百多MS）,只要不频繁发生，这是可以接受的。因此，Serial收集器对于运行在Client模式下的虚拟机来说是个比较好的选择。\n\n#### ParNew 收集器（Serial+多线程）\n\nParNew收集器其实就是Serial收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和Serial收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。\n它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，目前只有它能与CMS收集器配合工作。\n\n> CMS收集器是一个被认为具有划时代意义的并发收集器，因此如果有一个垃圾收集器能和它一起搭配使用让其更加完美，那这个收集器必然也是一个不可或缺的部分了。\n\nParNew收集器的运行过程如下图所示:\n\n![ParNew](../../../uploads/jvm/ParNew.jpg)\n\n在Server模式下，ParNew收集器是一个非常重要的收集器，因为除Serial外，目前只有它能与CMS收集器配合工作；但在单个CPU环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销，该收集器通过超线程技术实现的两个CPU的环境中都不能百分百的保证超过Serial收集器。\n\n#### Parallel Scavenge 收集器(多线程复制算法)\n\nParallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。\nParallel Scavenge收集器的特点是它的关注点和其他收集器不同，CMS等收集器关注点是尽可能的缩短垃圾收集时用户的停顿时间，而Parallel Scavenge关注点是吞吐量（如何高效率的利用CPU）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。（吞吐量：CPU用于用户代码的时间/CPU总消耗时间的比值，即=运行用户代码的时间/(运行用户代码时间+垃圾收集时间)。比如，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。）\n\n![ParallelScavenge](../../../uploads/jvm/ParallelScavenge.jpg)\n\n当应用程序运行在具有多个CPU上，对暂停时间没有特别高的要求时，即程序主要在后台进行计算，而不需要与用户进行太多交互，例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序；可以采用Parallel Scavenge收集器。\n\n#### Serial Old收集器（单线程标记整理）\n\nSerial收集器的老年代版本，同样是一个单线程收集器。\n\n它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备方案\n\n![SerialOld](../../../uploads/jvm/SerialOld.jpg)\n\n\n#### Parallel Old收集器（多线程标记整理）\n\nParallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在JDK1.6才开始提供。\n在JDK1.6之前，新生代使用ParallelScavenge收集器只能搭配年老代的Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge 和年老代 Parallel Old 收集器的搭配策略。\n\n![ParallelOld](../../../uploads/jvm/ParallelOld.jpg)\n\n\n#### CMS收集器（多线程标记清除）\n\nCMS 收集器是一种以获取最短回收时间为目标的收集器。它的整个过程分为4个步骤：初始标记、并发标记、重新标记、并发清除。\n\n- 初始标记： 暂停所有的其他线程，初始标记仅仅标记GC Roots能直接关联到的对象，速度很快；\n- 并发标记： 并发标记就是进行GC Roots Tracing的过程；同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方；\n- 重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录（采用多线程并行执行来提升效率）；需要\"Stop The World\"，且停顿时间比初始标记稍长，但远比并发标记短；\n- 并发清除： 开启用户线程，同时GC线程开始对为标记的区域做清扫，回收所有的垃圾对象；\n\n由于整个过程耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以总体来说，CMS的内存回收是与用户线程一起“并发”执行的。\n\n\n![CMS](../../../uploads/jvm/CMS.jpg)\n\nCMS有三个明显的缺点；\n\n1. 对CPU资源敏感：面向并发设计的程序都对CPU资源比较敏感（并发程序的特点）。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。\n    > CMS的默认收集线程数量是=(CPU数量+3)/4；当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受。\n\n2. 无法处理浮动垃圾：在并发清除时，用户线程新产生的垃圾，称为浮动垃圾；这使得并发清除时需要预留一定的内存空间，不能像其他收集器在老年代几乎填满再进行收集；也可以认为CMS所需要的空间比其他垃圾收集器大；\n3. 产生大量内存碎片：由于CMS是基于“标记+清除”算法来回收老年代对象的，因此长时间运行后会产生大量的空间碎片问题，由于碎片过多，将会给大对象的分配带来麻烦。因此会出现这样的情况，老年代还有很多剩余的空间，但是找不到连续的空间来分配当前对象，这样不得不提前触发一次Full GC。。\n    > 为了解决空间碎片问题，CMS收集器提供−XX:+UseCMSCompactAlFullCollection标志，使得CMS出现上面这种情况时不进行Full GC，而开启内存碎片的合并整理过程；但合并整理过程无法并发，停顿时间会变长；\n\n#### G1收集器\n\nG1是一款面向服务端应用的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换JDK1.5发布的CMS收集器。与其他收集器相比，G1具备以下特点：\n\n- 并行与并发：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）STW停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。\n- 分代收集：虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间的对象，熬过多次GC的旧对象以获取更好的收集效果。\n- 空间整合：与CMS的“标记–清理”算法不同，G1从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。\n- 可预测的停顿：这是G1相对于CMS的另一个大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型。可以明确指定M毫秒时间片内，垃圾收集消耗的时间不超过N毫秒。在低停顿的同时实现高吞吐量。\n\n> G1收集器将整个java堆分为多个大小相等的独立区域（Region），虽然还保留了新生代和老年代的概念，但是新生代和老年代不是物理隔离，它们都是一部分Region的集合。\n\n> G1收集器可以有计划的避免在整个java堆进行全局的垃圾回收。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需要的时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。这就保证了在有限的时间内可以获取尽可能高的收集效率。因此G1是可预测停顿的。\n\n一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？这个问题在其他的分代收集器，也存在这样的问题，只是在G1更加突出。\n无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：每个Region都有一个对应的Remembered Set，每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作，然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象），如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中。当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set，就可以保证不进行全局扫描，也不会有遗漏。\n                                           \n                                           \n如果不计算维护Remembered Set操作，G1收集器的运作大致可划分为以下几个步骤：\n\n1. 初始标记：仅标记一下GC Roots能直接关联到的对象，且修改TAMS（Next Top at Mark Start）,让下一阶段并发运行时，用户程序能在正确可用的Region中创建新对象，需要\"Stop The World\"，但速度很快；\n2. 并发标记：从GC Roots开始进行可达性分析，找出存活对象，耗时长，可与用户线程并发执行，并不能保证可以标记出所有的存活对象；（在分析过程中会产生新的存活对象）\n3. 最终标记：修正并发标记阶段因用户线程继续运行而导致标记发生变化的那部分对象的标记记录，上一阶段对象的变化记录在线程的Remembered Set Log，这里把Remembered Set Log合并到Remembered Set中，需要\"Stop The World\"，且停顿时间比初始标记稍长，但远比并发标记短；\n4. 筛选回收：首先排序各个Region的回收价值和成本，然后根据用户期望的GC停顿时间来制定回收计划，最后按计划回收一些价值高的Region中垃圾对象，回收时采用\"复制\"算法，从一个或多个Region复制存活对象到堆上的另一个空的Region，并且在此过程中压缩和释放内存，可以并发进行，降低停顿时间，并增加吞吐量；\n\n![G1](../../../uploads/jvm/G1.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/jvm/3_GC垃圾收集器.md","raw":"---\ntitle: GC垃圾收集器\ndate: 2019-12-08 12:02\ncomments: false\ntags: \n- jvm\n- 垃圾收集器\ncategories: \n- jvm\nkeywords: \n- jvm\n- 垃圾收集器\n---\n\n### 垃圾收集器\n\njava虚拟机规范没有对垃圾收集器如何实现做任何规定，因此不同厂商、版本提供的垃圾收集器都不一样，JDK1.7中垃圾收集器如下:\n\n![垃圾收集器](../../../uploads/jvm/垃圾收集器.jpg)\n\n如果两个收集器之间存在连线，则说明他们之间可以搭配使用。\n\n#### Serial收集器（单线程复制算法）\n\n这个收集器是一个单线程的收集器，但它单线程的意义不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾回收，它在进行垃圾回收的时，必须暂停其他所有工作线程，直到它收集完毕。\n\nSerial收集器运行时如下：\n\n![Serial](../../../uploads/jvm/serial.jpg)\n\n当Serial收集器工作时候，会造成Stop-The-World，这对很多应用是不可能接受的。但是对于限定单个CPU的环境来说，没有线程交互的开销，专心做GC，和其他收集器相比是简单而高效的（单线程情况）。在用户的桌面应用场景中，可用内存一般不大（几十M至一两百M），可以在较短时间内完成垃圾收集（几十MS至一百多MS）,只要不频繁发生，这是可以接受的。因此，Serial收集器对于运行在Client模式下的虚拟机来说是个比较好的选择。\n\n#### ParNew 收集器（Serial+多线程）\n\nParNew收集器其实就是Serial收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和Serial收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。\n它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，目前只有它能与CMS收集器配合工作。\n\n> CMS收集器是一个被认为具有划时代意义的并发收集器，因此如果有一个垃圾收集器能和它一起搭配使用让其更加完美，那这个收集器必然也是一个不可或缺的部分了。\n\nParNew收集器的运行过程如下图所示:\n\n![ParNew](../../../uploads/jvm/ParNew.jpg)\n\n在Server模式下，ParNew收集器是一个非常重要的收集器，因为除Serial外，目前只有它能与CMS收集器配合工作；但在单个CPU环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销，该收集器通过超线程技术实现的两个CPU的环境中都不能百分百的保证超过Serial收集器。\n\n#### Parallel Scavenge 收集器(多线程复制算法)\n\nParallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。\nParallel Scavenge收集器的特点是它的关注点和其他收集器不同，CMS等收集器关注点是尽可能的缩短垃圾收集时用户的停顿时间，而Parallel Scavenge关注点是吞吐量（如何高效率的利用CPU）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。（吞吐量：CPU用于用户代码的时间/CPU总消耗时间的比值，即=运行用户代码的时间/(运行用户代码时间+垃圾收集时间)。比如，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。）\n\n![ParallelScavenge](../../../uploads/jvm/ParallelScavenge.jpg)\n\n当应用程序运行在具有多个CPU上，对暂停时间没有特别高的要求时，即程序主要在后台进行计算，而不需要与用户进行太多交互，例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序；可以采用Parallel Scavenge收集器。\n\n#### Serial Old收集器（单线程标记整理）\n\nSerial收集器的老年代版本，同样是一个单线程收集器。\n\n它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备方案\n\n![SerialOld](../../../uploads/jvm/SerialOld.jpg)\n\n\n#### Parallel Old收集器（多线程标记整理）\n\nParallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在JDK1.6才开始提供。\n在JDK1.6之前，新生代使用ParallelScavenge收集器只能搭配年老代的Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge 和年老代 Parallel Old 收集器的搭配策略。\n\n![ParallelOld](../../../uploads/jvm/ParallelOld.jpg)\n\n\n#### CMS收集器（多线程标记清除）\n\nCMS 收集器是一种以获取最短回收时间为目标的收集器。它的整个过程分为4个步骤：初始标记、并发标记、重新标记、并发清除。\n\n- 初始标记： 暂停所有的其他线程，初始标记仅仅标记GC Roots能直接关联到的对象，速度很快；\n- 并发标记： 并发标记就是进行GC Roots Tracing的过程；同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方；\n- 重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录（采用多线程并行执行来提升效率）；需要\"Stop The World\"，且停顿时间比初始标记稍长，但远比并发标记短；\n- 并发清除： 开启用户线程，同时GC线程开始对为标记的区域做清扫，回收所有的垃圾对象；\n\n由于整个过程耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以总体来说，CMS的内存回收是与用户线程一起“并发”执行的。\n\n\n![CMS](../../../uploads/jvm/CMS.jpg)\n\nCMS有三个明显的缺点；\n\n1. 对CPU资源敏感：面向并发设计的程序都对CPU资源比较敏感（并发程序的特点）。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。\n    > CMS的默认收集线程数量是=(CPU数量+3)/4；当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受。\n\n2. 无法处理浮动垃圾：在并发清除时，用户线程新产生的垃圾，称为浮动垃圾；这使得并发清除时需要预留一定的内存空间，不能像其他收集器在老年代几乎填满再进行收集；也可以认为CMS所需要的空间比其他垃圾收集器大；\n3. 产生大量内存碎片：由于CMS是基于“标记+清除”算法来回收老年代对象的，因此长时间运行后会产生大量的空间碎片问题，由于碎片过多，将会给大对象的分配带来麻烦。因此会出现这样的情况，老年代还有很多剩余的空间，但是找不到连续的空间来分配当前对象，这样不得不提前触发一次Full GC。。\n    > 为了解决空间碎片问题，CMS收集器提供−XX:+UseCMSCompactAlFullCollection标志，使得CMS出现上面这种情况时不进行Full GC，而开启内存碎片的合并整理过程；但合并整理过程无法并发，停顿时间会变长；\n\n#### G1收集器\n\nG1是一款面向服务端应用的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换JDK1.5发布的CMS收集器。与其他收集器相比，G1具备以下特点：\n\n- 并行与并发：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）STW停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。\n- 分代收集：虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间的对象，熬过多次GC的旧对象以获取更好的收集效果。\n- 空间整合：与CMS的“标记–清理”算法不同，G1从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。\n- 可预测的停顿：这是G1相对于CMS的另一个大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型。可以明确指定M毫秒时间片内，垃圾收集消耗的时间不超过N毫秒。在低停顿的同时实现高吞吐量。\n\n> G1收集器将整个java堆分为多个大小相等的独立区域（Region），虽然还保留了新生代和老年代的概念，但是新生代和老年代不是物理隔离，它们都是一部分Region的集合。\n\n> G1收集器可以有计划的避免在整个java堆进行全局的垃圾回收。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需要的时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。这就保证了在有限的时间内可以获取尽可能高的收集效率。因此G1是可预测停顿的。\n\n一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？这个问题在其他的分代收集器，也存在这样的问题，只是在G1更加突出。\n无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：每个Region都有一个对应的Remembered Set，每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作，然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象），如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中。当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set，就可以保证不进行全局扫描，也不会有遗漏。\n                                           \n                                           \n如果不计算维护Remembered Set操作，G1收集器的运作大致可划分为以下几个步骤：\n\n1. 初始标记：仅标记一下GC Roots能直接关联到的对象，且修改TAMS（Next Top at Mark Start）,让下一阶段并发运行时，用户程序能在正确可用的Region中创建新对象，需要\"Stop The World\"，但速度很快；\n2. 并发标记：从GC Roots开始进行可达性分析，找出存活对象，耗时长，可与用户线程并发执行，并不能保证可以标记出所有的存活对象；（在分析过程中会产生新的存活对象）\n3. 最终标记：修正并发标记阶段因用户线程继续运行而导致标记发生变化的那部分对象的标记记录，上一阶段对象的变化记录在线程的Remembered Set Log，这里把Remembered Set Log合并到Remembered Set中，需要\"Stop The World\"，且停顿时间比初始标记稍长，但远比并发标记短；\n4. 筛选回收：首先排序各个Region的回收价值和成本，然后根据用户期望的GC停顿时间来制定回收计划，最后按计划回收一些价值高的Region中垃圾对象，回收时采用\"复制\"算法，从一个或多个Region复制存活对象到堆上的另一个空的Region，并且在此过程中压缩和释放内存，可以并发进行，降低停顿时间，并增加吞吐量；\n\n![G1](../../../uploads/jvm/G1.jpg)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"jvm/3_GC垃圾收集器","published":1,"updated":"2020-01-02T05:49:23.773Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs50029n0zttkdeygmd","content":"<h3 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h3><p>java虚拟机规范没有对垃圾收集器如何实现做任何规定，因此不同厂商、版本提供的垃圾收集器都不一样，JDK1.7中垃圾收集器如下:</p>\n<p><img src=\"../../../uploads/jvm/垃圾收集器.jpg\" alt=\"垃圾收集器\"></p>\n<p>如果两个收集器之间存在连线，则说明他们之间可以搭配使用。</p>\n<h4 id=\"Serial收集器（单线程复制算法）\"><a href=\"#Serial收集器（单线程复制算法）\" class=\"headerlink\" title=\"Serial收集器（单线程复制算法）\"></a>Serial收集器（单线程复制算法）</h4><p>这个收集器是一个单线程的收集器，但它单线程的意义不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾回收，它在进行垃圾回收的时，必须暂停其他所有工作线程，直到它收集完毕。</p>\n<p>Serial收集器运行时如下：</p>\n<p><img src=\"../../../uploads/jvm/serial.jpg\" alt=\"Serial\"></p>\n<p>当Serial收集器工作时候，会造成Stop-The-World，这对很多应用是不可能接受的。但是对于限定单个CPU的环境来说，没有线程交互的开销，专心做GC，和其他收集器相比是简单而高效的（单线程情况）。在用户的桌面应用场景中，可用内存一般不大（几十M至一两百M），可以在较短时间内完成垃圾收集（几十MS至一百多MS）,只要不频繁发生，这是可以接受的。因此，Serial收集器对于运行在Client模式下的虚拟机来说是个比较好的选择。</p>\n<h4 id=\"ParNew-收集器（Serial-多线程）\"><a href=\"#ParNew-收集器（Serial-多线程）\" class=\"headerlink\" title=\"ParNew 收集器（Serial+多线程）\"></a>ParNew 收集器（Serial+多线程）</h4><p>ParNew收集器其实就是Serial收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和Serial收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。<br>它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，目前只有它能与CMS收集器配合工作。</p>\n<blockquote>\n<p>CMS收集器是一个被认为具有划时代意义的并发收集器，因此如果有一个垃圾收集器能和它一起搭配使用让其更加完美，那这个收集器必然也是一个不可或缺的部分了。</p>\n</blockquote>\n<p>ParNew收集器的运行过程如下图所示:</p>\n<p><img src=\"../../../uploads/jvm/ParNew.jpg\" alt=\"ParNew\"></p>\n<p>在Server模式下，ParNew收集器是一个非常重要的收集器，因为除Serial外，目前只有它能与CMS收集器配合工作；但在单个CPU环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销，该收集器通过超线程技术实现的两个CPU的环境中都不能百分百的保证超过Serial收集器。</p>\n<h4 id=\"Parallel-Scavenge-收集器-多线程复制算法\"><a href=\"#Parallel-Scavenge-收集器-多线程复制算法\" class=\"headerlink\" title=\"Parallel Scavenge 收集器(多线程复制算法)\"></a>Parallel Scavenge 收集器(多线程复制算法)</h4><p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。<br>Parallel Scavenge收集器的特点是它的关注点和其他收集器不同，CMS等收集器关注点是尽可能的缩短垃圾收集时用户的停顿时间，而Parallel Scavenge关注点是吞吐量（如何高效率的利用CPU）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。（吞吐量：CPU用于用户代码的时间/CPU总消耗时间的比值，即=运行用户代码的时间/(运行用户代码时间+垃圾收集时间)。比如，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。）</p>\n<p><img src=\"../../../uploads/jvm/ParallelScavenge.jpg\" alt=\"ParallelScavenge\"></p>\n<p>当应用程序运行在具有多个CPU上，对暂停时间没有特别高的要求时，即程序主要在后台进行计算，而不需要与用户进行太多交互，例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序；可以采用Parallel Scavenge收集器。</p>\n<h4 id=\"Serial-Old收集器（单线程标记整理）\"><a href=\"#Serial-Old收集器（单线程标记整理）\" class=\"headerlink\" title=\"Serial Old收集器（单线程标记整理）\"></a>Serial Old收集器（单线程标记整理）</h4><p>Serial收集器的老年代版本，同样是一个单线程收集器。</p>\n<p>它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备方案</p>\n<p><img src=\"../../../uploads/jvm/SerialOld.jpg\" alt=\"SerialOld\"></p>\n<h4 id=\"Parallel-Old收集器（多线程标记整理）\"><a href=\"#Parallel-Old收集器（多线程标记整理）\" class=\"headerlink\" title=\"Parallel Old收集器（多线程标记整理）\"></a>Parallel Old收集器（多线程标记整理）</h4><p>Parallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在JDK1.6才开始提供。<br>在JDK1.6之前，新生代使用ParallelScavenge收集器只能搭配年老代的Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge 和年老代 Parallel Old 收集器的搭配策略。</p>\n<p><img src=\"../../../uploads/jvm/ParallelOld.jpg\" alt=\"ParallelOld\"></p>\n<h4 id=\"CMS收集器（多线程标记清除）\"><a href=\"#CMS收集器（多线程标记清除）\" class=\"headerlink\" title=\"CMS收集器（多线程标记清除）\"></a>CMS收集器（多线程标记清除）</h4><p>CMS 收集器是一种以获取最短回收时间为目标的收集器。它的整个过程分为4个步骤：初始标记、并发标记、重新标记、并发清除。</p>\n<ul>\n<li>初始标记： 暂停所有的其他线程，初始标记仅仅标记GC Roots能直接关联到的对象，速度很快；</li>\n<li>并发标记： 并发标记就是进行GC Roots Tracing的过程；同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方；</li>\n<li>重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录（采用多线程并行执行来提升效率）；需要”Stop The World”，且停顿时间比初始标记稍长，但远比并发标记短；</li>\n<li>并发清除： 开启用户线程，同时GC线程开始对为标记的区域做清扫，回收所有的垃圾对象；</li>\n</ul>\n<p>由于整个过程耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以总体来说，CMS的内存回收是与用户线程一起“并发”执行的。</p>\n<p><img src=\"../../../uploads/jvm/CMS.jpg\" alt=\"CMS\"></p>\n<p>CMS有三个明显的缺点；</p>\n<ol>\n<li><p>对CPU资源敏感：面向并发设计的程序都对CPU资源比较敏感（并发程序的特点）。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。</p>\n<blockquote>\n<p>CMS的默认收集线程数量是=(CPU数量+3)/4；当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受。</p>\n</blockquote>\n</li>\n<li><p>无法处理浮动垃圾：在并发清除时，用户线程新产生的垃圾，称为浮动垃圾；这使得并发清除时需要预留一定的内存空间，不能像其他收集器在老年代几乎填满再进行收集；也可以认为CMS所需要的空间比其他垃圾收集器大；</p>\n</li>\n<li>产生大量内存碎片：由于CMS是基于“标记+清除”算法来回收老年代对象的，因此长时间运行后会产生大量的空间碎片问题，由于碎片过多，将会给大对象的分配带来麻烦。因此会出现这样的情况，老年代还有很多剩余的空间，但是找不到连续的空间来分配当前对象，这样不得不提前触发一次Full GC。。<blockquote>\n<p>为了解决空间碎片问题，CMS收集器提供−XX:+UseCMSCompactAlFullCollection标志，使得CMS出现上面这种情况时不进行Full GC，而开启内存碎片的合并整理过程；但合并整理过程无法并发，停顿时间会变长；</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a>G1收集器</h4><p>G1是一款面向服务端应用的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换JDK1.5发布的CMS收集器。与其他收集器相比，G1具备以下特点：</p>\n<ul>\n<li>并行与并发：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）STW停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</li>\n<li>分代收集：虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间的对象，熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li>空间整合：与CMS的“标记–清理”算法不同，G1从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</li>\n<li>可预测的停顿：这是G1相对于CMS的另一个大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型。可以明确指定M毫秒时间片内，垃圾收集消耗的时间不超过N毫秒。在低停顿的同时实现高吞吐量。</li>\n</ul>\n<blockquote>\n<p>G1收集器将整个java堆分为多个大小相等的独立区域（Region），虽然还保留了新生代和老年代的概念，但是新生代和老年代不是物理隔离，它们都是一部分Region的集合。</p>\n<p>G1收集器可以有计划的避免在整个java堆进行全局的垃圾回收。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需要的时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。这就保证了在有限的时间内可以获取尽可能高的收集效率。因此G1是可预测停顿的。</p>\n</blockquote>\n<p>一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？这个问题在其他的分代收集器，也存在这样的问题，只是在G1更加突出。<br>无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：每个Region都有一个对应的Remembered Set，每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作，然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象），如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中。当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set，就可以保证不进行全局扫描，也不会有遗漏。</p>\n<p>如果不计算维护Remembered Set操作，G1收集器的运作大致可划分为以下几个步骤：</p>\n<ol>\n<li>初始标记：仅标记一下GC Roots能直接关联到的对象，且修改TAMS（Next Top at Mark Start）,让下一阶段并发运行时，用户程序能在正确可用的Region中创建新对象，需要”Stop The World”，但速度很快；</li>\n<li>并发标记：从GC Roots开始进行可达性分析，找出存活对象，耗时长，可与用户线程并发执行，并不能保证可以标记出所有的存活对象；（在分析过程中会产生新的存活对象）</li>\n<li>最终标记：修正并发标记阶段因用户线程继续运行而导致标记发生变化的那部分对象的标记记录，上一阶段对象的变化记录在线程的Remembered Set Log，这里把Remembered Set Log合并到Remembered Set中，需要”Stop The World”，且停顿时间比初始标记稍长，但远比并发标记短；</li>\n<li>筛选回收：首先排序各个Region的回收价值和成本，然后根据用户期望的GC停顿时间来制定回收计划，最后按计划回收一些价值高的Region中垃圾对象，回收时采用”复制”算法，从一个或多个Region复制存活对象到堆上的另一个空的Region，并且在此过程中压缩和释放内存，可以并发进行，降低停顿时间，并增加吞吐量；</li>\n</ol>\n<p><img src=\"../../../uploads/jvm/G1.jpg\" alt=\"G1\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h3><p>java虚拟机规范没有对垃圾收集器如何实现做任何规定，因此不同厂商、版本提供的垃圾收集器都不一样，JDK1.7中垃圾收集器如下:</p>\n<p><img src=\"../../../uploads/jvm/垃圾收集器.jpg\" alt=\"垃圾收集器\"></p>\n<p>如果两个收集器之间存在连线，则说明他们之间可以搭配使用。</p>\n<h4 id=\"Serial收集器（单线程复制算法）\"><a href=\"#Serial收集器（单线程复制算法）\" class=\"headerlink\" title=\"Serial收集器（单线程复制算法）\"></a>Serial收集器（单线程复制算法）</h4><p>这个收集器是一个单线程的收集器，但它单线程的意义不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾回收，它在进行垃圾回收的时，必须暂停其他所有工作线程，直到它收集完毕。</p>\n<p>Serial收集器运行时如下：</p>\n<p><img src=\"../../../uploads/jvm/serial.jpg\" alt=\"Serial\"></p>\n<p>当Serial收集器工作时候，会造成Stop-The-World，这对很多应用是不可能接受的。但是对于限定单个CPU的环境来说，没有线程交互的开销，专心做GC，和其他收集器相比是简单而高效的（单线程情况）。在用户的桌面应用场景中，可用内存一般不大（几十M至一两百M），可以在较短时间内完成垃圾收集（几十MS至一百多MS）,只要不频繁发生，这是可以接受的。因此，Serial收集器对于运行在Client模式下的虚拟机来说是个比较好的选择。</p>\n<h4 id=\"ParNew-收集器（Serial-多线程）\"><a href=\"#ParNew-收集器（Serial-多线程）\" class=\"headerlink\" title=\"ParNew 收集器（Serial+多线程）\"></a>ParNew 收集器（Serial+多线程）</h4><p>ParNew收集器其实就是Serial收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和Serial收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。<br>它是许多运行在Server模式下的虚拟机的首要选择，除了Serial收集器外，目前只有它能与CMS收集器配合工作。</p>\n<blockquote>\n<p>CMS收集器是一个被认为具有划时代意义的并发收集器，因此如果有一个垃圾收集器能和它一起搭配使用让其更加完美，那这个收集器必然也是一个不可或缺的部分了。</p>\n</blockquote>\n<p>ParNew收集器的运行过程如下图所示:</p>\n<p><img src=\"../../../uploads/jvm/ParNew.jpg\" alt=\"ParNew\"></p>\n<p>在Server模式下，ParNew收集器是一个非常重要的收集器，因为除Serial外，目前只有它能与CMS收集器配合工作；但在单个CPU环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销，该收集器通过超线程技术实现的两个CPU的环境中都不能百分百的保证超过Serial收集器。</p>\n<h4 id=\"Parallel-Scavenge-收集器-多线程复制算法\"><a href=\"#Parallel-Scavenge-收集器-多线程复制算法\" class=\"headerlink\" title=\"Parallel Scavenge 收集器(多线程复制算法)\"></a>Parallel Scavenge 收集器(多线程复制算法)</h4><p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器。<br>Parallel Scavenge收集器的特点是它的关注点和其他收集器不同，CMS等收集器关注点是尽可能的缩短垃圾收集时用户的停顿时间，而Parallel Scavenge关注点是吞吐量（如何高效率的利用CPU）。所谓吞吐量就是CPU中用于运行用户代码的时间与CPU总消耗时间的比值。（吞吐量：CPU用于用户代码的时间/CPU总消耗时间的比值，即=运行用户代码的时间/(运行用户代码时间+垃圾收集时间)。比如，虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。）</p>\n<p><img src=\"../../../uploads/jvm/ParallelScavenge.jpg\" alt=\"ParallelScavenge\"></p>\n<p>当应用程序运行在具有多个CPU上，对暂停时间没有特别高的要求时，即程序主要在后台进行计算，而不需要与用户进行太多交互，例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序；可以采用Parallel Scavenge收集器。</p>\n<h4 id=\"Serial-Old收集器（单线程标记整理）\"><a href=\"#Serial-Old收集器（单线程标记整理）\" class=\"headerlink\" title=\"Serial Old收集器（单线程标记整理）\"></a>Serial Old收集器（单线程标记整理）</h4><p>Serial收集器的老年代版本，同样是一个单线程收集器。</p>\n<p>它主要有两大用途：一种用途是在JDK1.5以及以前的版本中与Parallel Scavenge收集器搭配使用，另一种用途是作为CMS收集器的后备方案</p>\n<p><img src=\"../../../uploads/jvm/SerialOld.jpg\" alt=\"SerialOld\"></p>\n<h4 id=\"Parallel-Old收集器（多线程标记整理）\"><a href=\"#Parallel-Old收集器（多线程标记整理）\" class=\"headerlink\" title=\"Parallel Old收集器（多线程标记整理）\"></a>Parallel Old收集器（多线程标记整理）</h4><p>Parallel Old 收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在JDK1.6才开始提供。<br>在JDK1.6之前，新生代使用ParallelScavenge收集器只能搭配年老代的Serial Old收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge 和年老代 Parallel Old 收集器的搭配策略。</p>\n<p><img src=\"../../../uploads/jvm/ParallelOld.jpg\" alt=\"ParallelOld\"></p>\n<h4 id=\"CMS收集器（多线程标记清除）\"><a href=\"#CMS收集器（多线程标记清除）\" class=\"headerlink\" title=\"CMS收集器（多线程标记清除）\"></a>CMS收集器（多线程标记清除）</h4><p>CMS 收集器是一种以获取最短回收时间为目标的收集器。它的整个过程分为4个步骤：初始标记、并发标记、重新标记、并发清除。</p>\n<ul>\n<li>初始标记： 暂停所有的其他线程，初始标记仅仅标记GC Roots能直接关联到的对象，速度很快；</li>\n<li>并发标记： 并发标记就是进行GC Roots Tracing的过程；同时开启GC和用户线程，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构并不能保证包含当前所有的可达对象。因为用户线程可能会不断的更新引用域，所以GC线程无法保证可达性分析的实时性。所以这个算法里会跟踪记录这些发生引用更新的地方；</li>\n<li>重新标记： 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录（采用多线程并行执行来提升效率）；需要”Stop The World”，且停顿时间比初始标记稍长，但远比并发标记短；</li>\n<li>并发清除： 开启用户线程，同时GC线程开始对为标记的区域做清扫，回收所有的垃圾对象；</li>\n</ul>\n<p>由于整个过程耗时最长的并发标记和并发清除过程收集器线程都可以与用户线程一起工作，所以总体来说，CMS的内存回收是与用户线程一起“并发”执行的。</p>\n<p><img src=\"../../../uploads/jvm/CMS.jpg\" alt=\"CMS\"></p>\n<p>CMS有三个明显的缺点；</p>\n<ol>\n<li><p>对CPU资源敏感：面向并发设计的程序都对CPU资源比较敏感（并发程序的特点）。在并发阶段，它虽然不会导致用户线程停顿，但会因为占用了一部分线程（或者说CPU资源）而导致应用程序变慢，总吞吐量会降低。</p>\n<blockquote>\n<p>CMS的默认收集线程数量是=(CPU数量+3)/4；当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受。</p>\n</blockquote>\n</li>\n<li><p>无法处理浮动垃圾：在并发清除时，用户线程新产生的垃圾，称为浮动垃圾；这使得并发清除时需要预留一定的内存空间，不能像其他收集器在老年代几乎填满再进行收集；也可以认为CMS所需要的空间比其他垃圾收集器大；</p>\n</li>\n<li>产生大量内存碎片：由于CMS是基于“标记+清除”算法来回收老年代对象的，因此长时间运行后会产生大量的空间碎片问题，由于碎片过多，将会给大对象的分配带来麻烦。因此会出现这样的情况，老年代还有很多剩余的空间，但是找不到连续的空间来分配当前对象，这样不得不提前触发一次Full GC。。<blockquote>\n<p>为了解决空间碎片问题，CMS收集器提供−XX:+UseCMSCompactAlFullCollection标志，使得CMS出现上面这种情况时不进行Full GC，而开启内存碎片的合并整理过程；但合并整理过程无法并发，停顿时间会变长；</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"G1收集器\"><a href=\"#G1收集器\" class=\"headerlink\" title=\"G1收集器\"></a>G1收集器</h4><p>G1是一款面向服务端应用的垃圾收集器。HotSpot开发团队赋予它的使命是未来可以替换JDK1.5发布的CMS收集器。与其他收集器相比，G1具备以下特点：</p>\n<ul>\n<li>并行与并发：G1能充分利用CPU、多核环境下的硬件优势，使用多个CPU（CPU或者CPU核心）STW停顿时间。部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让java程序继续执行。</li>\n<li>分代收集：虽然G1可以不需要其他收集器配合就能独立管理整个GC堆，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间的对象，熬过多次GC的旧对象以获取更好的收集效果。</li>\n<li>空间整合：与CMS的“标记–清理”算法不同，G1从整体来看是基于“标记整理”算法实现的收集器；从局部上来看是基于“复制”算法实现的。</li>\n<li>可预测的停顿：这是G1相对于CMS的另一个大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型。可以明确指定M毫秒时间片内，垃圾收集消耗的时间不超过N毫秒。在低停顿的同时实现高吞吐量。</li>\n</ul>\n<blockquote>\n<p>G1收集器将整个java堆分为多个大小相等的独立区域（Region），虽然还保留了新生代和老年代的概念，但是新生代和老年代不是物理隔离，它们都是一部分Region的集合。</p>\n<p>G1收集器可以有计划的避免在整个java堆进行全局的垃圾回收。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需要的时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。这就保证了在有限的时间内可以获取尽可能高的收集效率。因此G1是可预测停顿的。</p>\n</blockquote>\n<p>一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？这个问题在其他的分代收集器，也存在这样的问题，只是在G1更加突出。<br>无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：每个Region都有一个对应的Remembered Set，每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作，然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象），如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中。当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set，就可以保证不进行全局扫描，也不会有遗漏。</p>\n<p>如果不计算维护Remembered Set操作，G1收集器的运作大致可划分为以下几个步骤：</p>\n<ol>\n<li>初始标记：仅标记一下GC Roots能直接关联到的对象，且修改TAMS（Next Top at Mark Start）,让下一阶段并发运行时，用户程序能在正确可用的Region中创建新对象，需要”Stop The World”，但速度很快；</li>\n<li>并发标记：从GC Roots开始进行可达性分析，找出存活对象，耗时长，可与用户线程并发执行，并不能保证可以标记出所有的存活对象；（在分析过程中会产生新的存活对象）</li>\n<li>最终标记：修正并发标记阶段因用户线程继续运行而导致标记发生变化的那部分对象的标记记录，上一阶段对象的变化记录在线程的Remembered Set Log，这里把Remembered Set Log合并到Remembered Set中，需要”Stop The World”，且停顿时间比初始标记稍长，但远比并发标记短；</li>\n<li>筛选回收：首先排序各个Region的回收价值和成本，然后根据用户期望的GC停顿时间来制定回收计划，最后按计划回收一些价值高的Region中垃圾对象，回收时采用”复制”算法，从一个或多个Region复制存活对象到堆上的另一个空的Region，并且在此过程中压缩和释放内存，可以并发进行，降低停顿时间，并增加吞吐量；</li>\n</ol>\n<p><img src=\"../../../uploads/jvm/G1.jpg\" alt=\"G1\"></p>\n"},{"title":"JVM类加载机制","date":"2019-12-09T13:40:00.000Z","comments":0,"keywords":["JVM","类加载机制"],"_content":"\n### 虚拟机类加载机制\n\n#### 类加载的时机\n\n类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（UNloading）7个阶段。其中验证、准备、解析三个节点统称为连接（Linking），这7个阶段的发生顺序如下：\n\n![类加载过程](../../../uploads/jvm/类加载过程.jpg)\n\n加载、验证、准备、初始化和卸载这5个阶段的顺序是确定，类的加载必须按这个顺序进行，但是解析阶段不一定：它在某些情况下可以在初始化阶段之后进行，为了支持java的运行时绑定。\n虚拟机规范严格规定了有且只有5中情况必须对类进行初始化：\n1. 遇到new、getstatic、putstatic活invokestatic这4条字节码指定时，如果类没有进行过初始化，则必须先触发初始化。生成这四条指令最常见的java代码场景：使用new关键词实例化对象、读取或设置一个类的静态字段（被final修饰、在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法时候。\n2. 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先进行初始化。\n3. 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n4. 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化这个类。\n5. 当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果是REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发初始化。\n\n#### 类加载的过程\n\n##### 加载\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流。（不一定从class文件获取，也可以从ZIP包、网络、运行时计算生成（动态代理）、其他文件（JSP）、数据库获取）\n2. 将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。\n\n##### 验证\n\n此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。\n\n1. 文件格式验证：基于字节流验证。\n2. 元数据验证：基于方法区的存储结构验证。\n3. 字节码验证：基于方法区的存储结构验证。\n4. 符号引用验证：基于方法区的存储结构验证。\n\n##### 准备\n\n为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间。例如：\n```\npublic static int value = 123;\n```\n此时在准备阶段过后的初始值为0而不是123；将value赋值为123的putstatic指令是程序被编译后，存放于类构造器<client>方法之中，所以把value赋值为123的过程在初始化阶段才会进行。\n\n```\npublic static final int value = 123;\n```\n此时value的值在准备阶段过后就是123（类字段属性表中存在ConstantValue属性，编译时Javac会为value生成ConstantValue属性，在准备过程就会根据ConstantValue的设置将value复制为123）。\n\n##### 解析\n\n把类型中的符号引用转换为直接引用。\n\n- 符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n- 直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在\n\n主要有以下四种：\n1. 类或接口的解析\n2. 字段解析\n3. 类方法解析\n4. 接口方法解析\n\n##### 初始化\n\n初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。\n\n#### 类加载器\n\n对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。比较两个类是否相等，只有在这两个类是同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类必定不相等。\n\n```\npublic class ClassLoaderTest {\n    public static void main(String[] args) throws Exception {\n        ClassLoader loader = new ClassLoader() {\n            @Override\n            public Class<?> loadClass(String name) throws ClassNotFoundException {\n                try {\n                    String fileName = name.substring(name.lastIndexOf(\".\") + 1) + \".class\";\n                    InputStream is = getClass().getResourceAsStream(fileName);\n                    if(is == null) {\n                        return super.loadClass(name);\n                    }\n                    byte[] b = new byte[is.available()];\n                    is.read(b);\n                    return defineClass(name, b, 0, b.length);\n                } catch (Exception e) {\n                    throw new ClassNotFoundException(name);\n                }\n            }\n        };\n        Object obj = loader.loadClass(\"classloader.ClassLoaderTest\");\n        System.out.println(obj);\n        System.out.println(obj instanceof ClassLoaderTest);\n    }\n}\n```\n以上代码会输出\n```\nclass classloader.ClassLoaderTest\nfalse\n```\n可以看出这个object的确是ClassLoaderTest实例化出来的对象，但是这个类与classloader.ClassLoaderTest做类型检查却返回false。\n\n#### 双亲委派模式\n\n从Java虚拟机的江都讲，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader）,这个类加载器由C++实现，是虚拟机的一部分；另一种就是所有其他的类加载器，这些类加载器都由Java实现，全都继承于抽象类java.lang.ClassLoader。\n\nJVM提供了以下3种系统的类加载器：\n\n- 启动类加载器（Bootstrap ClassLoader）：最顶层的类加载器，负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。\n- 扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。\n- 应用程序类加载器(Application ClassLoader)：也叫做系统类加载器，可以通过getSystemClassLoader()获取，负责加载用户路径（classpath）上的类库。如果没有自定义类加载器，一般这个就是默认的类加载器。\n\n![类加载器](../../../uploads/jvm/类加载器.jpeg)\n\n类加载器之间的这种层次关系叫做双亲委派模型。 \n双亲委派模型要求除了顶层的启动类加载器（Bootstrap ClassLoader）外，其余的类加载器都应当有自己的父类加载器。这里的类加载器之间的父子关系一般不是以继承关系实现的，而是用组合实现的。\n\n##### 双亲委派模型的工作过程\n如果一个类接受到类加载请求，他自己不会去加载这个请求，而是将这个类加载请求委派给父类加载器，这样一层一层传送，直到到达启动类加载器（Bootstrap ClassLoader）。 \n只有当父类加载器无法加载这个请求时，子加载器才会尝试自己去加载。\n\n##### 双亲委派模型的代码实现\n双亲委派模型的代码实现集中在java.lang.ClassLoader的loadClass()方法当中。 \n1. 首先检查类是否被加载，没有则调用父类加载器的loadClass()方法； \n2. 若父类加载器为空，则默认使用启动类加载器作为父加载器； \n3. 若父类加载失败，抛出ClassNotFoundException 异常后，再调用自己的findClass() 方法。\n\n```\nprotected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n    //1 首先检查类是否被加载\n    Class c = findLoadedClass(name);\n    if (c == null) {\n        try {\n            if (parent != null) {\n             //2 没有则调用父类加载器的loadClass()方法；\n                c = parent.loadClass(name, false);\n            } else {\n            //3 若父类加载器为空，则默认使用启动类加载器作为父加载器；\n                c = findBootstrapClass0(name);\n            }\n        } catch (ClassNotFoundException e) {\n           //4 若父类加载失败，抛出ClassNotFoundException 异常后\n            c = findClass(name);\n        }\n    }\n    if (resolve) {\n        //5 再调用自己的findClass() 方法。\n        resolveClass(c);\n    }\n    return c;\n}\n```\n","source":"_posts/jvm/4_JVM类加载机制.md","raw":"---\ntitle: JVM类加载机制\ndate: 2019-12-09 21:40\ncomments: false\ntags: \n- JVM\n- 类加载机制\ncategories: \n- JVM\nkeywords: \n- JVM\n- 类加载机制\n---\n\n### 虚拟机类加载机制\n\n#### 类加载的时机\n\n类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（UNloading）7个阶段。其中验证、准备、解析三个节点统称为连接（Linking），这7个阶段的发生顺序如下：\n\n![类加载过程](../../../uploads/jvm/类加载过程.jpg)\n\n加载、验证、准备、初始化和卸载这5个阶段的顺序是确定，类的加载必须按这个顺序进行，但是解析阶段不一定：它在某些情况下可以在初始化阶段之后进行，为了支持java的运行时绑定。\n虚拟机规范严格规定了有且只有5中情况必须对类进行初始化：\n1. 遇到new、getstatic、putstatic活invokestatic这4条字节码指定时，如果类没有进行过初始化，则必须先触发初始化。生成这四条指令最常见的java代码场景：使用new关键词实例化对象、读取或设置一个类的静态字段（被final修饰、在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法时候。\n2. 使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先进行初始化。\n3. 当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。\n4. 当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化这个类。\n5. 当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果是REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发初始化。\n\n#### 类加载的过程\n\n##### 加载\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流。（不一定从class文件获取，也可以从ZIP包、网络、运行时计算生成（动态代理）、其他文件（JSP）、数据库获取）\n2. 将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。\n\n##### 验证\n\n此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。\n\n1. 文件格式验证：基于字节流验证。\n2. 元数据验证：基于方法区的存储结构验证。\n3. 字节码验证：基于方法区的存储结构验证。\n4. 符号引用验证：基于方法区的存储结构验证。\n\n##### 准备\n\n为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间。例如：\n```\npublic static int value = 123;\n```\n此时在准备阶段过后的初始值为0而不是123；将value赋值为123的putstatic指令是程序被编译后，存放于类构造器<client>方法之中，所以把value赋值为123的过程在初始化阶段才会进行。\n\n```\npublic static final int value = 123;\n```\n此时value的值在准备阶段过后就是123（类字段属性表中存在ConstantValue属性，编译时Javac会为value生成ConstantValue属性，在准备过程就会根据ConstantValue的设置将value复制为123）。\n\n##### 解析\n\n把类型中的符号引用转换为直接引用。\n\n- 符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。\n- 直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在\n\n主要有以下四种：\n1. 类或接口的解析\n2. 字段解析\n3. 类方法解析\n4. 接口方法解析\n\n##### 初始化\n\n初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。\n\n#### 类加载器\n\n对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。比较两个类是否相等，只有在这两个类是同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类必定不相等。\n\n```\npublic class ClassLoaderTest {\n    public static void main(String[] args) throws Exception {\n        ClassLoader loader = new ClassLoader() {\n            @Override\n            public Class<?> loadClass(String name) throws ClassNotFoundException {\n                try {\n                    String fileName = name.substring(name.lastIndexOf(\".\") + 1) + \".class\";\n                    InputStream is = getClass().getResourceAsStream(fileName);\n                    if(is == null) {\n                        return super.loadClass(name);\n                    }\n                    byte[] b = new byte[is.available()];\n                    is.read(b);\n                    return defineClass(name, b, 0, b.length);\n                } catch (Exception e) {\n                    throw new ClassNotFoundException(name);\n                }\n            }\n        };\n        Object obj = loader.loadClass(\"classloader.ClassLoaderTest\");\n        System.out.println(obj);\n        System.out.println(obj instanceof ClassLoaderTest);\n    }\n}\n```\n以上代码会输出\n```\nclass classloader.ClassLoaderTest\nfalse\n```\n可以看出这个object的确是ClassLoaderTest实例化出来的对象，但是这个类与classloader.ClassLoaderTest做类型检查却返回false。\n\n#### 双亲委派模式\n\n从Java虚拟机的江都讲，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader）,这个类加载器由C++实现，是虚拟机的一部分；另一种就是所有其他的类加载器，这些类加载器都由Java实现，全都继承于抽象类java.lang.ClassLoader。\n\nJVM提供了以下3种系统的类加载器：\n\n- 启动类加载器（Bootstrap ClassLoader）：最顶层的类加载器，负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。\n- 扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。\n- 应用程序类加载器(Application ClassLoader)：也叫做系统类加载器，可以通过getSystemClassLoader()获取，负责加载用户路径（classpath）上的类库。如果没有自定义类加载器，一般这个就是默认的类加载器。\n\n![类加载器](../../../uploads/jvm/类加载器.jpeg)\n\n类加载器之间的这种层次关系叫做双亲委派模型。 \n双亲委派模型要求除了顶层的启动类加载器（Bootstrap ClassLoader）外，其余的类加载器都应当有自己的父类加载器。这里的类加载器之间的父子关系一般不是以继承关系实现的，而是用组合实现的。\n\n##### 双亲委派模型的工作过程\n如果一个类接受到类加载请求，他自己不会去加载这个请求，而是将这个类加载请求委派给父类加载器，这样一层一层传送，直到到达启动类加载器（Bootstrap ClassLoader）。 \n只有当父类加载器无法加载这个请求时，子加载器才会尝试自己去加载。\n\n##### 双亲委派模型的代码实现\n双亲委派模型的代码实现集中在java.lang.ClassLoader的loadClass()方法当中。 \n1. 首先检查类是否被加载，没有则调用父类加载器的loadClass()方法； \n2. 若父类加载器为空，则默认使用启动类加载器作为父加载器； \n3. 若父类加载失败，抛出ClassNotFoundException 异常后，再调用自己的findClass() 方法。\n\n```\nprotected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {\n    //1 首先检查类是否被加载\n    Class c = findLoadedClass(name);\n    if (c == null) {\n        try {\n            if (parent != null) {\n             //2 没有则调用父类加载器的loadClass()方法；\n                c = parent.loadClass(name, false);\n            } else {\n            //3 若父类加载器为空，则默认使用启动类加载器作为父加载器；\n                c = findBootstrapClass0(name);\n            }\n        } catch (ClassNotFoundException e) {\n           //4 若父类加载失败，抛出ClassNotFoundException 异常后\n            c = findClass(name);\n        }\n    }\n    if (resolve) {\n        //5 再调用自己的findClass() 方法。\n        resolveClass(c);\n    }\n    return c;\n}\n```\n","slug":"jvm/4_JVM类加载机制","published":1,"updated":"2020-01-02T05:49:23.773Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs6002cn0zt8qwf379e","content":"<h3 id=\"虚拟机类加载机制\"><a href=\"#虚拟机类加载机制\" class=\"headerlink\" title=\"虚拟机类加载机制\"></a>虚拟机类加载机制</h3><h4 id=\"类加载的时机\"><a href=\"#类加载的时机\" class=\"headerlink\" title=\"类加载的时机\"></a>类加载的时机</h4><p>类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（UNloading）7个阶段。其中验证、准备、解析三个节点统称为连接（Linking），这7个阶段的发生顺序如下：</p>\n<p><img src=\"../../../uploads/jvm/类加载过程.jpg\" alt=\"类加载过程\"></p>\n<p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定，类的加载必须按这个顺序进行，但是解析阶段不一定：它在某些情况下可以在初始化阶段之后进行，为了支持java的运行时绑定。<br>虚拟机规范严格规定了有且只有5中情况必须对类进行初始化：</p>\n<ol>\n<li>遇到new、getstatic、putstatic活invokestatic这4条字节码指定时，如果类没有进行过初始化，则必须先触发初始化。生成这四条指令最常见的java代码场景：使用new关键词实例化对象、读取或设置一个类的静态字段（被final修饰、在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法时候。</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先进行初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化这个类。</li>\n<li>当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果是REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发初始化。</li>\n</ol>\n<h4 id=\"类加载的过程\"><a href=\"#类加载的过程\" class=\"headerlink\" title=\"类加载的过程\"></a>类加载的过程</h4><h5 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h5><ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流。（不一定从class文件获取，也可以从ZIP包、网络、运行时计算生成（动态代理）、其他文件（JSP）、数据库获取）</li>\n<li>将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li>\n</ol>\n<h5 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h5><p>此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。</p>\n<ol>\n<li>文件格式验证：基于字节流验证。</li>\n<li>元数据验证：基于方法区的存储结构验证。</li>\n<li>字节码验证：基于方法区的存储结构验证。</li>\n<li>符号引用验证：基于方法区的存储结构验证。</li>\n</ol>\n<h5 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h5><p>为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int value = 123;</div></pre></td></tr></table></figure></p>\n<p>此时在准备阶段过后的初始值为0而不是123；将value赋值为123的putstatic指令是程序被编译后，存放于类构造器<client>方法之中，所以把value赋值为123的过程在初始化阶段才会进行。</client></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final int value = 123;</div></pre></td></tr></table></figure>\n<p>此时value的值在准备阶段过后就是123（类字段属性表中存在ConstantValue属性，编译时Javac会为value生成ConstantValue属性，在准备过程就会根据ConstantValue的设置将value复制为123）。</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><p>把类型中的符号引用转换为直接引用。</p>\n<ul>\n<li>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li>\n<li>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在</li>\n</ul>\n<p>主要有以下四种：</p>\n<ol>\n<li>类或接口的解析</li>\n<li>字段解析</li>\n<li>类方法解析</li>\n<li>接口方法解析</li>\n</ol>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</client></client></client></client></client></p>\n<h4 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h4><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。比较两个类是否相等，只有在这两个类是同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类必定不相等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ClassLoaderTest &#123;</div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        ClassLoader loader = new ClassLoader() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    String fileName = name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;</div><div class=\"line\">                    InputStream is = getClass().getResourceAsStream(fileName);</div><div class=\"line\">                    if(is == null) &#123;</div><div class=\"line\">                        return super.loadClass(name);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    byte[] b = new byte[is.available()];</div><div class=\"line\">                    is.read(b);</div><div class=\"line\">                    return defineClass(name, b, 0, b.length);</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                    throw new ClassNotFoundException(name);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Object obj = loader.loadClass(&quot;classloader.ClassLoaderTest&quot;);</div><div class=\"line\">        System.out.println(obj);</div><div class=\"line\">        System.out.println(obj instanceof ClassLoaderTest);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码会输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">class classloader.ClassLoaderTest</div><div class=\"line\">false</div></pre></td></tr></table></figure></p>\n<p>可以看出这个object的确是ClassLoaderTest实例化出来的对象，但是这个类与classloader.ClassLoaderTest做类型检查却返回false。</p>\n<h4 id=\"双亲委派模式\"><a href=\"#双亲委派模式\" class=\"headerlink\" title=\"双亲委派模式\"></a>双亲委派模式</h4><p>从Java虚拟机的江都讲，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader）,这个类加载器由C++实现，是虚拟机的一部分；另一种就是所有其他的类加载器，这些类加载器都由Java实现，全都继承于抽象类java.lang.ClassLoader。</p>\n<p>JVM提供了以下3种系统的类加载器：</p>\n<ul>\n<li>启动类加载器（Bootstrap ClassLoader）：最顶层的类加载器，负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li>\n<li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>\n<li>应用程序类加载器(Application ClassLoader)：也叫做系统类加载器，可以通过getSystemClassLoader()获取，负责加载用户路径（classpath）上的类库。如果没有自定义类加载器，一般这个就是默认的类加载器。</li>\n</ul>\n<p><img src=\"../../../uploads/jvm/类加载器.jpeg\" alt=\"类加载器\"></p>\n<p>类加载器之间的这种层次关系叫做双亲委派模型。<br>双亲委派模型要求除了顶层的启动类加载器（Bootstrap ClassLoader）外，其余的类加载器都应当有自己的父类加载器。这里的类加载器之间的父子关系一般不是以继承关系实现的，而是用组合实现的。</p>\n<h5 id=\"双亲委派模型的工作过程\"><a href=\"#双亲委派模型的工作过程\" class=\"headerlink\" title=\"双亲委派模型的工作过程\"></a>双亲委派模型的工作过程</h5><p>如果一个类接受到类加载请求，他自己不会去加载这个请求，而是将这个类加载请求委派给父类加载器，这样一层一层传送，直到到达启动类加载器（Bootstrap ClassLoader）。<br>只有当父类加载器无法加载这个请求时，子加载器才会尝试自己去加载。</p>\n<h5 id=\"双亲委派模型的代码实现\"><a href=\"#双亲委派模型的代码实现\" class=\"headerlink\" title=\"双亲委派模型的代码实现\"></a>双亲委派模型的代码实现</h5><p>双亲委派模型的代码实现集中在java.lang.ClassLoader的loadClass()方法当中。 </p>\n<ol>\n<li>首先检查类是否被加载，没有则调用父类加载器的loadClass()方法； </li>\n<li>若父类加载器为空，则默认使用启动类加载器作为父加载器； </li>\n<li>若父类加载失败，抛出ClassNotFoundException 异常后，再调用自己的findClass() 方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException &#123;</div><div class=\"line\">    //1 首先检查类是否被加载</div><div class=\"line\">    Class c = findLoadedClass(name);</div><div class=\"line\">    if (c == null) &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if (parent != null) &#123;</div><div class=\"line\">             //2 没有则调用父类加载器的loadClass()方法；</div><div class=\"line\">                c = parent.loadClass(name, false);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">            //3 若父类加载器为空，则默认使用启动类加载器作为父加载器；</div><div class=\"line\">                c = findBootstrapClass0(name);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</div><div class=\"line\">           //4 若父类加载失败，抛出ClassNotFoundException 异常后</div><div class=\"line\">            c = findClass(name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (resolve) &#123;</div><div class=\"line\">        //5 再调用自己的findClass() 方法。</div><div class=\"line\">        resolveClass(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"虚拟机类加载机制\"><a href=\"#虚拟机类加载机制\" class=\"headerlink\" title=\"虚拟机类加载机制\"></a>虚拟机类加载机制</h3><h4 id=\"类加载的时机\"><a href=\"#类加载的时机\" class=\"headerlink\" title=\"类加载的时机\"></a>类加载的时机</h4><p>类从被加载到虚拟机内存开始，到卸载出内存为止，它的整个生命周期包括，加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（UNloading）7个阶段。其中验证、准备、解析三个节点统称为连接（Linking），这7个阶段的发生顺序如下：</p>\n<p><img src=\"../../../uploads/jvm/类加载过程.jpg\" alt=\"类加载过程\"></p>\n<p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定，类的加载必须按这个顺序进行，但是解析阶段不一定：它在某些情况下可以在初始化阶段之后进行，为了支持java的运行时绑定。<br>虚拟机规范严格规定了有且只有5中情况必须对类进行初始化：</p>\n<ol>\n<li>遇到new、getstatic、putstatic活invokestatic这4条字节码指定时，如果类没有进行过初始化，则必须先触发初始化。生成这四条指令最常见的java代码场景：使用new关键词实例化对象、读取或设置一个类的静态字段（被final修饰、在编译器把结果放入常量池的静态字段除外）的时候，以及调用一个类的静态方法时候。</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化，则需要先进行初始化。</li>\n<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>\n<li>当虚拟机启动时，用户需要指定一个要执行的主类，虚拟机会先初始化这个类。</li>\n<li>当使用动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果是REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发初始化。</li>\n</ol>\n<h4 id=\"类加载的过程\"><a href=\"#类加载的过程\" class=\"headerlink\" title=\"类加载的过程\"></a>类加载的过程</h4><h5 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h5><ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流。（不一定从class文件获取，也可以从ZIP包、网络、运行时计算生成（动态代理）、其他文件（JSP）、数据库获取）</li>\n<li>将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li>\n</ol>\n<h5 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h5><p>此阶段主要确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机的自身安全。</p>\n<ol>\n<li>文件格式验证：基于字节流验证。</li>\n<li>元数据验证：基于方法区的存储结构验证。</li>\n<li>字节码验证：基于方法区的存储结构验证。</li>\n<li>符号引用验证：基于方法区的存储结构验证。</li>\n</ol>\n<h5 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h5><p>为类变量分配内存，并将其初始化为默认值。（此时为默认值，在初始化的时候才会给变量赋值）即在方法区中分配这些变量所使用的内存空间。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int value = 123;</div></pre></td></tr></table></figure></p>\n<p>此时在准备阶段过后的初始值为0而不是123；将value赋值为123的putstatic指令是程序被编译后，存放于类构造器<client>方法之中，所以把value赋值为123的过程在初始化阶段才会进行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static final int value = 123;</div></pre></td></tr></table></figure>\n<p>此时value的值在准备阶段过后就是123（类字段属性表中存在ConstantValue属性，编译时Javac会为value生成ConstantValue属性，在准备过程就会根据ConstantValue的设置将value复制为123）。</p>\n<h5 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h5><p>把类型中的符号引用转换为直接引用。</p>\n<ul>\n<li>符号引用与虚拟机实现的布局无关，引用的目标并不一定要已经加载到内存中。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</li>\n<li>直接引用可以是指向目标的指针，相对偏移量或是一个能间接定位到目标的句柄。如果有了直接引用，那引用的目标必定已经在内存中存在</li>\n</ul>\n<p>主要有以下四种：</p>\n<ol>\n<li>类或接口的解析</li>\n<li>字段解析</li>\n<li>类方法解析</li>\n<li>接口方法解析</li>\n</ol>\n<h5 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h5><p>初始化阶段是执行类构造器<client>方法的过程。<client>方法是由编译器自动收集类中的类变量的赋值操作和静态语句块中的语句合并而成的。虚拟机会保证<client>方法执行之前，父类的<client>方法已经执行完毕。如果一个类中没有对静态变量赋值也没有静态语句块，那么编译器可以不为这个类生成<client>()方法。</p>\n<h4 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h4><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在java虚拟机中的唯一性，每一个类加载器都拥有一个独立的类名称空间。比较两个类是否相等，只有在这两个类是同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类必定不相等。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ClassLoaderTest &#123;</div><div class=\"line\">    public static void main(String[] args) throws Exception &#123;</div><div class=\"line\">        ClassLoader loader = new ClassLoader() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    String fileName = name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;</div><div class=\"line\">                    InputStream is = getClass().getResourceAsStream(fileName);</div><div class=\"line\">                    if(is == null) &#123;</div><div class=\"line\">                        return super.loadClass(name);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    byte[] b = new byte[is.available()];</div><div class=\"line\">                    is.read(b);</div><div class=\"line\">                    return defineClass(name, b, 0, b.length);</div><div class=\"line\">                &#125; catch (Exception e) &#123;</div><div class=\"line\">                    throw new ClassNotFoundException(name);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        Object obj = loader.loadClass(&quot;classloader.ClassLoaderTest&quot;);</div><div class=\"line\">        System.out.println(obj);</div><div class=\"line\">        System.out.println(obj instanceof ClassLoaderTest);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上代码会输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">class classloader.ClassLoaderTest</div><div class=\"line\">false</div></pre></td></tr></table></figure></p>\n<p>可以看出这个object的确是ClassLoaderTest实例化出来的对象，但是这个类与classloader.ClassLoaderTest做类型检查却返回false。</p>\n<h4 id=\"双亲委派模式\"><a href=\"#双亲委派模式\" class=\"headerlink\" title=\"双亲委派模式\"></a>双亲委派模式</h4><p>从Java虚拟机的江都讲，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader）,这个类加载器由C++实现，是虚拟机的一部分；另一种就是所有其他的类加载器，这些类加载器都由Java实现，全都继承于抽象类java.lang.ClassLoader。</p>\n<p>JVM提供了以下3种系统的类加载器：</p>\n<ul>\n<li>启动类加载器（Bootstrap ClassLoader）：最顶层的类加载器，负责加载 JAVA_HOME\\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类。</li>\n<li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\\lib\\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库。</li>\n<li>应用程序类加载器(Application ClassLoader)：也叫做系统类加载器，可以通过getSystemClassLoader()获取，负责加载用户路径（classpath）上的类库。如果没有自定义类加载器，一般这个就是默认的类加载器。</li>\n</ul>\n<p><img src=\"../../../uploads/jvm/类加载器.jpeg\" alt=\"类加载器\"></p>\n<p>类加载器之间的这种层次关系叫做双亲委派模型。<br>双亲委派模型要求除了顶层的启动类加载器（Bootstrap ClassLoader）外，其余的类加载器都应当有自己的父类加载器。这里的类加载器之间的父子关系一般不是以继承关系实现的，而是用组合实现的。</p>\n<h5 id=\"双亲委派模型的工作过程\"><a href=\"#双亲委派模型的工作过程\" class=\"headerlink\" title=\"双亲委派模型的工作过程\"></a>双亲委派模型的工作过程</h5><p>如果一个类接受到类加载请求，他自己不会去加载这个请求，而是将这个类加载请求委派给父类加载器，这样一层一层传送，直到到达启动类加载器（Bootstrap ClassLoader）。<br>只有当父类加载器无法加载这个请求时，子加载器才会尝试自己去加载。</p>\n<h5 id=\"双亲委派模型的代码实现\"><a href=\"#双亲委派模型的代码实现\" class=\"headerlink\" title=\"双亲委派模型的代码实现\"></a>双亲委派模型的代码实现</h5><p>双亲委派模型的代码实现集中在java.lang.ClassLoader的loadClass()方法当中。 </p>\n<ol>\n<li>首先检查类是否被加载，没有则调用父类加载器的loadClass()方法； </li>\n<li>若父类加载器为空，则默认使用启动类加载器作为父加载器； </li>\n<li>若父类加载失败，抛出ClassNotFoundException 异常后，再调用自己的findClass() 方法。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException &#123;</div><div class=\"line\">    //1 首先检查类是否被加载</div><div class=\"line\">    Class c = findLoadedClass(name);</div><div class=\"line\">    if (c == null) &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            if (parent != null) &#123;</div><div class=\"line\">             //2 没有则调用父类加载器的loadClass()方法；</div><div class=\"line\">                c = parent.loadClass(name, false);</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">            //3 若父类加载器为空，则默认使用启动类加载器作为父加载器；</div><div class=\"line\">                c = findBootstrapClass0(name);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (ClassNotFoundException e) &#123;</div><div class=\"line\">           //4 若父类加载失败，抛出ClassNotFoundException 异常后</div><div class=\"line\">            c = findClass(name);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (resolve) &#123;</div><div class=\"line\">        //5 再调用自己的findClass() 方法。</div><div class=\"line\">        resolveClass(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return c;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"JDK常用命令（虚拟机性能监控故障处理）","date":"2019-12-11T14:02:00.000Z","comments":0,"keywords":["JDK"],"_content":"\n### jps：虚拟机进程状况工具\n\njps的功能：可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID。\n它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到LVMID来确定要监控的是哪一个虚拟机进程。 对于本地虚拟机进程来讲，LVMID和操作系统的进程ID是一致的，使用PS（LINUX）也可以查询到虚拟机进程的LVMID，但是如果启动了多个虚拟机进程就无法根据进程名称定位。\njps命令格式：jps [options] [hostid]\n\n| 选项 | 作用 |\n| ---  | --- |\n| -q  | 只输出LVMID，省略主类的名称 |\n| -m  | 输出虚拟机进程启动时传递给主类main函数的参数 |\n| -l  | 输出主类的全名，如果执行的是jar包，输出jar路径 |\n| -v  | 输出虚拟机进程启动时jvm参数 |\n\n### jstat：虚拟机统计信息监视工具\n\njstat (JVM Statistics Monitoring Tool)用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾会搜、JIT编译等运行数据。\n\njstat的命令格式：jstat [ option vmid [interval[s|ms] [count]]]\n\n> 对于命令格式中的VMID和LVMID，如果是本地虚拟机进程，两者一致。如果是远程虚拟机进程，则VMID的格式为[protocol:][//]lvmind[@hostname[:port]/servername]\n> interval : 查询间隔  count：查询次数 如果省略interval和count，则只查询一次\n> 选项option代表用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况。\n\n| 选项 | 作用 |\n| ---  | --- |\n| -class | 监视类装载、卸载数量，总空间以及类装载锁耗费的时间 |\n| -gc | 监视Java堆状况，包括eden区、两个Survivor区、老年代、永久代等的容量、已使用空间、GC时间合计等信息 |\n| -gccapacity | 监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间 |\n| -gcutil | 监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比 |\n| -gccause | 与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因 |\n| -gcnew | 监视新生代GC状况 |\n| -gcnewcapacity | 监视内容与-gcnew 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间 |\n| -gcold | 监视老年代代GC状况 |\n| -gcoldcapacity | 监视内容与-gcold 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间 |\n| -gcpermcapacity | 输出永久代使用的最大、最小空间 |\n| -compiler | 输出JIT编译器编译过的方法、耗时等信息 |\n| -printcompilation | 输出已经被JIT编译的方法 |\n\n输入:\n```\njstat -gc 2780 1000 20\n```\n\n查看进程2780的GC情况，每隔1s查一次，查20次,部分返回如下：\n\n```\nS0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT\n4352.0 4352.0 1713.6  0.0   34944.0  13334.2   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  13966.0   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  14611.7   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  15243.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  15886.3   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  16527.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n```\n\n\n- S0C：第一个幸存区的大小\n- S1C：第二个幸存区的大小\n- S0U：第一个幸存区的使用大小\n- S1U：第二个幸存区的使用大小\n- EC：年轻代的大小\n- EU：年轻代使用大小\n- OC：老年代大小\n- OU：老年代使用大小\n- PC：perm内存大小（永久区）\n- PU：perm内存使用大小\n- YGC：年轻代垃圾回收次数\n- YGCT：年轻代垃圾回收消耗时间\n- FGC：老年代垃圾回收次数\n- FGCT：老年代垃圾回收消耗时间\n- GCT： 垃圾回收消耗总时间\n\n### jinfo：java配置信息工具\n\njinfo的作用是实时的查看和调整虚拟机各项参数。\n\n语法：jinfo [option] pid\n\n执行 jinfo -flags pid 命令后查询结果中，Non-default VM flags为虚拟机默认的设置参数，Command line为用户自行设置的参数\n\n### jmap：java内存映像工具\n\njmap命令用于生成堆转储快照（一般称为heapdump或dump文件）。jmap不仅仅为了获取dump文件，它还可以查询finalize执行队列、Java堆、永久代的详细信息，如空间使用率、当前使用的是那种收集器等。\n\njmap 命令格式： jmap [option] vmid\n\n| 选项 | 作用 |\n| --- | ---  |\n| -dump | 生成java堆转储快照。 格式为 -dump:[live,] format=b,file=<filename> 其中live子参数说明是否只dump出存活的对象 |\n| -finalizeinfo | 显示在F-Queue中等待Finalizer线程执行finalize方法的对象。 只在linux/solaris平台有效 |\n| -heap | 只显示Java堆详细信息。如使用脑胀回收器、参数配置、分代状况等。只在linux/solaris平台有效 |\n| -histo | 显示堆中对象统计信息，包括类、实例数量、合计容量 |\n| -permstat | 以ClassLoader为统计口径显示永久代内存状态。 只在linux/solaris平台有效 |\n|  -F | 当虚拟机进程对-dump选项没有响应时，可以使用这个选项强制生成dump快照。只在linux/solaris平台有效 |\n\n### jhat：虚拟机堆转储快照分析工具\n\njhat与jmap搭配使用，用于分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成的dump文件的分析结果后，可以在浏览器中输入“http://localhost:7000”进行查看。\n\n使用：\n```\njmap -dump:format=b,file=test.bin 2780\njhat test.bin\n```\n\n### jstack：java堆栈跟踪工具\n\njstack作用：用于生成虚拟机当前时刻的线程快照。 \n1. 线程快照是指当前虚拟机内的每一个线程正在执行的方法堆栈的集合。 \n2. 生成线程快照的作用是可用于定位线程出现长时间停顿的原因，如线程间死锁 、死循环、请求外部资源导致的长时间等待等等问题，当线程出现停顿现象时，就可以用jstack查看各个线程调用的堆栈情况。\n\njstack命令格式：jstack [option] vmid\n\n| 选项 | 作用 |\n| --- | --- |\n| -F | 当正常输出的请求不被响应时，强制输出线程堆栈 |\n| -m | 如果调用到本地方法的话，可以显示C/C++的堆栈 |\n| -l |  除了堆栈信息，显示关于锁的附件信息 |\n","source":"_posts/jvm/5_JDK常用命令（虚拟机性能监控故障处理）.md","raw":"---\ntitle: JDK常用命令（虚拟机性能监控故障处理）\ndate: 2019-12-11 22:02\ncomments: false\ntags: \n- JDK\ncategories: \n- JDK\nkeywords: \n- JDK\n---\n\n### jps：虚拟机进程状况工具\n\njps的功能：可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID。\n它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到LVMID来确定要监控的是哪一个虚拟机进程。 对于本地虚拟机进程来讲，LVMID和操作系统的进程ID是一致的，使用PS（LINUX）也可以查询到虚拟机进程的LVMID，但是如果启动了多个虚拟机进程就无法根据进程名称定位。\njps命令格式：jps [options] [hostid]\n\n| 选项 | 作用 |\n| ---  | --- |\n| -q  | 只输出LVMID，省略主类的名称 |\n| -m  | 输出虚拟机进程启动时传递给主类main函数的参数 |\n| -l  | 输出主类的全名，如果执行的是jar包，输出jar路径 |\n| -v  | 输出虚拟机进程启动时jvm参数 |\n\n### jstat：虚拟机统计信息监视工具\n\njstat (JVM Statistics Monitoring Tool)用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾会搜、JIT编译等运行数据。\n\njstat的命令格式：jstat [ option vmid [interval[s|ms] [count]]]\n\n> 对于命令格式中的VMID和LVMID，如果是本地虚拟机进程，两者一致。如果是远程虚拟机进程，则VMID的格式为[protocol:][//]lvmind[@hostname[:port]/servername]\n> interval : 查询间隔  count：查询次数 如果省略interval和count，则只查询一次\n> 选项option代表用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况。\n\n| 选项 | 作用 |\n| ---  | --- |\n| -class | 监视类装载、卸载数量，总空间以及类装载锁耗费的时间 |\n| -gc | 监视Java堆状况，包括eden区、两个Survivor区、老年代、永久代等的容量、已使用空间、GC时间合计等信息 |\n| -gccapacity | 监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间 |\n| -gcutil | 监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比 |\n| -gccause | 与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因 |\n| -gcnew | 监视新生代GC状况 |\n| -gcnewcapacity | 监视内容与-gcnew 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间 |\n| -gcold | 监视老年代代GC状况 |\n| -gcoldcapacity | 监视内容与-gcold 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间 |\n| -gcpermcapacity | 输出永久代使用的最大、最小空间 |\n| -compiler | 输出JIT编译器编译过的方法、耗时等信息 |\n| -printcompilation | 输出已经被JIT编译的方法 |\n\n输入:\n```\njstat -gc 2780 1000 20\n```\n\n查看进程2780的GC情况，每隔1s查一次，查20次,部分返回如下：\n\n```\nS0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT\n4352.0 4352.0 1713.6  0.0   34944.0  13334.2   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  13966.0   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  14611.7   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  15243.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  15886.3   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n4352.0 4352.0 1713.6  0.0   34944.0  16527.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196\n```\n\n\n- S0C：第一个幸存区的大小\n- S1C：第二个幸存区的大小\n- S0U：第一个幸存区的使用大小\n- S1U：第二个幸存区的使用大小\n- EC：年轻代的大小\n- EU：年轻代使用大小\n- OC：老年代大小\n- OU：老年代使用大小\n- PC：perm内存大小（永久区）\n- PU：perm内存使用大小\n- YGC：年轻代垃圾回收次数\n- YGCT：年轻代垃圾回收消耗时间\n- FGC：老年代垃圾回收次数\n- FGCT：老年代垃圾回收消耗时间\n- GCT： 垃圾回收消耗总时间\n\n### jinfo：java配置信息工具\n\njinfo的作用是实时的查看和调整虚拟机各项参数。\n\n语法：jinfo [option] pid\n\n执行 jinfo -flags pid 命令后查询结果中，Non-default VM flags为虚拟机默认的设置参数，Command line为用户自行设置的参数\n\n### jmap：java内存映像工具\n\njmap命令用于生成堆转储快照（一般称为heapdump或dump文件）。jmap不仅仅为了获取dump文件，它还可以查询finalize执行队列、Java堆、永久代的详细信息，如空间使用率、当前使用的是那种收集器等。\n\njmap 命令格式： jmap [option] vmid\n\n| 选项 | 作用 |\n| --- | ---  |\n| -dump | 生成java堆转储快照。 格式为 -dump:[live,] format=b,file=<filename> 其中live子参数说明是否只dump出存活的对象 |\n| -finalizeinfo | 显示在F-Queue中等待Finalizer线程执行finalize方法的对象。 只在linux/solaris平台有效 |\n| -heap | 只显示Java堆详细信息。如使用脑胀回收器、参数配置、分代状况等。只在linux/solaris平台有效 |\n| -histo | 显示堆中对象统计信息，包括类、实例数量、合计容量 |\n| -permstat | 以ClassLoader为统计口径显示永久代内存状态。 只在linux/solaris平台有效 |\n|  -F | 当虚拟机进程对-dump选项没有响应时，可以使用这个选项强制生成dump快照。只在linux/solaris平台有效 |\n\n### jhat：虚拟机堆转储快照分析工具\n\njhat与jmap搭配使用，用于分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成的dump文件的分析结果后，可以在浏览器中输入“http://localhost:7000”进行查看。\n\n使用：\n```\njmap -dump:format=b,file=test.bin 2780\njhat test.bin\n```\n\n### jstack：java堆栈跟踪工具\n\njstack作用：用于生成虚拟机当前时刻的线程快照。 \n1. 线程快照是指当前虚拟机内的每一个线程正在执行的方法堆栈的集合。 \n2. 生成线程快照的作用是可用于定位线程出现长时间停顿的原因，如线程间死锁 、死循环、请求外部资源导致的长时间等待等等问题，当线程出现停顿现象时，就可以用jstack查看各个线程调用的堆栈情况。\n\njstack命令格式：jstack [option] vmid\n\n| 选项 | 作用 |\n| --- | --- |\n| -F | 当正常输出的请求不被响应时，强制输出线程堆栈 |\n| -m | 如果调用到本地方法的话，可以显示C/C++的堆栈 |\n| -l |  除了堆栈信息，显示关于锁的附件信息 |\n","slug":"jvm/5_JDK常用命令（虚拟机性能监控故障处理）","published":1,"updated":"2020-01-02T05:49:23.774Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs7002gn0ztw6g7kpkq","content":"<h3 id=\"jps：虚拟机进程状况工具\"><a href=\"#jps：虚拟机进程状况工具\" class=\"headerlink\" title=\"jps：虚拟机进程状况工具\"></a>jps：虚拟机进程状况工具</h3><p>jps的功能：可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID。<br>它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到LVMID来确定要监控的是哪一个虚拟机进程。 对于本地虚拟机进程来讲，LVMID和操作系统的进程ID是一致的，使用PS（LINUX）也可以查询到虚拟机进程的LVMID，但是如果启动了多个虚拟机进程就无法根据进程名称定位。<br>jps命令格式：jps [options] [hostid]</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-q</td>\n<td>只输出LVMID，省略主类的名称</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>输出虚拟机进程启动时传递给主类main函数的参数</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>输出主类的全名，如果执行的是jar包，输出jar路径</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>输出虚拟机进程启动时jvm参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jstat：虚拟机统计信息监视工具\"><a href=\"#jstat：虚拟机统计信息监视工具\" class=\"headerlink\" title=\"jstat：虚拟机统计信息监视工具\"></a>jstat：虚拟机统计信息监视工具</h3><p>jstat (JVM Statistics Monitoring Tool)用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾会搜、JIT编译等运行数据。</p>\n<p>jstat的命令格式：jstat [ option vmid [interval[s|ms] [count]]]</p>\n<blockquote>\n<p>对于命令格式中的VMID和LVMID，如果是本地虚拟机进程，两者一致。如果是远程虚拟机进程，则VMID的格式为[protocol:][//]lvmind[@hostname[:port]/servername]<br>interval : 查询间隔  count：查询次数 如果省略interval和count，则只查询一次<br>选项option代表用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-class</td>\n<td>监视类装载、卸载数量，总空间以及类装载锁耗费的时间</td>\n</tr>\n<tr>\n<td>-gc</td>\n<td>监视Java堆状况，包括eden区、两个Survivor区、老年代、永久代等的容量、已使用空间、GC时间合计等信息</td>\n</tr>\n<tr>\n<td>-gccapacity</td>\n<td>监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-gcutil</td>\n<td>监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td>-gccause</td>\n<td>与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td>\n</tr>\n<tr>\n<td>-gcnew</td>\n<td>监视新生代GC状况</td>\n</tr>\n<tr>\n<td>-gcnewcapacity</td>\n<td>监视内容与-gcnew 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-gcold</td>\n<td>监视老年代代GC状况</td>\n</tr>\n<tr>\n<td>-gcoldcapacity</td>\n<td>监视内容与-gcold 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-gcpermcapacity</td>\n<td>输出永久代使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-compiler</td>\n<td>输出JIT编译器编译过的方法、耗时等信息</td>\n</tr>\n<tr>\n<td>-printcompilation</td>\n<td>输出已经被JIT编译的方法</td>\n</tr>\n</tbody>\n</table>\n<p>输入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jstat -gc 2780 1000 20</div></pre></td></tr></table></figure></p>\n<p>查看进程2780的GC情况，每隔1s查一次，查20次,部分返回如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  13334.2   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  13966.0   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  14611.7   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  15243.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  15886.3   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  16527.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div></pre></td></tr></table></figure>\n<ul>\n<li>S0C：第一个幸存区的大小</li>\n<li>S1C：第二个幸存区的大小</li>\n<li>S0U：第一个幸存区的使用大小</li>\n<li>S1U：第二个幸存区的使用大小</li>\n<li>EC：年轻代的大小</li>\n<li>EU：年轻代使用大小</li>\n<li>OC：老年代大小</li>\n<li>OU：老年代使用大小</li>\n<li>PC：perm内存大小（永久区）</li>\n<li>PU：perm内存使用大小</li>\n<li>YGC：年轻代垃圾回收次数</li>\n<li>YGCT：年轻代垃圾回收消耗时间</li>\n<li>FGC：老年代垃圾回收次数</li>\n<li>FGCT：老年代垃圾回收消耗时间</li>\n<li>GCT： 垃圾回收消耗总时间</li>\n</ul>\n<h3 id=\"jinfo：java配置信息工具\"><a href=\"#jinfo：java配置信息工具\" class=\"headerlink\" title=\"jinfo：java配置信息工具\"></a>jinfo：java配置信息工具</h3><p>jinfo的作用是实时的查看和调整虚拟机各项参数。</p>\n<p>语法：jinfo [option] pid</p>\n<p>执行 jinfo -flags pid 命令后查询结果中，Non-default VM flags为虚拟机默认的设置参数，Command line为用户自行设置的参数</p>\n<h3 id=\"jmap：java内存映像工具\"><a href=\"#jmap：java内存映像工具\" class=\"headerlink\" title=\"jmap：java内存映像工具\"></a>jmap：java内存映像工具</h3><p>jmap命令用于生成堆转储快照（一般称为heapdump或dump文件）。jmap不仅仅为了获取dump文件，它还可以查询finalize执行队列、Java堆、永久代的详细信息，如空间使用率、当前使用的是那种收集器等。</p>\n<p>jmap 命令格式： jmap [option] vmid</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-dump</td>\n<td>生成java堆转储快照。 格式为 -dump:[live,] format=b,file=<filename> 其中live子参数说明是否只dump出存活的对象</filename></td>\n</tr>\n<tr>\n<td>-finalizeinfo</td>\n<td>显示在F-Queue中等待Finalizer线程执行finalize方法的对象。 只在linux/solaris平台有效</td>\n</tr>\n<tr>\n<td>-heap</td>\n<td>只显示Java堆详细信息。如使用脑胀回收器、参数配置、分代状况等。只在linux/solaris平台有效</td>\n</tr>\n<tr>\n<td>-histo</td>\n<td>显示堆中对象统计信息，包括类、实例数量、合计容量</td>\n</tr>\n<tr>\n<td>-permstat</td>\n<td>以ClassLoader为统计口径显示永久代内存状态。 只在linux/solaris平台有效</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>当虚拟机进程对-dump选项没有响应时，可以使用这个选项强制生成dump快照。只在linux/solaris平台有效</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jhat：虚拟机堆转储快照分析工具\"><a href=\"#jhat：虚拟机堆转储快照分析工具\" class=\"headerlink\" title=\"jhat：虚拟机堆转储快照分析工具\"></a>jhat：虚拟机堆转储快照分析工具</h3><p>jhat与jmap搭配使用，用于分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成的dump文件的分析结果后，可以在浏览器中输入“<a href=\"http://localhost:7000”进行查看。\" target=\"_blank\" rel=\"external\">http://localhost:7000”进行查看。</a></p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jmap -dump:format=b,file=test.bin 2780</div><div class=\"line\">jhat test.bin</div></pre></td></tr></table></figure></p>\n<h3 id=\"jstack：java堆栈跟踪工具\"><a href=\"#jstack：java堆栈跟踪工具\" class=\"headerlink\" title=\"jstack：java堆栈跟踪工具\"></a>jstack：java堆栈跟踪工具</h3><p>jstack作用：用于生成虚拟机当前时刻的线程快照。 </p>\n<ol>\n<li>线程快照是指当前虚拟机内的每一个线程正在执行的方法堆栈的集合。 </li>\n<li>生成线程快照的作用是可用于定位线程出现长时间停顿的原因，如线程间死锁 、死循环、请求外部资源导致的长时间等待等等问题，当线程出现停顿现象时，就可以用jstack查看各个线程调用的堆栈情况。</li>\n</ol>\n<p>jstack命令格式：jstack [option] vmid</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F</td>\n<td>当正常输出的请求不被响应时，强制输出线程堆栈</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>如果调用到本地方法的话，可以显示C/C++的堆栈</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>除了堆栈信息，显示关于锁的附件信息</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"jps：虚拟机进程状况工具\"><a href=\"#jps：虚拟机进程状况工具\" class=\"headerlink\" title=\"jps：虚拟机进程状况工具\"></a>jps：虚拟机进程状况工具</h3><p>jps的功能：可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID。<br>它是使用频率最高的JDK命令行工具，因为其他的JDK工具大多需要输入它查询到LVMID来确定要监控的是哪一个虚拟机进程。 对于本地虚拟机进程来讲，LVMID和操作系统的进程ID是一致的，使用PS（LINUX）也可以查询到虚拟机进程的LVMID，但是如果启动了多个虚拟机进程就无法根据进程名称定位。<br>jps命令格式：jps [options] [hostid]</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-q</td>\n<td>只输出LVMID，省略主类的名称</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>输出虚拟机进程启动时传递给主类main函数的参数</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>输出主类的全名，如果执行的是jar包，输出jar路径</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>输出虚拟机进程启动时jvm参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jstat：虚拟机统计信息监视工具\"><a href=\"#jstat：虚拟机统计信息监视工具\" class=\"headerlink\" title=\"jstat：虚拟机统计信息监视工具\"></a>jstat：虚拟机统计信息监视工具</h3><p>jstat (JVM Statistics Monitoring Tool)用于监视虚拟机各种运行状态信息的命令行工具。 它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾会搜、JIT编译等运行数据。</p>\n<p>jstat的命令格式：jstat [ option vmid [interval[s|ms] [count]]]</p>\n<blockquote>\n<p>对于命令格式中的VMID和LVMID，如果是本地虚拟机进程，两者一致。如果是远程虚拟机进程，则VMID的格式为[protocol:][//]lvmind[@hostname[:port]/servername]<br>interval : 查询间隔  count：查询次数 如果省略interval和count，则只查询一次<br>选项option代表用户希望查询的虚拟机信息，主要分为3类：类装载、垃圾收集、运行期编译状况。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-class</td>\n<td>监视类装载、卸载数量，总空间以及类装载锁耗费的时间</td>\n</tr>\n<tr>\n<td>-gc</td>\n<td>监视Java堆状况，包括eden区、两个Survivor区、老年代、永久代等的容量、已使用空间、GC时间合计等信息</td>\n</tr>\n<tr>\n<td>-gccapacity</td>\n<td>监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-gcutil</td>\n<td>监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td>\n</tr>\n<tr>\n<td>-gccause</td>\n<td>与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td>\n</tr>\n<tr>\n<td>-gcnew</td>\n<td>监视新生代GC状况</td>\n</tr>\n<tr>\n<td>-gcnewcapacity</td>\n<td>监视内容与-gcnew 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-gcold</td>\n<td>监视老年代代GC状况</td>\n</tr>\n<tr>\n<td>-gcoldcapacity</td>\n<td>监视内容与-gcold 基本相同，但输出主要关注Java堆各个区域使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-gcpermcapacity</td>\n<td>输出永久代使用的最大、最小空间</td>\n</tr>\n<tr>\n<td>-compiler</td>\n<td>输出JIT编译器编译过的方法、耗时等信息</td>\n</tr>\n<tr>\n<td>-printcompilation</td>\n<td>输出已经被JIT编译的方法</td>\n</tr>\n</tbody>\n</table>\n<p>输入:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jstat -gc 2780 1000 20</div></pre></td></tr></table></figure></p>\n<p>查看进程2780的GC情况，每隔1s查一次，查20次,部分返回如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  13334.2   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  13966.0   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  14611.7   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  15243.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  15886.3   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div><div class=\"line\">4352.0 4352.0 1713.6  0.0   34944.0  16527.8   164708.0   149426.3    ?      ?      1042   13.752  14      0.445   14.196</div></pre></td></tr></table></figure>\n<ul>\n<li>S0C：第一个幸存区的大小</li>\n<li>S1C：第二个幸存区的大小</li>\n<li>S0U：第一个幸存区的使用大小</li>\n<li>S1U：第二个幸存区的使用大小</li>\n<li>EC：年轻代的大小</li>\n<li>EU：年轻代使用大小</li>\n<li>OC：老年代大小</li>\n<li>OU：老年代使用大小</li>\n<li>PC：perm内存大小（永久区）</li>\n<li>PU：perm内存使用大小</li>\n<li>YGC：年轻代垃圾回收次数</li>\n<li>YGCT：年轻代垃圾回收消耗时间</li>\n<li>FGC：老年代垃圾回收次数</li>\n<li>FGCT：老年代垃圾回收消耗时间</li>\n<li>GCT： 垃圾回收消耗总时间</li>\n</ul>\n<h3 id=\"jinfo：java配置信息工具\"><a href=\"#jinfo：java配置信息工具\" class=\"headerlink\" title=\"jinfo：java配置信息工具\"></a>jinfo：java配置信息工具</h3><p>jinfo的作用是实时的查看和调整虚拟机各项参数。</p>\n<p>语法：jinfo [option] pid</p>\n<p>执行 jinfo -flags pid 命令后查询结果中，Non-default VM flags为虚拟机默认的设置参数，Command line为用户自行设置的参数</p>\n<h3 id=\"jmap：java内存映像工具\"><a href=\"#jmap：java内存映像工具\" class=\"headerlink\" title=\"jmap：java内存映像工具\"></a>jmap：java内存映像工具</h3><p>jmap命令用于生成堆转储快照（一般称为heapdump或dump文件）。jmap不仅仅为了获取dump文件，它还可以查询finalize执行队列、Java堆、永久代的详细信息，如空间使用率、当前使用的是那种收集器等。</p>\n<p>jmap 命令格式： jmap [option] vmid</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-dump</td>\n<td>生成java堆转储快照。 格式为 -dump:[live,] format=b,file=<filename> 其中live子参数说明是否只dump出存活的对象</td>\n</tr>\n<tr>\n<td>-finalizeinfo</td>\n<td>显示在F-Queue中等待Finalizer线程执行finalize方法的对象。 只在linux/solaris平台有效</td>\n</tr>\n<tr>\n<td>-heap</td>\n<td>只显示Java堆详细信息。如使用脑胀回收器、参数配置、分代状况等。只在linux/solaris平台有效</td>\n</tr>\n<tr>\n<td>-histo</td>\n<td>显示堆中对象统计信息，包括类、实例数量、合计容量</td>\n</tr>\n<tr>\n<td>-permstat</td>\n<td>以ClassLoader为统计口径显示永久代内存状态。 只在linux/solaris平台有效</td>\n</tr>\n<tr>\n<td>-F</td>\n<td>当虚拟机进程对-dump选项没有响应时，可以使用这个选项强制生成dump快照。只在linux/solaris平台有效</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"jhat：虚拟机堆转储快照分析工具\"><a href=\"#jhat：虚拟机堆转储快照分析工具\" class=\"headerlink\" title=\"jhat：虚拟机堆转储快照分析工具\"></a>jhat：虚拟机堆转储快照分析工具</h3><p>jhat与jmap搭配使用，用于分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成的dump文件的分析结果后，可以在浏览器中输入“<a href=\"http://localhost:7000”进行查看。\">http://localhost:7000”进行查看。</a></p>\n<p>使用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">jmap -dump:format=b,file=test.bin 2780</div><div class=\"line\">jhat test.bin</div></pre></td></tr></table></figure></p>\n<h3 id=\"jstack：java堆栈跟踪工具\"><a href=\"#jstack：java堆栈跟踪工具\" class=\"headerlink\" title=\"jstack：java堆栈跟踪工具\"></a>jstack：java堆栈跟踪工具</h3><p>jstack作用：用于生成虚拟机当前时刻的线程快照。 </p>\n<ol>\n<li>线程快照是指当前虚拟机内的每一个线程正在执行的方法堆栈的集合。 </li>\n<li>生成线程快照的作用是可用于定位线程出现长时间停顿的原因，如线程间死锁 、死循环、请求外部资源导致的长时间等待等等问题，当线程出现停顿现象时，就可以用jstack查看各个线程调用的堆栈情况。</li>\n</ol>\n<p>jstack命令格式：jstack [option] vmid</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F</td>\n<td>当正常输出的请求不被响应时，强制输出线程堆栈</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>如果调用到本地方法的话，可以显示C/C++的堆栈</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>除了堆栈信息，显示关于锁的附件信息</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"mysql事务","date":"2019-12-23T14:11:00.000Z","comments":0,"keywords":["mysql","事务"],"_content":"\n### mysql事务\n\n在mysql中，只有使用InnoDB（还有NDB）存储引擎才能支持事务。事务是由一组sql语句组成的逻辑单元，要么全部执行成功，要么全部执行不成功。\n\n#### 事务的四大特征\n\n一般来说，事务必须满足四个条件（ACID）：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。 \n\n- 原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。事务在执行的过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务没有执行过一样。\n- 一致性：在事务开始之前和事务结束之后，数据库的完整性没有被破坏。（数据库某些操作的原子性和隔离性都是保证一致性的一种手段）\n- 隔离性：数据库允许多个事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据不一致。\n- 持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n#### 事务的隔离级别\n\n事务在并发执行的时候可能会发生以下的问题：\n\n- 脏写：如果一个事务修改了另一个未提交事务修改过的数据，那就发生了脏写。例如：\n    | 发生时间 | A事务 | B事务  |\n    | ------- | ----  | ----- |\n    |    1    | begin |       |\n    |    2    |       | begin |\n    |    3    |       | update table set name = 'A' where id = 1 |\n    |    4    | update table set name = 'B' where id = 1      |  |\n    |    5    | commit     |  |\n    |    6    |      | commit  |\n    \n    如果像上面B事务把name更新为了A，然后A事务又把name更新为B，这样就发生了脏写。\n- 脏读：如果一个事务读到了另外一个未提交事务修改的数据，那就发生了脏读。例如：\n     | 发生时间 | A事务 | B事务  |\n     | ------- | ----  | ----- |\n     |    1    | begin |       |\n     |    2    |       | begin |\n     |    3    |       | update table set name = 'A' where id = 1 |\n     |    4    | select name from table where id = 1      |  |\n     |    5    | commit     |  |\n     |    6    |      | commit  |\n     如果A事务此时读到的name是A，但是B事务还没有提交，读到了B事务未提交修改的数据，这种现象就是发生了脏读。\n- 不可重复读：如果一个事务只能读到另一个已经提交的事务修改的数据，并且其他事务每对该数据进行一次修改提交后，该事务都能查询到最新的值，这就发生了不可重复读。\n- 幻读：如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原来的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来，这就发生了幻读。\n\n这几个问题按照严重性来排序：脏写>脏读>不可重复读>幻读\n\n在SQL标准中设立了四个隔离级别：\n- READ UNCOMMITTED：未提交读。\n- READ COMMITTED：已提交读。\n- REPEATABLE READ：可重复读。\n- SERIALIZABLE：可串行化。\n\n|  隔离级别  |  脏读  |  不可重复读  |  幻读  |\n|  -------  |  ----  |  --------  |  ----  |\n| READ UNCOMMITTED | Possible | Possible | Possible |\n| READ COMMITTED | Not Possible | Possible | Possible |\n| REPEATABLE READ | Not Possible | Not Possible | Possible |\n| SERIALIZABLE | Not Possible | Not Possible | Not Possible |\n\n也就是说：\n\n- READ UNCOMMITTED隔离级别下，可能发生脏读、不可重复读和幻读问题。\n- READ COMMITTED隔离级别下，可能发生不可重复读和幻读问题，但是不可以发生脏读问题。\n- REPEATABLE READ隔离级别下，可能发生幻读问题，但是不可以发生脏读和不可重复读的问题。\n- SERIALIZABLE隔离级别下，各种问题都不可以发生。\n\n> 因为脏写产生的问题太严重，不论是哪种隔离级别，都不允许脏写的情况发生。\n\nMySQL中默认的事务隔离级别是REPEATABLE READ。\n\n#### MVCC（多版本并发控制）\n\nMVCC(Mutil-Version Concurrency Control)，就是多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程。\n\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n##### 版本链\n\n使用InnoDB存储引擎的表，在它的聚簇索引记录中都包含两个必要的列（row_id不是必要的，如果创建的表中有主键或非空的UNIQUE键时都不会包含row_id）：\n\n- trx_id：每次一个事务对某条局促索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。\n- roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列相当于一个指针，可以通过它来找到该记录修改前的信息。\n\n每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个roll_pointer属性（INSERT操作对应的undo日志没有该属性，因为没有更早的版本），可以将这些undo日志都连起来，串成一个链表，就像如下：\n\n![版本链](../../../uploads/mysql/transaction/transaction1.jpg)\n\n对该记录每次进行更新后，都会将旧值放到一条undo日志中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被roll_pointer属性连接成一个链表，这个链表就叫做版本链，版本链的头结点是当前记录的最新值，每个版本中还包含该生成该版本时对应的事务ID。\n\n##### ReadView\n\n对于使用READ UNCOMMITTED 隔离级别的事务来说，可以读到未提交事务修改的记录，所以直接读取记录最新的版本；对于使用SERIALIZABLE隔离级别的事务，采用加锁的方式来访问记录；对于使用READ COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，都要保证读到已提交的事务修改的记录，这就需要判断版本链中那个版本是对当前事务可见的。因此有了ReadView概念：\n\n- m_ids：表示生成ReadView时当前系统中活跃的读写事务的事务ID列表。\n- min_trx_id：表示生成ReadView时当前系统中活跃的读写事务中最小的事务ID。\n- max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。\n— creator_trx_id：生成该ReadView的事务的事务ID。\n\n有了ReadView，在访问某条记录的时候，就可以按下面的步骤判断记录的某个版本是否可见：\n\n1. 如果被访问版本的trx_id属性值和ReadView中的creator_trx_id值相同，说明访问的自己修改的记录，可以被当前事务访问。\n2. 如果被访问版本的trx_id属性值小于ReadView中的min_trx_id值，说明生成该版本事务在当前事务生成ReadView前已提交，可以被当前事务访问。\n3. 如果被访问版本的trx_id属性值在ReadView的min_trx_id和max_trx_id之间，就需要判断trx_id是否在m_ids列表中，如果在说明创建ReadView时生成该版本的事务还是活跃的，该版本不可被访问；如果不在，说明创建ReadView时生成该本的事务已被提交，可以被访问。\n\n如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。\n\n>  READ COMMITTED 和 REPEATABLE READ的不同是在生成ReadView的时机不同。READ COMMITTED会在每次读取数据之前都生成一个ReadView，REPEATABLE READ会在第一次读取数据时生成一个ReadView。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mysql/事务.md","raw":"---\ntitle: mysql事务\ndate: 2019-12-23 22:11\ncomments: false\ntags: \n- mysql\n- 事务\ncategories: \n- mysql\n- 事务\nkeywords: \n- mysql\n- 事务\n---\n\n### mysql事务\n\n在mysql中，只有使用InnoDB（还有NDB）存储引擎才能支持事务。事务是由一组sql语句组成的逻辑单元，要么全部执行成功，要么全部执行不成功。\n\n#### 事务的四大特征\n\n一般来说，事务必须满足四个条件（ACID）：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。 \n\n- 原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。事务在执行的过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务没有执行过一样。\n- 一致性：在事务开始之前和事务结束之后，数据库的完整性没有被破坏。（数据库某些操作的原子性和隔离性都是保证一致性的一种手段）\n- 隔离性：数据库允许多个事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据不一致。\n- 持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。\n\n#### 事务的隔离级别\n\n事务在并发执行的时候可能会发生以下的问题：\n\n- 脏写：如果一个事务修改了另一个未提交事务修改过的数据，那就发生了脏写。例如：\n    | 发生时间 | A事务 | B事务  |\n    | ------- | ----  | ----- |\n    |    1    | begin |       |\n    |    2    |       | begin |\n    |    3    |       | update table set name = 'A' where id = 1 |\n    |    4    | update table set name = 'B' where id = 1      |  |\n    |    5    | commit     |  |\n    |    6    |      | commit  |\n    \n    如果像上面B事务把name更新为了A，然后A事务又把name更新为B，这样就发生了脏写。\n- 脏读：如果一个事务读到了另外一个未提交事务修改的数据，那就发生了脏读。例如：\n     | 发生时间 | A事务 | B事务  |\n     | ------- | ----  | ----- |\n     |    1    | begin |       |\n     |    2    |       | begin |\n     |    3    |       | update table set name = 'A' where id = 1 |\n     |    4    | select name from table where id = 1      |  |\n     |    5    | commit     |  |\n     |    6    |      | commit  |\n     如果A事务此时读到的name是A，但是B事务还没有提交，读到了B事务未提交修改的数据，这种现象就是发生了脏读。\n- 不可重复读：如果一个事务只能读到另一个已经提交的事务修改的数据，并且其他事务每对该数据进行一次修改提交后，该事务都能查询到最新的值，这就发生了不可重复读。\n- 幻读：如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原来的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来，这就发生了幻读。\n\n这几个问题按照严重性来排序：脏写>脏读>不可重复读>幻读\n\n在SQL标准中设立了四个隔离级别：\n- READ UNCOMMITTED：未提交读。\n- READ COMMITTED：已提交读。\n- REPEATABLE READ：可重复读。\n- SERIALIZABLE：可串行化。\n\n|  隔离级别  |  脏读  |  不可重复读  |  幻读  |\n|  -------  |  ----  |  --------  |  ----  |\n| READ UNCOMMITTED | Possible | Possible | Possible |\n| READ COMMITTED | Not Possible | Possible | Possible |\n| REPEATABLE READ | Not Possible | Not Possible | Possible |\n| SERIALIZABLE | Not Possible | Not Possible | Not Possible |\n\n也就是说：\n\n- READ UNCOMMITTED隔离级别下，可能发生脏读、不可重复读和幻读问题。\n- READ COMMITTED隔离级别下，可能发生不可重复读和幻读问题，但是不可以发生脏读问题。\n- REPEATABLE READ隔离级别下，可能发生幻读问题，但是不可以发生脏读和不可重复读的问题。\n- SERIALIZABLE隔离级别下，各种问题都不可以发生。\n\n> 因为脏写产生的问题太严重，不论是哪种隔离级别，都不允许脏写的情况发生。\n\nMySQL中默认的事务隔离级别是REPEATABLE READ。\n\n#### MVCC（多版本并发控制）\n\nMVCC(Mutil-Version Concurrency Control)，就是多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。\n\n在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程。\n\n这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。\n\n##### 版本链\n\n使用InnoDB存储引擎的表，在它的聚簇索引记录中都包含两个必要的列（row_id不是必要的，如果创建的表中有主键或非空的UNIQUE键时都不会包含row_id）：\n\n- trx_id：每次一个事务对某条局促索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。\n- roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列相当于一个指针，可以通过它来找到该记录修改前的信息。\n\n每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个roll_pointer属性（INSERT操作对应的undo日志没有该属性，因为没有更早的版本），可以将这些undo日志都连起来，串成一个链表，就像如下：\n\n![版本链](../../../uploads/mysql/transaction/transaction1.jpg)\n\n对该记录每次进行更新后，都会将旧值放到一条undo日志中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被roll_pointer属性连接成一个链表，这个链表就叫做版本链，版本链的头结点是当前记录的最新值，每个版本中还包含该生成该版本时对应的事务ID。\n\n##### ReadView\n\n对于使用READ UNCOMMITTED 隔离级别的事务来说，可以读到未提交事务修改的记录，所以直接读取记录最新的版本；对于使用SERIALIZABLE隔离级别的事务，采用加锁的方式来访问记录；对于使用READ COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，都要保证读到已提交的事务修改的记录，这就需要判断版本链中那个版本是对当前事务可见的。因此有了ReadView概念：\n\n- m_ids：表示生成ReadView时当前系统中活跃的读写事务的事务ID列表。\n- min_trx_id：表示生成ReadView时当前系统中活跃的读写事务中最小的事务ID。\n- max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。\n— creator_trx_id：生成该ReadView的事务的事务ID。\n\n有了ReadView，在访问某条记录的时候，就可以按下面的步骤判断记录的某个版本是否可见：\n\n1. 如果被访问版本的trx_id属性值和ReadView中的creator_trx_id值相同，说明访问的自己修改的记录，可以被当前事务访问。\n2. 如果被访问版本的trx_id属性值小于ReadView中的min_trx_id值，说明生成该版本事务在当前事务生成ReadView前已提交，可以被当前事务访问。\n3. 如果被访问版本的trx_id属性值在ReadView的min_trx_id和max_trx_id之间，就需要判断trx_id是否在m_ids列表中，如果在说明创建ReadView时生成该版本的事务还是活跃的，该版本不可被访问；如果不在，说明创建ReadView时生成该本的事务已被提交，可以被访问。\n\n如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。\n\n>  READ COMMITTED 和 REPEATABLE READ的不同是在生成ReadView的时机不同。READ COMMITTED会在每次读取数据之前都生成一个ReadView，REPEATABLE READ会在第一次读取数据时生成一个ReadView。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mysql/事务","published":1,"updated":"2020-01-02T05:49:23.774Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs8002in0ztglg5lrld","content":"<h3 id=\"mysql事务\"><a href=\"#mysql事务\" class=\"headerlink\" title=\"mysql事务\"></a>mysql事务</h3><p>在mysql中，只有使用InnoDB（还有NDB）存储引擎才能支持事务。事务是由一组sql语句组成的逻辑单元，要么全部执行成功，要么全部执行不成功。</p>\n<h4 id=\"事务的四大特征\"><a href=\"#事务的四大特征\" class=\"headerlink\" title=\"事务的四大特征\"></a>事务的四大特征</h4><p>一般来说，事务必须满足四个条件（ACID）：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。 </p>\n<ul>\n<li>原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。事务在执行的过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务没有执行过一样。</li>\n<li>一致性：在事务开始之前和事务结束之后，数据库的完整性没有被破坏。（数据库某些操作的原子性和隔离性都是保证一致性的一种手段）</li>\n<li>隔离性：数据库允许多个事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据不一致。</li>\n<li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\n</ul>\n<h4 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h4><p>事务在并发执行的时候可能会发生以下的问题：</p>\n<ul>\n<li><p>脏写：如果一个事务修改了另一个未提交事务修改过的数据，那就发生了脏写。例如：<br>  | 发生时间 | A事务 | B事务  |<br>  | ——- | —-  | —– |<br>  |    1    | begin |       |<br>  |    2    |       | begin |<br>  |    3    |       | update table set name = ‘A’ where id = 1 |<br>  |    4    | update table set name = ‘B’ where id = 1      |  |<br>  |    5    | commit     |  |<br>  |    6    |      | commit  |</p>\n<p>  如果像上面B事务把name更新为了A，然后A事务又把name更新为B，这样就发生了脏写。</p>\n</li>\n<li>脏读：如果一个事务读到了另外一个未提交事务修改的数据，那就发生了脏读。例如：<br>   | 发生时间 | A事务 | B事务  |<br>   | ——- | —-  | —– |<br>   |    1    | begin |       |<br>   |    2    |       | begin |<br>   |    3    |       | update table set name = ‘A’ where id = 1 |<br>   |    4    | select name from table where id = 1      |  |<br>   |    5    | commit     |  |<br>   |    6    |      | commit  |<br>   如果A事务此时读到的name是A，但是B事务还没有提交，读到了B事务未提交修改的数据，这种现象就是发生了脏读。</li>\n<li>不可重复读：如果一个事务只能读到另一个已经提交的事务修改的数据，并且其他事务每对该数据进行一次修改提交后，该事务都能查询到最新的值，这就发生了不可重复读。</li>\n<li>幻读：如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原来的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来，这就发生了幻读。</li>\n</ul>\n<p>这几个问题按照严重性来排序：脏写&gt;脏读&gt;不可重复读&gt;幻读</p>\n<p>在SQL标准中设立了四个隔离级别：</p>\n<ul>\n<li>READ UNCOMMITTED：未提交读。</li>\n<li>READ COMMITTED：已提交读。</li>\n<li>REPEATABLE READ：可重复读。</li>\n<li>SERIALIZABLE：可串行化。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>READ UNCOMMITTED</td>\n<td>Possible</td>\n<td>Possible</td>\n<td>Possible</td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td>Not Possible</td>\n<td>Possible</td>\n<td>Possible</td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>Not Possible</td>\n<td>Not Possible</td>\n<td>Possible</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>Not Possible</td>\n<td>Not Possible</td>\n<td>Not Possible</td>\n</tr>\n</tbody>\n</table>\n<p>也就是说：</p>\n<ul>\n<li>READ UNCOMMITTED隔离级别下，可能发生脏读、不可重复读和幻读问题。</li>\n<li>READ COMMITTED隔离级别下，可能发生不可重复读和幻读问题，但是不可以发生脏读问题。</li>\n<li>REPEATABLE READ隔离级别下，可能发生幻读问题，但是不可以发生脏读和不可重复读的问题。</li>\n<li>SERIALIZABLE隔离级别下，各种问题都不可以发生。</li>\n</ul>\n<blockquote>\n<p>因为脏写产生的问题太严重，不论是哪种隔离级别，都不允许脏写的情况发生。</p>\n</blockquote>\n<p>MySQL中默认的事务隔离级别是REPEATABLE READ。</p>\n<h4 id=\"MVCC（多版本并发控制）\"><a href=\"#MVCC（多版本并发控制）\" class=\"headerlink\" title=\"MVCC（多版本并发控制）\"></a>MVCC（多版本并发控制）</h4><p>MVCC(Mutil-Version Concurrency Control)，就是多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程。</p>\n<p>这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h5 id=\"版本链\"><a href=\"#版本链\" class=\"headerlink\" title=\"版本链\"></a>版本链</h5><p>使用InnoDB存储引擎的表，在它的聚簇索引记录中都包含两个必要的列（row_id不是必要的，如果创建的表中有主键或非空的UNIQUE键时都不会包含row_id）：</p>\n<ul>\n<li>trx_id：每次一个事务对某条局促索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。</li>\n<li>roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列相当于一个指针，可以通过它来找到该记录修改前的信息。</li>\n</ul>\n<p>每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个roll_pointer属性（INSERT操作对应的undo日志没有该属性，因为没有更早的版本），可以将这些undo日志都连起来，串成一个链表，就像如下：</p>\n<p><img src=\"../../../uploads/mysql/transaction/transaction1.jpg\" alt=\"版本链\"></p>\n<p>对该记录每次进行更新后，都会将旧值放到一条undo日志中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被roll_pointer属性连接成一个链表，这个链表就叫做版本链，版本链的头结点是当前记录的最新值，每个版本中还包含该生成该版本时对应的事务ID。</p>\n<h5 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a>ReadView</h5><p>对于使用READ UNCOMMITTED 隔离级别的事务来说，可以读到未提交事务修改的记录，所以直接读取记录最新的版本；对于使用SERIALIZABLE隔离级别的事务，采用加锁的方式来访问记录；对于使用READ COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，都要保证读到已提交的事务修改的记录，这就需要判断版本链中那个版本是对当前事务可见的。因此有了ReadView概念：</p>\n<ul>\n<li>m_ids：表示生成ReadView时当前系统中活跃的读写事务的事务ID列表。</li>\n<li>min_trx_id：表示生成ReadView时当前系统中活跃的读写事务中最小的事务ID。</li>\n<li>max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。<br>— creator_trx_id：生成该ReadView的事务的事务ID。</li>\n</ul>\n<p>有了ReadView，在访问某条记录的时候，就可以按下面的步骤判断记录的某个版本是否可见：</p>\n<ol>\n<li>如果被访问版本的trx_id属性值和ReadView中的creator_trx_id值相同，说明访问的自己修改的记录，可以被当前事务访问。</li>\n<li>如果被访问版本的trx_id属性值小于ReadView中的min_trx_id值，说明生成该版本事务在当前事务生成ReadView前已提交，可以被当前事务访问。</li>\n<li>如果被访问版本的trx_id属性值在ReadView的min_trx_id和max_trx_id之间，就需要判断trx_id是否在m_ids列表中，如果在说明创建ReadView时生成该版本的事务还是活跃的，该版本不可被访问；如果不在，说明创建ReadView时生成该本的事务已被提交，可以被访问。</li>\n</ol>\n<p>如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。</p>\n<blockquote>\n<p> READ COMMITTED 和 REPEATABLE READ的不同是在生成ReadView的时机不同。READ COMMITTED会在每次读取数据之前都生成一个ReadView，REPEATABLE READ会在第一次读取数据时生成一个ReadView。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"mysql事务\"><a href=\"#mysql事务\" class=\"headerlink\" title=\"mysql事务\"></a>mysql事务</h3><p>在mysql中，只有使用InnoDB（还有NDB）存储引擎才能支持事务。事务是由一组sql语句组成的逻辑单元，要么全部执行成功，要么全部执行不成功。</p>\n<h4 id=\"事务的四大特征\"><a href=\"#事务的四大特征\" class=\"headerlink\" title=\"事务的四大特征\"></a>事务的四大特征</h4><p>一般来说，事务必须满足四个条件（ACID）：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。 </p>\n<ul>\n<li>原子性：一个事务中的所有操作，要么全部完成，要么全部不完成，不会在中间某个环节结束。事务在执行的过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务没有执行过一样。</li>\n<li>一致性：在事务开始之前和事务结束之后，数据库的完整性没有被破坏。（数据库某些操作的原子性和隔离性都是保证一致性的一种手段）</li>\n<li>隔离性：数据库允许多个事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据不一致。</li>\n<li>持久性：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li>\n</ul>\n<h4 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h4><p>事务在并发执行的时候可能会发生以下的问题：</p>\n<ul>\n<li><p>脏写：如果一个事务修改了另一个未提交事务修改过的数据，那就发生了脏写。例如：<br>  | 发生时间 | A事务 | B事务  |<br>  | ——- | —-  | —– |<br>  |    1    | begin |       |<br>  |    2    |       | begin |<br>  |    3    |       | update table set name = ‘A’ where id = 1 |<br>  |    4    | update table set name = ‘B’ where id = 1      |  |<br>  |    5    | commit     |  |<br>  |    6    |      | commit  |</p>\n<p>  如果像上面B事务把name更新为了A，然后A事务又把name更新为B，这样就发生了脏写。</p>\n</li>\n<li>脏读：如果一个事务读到了另外一个未提交事务修改的数据，那就发生了脏读。例如：<br>   | 发生时间 | A事务 | B事务  |<br>   | ——- | —-  | —– |<br>   |    1    | begin |       |<br>   |    2    |       | begin |<br>   |    3    |       | update table set name = ‘A’ where id = 1 |<br>   |    4    | select name from table where id = 1      |  |<br>   |    5    | commit     |  |<br>   |    6    |      | commit  |<br>   如果A事务此时读到的name是A，但是B事务还没有提交，读到了B事务未提交修改的数据，这种现象就是发生了脏读。</li>\n<li>不可重复读：如果一个事务只能读到另一个已经提交的事务修改的数据，并且其他事务每对该数据进行一次修改提交后，该事务都能查询到最新的值，这就发生了不可重复读。</li>\n<li>幻读：如果一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原来的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来，这就发生了幻读。</li>\n</ul>\n<p>这几个问题按照严重性来排序：脏写&gt;脏读&gt;不可重复读&gt;幻读</p>\n<p>在SQL标准中设立了四个隔离级别：</p>\n<ul>\n<li>READ UNCOMMITTED：未提交读。</li>\n<li>READ COMMITTED：已提交读。</li>\n<li>REPEATABLE READ：可重复读。</li>\n<li>SERIALIZABLE：可串行化。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>READ UNCOMMITTED</td>\n<td>Possible</td>\n<td>Possible</td>\n<td>Possible</td>\n</tr>\n<tr>\n<td>READ COMMITTED</td>\n<td>Not Possible</td>\n<td>Possible</td>\n<td>Possible</td>\n</tr>\n<tr>\n<td>REPEATABLE READ</td>\n<td>Not Possible</td>\n<td>Not Possible</td>\n<td>Possible</td>\n</tr>\n<tr>\n<td>SERIALIZABLE</td>\n<td>Not Possible</td>\n<td>Not Possible</td>\n<td>Not Possible</td>\n</tr>\n</tbody>\n</table>\n<p>也就是说：</p>\n<ul>\n<li>READ UNCOMMITTED隔离级别下，可能发生脏读、不可重复读和幻读问题。</li>\n<li>READ COMMITTED隔离级别下，可能发生不可重复读和幻读问题，但是不可以发生脏读问题。</li>\n<li>REPEATABLE READ隔离级别下，可能发生幻读问题，但是不可以发生脏读和不可重复读的问题。</li>\n<li>SERIALIZABLE隔离级别下，各种问题都不可以发生。</li>\n</ul>\n<blockquote>\n<p>因为脏写产生的问题太严重，不论是哪种隔离级别，都不允许脏写的情况发生。</p>\n</blockquote>\n<p>MySQL中默认的事务隔离级别是REPEATABLE READ。</p>\n<h4 id=\"MVCC（多版本并发控制）\"><a href=\"#MVCC（多版本并发控制）\" class=\"headerlink\" title=\"MVCC（多版本并发控制）\"></a>MVCC（多版本并发控制）</h4><p>MVCC(Mutil-Version Concurrency Control)，就是多版本并发控制。MVCC 是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问。</p>\n<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程。</p>\n<p>这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>\n<h5 id=\"版本链\"><a href=\"#版本链\" class=\"headerlink\" title=\"版本链\"></a>版本链</h5><p>使用InnoDB存储引擎的表，在它的聚簇索引记录中都包含两个必要的列（row_id不是必要的，如果创建的表中有主键或非空的UNIQUE键时都不会包含row_id）：</p>\n<ul>\n<li>trx_id：每次一个事务对某条局促索引记录进行改动时，都会把该事务的事务id赋值给trx_id隐藏列。</li>\n<li>roll_pointer：每次对某条聚簇索引记录进行改动时，都会把旧的版本写入到undo日志中，然后这个隐藏列相当于一个指针，可以通过它来找到该记录修改前的信息。</li>\n</ul>\n<p>每次对记录进行改动，都会记录一条undo日志，每条undo日志也都有一个roll_pointer属性（INSERT操作对应的undo日志没有该属性，因为没有更早的版本），可以将这些undo日志都连起来，串成一个链表，就像如下：</p>\n<p><img src=\"../../../uploads/mysql/transaction/transaction1.jpg\" alt=\"版本链\"></p>\n<p>对该记录每次进行更新后，都会将旧值放到一条undo日志中，就算是该记录的一个旧版本，随着更新次数的增多，所有的版本都会被roll_pointer属性连接成一个链表，这个链表就叫做版本链，版本链的头结点是当前记录的最新值，每个版本中还包含该生成该版本时对应的事务ID。</p>\n<h5 id=\"ReadView\"><a href=\"#ReadView\" class=\"headerlink\" title=\"ReadView\"></a>ReadView</h5><p>对于使用READ UNCOMMITTED 隔离级别的事务来说，可以读到未提交事务修改的记录，所以直接读取记录最新的版本；对于使用SERIALIZABLE隔离级别的事务，采用加锁的方式来访问记录；对于使用READ COMMITTED 和 REPEATABLE READ 隔离级别的事务来说，都要保证读到已提交的事务修改的记录，这就需要判断版本链中那个版本是对当前事务可见的。因此有了ReadView概念：</p>\n<ul>\n<li>m_ids：表示生成ReadView时当前系统中活跃的读写事务的事务ID列表。</li>\n<li>min_trx_id：表示生成ReadView时当前系统中活跃的读写事务中最小的事务ID。</li>\n<li>max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。<br>— creator_trx_id：生成该ReadView的事务的事务ID。</li>\n</ul>\n<p>有了ReadView，在访问某条记录的时候，就可以按下面的步骤判断记录的某个版本是否可见：</p>\n<ol>\n<li>如果被访问版本的trx_id属性值和ReadView中的creator_trx_id值相同，说明访问的自己修改的记录，可以被当前事务访问。</li>\n<li>如果被访问版本的trx_id属性值小于ReadView中的min_trx_id值，说明生成该版本事务在当前事务生成ReadView前已提交，可以被当前事务访问。</li>\n<li>如果被访问版本的trx_id属性值在ReadView的min_trx_id和max_trx_id之间，就需要判断trx_id是否在m_ids列表中，如果在说明创建ReadView时生成该版本的事务还是活跃的，该版本不可被访问；如果不在，说明创建ReadView时生成该本的事务已被提交，可以被访问。</li>\n</ol>\n<p>如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对该事务完全不可见，查询结果就不包含该记录。</p>\n<blockquote>\n<p> READ COMMITTED 和 REPEATABLE READ的不同是在生成ReadView的时机不同。READ COMMITTED会在每次读取数据之前都生成一个ReadView，REPEATABLE READ会在第一次读取数据时生成一个ReadView。</p>\n</blockquote>\n"},{"title":"存储引擎介绍（MySql）","date":"2019-12-21T14:18:00.000Z","comments":0,"keywords":["存储引擎"],"_content":"\n### 存储引擎介绍\n\n数据库存储引擎是数据库底层软件引擎，数据库管理系统使用数据引擎进行创建、查询、更新和删除操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。\n\nmysql5.7中支持的存储引擎有InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE等。\n\n不同存储引擎的特点：\n\n| 功能 | MylSAM | MEMORY | InnoDB | Archive |\n| --- | ------- | ----- | ------- | ------ |\n| 存储限制 | 256TB | RAM | 64TB | None |\n| 支持事务 | No | No | Yes | No |\n| 支持全文索引 | Yes | No | No | No |\n| 支持树索引 |Yes | Yes | Yes | No |\n| 支持哈希索引 | No | Yes | Yes | No |\n| 支持数据缓存 | No | N/A | Yes | No |\n| 支持外键 | No | No | Yes | No |\n\n\n#### InnoDB\n\nInnoDB底层存储结构为B+树，B树的每个节点对应innodb的一个page，page大小是固定的，一般设为16k。其中非叶子节点只有键值，叶子节点包含完成数据。\n\n适用场景：\n\n1. 经常更新的表，适合处理多重并发的更新请求。\n2. 支持事务。\n3. 可以从灾难中恢复(通过 bin-log 日志等)。\n4. 外键约束。只有他支持外键。 \n5. 支持自动增加列属性 auto_increment。\n\n#### MyIASM\n\nMyISAM是MySql5.6之前的默认引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT或UPDATE数据时需要锁定整个表，效率会更低一些。\nISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。在设计之初就预想数据组织成有固定长度的记录，按顺序存储的。（ISAM是一种静态索引结构）\n缺点是它不支持事务处理。\n\n#### Memory\n\nMemory堆内存：使用存在内存中的内容来创建表。Memory表只实际对应一个磁盘文件。由于它的数据是放在内存中的并默认使用HASH索引，因此访问速度很快。\n但是服务一但关闭，表中的数据就会丢失。Memory同时支持hash索引和B树索引，B树索引可以使用部分和通配查询，也可以使用<,>和>=等操作符方便数据挖掘，hash索引相等的比较快但是对于范围的比较慢很多。\n\n#### 选择\n\n- 如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。\n- 如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。\n- 如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。\n- 如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数","source":"_posts/mysql/存储引擎.md","raw":"---\ntitle: 存储引擎介绍（MySql）\ndate: 2019-12-21 22:18\ncomments: false\ntags: \n- 存储引擎\ncategories: \n- 存储引擎\nkeywords: \n- 存储引擎\n---\n\n### 存储引擎介绍\n\n数据库存储引擎是数据库底层软件引擎，数据库管理系统使用数据引擎进行创建、查询、更新和删除操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。\n\nmysql5.7中支持的存储引擎有InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE等。\n\n不同存储引擎的特点：\n\n| 功能 | MylSAM | MEMORY | InnoDB | Archive |\n| --- | ------- | ----- | ------- | ------ |\n| 存储限制 | 256TB | RAM | 64TB | None |\n| 支持事务 | No | No | Yes | No |\n| 支持全文索引 | Yes | No | No | No |\n| 支持树索引 |Yes | Yes | Yes | No |\n| 支持哈希索引 | No | Yes | Yes | No |\n| 支持数据缓存 | No | N/A | Yes | No |\n| 支持外键 | No | No | Yes | No |\n\n\n#### InnoDB\n\nInnoDB底层存储结构为B+树，B树的每个节点对应innodb的一个page，page大小是固定的，一般设为16k。其中非叶子节点只有键值，叶子节点包含完成数据。\n\n适用场景：\n\n1. 经常更新的表，适合处理多重并发的更新请求。\n2. 支持事务。\n3. 可以从灾难中恢复(通过 bin-log 日志等)。\n4. 外键约束。只有他支持外键。 \n5. 支持自动增加列属性 auto_increment。\n\n#### MyIASM\n\nMyISAM是MySql5.6之前的默认引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT或UPDATE数据时需要锁定整个表，效率会更低一些。\nISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。在设计之初就预想数据组织成有固定长度的记录，按顺序存储的。（ISAM是一种静态索引结构）\n缺点是它不支持事务处理。\n\n#### Memory\n\nMemory堆内存：使用存在内存中的内容来创建表。Memory表只实际对应一个磁盘文件。由于它的数据是放在内存中的并默认使用HASH索引，因此访问速度很快。\n但是服务一但关闭，表中的数据就会丢失。Memory同时支持hash索引和B树索引，B树索引可以使用部分和通配查询，也可以使用<,>和>=等操作符方便数据挖掘，hash索引相等的比较快但是对于范围的比较慢很多。\n\n#### 选择\n\n- 如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。\n- 如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。\n- 如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。\n- 如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数","slug":"mysql/存储引擎","published":1,"updated":"2020-01-02T05:49:23.775Z","layout":"post","photos":[],"link":"","_id":"ck6lvszs9002mn0ztrgpjcvss","content":"<h3 id=\"存储引擎介绍\"><a href=\"#存储引擎介绍\" class=\"headerlink\" title=\"存储引擎介绍\"></a>存储引擎介绍</h3><p>数据库存储引擎是数据库底层软件引擎，数据库管理系统使用数据引擎进行创建、查询、更新和删除操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p>\n<p>mysql5.7中支持的存储引擎有InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE等。</p>\n<p>不同存储引擎的特点：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>MylSAM</th>\n<th>MEMORY</th>\n<th>InnoDB</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储限制</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>64TB</td>\n<td>None</td>\n</tr>\n<tr>\n<td>支持事务</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持全文索引</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持树索引</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持哈希索引</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持数据缓存</td>\n<td>No</td>\n<td>N/A</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h4><p>InnoDB底层存储结构为B+树，B树的每个节点对应innodb的一个page，page大小是固定的，一般设为16k。其中非叶子节点只有键值，叶子节点包含完成数据。</p>\n<p>适用场景：</p>\n<ol>\n<li>经常更新的表，适合处理多重并发的更新请求。</li>\n<li>支持事务。</li>\n<li>可以从灾难中恢复(通过 bin-log 日志等)。</li>\n<li>外键约束。只有他支持外键。 </li>\n<li>支持自动增加列属性 auto_increment。</li>\n</ol>\n<h4 id=\"MyIASM\"><a href=\"#MyIASM\" class=\"headerlink\" title=\"MyIASM\"></a>MyIASM</h4><p>MyISAM是MySql5.6之前的默认引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT或UPDATE数据时需要锁定整个表，效率会更低一些。<br>ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。在设计之初就预想数据组织成有固定长度的记录，按顺序存储的。（ISAM是一种静态索引结构）<br>缺点是它不支持事务处理。</p>\n<h4 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h4><p>Memory堆内存：使用存在内存中的内容来创建表。Memory表只实际对应一个磁盘文件。由于它的数据是放在内存中的并默认使用HASH索引，因此访问速度很快。<br>但是服务一但关闭，表中的数据就会丢失。Memory同时支持hash索引和B树索引，B树索引可以使用部分和通配查询，也可以使用&lt;,&gt;和&gt;=等操作符方便数据挖掘，hash索引相等的比较快但是对于范围的比较慢很多。</p>\n<h4 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h4><ul>\n<li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li>\n<li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li>\n<li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li>\n<li>如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"存储引擎介绍\"><a href=\"#存储引擎介绍\" class=\"headerlink\" title=\"存储引擎介绍\"></a>存储引擎介绍</h3><p>数据库存储引擎是数据库底层软件引擎，数据库管理系统使用数据引擎进行创建、查询、更新和删除操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能，使用不同的存储引擎还可以获得特定的功能。</p>\n<p>mysql5.7中支持的存储引擎有InnoDB、MyISAM、Memory、Merge、Archive、Federated、CSV、BLACKHOLE等。</p>\n<p>不同存储引擎的特点：</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>MylSAM</th>\n<th>MEMORY</th>\n<th>InnoDB</th>\n<th>Archive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储限制</td>\n<td>256TB</td>\n<td>RAM</td>\n<td>64TB</td>\n<td>None</td>\n</tr>\n<tr>\n<td>支持事务</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持全文索引</td>\n<td>Yes</td>\n<td>No</td>\n<td>No</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持树索引</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持哈希索引</td>\n<td>No</td>\n<td>Yes</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持数据缓存</td>\n<td>No</td>\n<td>N/A</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>No</td>\n<td>No</td>\n<td>Yes</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"InnoDB\"><a href=\"#InnoDB\" class=\"headerlink\" title=\"InnoDB\"></a>InnoDB</h4><p>InnoDB底层存储结构为B+树，B树的每个节点对应innodb的一个page，page大小是固定的，一般设为16k。其中非叶子节点只有键值，叶子节点包含完成数据。</p>\n<p>适用场景：</p>\n<ol>\n<li>经常更新的表，适合处理多重并发的更新请求。</li>\n<li>支持事务。</li>\n<li>可以从灾难中恢复(通过 bin-log 日志等)。</li>\n<li>外键约束。只有他支持外键。 </li>\n<li>支持自动增加列属性 auto_increment。</li>\n</ol>\n<h4 id=\"MyIASM\"><a href=\"#MyIASM\" class=\"headerlink\" title=\"MyIASM\"></a>MyIASM</h4><p>MyISAM是MySql5.6之前的默认引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT或UPDATE数据时需要锁定整个表，效率会更低一些。<br>ISAM执行读取操作的速度很快，而且不占用大量的内存和存储资源。在设计之初就预想数据组织成有固定长度的记录，按顺序存储的。（ISAM是一种静态索引结构）<br>缺点是它不支持事务处理。</p>\n<h4 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h4><p>Memory堆内存：使用存在内存中的内容来创建表。Memory表只实际对应一个磁盘文件。由于它的数据是放在内存中的并默认使用HASH索引，因此访问速度很快。<br>但是服务一但关闭，表中的数据就会丢失。Memory同时支持hash索引和B树索引，B树索引可以使用部分和通配查询，也可以使用&lt;,&gt;和&gt;=等操作符方便数据挖掘，hash索引相等的比较快但是对于范围的比较慢很多。</p>\n<h4 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h4><ul>\n<li>如果要提供提交、回滚和恢复的事务安全（ACID 兼容）能力，并要求实现并发控制，InnoDB 是一个很好的选择。</li>\n<li>如果数据表主要用来插入和查询记录，则 MyISAM 引擎提供较高的处理效率。</li>\n<li>如果只是临时存放数据，数据量不大，并且不需要较高的数据安全性，可以选择将数据保存在内存的 MEMORY 引擎中，MySQL 中使用该引擎作为临时表，存放查询的中间结果。</li>\n<li>如果只有 INSERT 和 SELECT 操作，可以选择Archive 引擎，Archive 存储引擎支持高并发的插入操作，但是本身并不是事务安全的。Archive 存储引擎非常适合存储归档数</li>\n</ul>\n"},{"title":"HyperLogLog","date":"2020-02-13T08:52:00.000Z","comments":0,"keywords":["HyperLogLog"],"_content":"\n### HyperLogLog\n\nHyperLogLog提供不精确的去重技术方案，虽然不精确但是也不是非常不精确，标准误差是0.81%。可以满足一些统计UV的需求。\n\n#### 使用方法\n\nHyperLogLog提供了两个指令pfadd和pfcount，一个是增加计数，一个是获取计数。\n\n```\n127.0.0.1:6379> pfadd codehole user1\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 1\n127.0.0.1:6379> pfadd codehole user2\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 2\n127.0.0.1:6379> pfadd codehole user3\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 3\n127.0.0.1:6379> pfadd codehole user4\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 4\n127.0.0.1:6379> pfadd codehole user5\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 5\n127.0.0.1:6379> pfadd codehole user6\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 6\n127.0.0.1:6379> pfadd codehole user7 user8 user9 user10\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 10\n```\n\n#### 注意事项\n\nHyperLogLog这个数据结构需要占据一定12K的存储，不适合统计单个用户相关的数据。redis对HyperLogLog的存储进行了优化，在技术比较小时，它的存储空间采用稀疏矩阵存储，空间占用很小，仅仅在计数慢慢变大，稀疏矩阵的占用空间超过了阈值才会一次性转变为稠密矩阵，才会占用12K空间。\n\n","source":"_posts/redis/HyperLogLog.md","raw":"---\ntitle: HyperLogLog\ndate: 2020-02-13 16:52\ncomments: false\ntags: \n- redis\n- HyperLogLog\ncategories: \n- redis\n- HyperLogLog\nkeywords:\n- HyperLogLog\n---\n\n### HyperLogLog\n\nHyperLogLog提供不精确的去重技术方案，虽然不精确但是也不是非常不精确，标准误差是0.81%。可以满足一些统计UV的需求。\n\n#### 使用方法\n\nHyperLogLog提供了两个指令pfadd和pfcount，一个是增加计数，一个是获取计数。\n\n```\n127.0.0.1:6379> pfadd codehole user1\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 1\n127.0.0.1:6379> pfadd codehole user2\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 2\n127.0.0.1:6379> pfadd codehole user3\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 3\n127.0.0.1:6379> pfadd codehole user4\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 4\n127.0.0.1:6379> pfadd codehole user5\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 5\n127.0.0.1:6379> pfadd codehole user6\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 6\n127.0.0.1:6379> pfadd codehole user7 user8 user9 user10\n(integer) 1\n127.0.0.1:6379> pfcount codehole\n(integer) 10\n```\n\n#### 注意事项\n\nHyperLogLog这个数据结构需要占据一定12K的存储，不适合统计单个用户相关的数据。redis对HyperLogLog的存储进行了优化，在技术比较小时，它的存储空间采用稀疏矩阵存储，空间占用很小，仅仅在计数慢慢变大，稀疏矩阵的占用空间超过了阈值才会一次性转变为稠密矩阵，才会占用12K空间。\n\n","slug":"redis/HyperLogLog","published":1,"updated":"2020-02-13T13:01:57.547Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsa002nn0zta9jcv1qx","content":"<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>HyperLogLog提供不精确的去重技术方案，虽然不精确但是也不是非常不精确，标准误差是0.81%。可以满足一些统计UV的需求。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>HyperLogLog提供了两个指令pfadd和pfcount，一个是增加计数，一个是获取计数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user1</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user2</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 2</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user3</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 3</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user4</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 4</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user5</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 5</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user6</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 6</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user7 user8 user9 user10</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 10</div></pre></td></tr></table></figure>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>HyperLogLog这个数据结构需要占据一定12K的存储，不适合统计单个用户相关的数据。redis对HyperLogLog的存储进行了优化，在技术比较小时，它的存储空间采用稀疏矩阵存储，空间占用很小，仅仅在计数慢慢变大，稀疏矩阵的占用空间超过了阈值才会一次性转变为稠密矩阵，才会占用12K空间。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><p>HyperLogLog提供不精确的去重技术方案，虽然不精确但是也不是非常不精确，标准误差是0.81%。可以满足一些统计UV的需求。</p>\n<h4 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h4><p>HyperLogLog提供了两个指令pfadd和pfcount，一个是增加计数，一个是获取计数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user1</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user2</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 2</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user3</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 3</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user4</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 4</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user5</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 5</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user6</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 6</div><div class=\"line\">127.0.0.1:6379&gt; pfadd codehole user7 user8 user9 user10</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; pfcount codehole</div><div class=\"line\">(integer) 10</div></pre></td></tr></table></figure>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>HyperLogLog这个数据结构需要占据一定12K的存储，不适合统计单个用户相关的数据。redis对HyperLogLog的存储进行了优化，在技术比较小时，它的存储空间采用稀疏矩阵存储，空间占用很小，仅仅在计数慢慢变大，稀疏矩阵的占用空间超过了阈值才会一次性转变为稠密矩阵，才会占用12K空间。</p>\n"},{"title":"mysql索引（B+)","date":"2019-12-22T09:24:00.000Z","comments":0,"keywords":["mysql","索引","B+"],"_content":"\n### MySQL的B+树索引\n\n在MySQL中记录都存储在数据页中，各个数据页可以组成一个双向链表，每个数据页中的记录会按照主键值从小到大的顺序组成一个单向链表，每个数据页会为它里面的记录生成一个页目录，在通过主键查找某条记录的时候可以用二分查找法快速定位对应的槽，然后在遍历该槽对应的分组记录即可快速找到对应的记录。\n\n如果没有建立索引，在mysql中查找记录可分为2种情况：\n\n- 以主键为搜索条件（如果没有设置主键，mysql也会隐式的生成主键）：在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。\n- 以其他列作为搜索条件：因为在数据页中没有对非主键列建立所谓的页目录，所以无法快速定位到对应的槽。所以只能从最小记录开始遍历单链表中的每条记录，然后对比搜索条件，显然这样的效率是非常慢的。\n\n#### InnoDB中的索引方案\n\nInnoDB采用存储数据的数据页来来存储目录项，只不过目录项中的两列是主键和页号，通过数据页中记录头信息中record_type来区分是目录项还是数据页。\n\n- 0：普通的用户记录\n- 1：目录项记录\n- 2：最小记录\n- 3：最大记录\n\n所以记录在InnoDB的索引存储下来可能如下：\n\n![索引](../../../uploads/mysql/index/1.jpg)\n\n多条记录存储在一个页中，以单链表的方法存储，多个数据页组成了双向链表，都是按索引值从小到大的。然后生成一个数据页来存储目录项记录。目录项和数据页的区别如下：\n\n- 目录项记录的record_type值是1，而普通用户记录的record_type值是0。\n- 目录项记录只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列，另外还有InnoDB自己添加的隐藏列。\n- 数据页记录头信息中的min_rec_mask的属性，只有在存储目录项记录的页中的主键值最小的目录项记录的min_rec_mask值为1，其他别的记录的min_rec_mask值都是0。\n\n这样根据索引去查找一条记录的时候，先到存储目录项记录的页，也就是页30中通过二分法快速定位到对应目录项，然后在到对应存储用户记录去查找到对应的记录。\n\nInnoDB中规定一个数据页的大小是16KB，因此能存放的目录项也是有限的，当表中记录太多导致一个数据页不足以存放这么多目录项，那就在分配一个数据页存储目录项，然后这些存储目录项的数据页也组成了一个双向链表：\n\n![索引](../../../uploads/mysql/index/2.jpg)\n\n此时我们在查找一条数据的时候，需要先确定目录项记录页，然后通过目录项记录页确定用户记录真实所在的页，最后在真实存储用户记录的页中定位到具体的记录。\n这样如果目录项记录页非常多(用户存储记录量非常大)，因为这些目录项记录页相互也不挨着，是通过双向链表来连接着，这样第一步定位就会很慢。此时为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，所以现在各个页的示意图就是这样子：\n\n![索引](../../../uploads/mysql/index/3.jpg)\n\n随着表中记录的增加，这个目录的层级还会增加，将示意图简化下就如下：\n\n![索引](../../../uploads/mysql/index/4.jpg)\n\n这样的一个结构就是B+树，不论是存放用户记录的数据页，还是存放目录项记录的数据页，我们都把它们存放到B+树这个数据结构中了，所以我们也称这些数据页为节点。从图中可以看出，实际用户记录其实都存放在B+树的最底层的节点上，这些节点也被称为叶子节点或叶节点，其余用来存放目录项的节点称为非叶子节点或者内节点，其中B+树最上边的那个节点也称为根节点。\n\n##### 聚簇索引\n\n1. 使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：\n    - 页内的记录是按照主键的大小顺序排成一个单向链表。\n    - 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。\n    - 存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。\n2. B+树的叶子节点存储的是完整的用户记录。所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。\n\n具有这两种特性的B+树为聚簇索引，所有完整的用户记录都存储在这个B+的树的叶子节点处。这种聚簇索引并不需要在MySQL语句中显示的用INDEX去创建，InnoDB存储引擎能自动的创建聚簇索引。在InnoDB存储引擎中，聚簇索引就是数据的存储方式（所有的用户记录都存储在了叶子节点），也就是所谓的索引即数据，数据即索引。\n\n##### 二级索引（非聚簇索引）\n\n聚簇索引是按照主键的顺序来进行排序的，如果想按表中其他列进行查询，为了查询速度就需要以其他列来建立索引，这样的索引是二级索引。\n二级索引就是在建立了一颗B+树，这个B+树的排序规则是按指定索引列来进行排序的，B+树的叶子节点存储的也不是完整的用户记录，而是指定列+主键。\n我们通过二级索引查询数据的时候：\n1. 确定目录项记录页（通过根节点来进行查找）。\n2. 通过目录项记录页确定用户记录真实所在的页。\n3. 在真实存储用户记录的页中定位到具体的记录。\n4. 叶子节点只存储了主键和二级索引列值，如果要查询的字段还包括其他字段，就需要根据主键在去聚簇索引中进行查询。\n\n因为这种按照非主键列建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为二级索引。\n\n##### 联合索引\n\n我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照A2和A3列的大小进行排序，这个包含两层含义：\n\n- 先把各个记录和页按照c2列进行排序。\n- 在记录的c2列相同的情况下，采用c3列进行排序。\n\n这样以c2和c3列的大小为排序规则建立的B+树称为联合索引。建立联合索引也只会生成一颗B+树\n\n##### B+树索引根页面\n\nB+树的形成过程如下：\n\n- 每当为某个表创建一个B+树索引的时候，都会为这个索引去创建一个数据页。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录。\n- 当向表中插入数据时，就先吧记录存储在根节点的数据页中。\n- 当根节点可用空间使用完后继续插入，此时会将根节点数据页中的数据全都复制到一个新分配的数据页中（例如页A），然后对这个页进行页分裂的操作（得到的新页为页B）。这时新插入的记录根据键值的大小就会被分配到页a或者页b中，而根节点便升级为存储目录项记录的页。\n\n一个B+树索引的根节点被创建后就不会再被移动。这样我们对一个表建立索引，那它的根节点的数据页的页号就会被存储在某个地方，然后InnoDB存储引擎用到这个索引的时候，就会从固定的地方取出来，从而去访问。\n\n#### B+树索引的使用\n\n##### 索引的代价\n\n- 空间上的代价：每建立一个索引就要建立一个B+树，每一个B+树的每一个节点都是一个数据页，一个页会默认占用16K的大小，一颗很大的B+树由很多数据页组成，会占用不少的空间。\n- 时间上的代价：每次对表中的数据进行增删改查的时候，都需要去修改各个B+树。B+树每层节点都是按照索引列值按小到大排列组成了双向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，页面分裂、页面回收等操作来维护好节点和记录的排序。\n\n##### B+树的适用条件\n\n- 全值匹配：如果我们的搜索条件中的列和索引列一致的话，这种情况就称为全值匹配。通过联合索引来进行全值匹配，where中条件的顺序不会影响查询效率，优化器会分析这些搜索条件并且按照可以使用的索引中列的顺序来决定先使用哪个搜索条件，后使用哪个搜索条件。\n- 匹配左边的列：我们在搜索语句中也不需要包含联合索引中所有的列，只包含左边的就行，也可以包含多个左边的列。因为联合索引，B+树是先按列A排序，如果列A相等在按列B排序，以此类推，所以我们想使用联合索引中尽可能多的列，那搜索条件必须是联合索引中从最左边连续的列。\n- 匹配列的前缀：索引按列的大小进行排序，字符串排序的本质就是比较哪个字符串大一点儿，会按第一个字符相比较，相等则比较第二个字符，以此类推。所以字符串的前缀也是排好序，因此在where条件中使用 'ab%' 这样的前缀匹配也会使用到索引。\n- 匹配范围值：所有记录都是按照索引列的值从小到大的顺序排好序的，所以这极大的方便我们查找索引列的值在某个范围内的记录。\n- 精确匹配某一列并范围匹配另外一列：对于同一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找。\n- 用于排序：如果ORDER BY子句里使用到了索引列，就有可能省去在内存或文件中排序的过程。（使用联合索引，ORDER BY中排序列排序的顺秀需要和联合索引的顺序一致）\n- 不可以使用索引进行排序的几种情况：\n    - ASC、DESC混用：对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是ASC规则排序，要么都是DESC规则排序。\n    - WHERE子句中出现非排序使用到的索引列：如果WHERE子句中出现了非排序使用到的索引列，那么排序依然是使用不到索引的。\n    - 排序列包含非同一个索引的列：有时候用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序。\n    - 排序列使用了复杂的表达式：要想使用索引进行排序操作，必须保证索引列是以单独列的形式出现，而不是修饰过的形式。\n- 用于分组：和使用B+树索引进行排序是一个道理，分组列的顺序也需要和索引列的顺序一致，也可以只使用索引列中左边的列进行分组。\n\n##### 索引的选择\n\n- 只为用于搜索、排序或分组的列创建索引：只为出现在WHERE子句中的列、连接子句中的连接列，或者出现在ORDER BY或GROUP BY子句中的列创建索引。而出现在查询列表中的列就没必要建立索引了。\n- 考虑列的基数：列的基数指的是某一列中不重复数据的个数，比方说某个列包含值2, 5, 8, 2, 5, 8, 2, 5, 8，虽然有9条记录，但该列的基数却是3。也就是说，在记录行数一定的情况下，列的基数越大，该列中的值越分散，列的基数越小，该列中的值越集中。最好为那些列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。\n- 索引列的类型尽量小：数据类型越小，在查询时进行的比较操作越快；数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录，从而减少磁盘I/O带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。\n- 索引字符串值的前缀：我们可以只对字符串的前几个字符进行索引也就是说在二级索引的记录中只保留字符串前几个字符。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值，再对比就好了。（这样的索引无法支持排序的时候使用索引）\n- 索引列在比较表达式中单独出现：如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的。\n- 主键插入顺序：如果一个主键插入的值一会大一会小，会导致页分裂和记录移位，这意味着性能损耗，所以最好让主键具有AUTO_INCREMENT，让存储引擎自己为表生成主键，而不是我们手动插入。\n- 冗余和重复索引：冗余和重复索引只会增加维护索引的成本。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mysql/索引.md","raw":"---\ntitle: mysql索引（B+)\ndate: 2019-12-22 17:24\ncomments: false\ntags: \n- mysql\n- 索引\n- B+\ncategories: \n- mysql\n- 索引\n- B+\nkeywords: \n- mysql\n- 索引\n- B+\n---\n\n### MySQL的B+树索引\n\n在MySQL中记录都存储在数据页中，各个数据页可以组成一个双向链表，每个数据页中的记录会按照主键值从小到大的顺序组成一个单向链表，每个数据页会为它里面的记录生成一个页目录，在通过主键查找某条记录的时候可以用二分查找法快速定位对应的槽，然后在遍历该槽对应的分组记录即可快速找到对应的记录。\n\n如果没有建立索引，在mysql中查找记录可分为2种情况：\n\n- 以主键为搜索条件（如果没有设置主键，mysql也会隐式的生成主键）：在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。\n- 以其他列作为搜索条件：因为在数据页中没有对非主键列建立所谓的页目录，所以无法快速定位到对应的槽。所以只能从最小记录开始遍历单链表中的每条记录，然后对比搜索条件，显然这样的效率是非常慢的。\n\n#### InnoDB中的索引方案\n\nInnoDB采用存储数据的数据页来来存储目录项，只不过目录项中的两列是主键和页号，通过数据页中记录头信息中record_type来区分是目录项还是数据页。\n\n- 0：普通的用户记录\n- 1：目录项记录\n- 2：最小记录\n- 3：最大记录\n\n所以记录在InnoDB的索引存储下来可能如下：\n\n![索引](../../../uploads/mysql/index/1.jpg)\n\n多条记录存储在一个页中，以单链表的方法存储，多个数据页组成了双向链表，都是按索引值从小到大的。然后生成一个数据页来存储目录项记录。目录项和数据页的区别如下：\n\n- 目录项记录的record_type值是1，而普通用户记录的record_type值是0。\n- 目录项记录只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列，另外还有InnoDB自己添加的隐藏列。\n- 数据页记录头信息中的min_rec_mask的属性，只有在存储目录项记录的页中的主键值最小的目录项记录的min_rec_mask值为1，其他别的记录的min_rec_mask值都是0。\n\n这样根据索引去查找一条记录的时候，先到存储目录项记录的页，也就是页30中通过二分法快速定位到对应目录项，然后在到对应存储用户记录去查找到对应的记录。\n\nInnoDB中规定一个数据页的大小是16KB，因此能存放的目录项也是有限的，当表中记录太多导致一个数据页不足以存放这么多目录项，那就在分配一个数据页存储目录项，然后这些存储目录项的数据页也组成了一个双向链表：\n\n![索引](../../../uploads/mysql/index/2.jpg)\n\n此时我们在查找一条数据的时候，需要先确定目录项记录页，然后通过目录项记录页确定用户记录真实所在的页，最后在真实存储用户记录的页中定位到具体的记录。\n这样如果目录项记录页非常多(用户存储记录量非常大)，因为这些目录项记录页相互也不挨着，是通过双向链表来连接着，这样第一步定位就会很慢。此时为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，所以现在各个页的示意图就是这样子：\n\n![索引](../../../uploads/mysql/index/3.jpg)\n\n随着表中记录的增加，这个目录的层级还会增加，将示意图简化下就如下：\n\n![索引](../../../uploads/mysql/index/4.jpg)\n\n这样的一个结构就是B+树，不论是存放用户记录的数据页，还是存放目录项记录的数据页，我们都把它们存放到B+树这个数据结构中了，所以我们也称这些数据页为节点。从图中可以看出，实际用户记录其实都存放在B+树的最底层的节点上，这些节点也被称为叶子节点或叶节点，其余用来存放目录项的节点称为非叶子节点或者内节点，其中B+树最上边的那个节点也称为根节点。\n\n##### 聚簇索引\n\n1. 使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：\n    - 页内的记录是按照主键的大小顺序排成一个单向链表。\n    - 各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。\n    - 存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。\n2. B+树的叶子节点存储的是完整的用户记录。所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。\n\n具有这两种特性的B+树为聚簇索引，所有完整的用户记录都存储在这个B+的树的叶子节点处。这种聚簇索引并不需要在MySQL语句中显示的用INDEX去创建，InnoDB存储引擎能自动的创建聚簇索引。在InnoDB存储引擎中，聚簇索引就是数据的存储方式（所有的用户记录都存储在了叶子节点），也就是所谓的索引即数据，数据即索引。\n\n##### 二级索引（非聚簇索引）\n\n聚簇索引是按照主键的顺序来进行排序的，如果想按表中其他列进行查询，为了查询速度就需要以其他列来建立索引，这样的索引是二级索引。\n二级索引就是在建立了一颗B+树，这个B+树的排序规则是按指定索引列来进行排序的，B+树的叶子节点存储的也不是完整的用户记录，而是指定列+主键。\n我们通过二级索引查询数据的时候：\n1. 确定目录项记录页（通过根节点来进行查找）。\n2. 通过目录项记录页确定用户记录真实所在的页。\n3. 在真实存储用户记录的页中定位到具体的记录。\n4. 叶子节点只存储了主键和二级索引列值，如果要查询的字段还包括其他字段，就需要根据主键在去聚簇索引中进行查询。\n\n因为这种按照非主键列建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为二级索引。\n\n##### 联合索引\n\n我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照A2和A3列的大小进行排序，这个包含两层含义：\n\n- 先把各个记录和页按照c2列进行排序。\n- 在记录的c2列相同的情况下，采用c3列进行排序。\n\n这样以c2和c3列的大小为排序规则建立的B+树称为联合索引。建立联合索引也只会生成一颗B+树\n\n##### B+树索引根页面\n\nB+树的形成过程如下：\n\n- 每当为某个表创建一个B+树索引的时候，都会为这个索引去创建一个数据页。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录。\n- 当向表中插入数据时，就先吧记录存储在根节点的数据页中。\n- 当根节点可用空间使用完后继续插入，此时会将根节点数据页中的数据全都复制到一个新分配的数据页中（例如页A），然后对这个页进行页分裂的操作（得到的新页为页B）。这时新插入的记录根据键值的大小就会被分配到页a或者页b中，而根节点便升级为存储目录项记录的页。\n\n一个B+树索引的根节点被创建后就不会再被移动。这样我们对一个表建立索引，那它的根节点的数据页的页号就会被存储在某个地方，然后InnoDB存储引擎用到这个索引的时候，就会从固定的地方取出来，从而去访问。\n\n#### B+树索引的使用\n\n##### 索引的代价\n\n- 空间上的代价：每建立一个索引就要建立一个B+树，每一个B+树的每一个节点都是一个数据页，一个页会默认占用16K的大小，一颗很大的B+树由很多数据页组成，会占用不少的空间。\n- 时间上的代价：每次对表中的数据进行增删改查的时候，都需要去修改各个B+树。B+树每层节点都是按照索引列值按小到大排列组成了双向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，页面分裂、页面回收等操作来维护好节点和记录的排序。\n\n##### B+树的适用条件\n\n- 全值匹配：如果我们的搜索条件中的列和索引列一致的话，这种情况就称为全值匹配。通过联合索引来进行全值匹配，where中条件的顺序不会影响查询效率，优化器会分析这些搜索条件并且按照可以使用的索引中列的顺序来决定先使用哪个搜索条件，后使用哪个搜索条件。\n- 匹配左边的列：我们在搜索语句中也不需要包含联合索引中所有的列，只包含左边的就行，也可以包含多个左边的列。因为联合索引，B+树是先按列A排序，如果列A相等在按列B排序，以此类推，所以我们想使用联合索引中尽可能多的列，那搜索条件必须是联合索引中从最左边连续的列。\n- 匹配列的前缀：索引按列的大小进行排序，字符串排序的本质就是比较哪个字符串大一点儿，会按第一个字符相比较，相等则比较第二个字符，以此类推。所以字符串的前缀也是排好序，因此在where条件中使用 'ab%' 这样的前缀匹配也会使用到索引。\n- 匹配范围值：所有记录都是按照索引列的值从小到大的顺序排好序的，所以这极大的方便我们查找索引列的值在某个范围内的记录。\n- 精确匹配某一列并范围匹配另外一列：对于同一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找。\n- 用于排序：如果ORDER BY子句里使用到了索引列，就有可能省去在内存或文件中排序的过程。（使用联合索引，ORDER BY中排序列排序的顺秀需要和联合索引的顺序一致）\n- 不可以使用索引进行排序的几种情况：\n    - ASC、DESC混用：对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是ASC规则排序，要么都是DESC规则排序。\n    - WHERE子句中出现非排序使用到的索引列：如果WHERE子句中出现了非排序使用到的索引列，那么排序依然是使用不到索引的。\n    - 排序列包含非同一个索引的列：有时候用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序。\n    - 排序列使用了复杂的表达式：要想使用索引进行排序操作，必须保证索引列是以单独列的形式出现，而不是修饰过的形式。\n- 用于分组：和使用B+树索引进行排序是一个道理，分组列的顺序也需要和索引列的顺序一致，也可以只使用索引列中左边的列进行分组。\n\n##### 索引的选择\n\n- 只为用于搜索、排序或分组的列创建索引：只为出现在WHERE子句中的列、连接子句中的连接列，或者出现在ORDER BY或GROUP BY子句中的列创建索引。而出现在查询列表中的列就没必要建立索引了。\n- 考虑列的基数：列的基数指的是某一列中不重复数据的个数，比方说某个列包含值2, 5, 8, 2, 5, 8, 2, 5, 8，虽然有9条记录，但该列的基数却是3。也就是说，在记录行数一定的情况下，列的基数越大，该列中的值越分散，列的基数越小，该列中的值越集中。最好为那些列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。\n- 索引列的类型尽量小：数据类型越小，在查询时进行的比较操作越快；数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录，从而减少磁盘I/O带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。\n- 索引字符串值的前缀：我们可以只对字符串的前几个字符进行索引也就是说在二级索引的记录中只保留字符串前几个字符。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值，再对比就好了。（这样的索引无法支持排序的时候使用索引）\n- 索引列在比较表达式中单独出现：如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的。\n- 主键插入顺序：如果一个主键插入的值一会大一会小，会导致页分裂和记录移位，这意味着性能损耗，所以最好让主键具有AUTO_INCREMENT，让存储引擎自己为表生成主键，而不是我们手动插入。\n- 冗余和重复索引：冗余和重复索引只会增加维护索引的成本。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"mysql/索引","published":1,"updated":"2020-01-02T05:49:23.775Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsb002rn0ztu04696gw","content":"<h3 id=\"MySQL的B-树索引\"><a href=\"#MySQL的B-树索引\" class=\"headerlink\" title=\"MySQL的B+树索引\"></a>MySQL的B+树索引</h3><p>在MySQL中记录都存储在数据页中，各个数据页可以组成一个双向链表，每个数据页中的记录会按照主键值从小到大的顺序组成一个单向链表，每个数据页会为它里面的记录生成一个页目录，在通过主键查找某条记录的时候可以用二分查找法快速定位对应的槽，然后在遍历该槽对应的分组记录即可快速找到对应的记录。</p>\n<p>如果没有建立索引，在mysql中查找记录可分为2种情况：</p>\n<ul>\n<li>以主键为搜索条件（如果没有设置主键，mysql也会隐式的生成主键）：在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</li>\n<li>以其他列作为搜索条件：因为在数据页中没有对非主键列建立所谓的页目录，所以无法快速定位到对应的槽。所以只能从最小记录开始遍历单链表中的每条记录，然后对比搜索条件，显然这样的效率是非常慢的。</li>\n</ul>\n<h4 id=\"InnoDB中的索引方案\"><a href=\"#InnoDB中的索引方案\" class=\"headerlink\" title=\"InnoDB中的索引方案\"></a>InnoDB中的索引方案</h4><p>InnoDB采用存储数据的数据页来来存储目录项，只不过目录项中的两列是主键和页号，通过数据页中记录头信息中record_type来区分是目录项还是数据页。</p>\n<ul>\n<li>0：普通的用户记录</li>\n<li>1：目录项记录</li>\n<li>2：最小记录</li>\n<li>3：最大记录</li>\n</ul>\n<p>所以记录在InnoDB的索引存储下来可能如下：</p>\n<p><img src=\"../../../uploads/mysql/index/1.jpg\" alt=\"索引\"></p>\n<p>多条记录存储在一个页中，以单链表的方法存储，多个数据页组成了双向链表，都是按索引值从小到大的。然后生成一个数据页来存储目录项记录。目录项和数据页的区别如下：</p>\n<ul>\n<li>目录项记录的record_type值是1，而普通用户记录的record_type值是0。</li>\n<li>目录项记录只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列，另外还有InnoDB自己添加的隐藏列。</li>\n<li>数据页记录头信息中的min_rec_mask的属性，只有在存储目录项记录的页中的主键值最小的目录项记录的min_rec_mask值为1，其他别的记录的min_rec_mask值都是0。</li>\n</ul>\n<p>这样根据索引去查找一条记录的时候，先到存储目录项记录的页，也就是页30中通过二分法快速定位到对应目录项，然后在到对应存储用户记录去查找到对应的记录。</p>\n<p>InnoDB中规定一个数据页的大小是16KB，因此能存放的目录项也是有限的，当表中记录太多导致一个数据页不足以存放这么多目录项，那就在分配一个数据页存储目录项，然后这些存储目录项的数据页也组成了一个双向链表：</p>\n<p><img src=\"../../../uploads/mysql/index/2.jpg\" alt=\"索引\"></p>\n<p>此时我们在查找一条数据的时候，需要先确定目录项记录页，然后通过目录项记录页确定用户记录真实所在的页，最后在真实存储用户记录的页中定位到具体的记录。<br>这样如果目录项记录页非常多(用户存储记录量非常大)，因为这些目录项记录页相互也不挨着，是通过双向链表来连接着，这样第一步定位就会很慢。此时为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，所以现在各个页的示意图就是这样子：</p>\n<p><img src=\"../../../uploads/mysql/index/3.jpg\" alt=\"索引\"></p>\n<p>随着表中记录的增加，这个目录的层级还会增加，将示意图简化下就如下：</p>\n<p><img src=\"../../../uploads/mysql/index/4.jpg\" alt=\"索引\"></p>\n<p>这样的一个结构就是B+树，不论是存放用户记录的数据页，还是存放目录项记录的数据页，我们都把它们存放到B+树这个数据结构中了，所以我们也称这些数据页为节点。从图中可以看出，实际用户记录其实都存放在B+树的最底层的节点上，这些节点也被称为叶子节点或叶节点，其余用来存放目录项的节点称为非叶子节点或者内节点，其中B+树最上边的那个节点也称为根节点。</p>\n<h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><ol>\n<li>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：<ul>\n<li>页内的记录是按照主键的大小顺序排成一个单向链表。</li>\n<li>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。</li>\n<li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li>\n</ul>\n</li>\n<li>B+树的叶子节点存储的是完整的用户记录。所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li>\n</ol>\n<p>具有这两种特性的B+树为聚簇索引，所有完整的用户记录都存储在这个B+的树的叶子节点处。这种聚簇索引并不需要在MySQL语句中显示的用INDEX去创建，InnoDB存储引擎能自动的创建聚簇索引。在InnoDB存储引擎中，聚簇索引就是数据的存储方式（所有的用户记录都存储在了叶子节点），也就是所谓的索引即数据，数据即索引。</p>\n<h5 id=\"二级索引（非聚簇索引）\"><a href=\"#二级索引（非聚簇索引）\" class=\"headerlink\" title=\"二级索引（非聚簇索引）\"></a>二级索引（非聚簇索引）</h5><p>聚簇索引是按照主键的顺序来进行排序的，如果想按表中其他列进行查询，为了查询速度就需要以其他列来建立索引，这样的索引是二级索引。<br>二级索引就是在建立了一颗B+树，这个B+树的排序规则是按指定索引列来进行排序的，B+树的叶子节点存储的也不是完整的用户记录，而是指定列+主键。<br>我们通过二级索引查询数据的时候：</p>\n<ol>\n<li>确定目录项记录页（通过根节点来进行查找）。</li>\n<li>通过目录项记录页确定用户记录真实所在的页。</li>\n<li>在真实存储用户记录的页中定位到具体的记录。</li>\n<li>叶子节点只存储了主键和二级索引列值，如果要查询的字段还包括其他字段，就需要根据主键在去聚簇索引中进行查询。</li>\n</ol>\n<p>因为这种按照非主键列建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为二级索引。</p>\n<h5 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h5><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照A2和A3列的大小进行排序，这个包含两层含义：</p>\n<ul>\n<li>先把各个记录和页按照c2列进行排序。</li>\n<li>在记录的c2列相同的情况下，采用c3列进行排序。</li>\n</ul>\n<p>这样以c2和c3列的大小为排序规则建立的B+树称为联合索引。建立联合索引也只会生成一颗B+树</p>\n<h5 id=\"B-树索引根页面\"><a href=\"#B-树索引根页面\" class=\"headerlink\" title=\"B+树索引根页面\"></a>B+树索引根页面</h5><p>B+树的形成过程如下：</p>\n<ul>\n<li>每当为某个表创建一个B+树索引的时候，都会为这个索引去创建一个数据页。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录。</li>\n<li>当向表中插入数据时，就先吧记录存储在根节点的数据页中。</li>\n<li>当根节点可用空间使用完后继续插入，此时会将根节点数据页中的数据全都复制到一个新分配的数据页中（例如页A），然后对这个页进行页分裂的操作（得到的新页为页B）。这时新插入的记录根据键值的大小就会被分配到页a或者页b中，而根节点便升级为存储目录项记录的页。</li>\n</ul>\n<p>一个B+树索引的根节点被创建后就不会再被移动。这样我们对一个表建立索引，那它的根节点的数据页的页号就会被存储在某个地方，然后InnoDB存储引擎用到这个索引的时候，就会从固定的地方取出来，从而去访问。</p>\n<h4 id=\"B-树索引的使用\"><a href=\"#B-树索引的使用\" class=\"headerlink\" title=\"B+树索引的使用\"></a>B+树索引的使用</h4><h5 id=\"索引的代价\"><a href=\"#索引的代价\" class=\"headerlink\" title=\"索引的代价\"></a>索引的代价</h5><ul>\n<li>空间上的代价：每建立一个索引就要建立一个B+树，每一个B+树的每一个节点都是一个数据页，一个页会默认占用16K的大小，一颗很大的B+树由很多数据页组成，会占用不少的空间。</li>\n<li>时间上的代价：每次对表中的数据进行增删改查的时候，都需要去修改各个B+树。B+树每层节点都是按照索引列值按小到大排列组成了双向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，页面分裂、页面回收等操作来维护好节点和记录的排序。</li>\n</ul>\n<h5 id=\"B-树的适用条件\"><a href=\"#B-树的适用条件\" class=\"headerlink\" title=\"B+树的适用条件\"></a>B+树的适用条件</h5><ul>\n<li>全值匹配：如果我们的搜索条件中的列和索引列一致的话，这种情况就称为全值匹配。通过联合索引来进行全值匹配，where中条件的顺序不会影响查询效率，优化器会分析这些搜索条件并且按照可以使用的索引中列的顺序来决定先使用哪个搜索条件，后使用哪个搜索条件。</li>\n<li>匹配左边的列：我们在搜索语句中也不需要包含联合索引中所有的列，只包含左边的就行，也可以包含多个左边的列。因为联合索引，B+树是先按列A排序，如果列A相等在按列B排序，以此类推，所以我们想使用联合索引中尽可能多的列，那搜索条件必须是联合索引中从最左边连续的列。</li>\n<li>匹配列的前缀：索引按列的大小进行排序，字符串排序的本质就是比较哪个字符串大一点儿，会按第一个字符相比较，相等则比较第二个字符，以此类推。所以字符串的前缀也是排好序，因此在where条件中使用 ‘ab%’ 这样的前缀匹配也会使用到索引。</li>\n<li>匹配范围值：所有记录都是按照索引列的值从小到大的顺序排好序的，所以这极大的方便我们查找索引列的值在某个范围内的记录。</li>\n<li>精确匹配某一列并范围匹配另外一列：对于同一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找。</li>\n<li>用于排序：如果ORDER BY子句里使用到了索引列，就有可能省去在内存或文件中排序的过程。（使用联合索引，ORDER BY中排序列排序的顺秀需要和联合索引的顺序一致）</li>\n<li>不可以使用索引进行排序的几种情况：<ul>\n<li>ASC、DESC混用：对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是ASC规则排序，要么都是DESC规则排序。</li>\n<li>WHERE子句中出现非排序使用到的索引列：如果WHERE子句中出现了非排序使用到的索引列，那么排序依然是使用不到索引的。</li>\n<li>排序列包含非同一个索引的列：有时候用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序。</li>\n<li>排序列使用了复杂的表达式：要想使用索引进行排序操作，必须保证索引列是以单独列的形式出现，而不是修饰过的形式。</li>\n</ul>\n</li>\n<li>用于分组：和使用B+树索引进行排序是一个道理，分组列的顺序也需要和索引列的顺序一致，也可以只使用索引列中左边的列进行分组。</li>\n</ul>\n<h5 id=\"索引的选择\"><a href=\"#索引的选择\" class=\"headerlink\" title=\"索引的选择\"></a>索引的选择</h5><ul>\n<li>只为用于搜索、排序或分组的列创建索引：只为出现在WHERE子句中的列、连接子句中的连接列，或者出现在ORDER BY或GROUP BY子句中的列创建索引。而出现在查询列表中的列就没必要建立索引了。</li>\n<li>考虑列的基数：列的基数指的是某一列中不重复数据的个数，比方说某个列包含值2, 5, 8, 2, 5, 8, 2, 5, 8，虽然有9条记录，但该列的基数却是3。也就是说，在记录行数一定的情况下，列的基数越大，该列中的值越分散，列的基数越小，该列中的值越集中。最好为那些列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。</li>\n<li>索引列的类型尽量小：数据类型越小，在查询时进行的比较操作越快；数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录，从而减少磁盘I/O带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。</li>\n<li>索引字符串值的前缀：我们可以只对字符串的前几个字符进行索引也就是说在二级索引的记录中只保留字符串前几个字符。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值，再对比就好了。（这样的索引无法支持排序的时候使用索引）</li>\n<li>索引列在比较表达式中单独出现：如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的。</li>\n<li>主键插入顺序：如果一个主键插入的值一会大一会小，会导致页分裂和记录移位，这意味着性能损耗，所以最好让主键具有AUTO_INCREMENT，让存储引擎自己为表生成主键，而不是我们手动插入。</li>\n<li>冗余和重复索引：冗余和重复索引只会增加维护索引的成本。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"MySQL的B-树索引\"><a href=\"#MySQL的B-树索引\" class=\"headerlink\" title=\"MySQL的B+树索引\"></a>MySQL的B+树索引</h3><p>在MySQL中记录都存储在数据页中，各个数据页可以组成一个双向链表，每个数据页中的记录会按照主键值从小到大的顺序组成一个单向链表，每个数据页会为它里面的记录生成一个页目录，在通过主键查找某条记录的时候可以用二分查找法快速定位对应的槽，然后在遍历该槽对应的分组记录即可快速找到对应的记录。</p>\n<p>如果没有建立索引，在mysql中查找记录可分为2种情况：</p>\n<ul>\n<li>以主键为搜索条件（如果没有设置主键，mysql也会隐式的生成主键）：在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。</li>\n<li>以其他列作为搜索条件：因为在数据页中没有对非主键列建立所谓的页目录，所以无法快速定位到对应的槽。所以只能从最小记录开始遍历单链表中的每条记录，然后对比搜索条件，显然这样的效率是非常慢的。</li>\n</ul>\n<h4 id=\"InnoDB中的索引方案\"><a href=\"#InnoDB中的索引方案\" class=\"headerlink\" title=\"InnoDB中的索引方案\"></a>InnoDB中的索引方案</h4><p>InnoDB采用存储数据的数据页来来存储目录项，只不过目录项中的两列是主键和页号，通过数据页中记录头信息中record_type来区分是目录项还是数据页。</p>\n<ul>\n<li>0：普通的用户记录</li>\n<li>1：目录项记录</li>\n<li>2：最小记录</li>\n<li>3：最大记录</li>\n</ul>\n<p>所以记录在InnoDB的索引存储下来可能如下：</p>\n<p><img src=\"../../../uploads/mysql/index/1.jpg\" alt=\"索引\"></p>\n<p>多条记录存储在一个页中，以单链表的方法存储，多个数据页组成了双向链表，都是按索引值从小到大的。然后生成一个数据页来存储目录项记录。目录项和数据页的区别如下：</p>\n<ul>\n<li>目录项记录的record_type值是1，而普通用户记录的record_type值是0。</li>\n<li>目录项记录只有主键值和页的编号两个列，而普通的用户记录的列是用户自己定义的，可能包含很多列，另外还有InnoDB自己添加的隐藏列。</li>\n<li>数据页记录头信息中的min_rec_mask的属性，只有在存储目录项记录的页中的主键值最小的目录项记录的min_rec_mask值为1，其他别的记录的min_rec_mask值都是0。</li>\n</ul>\n<p>这样根据索引去查找一条记录的时候，先到存储目录项记录的页，也就是页30中通过二分法快速定位到对应目录项，然后在到对应存储用户记录去查找到对应的记录。</p>\n<p>InnoDB中规定一个数据页的大小是16KB，因此能存放的目录项也是有限的，当表中记录太多导致一个数据页不足以存放这么多目录项，那就在分配一个数据页存储目录项，然后这些存储目录项的数据页也组成了一个双向链表：</p>\n<p><img src=\"../../../uploads/mysql/index/2.jpg\" alt=\"索引\"></p>\n<p>此时我们在查找一条数据的时候，需要先确定目录项记录页，然后通过目录项记录页确定用户记录真实所在的页，最后在真实存储用户记录的页中定位到具体的记录。<br>这样如果目录项记录页非常多(用户存储记录量非常大)，因为这些目录项记录页相互也不挨着，是通过双向链表来连接着，这样第一步定位就会很慢。此时为这些存储目录项记录的页再生成一个更高级的目录，就像是一个多级目录一样，大目录里嵌套小目录，小目录里才是实际的数据，所以现在各个页的示意图就是这样子：</p>\n<p><img src=\"../../../uploads/mysql/index/3.jpg\" alt=\"索引\"></p>\n<p>随着表中记录的增加，这个目录的层级还会增加，将示意图简化下就如下：</p>\n<p><img src=\"../../../uploads/mysql/index/4.jpg\" alt=\"索引\"></p>\n<p>这样的一个结构就是B+树，不论是存放用户记录的数据页，还是存放目录项记录的数据页，我们都把它们存放到B+树这个数据结构中了，所以我们也称这些数据页为节点。从图中可以看出，实际用户记录其实都存放在B+树的最底层的节点上，这些节点也被称为叶子节点或叶节点，其余用来存放目录项的节点称为非叶子节点或者内节点，其中B+树最上边的那个节点也称为根节点。</p>\n<h5 id=\"聚簇索引\"><a href=\"#聚簇索引\" class=\"headerlink\" title=\"聚簇索引\"></a>聚簇索引</h5><ol>\n<li>使用记录主键值的大小进行记录和页的排序，这包括三个方面的含义：<ul>\n<li>页内的记录是按照主键的大小顺序排成一个单向链表。</li>\n<li>各个存放用户记录的页也是根据页中用户记录的主键大小顺序排成一个双向链表。</li>\n<li>存放目录项记录的页分为不同的层次，在同一层次中的页也是根据页中目录项记录的主键大小顺序排成一个双向链表。</li>\n</ul>\n</li>\n<li>B+树的叶子节点存储的是完整的用户记录。所谓完整的用户记录，就是指这个记录中存储了所有列的值（包括隐藏列）。</li>\n</ol>\n<p>具有这两种特性的B+树为聚簇索引，所有完整的用户记录都存储在这个B+的树的叶子节点处。这种聚簇索引并不需要在MySQL语句中显示的用INDEX去创建，InnoDB存储引擎能自动的创建聚簇索引。在InnoDB存储引擎中，聚簇索引就是数据的存储方式（所有的用户记录都存储在了叶子节点），也就是所谓的索引即数据，数据即索引。</p>\n<h5 id=\"二级索引（非聚簇索引）\"><a href=\"#二级索引（非聚簇索引）\" class=\"headerlink\" title=\"二级索引（非聚簇索引）\"></a>二级索引（非聚簇索引）</h5><p>聚簇索引是按照主键的顺序来进行排序的，如果想按表中其他列进行查询，为了查询速度就需要以其他列来建立索引，这样的索引是二级索引。<br>二级索引就是在建立了一颗B+树，这个B+树的排序规则是按指定索引列来进行排序的，B+树的叶子节点存储的也不是完整的用户记录，而是指定列+主键。<br>我们通过二级索引查询数据的时候：</p>\n<ol>\n<li>确定目录项记录页（通过根节点来进行查找）。</li>\n<li>通过目录项记录页确定用户记录真实所在的页。</li>\n<li>在真实存储用户记录的页中定位到具体的记录。</li>\n<li>叶子节点只存储了主键和二级索引列值，如果要查询的字段还包括其他字段，就需要根据主键在去聚簇索引中进行查询。</li>\n</ol>\n<p>因为这种按照非主键列建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为二级索引。</p>\n<h5 id=\"联合索引\"><a href=\"#联合索引\" class=\"headerlink\" title=\"联合索引\"></a>联合索引</h5><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引，比方说我们想让B+树按照A2和A3列的大小进行排序，这个包含两层含义：</p>\n<ul>\n<li>先把各个记录和页按照c2列进行排序。</li>\n<li>在记录的c2列相同的情况下，采用c3列进行排序。</li>\n</ul>\n<p>这样以c2和c3列的大小为排序规则建立的B+树称为联合索引。建立联合索引也只会生成一颗B+树</p>\n<h5 id=\"B-树索引根页面\"><a href=\"#B-树索引根页面\" class=\"headerlink\" title=\"B+树索引根页面\"></a>B+树索引根页面</h5><p>B+树的形成过程如下：</p>\n<ul>\n<li>每当为某个表创建一个B+树索引的时候，都会为这个索引去创建一个数据页。最开始表中没有数据的时候，每个B+树索引对应的根节点中既没有用户记录，也没有目录项记录。</li>\n<li>当向表中插入数据时，就先吧记录存储在根节点的数据页中。</li>\n<li>当根节点可用空间使用完后继续插入，此时会将根节点数据页中的数据全都复制到一个新分配的数据页中（例如页A），然后对这个页进行页分裂的操作（得到的新页为页B）。这时新插入的记录根据键值的大小就会被分配到页a或者页b中，而根节点便升级为存储目录项记录的页。</li>\n</ul>\n<p>一个B+树索引的根节点被创建后就不会再被移动。这样我们对一个表建立索引，那它的根节点的数据页的页号就会被存储在某个地方，然后InnoDB存储引擎用到这个索引的时候，就会从固定的地方取出来，从而去访问。</p>\n<h4 id=\"B-树索引的使用\"><a href=\"#B-树索引的使用\" class=\"headerlink\" title=\"B+树索引的使用\"></a>B+树索引的使用</h4><h5 id=\"索引的代价\"><a href=\"#索引的代价\" class=\"headerlink\" title=\"索引的代价\"></a>索引的代价</h5><ul>\n<li>空间上的代价：每建立一个索引就要建立一个B+树，每一个B+树的每一个节点都是一个数据页，一个页会默认占用16K的大小，一颗很大的B+树由很多数据页组成，会占用不少的空间。</li>\n<li>时间上的代价：每次对表中的数据进行增删改查的时候，都需要去修改各个B+树。B+树每层节点都是按照索引列值按小到大排列组成了双向链表。而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，页面分裂、页面回收等操作来维护好节点和记录的排序。</li>\n</ul>\n<h5 id=\"B-树的适用条件\"><a href=\"#B-树的适用条件\" class=\"headerlink\" title=\"B+树的适用条件\"></a>B+树的适用条件</h5><ul>\n<li>全值匹配：如果我们的搜索条件中的列和索引列一致的话，这种情况就称为全值匹配。通过联合索引来进行全值匹配，where中条件的顺序不会影响查询效率，优化器会分析这些搜索条件并且按照可以使用的索引中列的顺序来决定先使用哪个搜索条件，后使用哪个搜索条件。</li>\n<li>匹配左边的列：我们在搜索语句中也不需要包含联合索引中所有的列，只包含左边的就行，也可以包含多个左边的列。因为联合索引，B+树是先按列A排序，如果列A相等在按列B排序，以此类推，所以我们想使用联合索引中尽可能多的列，那搜索条件必须是联合索引中从最左边连续的列。</li>\n<li>匹配列的前缀：索引按列的大小进行排序，字符串排序的本质就是比较哪个字符串大一点儿，会按第一个字符相比较，相等则比较第二个字符，以此类推。所以字符串的前缀也是排好序，因此在where条件中使用 ‘ab%’ 这样的前缀匹配也会使用到索引。</li>\n<li>匹配范围值：所有记录都是按照索引列的值从小到大的顺序排好序的，所以这极大的方便我们查找索引列的值在某个范围内的记录。</li>\n<li>精确匹配某一列并范围匹配另外一列：对于同一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找。</li>\n<li>用于排序：如果ORDER BY子句里使用到了索引列，就有可能省去在内存或文件中排序的过程。（使用联合索引，ORDER BY中排序列排序的顺秀需要和联合索引的顺序一致）</li>\n<li>不可以使用索引进行排序的几种情况：<ul>\n<li>ASC、DESC混用：对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是ASC规则排序，要么都是DESC规则排序。</li>\n<li>WHERE子句中出现非排序使用到的索引列：如果WHERE子句中出现了非排序使用到的索引列，那么排序依然是使用不到索引的。</li>\n<li>排序列包含非同一个索引的列：有时候用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序。</li>\n<li>排序列使用了复杂的表达式：要想使用索引进行排序操作，必须保证索引列是以单独列的形式出现，而不是修饰过的形式。</li>\n</ul>\n</li>\n<li>用于分组：和使用B+树索引进行排序是一个道理，分组列的顺序也需要和索引列的顺序一致，也可以只使用索引列中左边的列进行分组。</li>\n</ul>\n<h5 id=\"索引的选择\"><a href=\"#索引的选择\" class=\"headerlink\" title=\"索引的选择\"></a>索引的选择</h5><ul>\n<li>只为用于搜索、排序或分组的列创建索引：只为出现在WHERE子句中的列、连接子句中的连接列，或者出现在ORDER BY或GROUP BY子句中的列创建索引。而出现在查询列表中的列就没必要建立索引了。</li>\n<li>考虑列的基数：列的基数指的是某一列中不重复数据的个数，比方说某个列包含值2, 5, 8, 2, 5, 8, 2, 5, 8，虽然有9条记录，但该列的基数却是3。也就是说，在记录行数一定的情况下，列的基数越大，该列中的值越分散，列的基数越小，该列中的值越集中。最好为那些列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。</li>\n<li>索引列的类型尽量小：数据类型越小，在查询时进行的比较操作越快；数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录，从而减少磁盘I/O带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。</li>\n<li>索引字符串值的前缀：我们可以只对字符串的前几个字符进行索引也就是说在二级索引的记录中只保留字符串前几个字符。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值，再对比就好了。（这样的索引无法支持排序的时候使用索引）</li>\n<li>索引列在比较表达式中单独出现：如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的。</li>\n<li>主键插入顺序：如果一个主键插入的值一会大一会小，会导致页分裂和记录移位，这意味着性能损耗，所以最好让主键具有AUTO_INCREMENT，让存储引擎自己为表生成主键，而不是我们手动插入。</li>\n<li>冗余和重复索引：冗余和重复索引只会增加维护索引的成本。</li>\n</ul>\n"},{"title":"redis","date":"2020-02-13T07:32:00.000Z","comments":0,"keywords":["redis"],"_content":"\n### redis\n\nredis是一个key-value的存储系统。支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载使用。redis不仅仅支持key-value的数据，还支持list、set、zset、hash等数据结构的存储。redis还支持数据的备份（master-salve模式）。\n\nredis支持的数据结构：String、Hash、List、Set、SortedSet、HyperLogLog、Geo、Pub/Sub等。\n\nredis一般有这些用途：\n\n- 缓存：缓存在redis最为人熟知的场景，可以有效提升服务器的性能。\n- 排行榜：使用redis的SortedSet可以很方便的实现排行榜。\n- 限速器：利用redis中原子性的自增操作可以\n- 好友关系：利用集合的一些命令（交集、并集、差集等）可以搞定共同好友之类的功能。\n- 分布式锁：可以使用redis实现。\n- 简单的消息队列：可以使用redis自身的发布订阅模式，也可以使用List来实现。\n\n#### redis的基本数据结构\n\n##### string\n\n字符串是redis中最简单的数据结构，通过唯一的key来获取对应的value。redis的字符串是动态字符串，可以修改的字符串，内部结构实现类似于ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。当字符串长度小于1M时，扩容都是加倍先有的空间，如果超过1M后，扩容时一次只会多扩1M的空间。（字符串最大长度为512M）\n\n键值对:\n\n```\n> set name codehole\nOK\n> get name\n\"codehole\"\n> exists name\n(integer) 1\n> del name\n(integer) 1\n```\n\n批量键值对:\n\n```\n> set name1 codehole\nOK\n> set name2 holycoder\nOK\n> mget name1 name2 name3 # 返回一个列表\n1) \"codehole\"\n2) \"holycoder\"\n3) (nil)\n> mset name1 boy name2 girl name3 unknown\n> mget name1 name2 name3\n1) \"boy\"\n2) \"girl\"\n3) \"unknown\"\n```\n\n过期和set命令扩展：\n\n```\n> set name codehole\n> get name\n\"codehole\"\n> expire name 5  # 5s 后过期\n...  # wait for 5s\n> get name\n(nil)\n\n> setex name 5 codehole  # 5s 后过期，等价于 set+expire\n> get name\n\"codehole\"\n... # wait for 5s\n> get name\n(nil)\n\n> setnx name codehole  # 如果 name 不存在就执行 set 创建\n(integer) 1\n> get name\n\"codehole\"\n> setnx name holycoder\n(integer) 0  # 因为 name 已经存在，所以 set 创建不成功\n> get name\n\"codehole\"  # 没有改变\n```\n\n计数：\n如果value是一个整数，还可以对它进行自增操作，自增的范围是signed long的最大最小值，超过这个值会报错。\n\n```\n> set age 30\nOK\n> incr age\n(integer) 31\n> incrby age 5\n(integer) 36\n> incrby age -5\n(integer) 3\n```\n\n##### list\n\nredis的列表相当于java中的LinkedList。这代表list的插入和删除操作很快，但是索引定位的时间复杂度会为O(N)。\n\nlist结构经常用来做异步队列来使用。将需要延后处理的任务结构体序列化为字符串塞进队列，另一个线程从这个列表中轮询数据进行处理。\n\n右边进左边出：队列\n\n```\n> rpush books python java golang\n(integer) 3\n> llen books\n(integer) 3\n> lpop books\n\"python\"\n> lpop books\n\"java\"\n> lpop books\n\"golang\"\n> lpop books\n(nil)\n```\n\n右边进右边出：栈\n\n```\n> rpush books python java golang\n(integer) 3\n> rpop books\n\"golang\"\n> rpop books\n\"java\"\n> rpop books\n\"python\"\n> rpop books\n(nil)\n```\n\nlindex 相当于 get(int index) 方法，需要对链表进行遍历。\n\nltrim有两个参数start_index和end_index，定义了一个区间，在这个区间内的值保留，其他的舍弃。\n\n##### hash\n\nredis的hash相当于HashMap，是无序字典。内部实现也是数组+链表的二维结构。\n\n在java中HashMap进行rehash的操作很耗时，需要一次性全部的rehash。但是在redis中为了高性能不能堵塞服务，采用了渐进式rehash策略。\n渐进式rehash会在rehash的同时保留新旧两个hash就结构，查询时会同时查询两个hash结构，然后在后续的定时任务中以及hash操作中，循序渐进的将旧hash的内容一点点迁移到新的hash结构中。当迁移完成之后，就是使用新的hash结构代替。当hash移除了最后一个元素之后，该结构就会自动被删除，内存被回收。\n\n```\n> hset books java \"think in java\"  # 命令行的字符串如果包含空格，要用引号括起来\n(integer) 1\n> hset books golang \"concurrency in go\"\n(integer) 1\n> hset books python \"python cookbook\"\n(integer) 1\n> hgetall books  # entries()，key 和 value 间隔出现\n1) \"java\"\n2) \"think in java\"\n3) \"golang\"\n4) \"concurrency in go\"\n5) \"python\"\n6) \"python cookbook\"\n> hlen books\n(integer) 3\n> hget books java\n\"think in java\"\n> hset books golang \"learning go programming\"  # 因为是更新操作，所以返回 0\n(integer) 0\n> hget books golang\n\"learning go programming\"\n> hmset books java \"effective java\" python \"learning python\" golang \"modern golang programming\"  # 批量 set\nOK\n```\n\nhash结构中单个子key也可以进行计数，对应的指令是hincrby，和incr使用基本一样。\n\n##### set\n\n相当于HashSet，内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值NULL。\n                         \n```\n> sadd books python\n(integer) 1\n> sadd books python  #  重复\n(integer) 0\n> sadd books java golang\n(integer) 2\n> smembers books  # 注意顺序，和插入的并不一致，因为 set 是无序的\n1) \"java\"\n2) \"python\"\n3) \"golang\"\n> sismember books java  # 查询某个 value 是否存在，相当于 contains(o)\n(integer) 1\n> sismember books rust\n(integer) 0\n> scard books  # 获取长度相当于 count()\n(integer) 3\n> spop books  # 弹出一个\n\"java\"\n```\n\n##### zset\n\nzset类似SortedSet和HashMap的结合，一方面是一个set保证了内部value的唯一性，另一方面给每个value赋予一个score，代表这个value排序的权重。\n\nzset 可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。\n\n```\n> zadd books 9.0 \"think in java\"\n(integer) 1\n> zadd books 8.9 \"java concurrency\"\n(integer) 1\n> zadd books 8.6 \"java cookbook\"\n(integer) 1\n> zrange books 0 -1  # 按 score 排序列出，参数区间为排名范围\n1) \"java cookbook\"\n2) \"java concurrency\"\n3) \"think in java\"\n> zrevrange books 0 -1  # 按 score 逆序列出，参数区间为排名范围\n1) \"think in java\"\n2) \"java concurrenc\n```\n\n","source":"_posts/redis/redis.md","raw":"---\ntitle: redis\ndate: 2020-02-13 15:32\ncomments: false\ntags: \n- redis\ncategories: \n- redis\nkeywords:\n- redis\n---\n\n### redis\n\nredis是一个key-value的存储系统。支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载使用。redis不仅仅支持key-value的数据，还支持list、set、zset、hash等数据结构的存储。redis还支持数据的备份（master-salve模式）。\n\nredis支持的数据结构：String、Hash、List、Set、SortedSet、HyperLogLog、Geo、Pub/Sub等。\n\nredis一般有这些用途：\n\n- 缓存：缓存在redis最为人熟知的场景，可以有效提升服务器的性能。\n- 排行榜：使用redis的SortedSet可以很方便的实现排行榜。\n- 限速器：利用redis中原子性的自增操作可以\n- 好友关系：利用集合的一些命令（交集、并集、差集等）可以搞定共同好友之类的功能。\n- 分布式锁：可以使用redis实现。\n- 简单的消息队列：可以使用redis自身的发布订阅模式，也可以使用List来实现。\n\n#### redis的基本数据结构\n\n##### string\n\n字符串是redis中最简单的数据结构，通过唯一的key来获取对应的value。redis的字符串是动态字符串，可以修改的字符串，内部结构实现类似于ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。当字符串长度小于1M时，扩容都是加倍先有的空间，如果超过1M后，扩容时一次只会多扩1M的空间。（字符串最大长度为512M）\n\n键值对:\n\n```\n> set name codehole\nOK\n> get name\n\"codehole\"\n> exists name\n(integer) 1\n> del name\n(integer) 1\n```\n\n批量键值对:\n\n```\n> set name1 codehole\nOK\n> set name2 holycoder\nOK\n> mget name1 name2 name3 # 返回一个列表\n1) \"codehole\"\n2) \"holycoder\"\n3) (nil)\n> mset name1 boy name2 girl name3 unknown\n> mget name1 name2 name3\n1) \"boy\"\n2) \"girl\"\n3) \"unknown\"\n```\n\n过期和set命令扩展：\n\n```\n> set name codehole\n> get name\n\"codehole\"\n> expire name 5  # 5s 后过期\n...  # wait for 5s\n> get name\n(nil)\n\n> setex name 5 codehole  # 5s 后过期，等价于 set+expire\n> get name\n\"codehole\"\n... # wait for 5s\n> get name\n(nil)\n\n> setnx name codehole  # 如果 name 不存在就执行 set 创建\n(integer) 1\n> get name\n\"codehole\"\n> setnx name holycoder\n(integer) 0  # 因为 name 已经存在，所以 set 创建不成功\n> get name\n\"codehole\"  # 没有改变\n```\n\n计数：\n如果value是一个整数，还可以对它进行自增操作，自增的范围是signed long的最大最小值，超过这个值会报错。\n\n```\n> set age 30\nOK\n> incr age\n(integer) 31\n> incrby age 5\n(integer) 36\n> incrby age -5\n(integer) 3\n```\n\n##### list\n\nredis的列表相当于java中的LinkedList。这代表list的插入和删除操作很快，但是索引定位的时间复杂度会为O(N)。\n\nlist结构经常用来做异步队列来使用。将需要延后处理的任务结构体序列化为字符串塞进队列，另一个线程从这个列表中轮询数据进行处理。\n\n右边进左边出：队列\n\n```\n> rpush books python java golang\n(integer) 3\n> llen books\n(integer) 3\n> lpop books\n\"python\"\n> lpop books\n\"java\"\n> lpop books\n\"golang\"\n> lpop books\n(nil)\n```\n\n右边进右边出：栈\n\n```\n> rpush books python java golang\n(integer) 3\n> rpop books\n\"golang\"\n> rpop books\n\"java\"\n> rpop books\n\"python\"\n> rpop books\n(nil)\n```\n\nlindex 相当于 get(int index) 方法，需要对链表进行遍历。\n\nltrim有两个参数start_index和end_index，定义了一个区间，在这个区间内的值保留，其他的舍弃。\n\n##### hash\n\nredis的hash相当于HashMap，是无序字典。内部实现也是数组+链表的二维结构。\n\n在java中HashMap进行rehash的操作很耗时，需要一次性全部的rehash。但是在redis中为了高性能不能堵塞服务，采用了渐进式rehash策略。\n渐进式rehash会在rehash的同时保留新旧两个hash就结构，查询时会同时查询两个hash结构，然后在后续的定时任务中以及hash操作中，循序渐进的将旧hash的内容一点点迁移到新的hash结构中。当迁移完成之后，就是使用新的hash结构代替。当hash移除了最后一个元素之后，该结构就会自动被删除，内存被回收。\n\n```\n> hset books java \"think in java\"  # 命令行的字符串如果包含空格，要用引号括起来\n(integer) 1\n> hset books golang \"concurrency in go\"\n(integer) 1\n> hset books python \"python cookbook\"\n(integer) 1\n> hgetall books  # entries()，key 和 value 间隔出现\n1) \"java\"\n2) \"think in java\"\n3) \"golang\"\n4) \"concurrency in go\"\n5) \"python\"\n6) \"python cookbook\"\n> hlen books\n(integer) 3\n> hget books java\n\"think in java\"\n> hset books golang \"learning go programming\"  # 因为是更新操作，所以返回 0\n(integer) 0\n> hget books golang\n\"learning go programming\"\n> hmset books java \"effective java\" python \"learning python\" golang \"modern golang programming\"  # 批量 set\nOK\n```\n\nhash结构中单个子key也可以进行计数，对应的指令是hincrby，和incr使用基本一样。\n\n##### set\n\n相当于HashSet，内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值NULL。\n                         \n```\n> sadd books python\n(integer) 1\n> sadd books python  #  重复\n(integer) 0\n> sadd books java golang\n(integer) 2\n> smembers books  # 注意顺序，和插入的并不一致，因为 set 是无序的\n1) \"java\"\n2) \"python\"\n3) \"golang\"\n> sismember books java  # 查询某个 value 是否存在，相当于 contains(o)\n(integer) 1\n> sismember books rust\n(integer) 0\n> scard books  # 获取长度相当于 count()\n(integer) 3\n> spop books  # 弹出一个\n\"java\"\n```\n\n##### zset\n\nzset类似SortedSet和HashMap的结合，一方面是一个set保证了内部value的唯一性，另一方面给每个value赋予一个score，代表这个value排序的权重。\n\nzset 可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。\n\n```\n> zadd books 9.0 \"think in java\"\n(integer) 1\n> zadd books 8.9 \"java concurrency\"\n(integer) 1\n> zadd books 8.6 \"java cookbook\"\n(integer) 1\n> zrange books 0 -1  # 按 score 排序列出，参数区间为排名范围\n1) \"java cookbook\"\n2) \"java concurrency\"\n3) \"think in java\"\n> zrevrange books 0 -1  # 按 score 逆序列出，参数区间为排名范围\n1) \"think in java\"\n2) \"java concurrenc\n```\n\n","slug":"redis/redis","published":1,"updated":"2020-02-13T08:19:31.709Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsc002tn0zt527rx5cr","content":"<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><p>redis是一个key-value的存储系统。支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载使用。redis不仅仅支持key-value的数据，还支持list、set、zset、hash等数据结构的存储。redis还支持数据的备份（master-salve模式）。</p>\n<p>redis支持的数据结构：String、Hash、List、Set、SortedSet、HyperLogLog、Geo、Pub/Sub等。</p>\n<p>redis一般有这些用途：</p>\n<ul>\n<li>缓存：缓存在redis最为人熟知的场景，可以有效提升服务器的性能。</li>\n<li>排行榜：使用redis的SortedSet可以很方便的实现排行榜。</li>\n<li>限速器：利用redis中原子性的自增操作可以</li>\n<li>好友关系：利用集合的一些命令（交集、并集、差集等）可以搞定共同好友之类的功能。</li>\n<li>分布式锁：可以使用redis实现。</li>\n<li>简单的消息队列：可以使用redis自身的发布订阅模式，也可以使用List来实现。</li>\n</ul>\n<h4 id=\"redis的基本数据结构\"><a href=\"#redis的基本数据结构\" class=\"headerlink\" title=\"redis的基本数据结构\"></a>redis的基本数据结构</h4><h5 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h5><p>字符串是redis中最简单的数据结构，通过唯一的key来获取对应的value。redis的字符串是动态字符串，可以修改的字符串，内部结构实现类似于ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。当字符串长度小于1M时，扩容都是加倍先有的空间，如果超过1M后，扩容时一次只会多扩1M的空间。（字符串最大长度为512M）</p>\n<p>键值对:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set name codehole</div><div class=\"line\">OK</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">&gt; exists name</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; del name</div><div class=\"line\">(integer) 1</div></pre></td></tr></table></figure>\n<p>批量键值对:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set name1 codehole</div><div class=\"line\">OK</div><div class=\"line\">&gt; set name2 holycoder</div><div class=\"line\">OK</div><div class=\"line\">&gt; mget name1 name2 name3 # 返回一个列表</div><div class=\"line\">1) &quot;codehole&quot;</div><div class=\"line\">2) &quot;holycoder&quot;</div><div class=\"line\">3) (nil)</div><div class=\"line\">&gt; mset name1 boy name2 girl name3 unknown</div><div class=\"line\">&gt; mget name1 name2 name3</div><div class=\"line\">1) &quot;boy&quot;</div><div class=\"line\">2) &quot;girl&quot;</div><div class=\"line\">3) &quot;unknown&quot;</div></pre></td></tr></table></figure>\n<p>过期和set命令扩展：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set name codehole</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">&gt; expire name 5  # 5s 后过期</div><div class=\"line\">...  # wait for 5s</div><div class=\"line\">&gt; get name</div><div class=\"line\">(nil)</div><div class=\"line\"></div><div class=\"line\">&gt; setex name 5 codehole  # 5s 后过期，等价于 set+expire</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">... # wait for 5s</div><div class=\"line\">&gt; get name</div><div class=\"line\">(nil)</div><div class=\"line\"></div><div class=\"line\">&gt; setnx name codehole  # 如果 name 不存在就执行 set 创建</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">&gt; setnx name holycoder</div><div class=\"line\">(integer) 0  # 因为 name 已经存在，所以 set 创建不成功</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;  # 没有改变</div></pre></td></tr></table></figure>\n<p>计数：<br>如果value是一个整数，还可以对它进行自增操作，自增的范围是signed long的最大最小值，超过这个值会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set age 30</div><div class=\"line\">OK</div><div class=\"line\">&gt; incr age</div><div class=\"line\">(integer) 31</div><div class=\"line\">&gt; incrby age 5</div><div class=\"line\">(integer) 36</div><div class=\"line\">&gt; incrby age -5</div><div class=\"line\">(integer) 3</div></pre></td></tr></table></figure>\n<h5 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h5><p>redis的列表相当于java中的LinkedList。这代表list的插入和删除操作很快，但是索引定位的时间复杂度会为O(N)。</p>\n<p>list结构经常用来做异步队列来使用。将需要延后处理的任务结构体序列化为字符串塞进队列，另一个线程从这个列表中轮询数据进行处理。</p>\n<p>右边进左边出：队列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; rpush books python java golang</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; llen books</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">&quot;python&quot;</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">&quot;java&quot;</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">&quot;golang&quot;</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">(nil)</div></pre></td></tr></table></figure>\n<p>右边进右边出：栈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; rpush books python java golang</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">&quot;golang&quot;</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">&quot;java&quot;</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">&quot;python&quot;</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">(nil)</div></pre></td></tr></table></figure>\n<p>lindex 相当于 get(int index) 方法，需要对链表进行遍历。</p>\n<p>ltrim有两个参数start_index和end_index，定义了一个区间，在这个区间内的值保留，其他的舍弃。</p>\n<h5 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h5><p>redis的hash相当于HashMap，是无序字典。内部实现也是数组+链表的二维结构。</p>\n<p>在java中HashMap进行rehash的操作很耗时，需要一次性全部的rehash。但是在redis中为了高性能不能堵塞服务，采用了渐进式rehash策略。<br>渐进式rehash会在rehash的同时保留新旧两个hash就结构，查询时会同时查询两个hash结构，然后在后续的定时任务中以及hash操作中，循序渐进的将旧hash的内容一点点迁移到新的hash结构中。当迁移完成之后，就是使用新的hash结构代替。当hash移除了最后一个元素之后，该结构就会自动被删除，内存被回收。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; hset books java &quot;think in java&quot;  # 命令行的字符串如果包含空格，要用引号括起来</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; hset books golang &quot;concurrency in go&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; hset books python &quot;python cookbook&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; hgetall books  # entries()，key 和 value 间隔出现</div><div class=\"line\">1) &quot;java&quot;</div><div class=\"line\">2) &quot;think in java&quot;</div><div class=\"line\">3) &quot;golang&quot;</div><div class=\"line\">4) &quot;concurrency in go&quot;</div><div class=\"line\">5) &quot;python&quot;</div><div class=\"line\">6) &quot;python cookbook&quot;</div><div class=\"line\">&gt; hlen books</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; hget books java</div><div class=\"line\">&quot;think in java&quot;</div><div class=\"line\">&gt; hset books golang &quot;learning go programming&quot;  # 因为是更新操作，所以返回 0</div><div class=\"line\">(integer) 0</div><div class=\"line\">&gt; hget books golang</div><div class=\"line\">&quot;learning go programming&quot;</div><div class=\"line\">&gt; hmset books java &quot;effective java&quot; python &quot;learning python&quot; golang &quot;modern golang programming&quot;  # 批量 set</div><div class=\"line\">OK</div></pre></td></tr></table></figure>\n<p>hash结构中单个子key也可以进行计数，对应的指令是hincrby，和incr使用基本一样。</p>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><p>相当于HashSet，内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值NULL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; sadd books python</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; sadd books python  #  重复</div><div class=\"line\">(integer) 0</div><div class=\"line\">&gt; sadd books java golang</div><div class=\"line\">(integer) 2</div><div class=\"line\">&gt; smembers books  # 注意顺序，和插入的并不一致，因为 set 是无序的</div><div class=\"line\">1) &quot;java&quot;</div><div class=\"line\">2) &quot;python&quot;</div><div class=\"line\">3) &quot;golang&quot;</div><div class=\"line\">&gt; sismember books java  # 查询某个 value 是否存在，相当于 contains(o)</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; sismember books rust</div><div class=\"line\">(integer) 0</div><div class=\"line\">&gt; scard books  # 获取长度相当于 count()</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; spop books  # 弹出一个</div><div class=\"line\">&quot;java&quot;</div></pre></td></tr></table></figure>\n<h5 id=\"zset\"><a href=\"#zset\" class=\"headerlink\" title=\"zset\"></a>zset</h5><p>zset类似SortedSet和HashMap的结合，一方面是一个set保证了内部value的唯一性，另一方面给每个value赋予一个score，代表这个value排序的权重。</p>\n<p>zset 可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; zadd books 9.0 &quot;think in java&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; zadd books 8.9 &quot;java concurrency&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; zadd books 8.6 &quot;java cookbook&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; zrange books 0 -1  # 按 score 排序列出，参数区间为排名范围</div><div class=\"line\">1) &quot;java cookbook&quot;</div><div class=\"line\">2) &quot;java concurrency&quot;</div><div class=\"line\">3) &quot;think in java&quot;</div><div class=\"line\">&gt; zrevrange books 0 -1  # 按 score 逆序列出，参数区间为排名范围</div><div class=\"line\">1) &quot;think in java&quot;</div><div class=\"line\">2) &quot;java concurrenc</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"redis\"><a href=\"#redis\" class=\"headerlink\" title=\"redis\"></a>redis</h3><p>redis是一个key-value的存储系统。支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载使用。redis不仅仅支持key-value的数据，还支持list、set、zset、hash等数据结构的存储。redis还支持数据的备份（master-salve模式）。</p>\n<p>redis支持的数据结构：String、Hash、List、Set、SortedSet、HyperLogLog、Geo、Pub/Sub等。</p>\n<p>redis一般有这些用途：</p>\n<ul>\n<li>缓存：缓存在redis最为人熟知的场景，可以有效提升服务器的性能。</li>\n<li>排行榜：使用redis的SortedSet可以很方便的实现排行榜。</li>\n<li>限速器：利用redis中原子性的自增操作可以</li>\n<li>好友关系：利用集合的一些命令（交集、并集、差集等）可以搞定共同好友之类的功能。</li>\n<li>分布式锁：可以使用redis实现。</li>\n<li>简单的消息队列：可以使用redis自身的发布订阅模式，也可以使用List来实现。</li>\n</ul>\n<h4 id=\"redis的基本数据结构\"><a href=\"#redis的基本数据结构\" class=\"headerlink\" title=\"redis的基本数据结构\"></a>redis的基本数据结构</h4><h5 id=\"string\"><a href=\"#string\" class=\"headerlink\" title=\"string\"></a>string</h5><p>字符串是redis中最简单的数据结构，通过唯一的key来获取对应的value。redis的字符串是动态字符串，可以修改的字符串，内部结构实现类似于ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。当字符串长度小于1M时，扩容都是加倍先有的空间，如果超过1M后，扩容时一次只会多扩1M的空间。（字符串最大长度为512M）</p>\n<p>键值对:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set name codehole</div><div class=\"line\">OK</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">&gt; exists name</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; del name</div><div class=\"line\">(integer) 1</div></pre></td></tr></table></figure>\n<p>批量键值对:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set name1 codehole</div><div class=\"line\">OK</div><div class=\"line\">&gt; set name2 holycoder</div><div class=\"line\">OK</div><div class=\"line\">&gt; mget name1 name2 name3 # 返回一个列表</div><div class=\"line\">1) &quot;codehole&quot;</div><div class=\"line\">2) &quot;holycoder&quot;</div><div class=\"line\">3) (nil)</div><div class=\"line\">&gt; mset name1 boy name2 girl name3 unknown</div><div class=\"line\">&gt; mget name1 name2 name3</div><div class=\"line\">1) &quot;boy&quot;</div><div class=\"line\">2) &quot;girl&quot;</div><div class=\"line\">3) &quot;unknown&quot;</div></pre></td></tr></table></figure>\n<p>过期和set命令扩展：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set name codehole</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">&gt; expire name 5  # 5s 后过期</div><div class=\"line\">...  # wait for 5s</div><div class=\"line\">&gt; get name</div><div class=\"line\">(nil)</div><div class=\"line\"></div><div class=\"line\">&gt; setex name 5 codehole  # 5s 后过期，等价于 set+expire</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">... # wait for 5s</div><div class=\"line\">&gt; get name</div><div class=\"line\">(nil)</div><div class=\"line\"></div><div class=\"line\">&gt; setnx name codehole  # 如果 name 不存在就执行 set 创建</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;</div><div class=\"line\">&gt; setnx name holycoder</div><div class=\"line\">(integer) 0  # 因为 name 已经存在，所以 set 创建不成功</div><div class=\"line\">&gt; get name</div><div class=\"line\">&quot;codehole&quot;  # 没有改变</div></pre></td></tr></table></figure>\n<p>计数：<br>如果value是一个整数，还可以对它进行自增操作，自增的范围是signed long的最大最小值，超过这个值会报错。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set age 30</div><div class=\"line\">OK</div><div class=\"line\">&gt; incr age</div><div class=\"line\">(integer) 31</div><div class=\"line\">&gt; incrby age 5</div><div class=\"line\">(integer) 36</div><div class=\"line\">&gt; incrby age -5</div><div class=\"line\">(integer) 3</div></pre></td></tr></table></figure>\n<h5 id=\"list\"><a href=\"#list\" class=\"headerlink\" title=\"list\"></a>list</h5><p>redis的列表相当于java中的LinkedList。这代表list的插入和删除操作很快，但是索引定位的时间复杂度会为O(N)。</p>\n<p>list结构经常用来做异步队列来使用。将需要延后处理的任务结构体序列化为字符串塞进队列，另一个线程从这个列表中轮询数据进行处理。</p>\n<p>右边进左边出：队列</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; rpush books python java golang</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; llen books</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">&quot;python&quot;</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">&quot;java&quot;</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">&quot;golang&quot;</div><div class=\"line\">&gt; lpop books</div><div class=\"line\">(nil)</div></pre></td></tr></table></figure>\n<p>右边进右边出：栈</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; rpush books python java golang</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">&quot;golang&quot;</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">&quot;java&quot;</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">&quot;python&quot;</div><div class=\"line\">&gt; rpop books</div><div class=\"line\">(nil)</div></pre></td></tr></table></figure>\n<p>lindex 相当于 get(int index) 方法，需要对链表进行遍历。</p>\n<p>ltrim有两个参数start_index和end_index，定义了一个区间，在这个区间内的值保留，其他的舍弃。</p>\n<h5 id=\"hash\"><a href=\"#hash\" class=\"headerlink\" title=\"hash\"></a>hash</h5><p>redis的hash相当于HashMap，是无序字典。内部实现也是数组+链表的二维结构。</p>\n<p>在java中HashMap进行rehash的操作很耗时，需要一次性全部的rehash。但是在redis中为了高性能不能堵塞服务，采用了渐进式rehash策略。<br>渐进式rehash会在rehash的同时保留新旧两个hash就结构，查询时会同时查询两个hash结构，然后在后续的定时任务中以及hash操作中，循序渐进的将旧hash的内容一点点迁移到新的hash结构中。当迁移完成之后，就是使用新的hash结构代替。当hash移除了最后一个元素之后，该结构就会自动被删除，内存被回收。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; hset books java &quot;think in java&quot;  # 命令行的字符串如果包含空格，要用引号括起来</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; hset books golang &quot;concurrency in go&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; hset books python &quot;python cookbook&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; hgetall books  # entries()，key 和 value 间隔出现</div><div class=\"line\">1) &quot;java&quot;</div><div class=\"line\">2) &quot;think in java&quot;</div><div class=\"line\">3) &quot;golang&quot;</div><div class=\"line\">4) &quot;concurrency in go&quot;</div><div class=\"line\">5) &quot;python&quot;</div><div class=\"line\">6) &quot;python cookbook&quot;</div><div class=\"line\">&gt; hlen books</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; hget books java</div><div class=\"line\">&quot;think in java&quot;</div><div class=\"line\">&gt; hset books golang &quot;learning go programming&quot;  # 因为是更新操作，所以返回 0</div><div class=\"line\">(integer) 0</div><div class=\"line\">&gt; hget books golang</div><div class=\"line\">&quot;learning go programming&quot;</div><div class=\"line\">&gt; hmset books java &quot;effective java&quot; python &quot;learning python&quot; golang &quot;modern golang programming&quot;  # 批量 set</div><div class=\"line\">OK</div></pre></td></tr></table></figure>\n<p>hash结构中单个子key也可以进行计数，对应的指令是hincrby，和incr使用基本一样。</p>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><p>相当于HashSet，内部的键值对是无序的唯一的。它的内部实现相当于一个特殊的字典，字典中所有的 value 都是一个值NULL。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; sadd books python</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; sadd books python  #  重复</div><div class=\"line\">(integer) 0</div><div class=\"line\">&gt; sadd books java golang</div><div class=\"line\">(integer) 2</div><div class=\"line\">&gt; smembers books  # 注意顺序，和插入的并不一致，因为 set 是无序的</div><div class=\"line\">1) &quot;java&quot;</div><div class=\"line\">2) &quot;python&quot;</div><div class=\"line\">3) &quot;golang&quot;</div><div class=\"line\">&gt; sismember books java  # 查询某个 value 是否存在，相当于 contains(o)</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; sismember books rust</div><div class=\"line\">(integer) 0</div><div class=\"line\">&gt; scard books  # 获取长度相当于 count()</div><div class=\"line\">(integer) 3</div><div class=\"line\">&gt; spop books  # 弹出一个</div><div class=\"line\">&quot;java&quot;</div></pre></td></tr></table></figure>\n<h5 id=\"zset\"><a href=\"#zset\" class=\"headerlink\" title=\"zset\"></a>zset</h5><p>zset类似SortedSet和HashMap的结合，一方面是一个set保证了内部value的唯一性，另一方面给每个value赋予一个score，代表这个value排序的权重。</p>\n<p>zset 可以用来存储学生的成绩，value 值是学生的 ID，score 是他的考试成绩。我们可以对成绩按分数进行排序就可以得到他的名次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; zadd books 9.0 &quot;think in java&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; zadd books 8.9 &quot;java concurrency&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; zadd books 8.6 &quot;java cookbook&quot;</div><div class=\"line\">(integer) 1</div><div class=\"line\">&gt; zrange books 0 -1  # 按 score 排序列出，参数区间为排名范围</div><div class=\"line\">1) &quot;java cookbook&quot;</div><div class=\"line\">2) &quot;java concurrency&quot;</div><div class=\"line\">3) &quot;think in java&quot;</div><div class=\"line\">&gt; zrevrange books 0 -1  # 按 score 逆序列出，参数区间为排名范围</div><div class=\"line\">1) &quot;think in java&quot;</div><div class=\"line\">2) &quot;java concurrenc</div></pre></td></tr></table></figure>\n"},{"title":"分布式锁","date":"2020-02-13T08:21:00.000Z","comments":0,"keywords":["分布式锁"],"_content":"\n### 分布式锁\n\n分布式应用进行逻辑处理时经常会有并发的问题。例如一个操作要修改用户状态，修改状态需要先读出用户的状态，在内存中进行修改，修改完之后在存储。这样的操作同时进行了就会有并发问题，因为读取和保存不是原子操作。\n\n这时候就要使用分布式锁来限制程序的并发执行。\n\n#### 实现\n\n分布式锁本质上就是在redis设置一个值，当其他进程发现已被设置就放弃或稍后再试。\n\n一般使用setnx命令来实现（set if not exists）指令，只允许被一个客户端占用，使用完之后使用del指令删除释放。\n\n```\n> setnx lock true\nOK\n... do something critical ...\n> del lock\n(integer) 1\n```\n\n但是如果在 setnx 和 del指令执行中间出现异常，导致del没有调用就会陷入死锁，锁永远不会释放。\n\n在拿到锁之后给锁加一个过期时间，这样在中间出现异常也会在5s后释放锁。\n\n```\n> setnx lock true\nOK\n> expire lock 5\n... do something critical ...\n> del lock\n(integer) 1\n```\n\n但是在setnx 和 expire过程中如果服务器进程突然挂掉了，就会导致expire得不到执行，也会造成死锁。\n问题根源在于setnx 和 expire是两条指令而不是院子指令。\n在redis2.8中加入了set指令的扩展参数，可以是setnx 和 expire一起执行。\n\n```\n> set lock true ex 5 nx\nOK\n... do something critical ...\n> del lock\n```\n\n#### 超时\n\nredis分布式锁不能解决超时问题，如果在加锁和释放锁的过程中执行的业务逻辑时间过长，就会出现问题。此时第一个线程持有的锁过期了，但是中间的业务逻辑还没有执行完成，此时第二个线程就会提前持有这把锁。\n\n有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于delifequals这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。\n\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n```\n\n#### 可重入性\n\n可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。例如ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。\n\n","source":"_posts/redis/分布式锁.md","raw":"---\ntitle: 分布式锁\ndate: 2020-02-13 16:21\ncomments: false\ntags: \n- redis\n- 分布式锁\ncategories: \n- redis\n- 分布式锁\nkeywords:\n- 分布式锁\n---\n\n### 分布式锁\n\n分布式应用进行逻辑处理时经常会有并发的问题。例如一个操作要修改用户状态，修改状态需要先读出用户的状态，在内存中进行修改，修改完之后在存储。这样的操作同时进行了就会有并发问题，因为读取和保存不是原子操作。\n\n这时候就要使用分布式锁来限制程序的并发执行。\n\n#### 实现\n\n分布式锁本质上就是在redis设置一个值，当其他进程发现已被设置就放弃或稍后再试。\n\n一般使用setnx命令来实现（set if not exists）指令，只允许被一个客户端占用，使用完之后使用del指令删除释放。\n\n```\n> setnx lock true\nOK\n... do something critical ...\n> del lock\n(integer) 1\n```\n\n但是如果在 setnx 和 del指令执行中间出现异常，导致del没有调用就会陷入死锁，锁永远不会释放。\n\n在拿到锁之后给锁加一个过期时间，这样在中间出现异常也会在5s后释放锁。\n\n```\n> setnx lock true\nOK\n> expire lock 5\n... do something critical ...\n> del lock\n(integer) 1\n```\n\n但是在setnx 和 expire过程中如果服务器进程突然挂掉了，就会导致expire得不到执行，也会造成死锁。\n问题根源在于setnx 和 expire是两条指令而不是院子指令。\n在redis2.8中加入了set指令的扩展参数，可以是setnx 和 expire一起执行。\n\n```\n> set lock true ex 5 nx\nOK\n... do something critical ...\n> del lock\n```\n\n#### 超时\n\nredis分布式锁不能解决超时问题，如果在加锁和释放锁的过程中执行的业务逻辑时间过长，就会出现问题。此时第一个线程持有的锁过期了，但是中间的业务逻辑还没有执行完成，此时第二个线程就会提前持有这把锁。\n\n有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于delifequals这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。\n\n```\nif redis.call(\"get\",KEYS[1]) == ARGV[1] then\n    return redis.call(\"del\",KEYS[1])\nelse\n    return 0\nend\n```\n\n#### 可重入性\n\n可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。例如ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。\n\n","slug":"redis/分布式锁","published":1,"updated":"2020-02-13T08:39:13.517Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsd002yn0zty4vp3lrr","content":"<h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><p>分布式应用进行逻辑处理时经常会有并发的问题。例如一个操作要修改用户状态，修改状态需要先读出用户的状态，在内存中进行修改，修改完之后在存储。这样的操作同时进行了就会有并发问题，因为读取和保存不是原子操作。</p>\n<p>这时候就要使用分布式锁来限制程序的并发执行。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>分布式锁本质上就是在redis设置一个值，当其他进程发现已被设置就放弃或稍后再试。</p>\n<p>一般使用setnx命令来实现（set if not exists）指令，只允许被一个客户端占用，使用完之后使用del指令删除释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setnx lock true</div><div class=\"line\">OK</div><div class=\"line\">... do something critical ...</div><div class=\"line\">&gt; del lock</div><div class=\"line\">(integer) 1</div></pre></td></tr></table></figure>\n<p>但是如果在 setnx 和 del指令执行中间出现异常，导致del没有调用就会陷入死锁，锁永远不会释放。</p>\n<p>在拿到锁之后给锁加一个过期时间，这样在中间出现异常也会在5s后释放锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setnx lock true</div><div class=\"line\">OK</div><div class=\"line\">&gt; expire lock 5</div><div class=\"line\">... do something critical ...</div><div class=\"line\">&gt; del lock</div><div class=\"line\">(integer) 1</div></pre></td></tr></table></figure>\n<p>但是在setnx 和 expire过程中如果服务器进程突然挂掉了，就会导致expire得不到执行，也会造成死锁。<br>问题根源在于setnx 和 expire是两条指令而不是院子指令。<br>在redis2.8中加入了set指令的扩展参数，可以是setnx 和 expire一起执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set lock true ex 5 nx</div><div class=\"line\">OK</div><div class=\"line\">... do something critical ...</div><div class=\"line\">&gt; del lock</div></pre></td></tr></table></figure>\n<h4 id=\"超时\"><a href=\"#超时\" class=\"headerlink\" title=\"超时\"></a>超时</h4><p>redis分布式锁不能解决超时问题，如果在加锁和释放锁的过程中执行的业务逻辑时间过长，就会出现问题。此时第一个线程持有的锁过期了，但是中间的业务逻辑还没有执行完成，此时第二个线程就会提前持有这把锁。</p>\n<p>有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于delifequals这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</div><div class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</div><div class=\"line\">else</div><div class=\"line\">    return 0</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<h4 id=\"可重入性\"><a href=\"#可重入性\" class=\"headerlink\" title=\"可重入性\"></a>可重入性</h4><p>可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。例如ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h3><p>分布式应用进行逻辑处理时经常会有并发的问题。例如一个操作要修改用户状态，修改状态需要先读出用户的状态，在内存中进行修改，修改完之后在存储。这样的操作同时进行了就会有并发问题，因为读取和保存不是原子操作。</p>\n<p>这时候就要使用分布式锁来限制程序的并发执行。</p>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>分布式锁本质上就是在redis设置一个值，当其他进程发现已被设置就放弃或稍后再试。</p>\n<p>一般使用setnx命令来实现（set if not exists）指令，只允许被一个客户端占用，使用完之后使用del指令删除释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setnx lock true</div><div class=\"line\">OK</div><div class=\"line\">... do something critical ...</div><div class=\"line\">&gt; del lock</div><div class=\"line\">(integer) 1</div></pre></td></tr></table></figure>\n<p>但是如果在 setnx 和 del指令执行中间出现异常，导致del没有调用就会陷入死锁，锁永远不会释放。</p>\n<p>在拿到锁之后给锁加一个过期时间，这样在中间出现异常也会在5s后释放锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; setnx lock true</div><div class=\"line\">OK</div><div class=\"line\">&gt; expire lock 5</div><div class=\"line\">... do something critical ...</div><div class=\"line\">&gt; del lock</div><div class=\"line\">(integer) 1</div></pre></td></tr></table></figure>\n<p>但是在setnx 和 expire过程中如果服务器进程突然挂掉了，就会导致expire得不到执行，也会造成死锁。<br>问题根源在于setnx 和 expire是两条指令而不是院子指令。<br>在redis2.8中加入了set指令的扩展参数，可以是setnx 和 expire一起执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; set lock true ex 5 nx</div><div class=\"line\">OK</div><div class=\"line\">... do something critical ...</div><div class=\"line\">&gt; del lock</div></pre></td></tr></table></figure>\n<h4 id=\"超时\"><a href=\"#超时\" class=\"headerlink\" title=\"超时\"></a>超时</h4><p>redis分布式锁不能解决超时问题，如果在加锁和释放锁的过程中执行的业务逻辑时间过长，就会出现问题。此时第一个线程持有的锁过期了，但是中间的业务逻辑还没有执行完成，此时第二个线程就会提前持有这把锁。</p>\n<p>有一个稍微安全一点的方案是为 set 指令的 value 参数设置为一个随机数，释放锁时先匹配随机数是否一致，然后再删除 key，这是为了确保当前线程占有的锁不会被其它线程释放，除非这个锁是过期了被服务器自动释放的。 但是匹配 value 和删除 key 不是一个原子操作，Redis 也没有提供类似于delifequals这样的指令，这就需要使用 Lua 脚本来处理了，因为 Lua 脚本可以保证连续多个指令的原子性执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</div><div class=\"line\">    return redis.call(&quot;del&quot;,KEYS[1])</div><div class=\"line\">else</div><div class=\"line\">    return 0</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<h4 id=\"可重入性\"><a href=\"#可重入性\" class=\"headerlink\" title=\"可重入性\"></a>可重入性</h4><p>可重入性是指线程在持有锁的情况下再次请求加锁，如果一个锁支持同一个线程的多次加锁，那么这个锁就是可重入的。例如ReentrantLock 就是可重入锁。Redis 分布式锁如果要支持可重入，需要对客户端的 set 方法进行包装，使用线程的 Threadlocal 变量存储当前持有锁的计数。</p>\n"},{"title":"布隆过滤器","date":"2020-02-13T08:53:00.000Z","comments":0,"keywords":["布隆过滤器"],"_content":"\n### 布隆过滤器\n\nHyperLogLog可以进行估数，但是如果要获取一个值在不在HyperLogLog中就无法实现了。\n\n布隆过滤器是一个不怎么精确的set结构，可以用它的contains方法判断某个对象是否存在，但是可能会误判。当布隆过滤器判断某个值存在时，这个值可能不存在；当判断这个值不存在时，这个值肯定不存在。\n\nredis提供的布隆过滤器到了4.0提供了插件功能之后才可以使用。\n\n布隆过滤器有两个基本指令，bf.add 添加元素，bf.exists 查询元素是否存在。bf.add一次只能添加一个元素，如果添加多个可以使用bf.madd。如果要一次查询多个元素是否存在，可以使用bf.mexists。\n\n```\n127.0.0.1:6379> bf.add codehole user1\n(integer) 1\n127.0.0.1:6379> bf.add codehole user2\n(integer) 1\n127.0.0.1:6379> bf.add codehole user3\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user1\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user2\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user3\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user4\n(integer) 0\n127.0.0.1:6379> bf.madd codehole user4 user5 user6\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1\n127.0.0.1:6379> bf.mexists codehole user4 user5 user6 user7\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1\n4) (integer) 0\n```\n\n#### 原理\n\n每个布隆过滤器对应到redis结构中就是一个大型的位数组和几个不一样的无偏hash函数。无偏就是可以吧元素的hash值算的比较均匀。\n\n向布隆过滤器中添加key时，会使用多个hash函数对key进行hash，得到一个整数索引值然后对位数组长度进行取模得到一个位置，每个hash函数都会得到一个不同的位置，再把位数组的这几个位置都置为1就完成了add操作。\n布隆过滤器查询key是否存在时，和add一样，也会把hash的几个位置都算出来，看看位数组这几个位置是否都是1，只要有一个是0，就说明这个key不存在。如果都是1，不能说明这个key一定存在，只能说明很可能存在，因为可能是由于其他key存在导致。如果位数组比较稀疏，判断正确的概率就会比较大，反之则概率就会降低。","source":"_posts/redis/布隆过滤器.md","raw":"---\ntitle: 布隆过滤器\ndate: 2020-02-13 16:53\ncomments: false\ntags: \n- redis\n- 布隆过滤器\ncategories: \n- redis\n- 布隆过滤器\nkeywords:\n- 布隆过滤器\n---\n\n### 布隆过滤器\n\nHyperLogLog可以进行估数，但是如果要获取一个值在不在HyperLogLog中就无法实现了。\n\n布隆过滤器是一个不怎么精确的set结构，可以用它的contains方法判断某个对象是否存在，但是可能会误判。当布隆过滤器判断某个值存在时，这个值可能不存在；当判断这个值不存在时，这个值肯定不存在。\n\nredis提供的布隆过滤器到了4.0提供了插件功能之后才可以使用。\n\n布隆过滤器有两个基本指令，bf.add 添加元素，bf.exists 查询元素是否存在。bf.add一次只能添加一个元素，如果添加多个可以使用bf.madd。如果要一次查询多个元素是否存在，可以使用bf.mexists。\n\n```\n127.0.0.1:6379> bf.add codehole user1\n(integer) 1\n127.0.0.1:6379> bf.add codehole user2\n(integer) 1\n127.0.0.1:6379> bf.add codehole user3\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user1\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user2\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user3\n(integer) 1\n127.0.0.1:6379> bf.exists codehole user4\n(integer) 0\n127.0.0.1:6379> bf.madd codehole user4 user5 user6\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1\n127.0.0.1:6379> bf.mexists codehole user4 user5 user6 user7\n1) (integer) 1\n2) (integer) 1\n3) (integer) 1\n4) (integer) 0\n```\n\n#### 原理\n\n每个布隆过滤器对应到redis结构中就是一个大型的位数组和几个不一样的无偏hash函数。无偏就是可以吧元素的hash值算的比较均匀。\n\n向布隆过滤器中添加key时，会使用多个hash函数对key进行hash，得到一个整数索引值然后对位数组长度进行取模得到一个位置，每个hash函数都会得到一个不同的位置，再把位数组的这几个位置都置为1就完成了add操作。\n布隆过滤器查询key是否存在时，和add一样，也会把hash的几个位置都算出来，看看位数组这几个位置是否都是1，只要有一个是0，就说明这个key不存在。如果都是1，不能说明这个key一定存在，只能说明很可能存在，因为可能是由于其他key存在导致。如果位数组比较稀疏，判断正确的概率就会比较大，反之则概率就会降低。","slug":"redis/布隆过滤器","published":1,"updated":"2020-02-13T13:25:54.219Z","layout":"post","photos":[],"link":"","_id":"ck6lvszse002zn0ztmshwzgi1","content":"<h3 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h3><p>HyperLogLog可以进行估数，但是如果要获取一个值在不在HyperLogLog中就无法实现了。</p>\n<p>布隆过滤器是一个不怎么精确的set结构，可以用它的contains方法判断某个对象是否存在，但是可能会误判。当布隆过滤器判断某个值存在时，这个值可能不存在；当判断这个值不存在时，这个值肯定不存在。</p>\n<p>redis提供的布隆过滤器到了4.0提供了插件功能之后才可以使用。</p>\n<p>布隆过滤器有两个基本指令，bf.add 添加元素，bf.exists 查询元素是否存在。bf.add一次只能添加一个元素，如果添加多个可以使用bf.madd。如果要一次查询多个元素是否存在，可以使用bf.mexists。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:6379&gt; bf.add codehole user1</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.add codehole user2</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.add codehole user3</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user1</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user2</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user3</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user4</div><div class=\"line\">(integer) 0</div><div class=\"line\">127.0.0.1:6379&gt; bf.madd codehole user4 user5 user6</div><div class=\"line\">1) (integer) 1</div><div class=\"line\">2) (integer) 1</div><div class=\"line\">3) (integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.mexists codehole user4 user5 user6 user7</div><div class=\"line\">1) (integer) 1</div><div class=\"line\">2) (integer) 1</div><div class=\"line\">3) (integer) 1</div><div class=\"line\">4) (integer) 0</div></pre></td></tr></table></figure>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>每个布隆过滤器对应到redis结构中就是一个大型的位数组和几个不一样的无偏hash函数。无偏就是可以吧元素的hash值算的比较均匀。</p>\n<p>向布隆过滤器中添加key时，会使用多个hash函数对key进行hash，得到一个整数索引值然后对位数组长度进行取模得到一个位置，每个hash函数都会得到一个不同的位置，再把位数组的这几个位置都置为1就完成了add操作。<br>布隆过滤器查询key是否存在时，和add一样，也会把hash的几个位置都算出来，看看位数组这几个位置是否都是1，只要有一个是0，就说明这个key不存在。如果都是1，不能说明这个key一定存在，只能说明很可能存在，因为可能是由于其他key存在导致。如果位数组比较稀疏，判断正确的概率就会比较大，反之则概率就会降低。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h3><p>HyperLogLog可以进行估数，但是如果要获取一个值在不在HyperLogLog中就无法实现了。</p>\n<p>布隆过滤器是一个不怎么精确的set结构，可以用它的contains方法判断某个对象是否存在，但是可能会误判。当布隆过滤器判断某个值存在时，这个值可能不存在；当判断这个值不存在时，这个值肯定不存在。</p>\n<p>redis提供的布隆过滤器到了4.0提供了插件功能之后才可以使用。</p>\n<p>布隆过滤器有两个基本指令，bf.add 添加元素，bf.exists 查询元素是否存在。bf.add一次只能添加一个元素，如果添加多个可以使用bf.madd。如果要一次查询多个元素是否存在，可以使用bf.mexists。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">127.0.0.1:6379&gt; bf.add codehole user1</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.add codehole user2</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.add codehole user3</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user1</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user2</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user3</div><div class=\"line\">(integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.exists codehole user4</div><div class=\"line\">(integer) 0</div><div class=\"line\">127.0.0.1:6379&gt; bf.madd codehole user4 user5 user6</div><div class=\"line\">1) (integer) 1</div><div class=\"line\">2) (integer) 1</div><div class=\"line\">3) (integer) 1</div><div class=\"line\">127.0.0.1:6379&gt; bf.mexists codehole user4 user5 user6 user7</div><div class=\"line\">1) (integer) 1</div><div class=\"line\">2) (integer) 1</div><div class=\"line\">3) (integer) 1</div><div class=\"line\">4) (integer) 0</div></pre></td></tr></table></figure>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>每个布隆过滤器对应到redis结构中就是一个大型的位数组和几个不一样的无偏hash函数。无偏就是可以吧元素的hash值算的比较均匀。</p>\n<p>向布隆过滤器中添加key时，会使用多个hash函数对key进行hash，得到一个整数索引值然后对位数组长度进行取模得到一个位置，每个hash函数都会得到一个不同的位置，再把位数组的这几个位置都置为1就完成了add操作。<br>布隆过滤器查询key是否存在时，和add一样，也会把hash的几个位置都算出来，看看位数组这几个位置是否都是1，只要有一个是0，就说明这个key不存在。如果都是1，不能说明这个key一定存在，只能说明很可能存在，因为可能是由于其他key存在导致。如果位数组比较稀疏，判断正确的概率就会比较大，反之则概率就会降低。</p>\n"},{"title":"限流","date":"2020-02-13T08:53:00.000Z","comments":0,"keywords":["限流"],"_content":"\n### 限流\n\n#### 滑动窗口\n\n可以使用zset的score值为时间戳，这样就可以通过score找到这个时间窗口，只保留这个时间窗口的值，其他的数据都可以砍掉。\n\n```\npublic class SimpleRateLimiter {\n\n  private Jedis jedis;\n\n  public SimpleRateLimiter(Jedis jedis) {\n    this.jedis = jedis;\n  }\n\n  public boolean isActionAllowed(String userId, String actionKey, int period, int maxCount) {\n    String key = String.format(\"hist:%s:%s\", userId, actionKey);\n    long nowTs = System.currentTimeMillis();\n    Pipeline pipe = jedis.pipelined();\n    pipe.multi();\n    pipe.zadd(key, nowTs, \"\" + nowTs);\n    pipe.zremrangeByScore(key, 0, nowTs - period * 1000);\n    Response<Long> count = pipe.zcard(key);\n    pipe.expire(key, period + 1);\n    pipe.exec();\n    pipe.close();\n    return count.get() <= maxCount;\n  }\n\n  public static void main(String[] args) {\n    Jedis jedis = new Jedis();\n    SimpleRateLimiter limiter = new SimpleRateLimiter(jedis);\n    for(int i=0;i<20;i++) {\n      System.out.println(limiter.isActionAllowed(\"laoqian\", \"reply\", 60, 5));\n    }\n  }\n\n}\n```\n\n#### 漏斗限流\n\n```\npublic class FunnelRateLimiter {\n\n  static class Funnel {\n    int capacity;\n    float leakingRate;\n    int leftQuota;\n    long leakingTs;\n\n    public Funnel(int capacity, float leakingRate) {\n      this.capacity = capacity;\n      this.leakingRate = leakingRate;\n      this.leftQuota = capacity;\n      this.leakingTs = System.currentTimeMillis();\n    }\n\n    void makeSpace() {\n      long nowTs = System.currentTimeMillis();\n      long deltaTs = nowTs - leakingTs;\n      int deltaQuota = (int) (deltaTs * leakingRate);\n      if (deltaQuota < 0) { // 间隔时间太长，整数数字过大溢出\n        this.leftQuota = capacity;\n        this.leakingTs = nowTs;\n        return;\n      }\n      if (deltaQuota < 1) { // 腾出空间太小，最小单位是1\n        return;\n      }\n      this.leftQuota += deltaQuota;\n      this.leakingTs = nowTs;\n      if (this.leftQuota > this.capacity) {\n        this.leftQuota = this.capacity;\n      }\n    }\n\n    boolean watering(int quota) {\n      makeSpace();\n      if (this.leftQuota >= quota) {\n        this.leftQuota -= quota;\n        return true;\n      }\n      return false;\n    }\n  }\n\n  private Map<String, Funnel> funnels = new HashMap<>();\n\n  public boolean isActionAllowed(String userId, String actionKey, int capacity, float leakingRate) {\n    String key = String.format(\"%s:%s\", userId, actionKey);\n    Funnel funnel = funnels.get(key);\n    if (funnel == null) {\n      funnel = new Funnel(capacity, leakingRate);\n      funnels.put(key, funnel);\n    }\n    return funnel.watering(1); // 需要1个quota\n  }\n}\n```\n\n","source":"_posts/redis/限流.md","raw":"---\ntitle: 限流\ndate: 2020-02-13 16:53\ncomments: false\ntags: \n- redis\n- 限流\ncategories: \n- redis\n- 限流\nkeywords:\n- 限流\n---\n\n### 限流\n\n#### 滑动窗口\n\n可以使用zset的score值为时间戳，这样就可以通过score找到这个时间窗口，只保留这个时间窗口的值，其他的数据都可以砍掉。\n\n```\npublic class SimpleRateLimiter {\n\n  private Jedis jedis;\n\n  public SimpleRateLimiter(Jedis jedis) {\n    this.jedis = jedis;\n  }\n\n  public boolean isActionAllowed(String userId, String actionKey, int period, int maxCount) {\n    String key = String.format(\"hist:%s:%s\", userId, actionKey);\n    long nowTs = System.currentTimeMillis();\n    Pipeline pipe = jedis.pipelined();\n    pipe.multi();\n    pipe.zadd(key, nowTs, \"\" + nowTs);\n    pipe.zremrangeByScore(key, 0, nowTs - period * 1000);\n    Response<Long> count = pipe.zcard(key);\n    pipe.expire(key, period + 1);\n    pipe.exec();\n    pipe.close();\n    return count.get() <= maxCount;\n  }\n\n  public static void main(String[] args) {\n    Jedis jedis = new Jedis();\n    SimpleRateLimiter limiter = new SimpleRateLimiter(jedis);\n    for(int i=0;i<20;i++) {\n      System.out.println(limiter.isActionAllowed(\"laoqian\", \"reply\", 60, 5));\n    }\n  }\n\n}\n```\n\n#### 漏斗限流\n\n```\npublic class FunnelRateLimiter {\n\n  static class Funnel {\n    int capacity;\n    float leakingRate;\n    int leftQuota;\n    long leakingTs;\n\n    public Funnel(int capacity, float leakingRate) {\n      this.capacity = capacity;\n      this.leakingRate = leakingRate;\n      this.leftQuota = capacity;\n      this.leakingTs = System.currentTimeMillis();\n    }\n\n    void makeSpace() {\n      long nowTs = System.currentTimeMillis();\n      long deltaTs = nowTs - leakingTs;\n      int deltaQuota = (int) (deltaTs * leakingRate);\n      if (deltaQuota < 0) { // 间隔时间太长，整数数字过大溢出\n        this.leftQuota = capacity;\n        this.leakingTs = nowTs;\n        return;\n      }\n      if (deltaQuota < 1) { // 腾出空间太小，最小单位是1\n        return;\n      }\n      this.leftQuota += deltaQuota;\n      this.leakingTs = nowTs;\n      if (this.leftQuota > this.capacity) {\n        this.leftQuota = this.capacity;\n      }\n    }\n\n    boolean watering(int quota) {\n      makeSpace();\n      if (this.leftQuota >= quota) {\n        this.leftQuota -= quota;\n        return true;\n      }\n      return false;\n    }\n  }\n\n  private Map<String, Funnel> funnels = new HashMap<>();\n\n  public boolean isActionAllowed(String userId, String actionKey, int capacity, float leakingRate) {\n    String key = String.format(\"%s:%s\", userId, actionKey);\n    Funnel funnel = funnels.get(key);\n    if (funnel == null) {\n      funnel = new Funnel(capacity, leakingRate);\n      funnels.put(key, funnel);\n    }\n    return funnel.watering(1); // 需要1个quota\n  }\n}\n```\n\n","slug":"redis/限流","published":1,"updated":"2020-02-13T13:43:42.608Z","layout":"post","photos":[],"link":"","_id":"ck6lvszse0032n0zt7swpe7kv","content":"<h3 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h3><h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>可以使用zset的score值为时间戳，这样就可以通过score找到这个时间窗口，只保留这个时间窗口的值，其他的数据都可以砍掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SimpleRateLimiter &#123;</div><div class=\"line\"></div><div class=\"line\">  private Jedis jedis;</div><div class=\"line\"></div><div class=\"line\">  public SimpleRateLimiter(Jedis jedis) &#123;</div><div class=\"line\">    this.jedis = jedis;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public boolean isActionAllowed(String userId, String actionKey, int period, int maxCount) &#123;</div><div class=\"line\">    String key = String.format(&quot;hist:%s:%s&quot;, userId, actionKey);</div><div class=\"line\">    long nowTs = System.currentTimeMillis();</div><div class=\"line\">    Pipeline pipe = jedis.pipelined();</div><div class=\"line\">    pipe.multi();</div><div class=\"line\">    pipe.zadd(key, nowTs, &quot;&quot; + nowTs);</div><div class=\"line\">    pipe.zremrangeByScore(key, 0, nowTs - period * 1000);</div><div class=\"line\">    Response&lt;Long&gt; count = pipe.zcard(key);</div><div class=\"line\">    pipe.expire(key, period + 1);</div><div class=\"line\">    pipe.exec();</div><div class=\"line\">    pipe.close();</div><div class=\"line\">    return count.get() &lt;= maxCount;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public static void main(String[] args) &#123;</div><div class=\"line\">    Jedis jedis = new Jedis();</div><div class=\"line\">    SimpleRateLimiter limiter = new SimpleRateLimiter(jedis);</div><div class=\"line\">    for(int i=0;i&lt;20;i++) &#123;</div><div class=\"line\">      System.out.println(limiter.isActionAllowed(&quot;laoqian&quot;, &quot;reply&quot;, 60, 5));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"漏斗限流\"><a href=\"#漏斗限流\" class=\"headerlink\" title=\"漏斗限流\"></a>漏斗限流</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class FunnelRateLimiter &#123;</div><div class=\"line\"></div><div class=\"line\">  static class Funnel &#123;</div><div class=\"line\">    int capacity;</div><div class=\"line\">    float leakingRate;</div><div class=\"line\">    int leftQuota;</div><div class=\"line\">    long leakingTs;</div><div class=\"line\"></div><div class=\"line\">    public Funnel(int capacity, float leakingRate) &#123;</div><div class=\"line\">      this.capacity = capacity;</div><div class=\"line\">      this.leakingRate = leakingRate;</div><div class=\"line\">      this.leftQuota = capacity;</div><div class=\"line\">      this.leakingTs = System.currentTimeMillis();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void makeSpace() &#123;</div><div class=\"line\">      long nowTs = System.currentTimeMillis();</div><div class=\"line\">      long deltaTs = nowTs - leakingTs;</div><div class=\"line\">      int deltaQuota = (int) (deltaTs * leakingRate);</div><div class=\"line\">      if (deltaQuota &lt; 0) &#123; // 间隔时间太长，整数数字过大溢出</div><div class=\"line\">        this.leftQuota = capacity;</div><div class=\"line\">        this.leakingTs = nowTs;</div><div class=\"line\">        return;</div><div class=\"line\">      &#125;</div><div class=\"line\">      if (deltaQuota &lt; 1) &#123; // 腾出空间太小，最小单位是1</div><div class=\"line\">        return;</div><div class=\"line\">      &#125;</div><div class=\"line\">      this.leftQuota += deltaQuota;</div><div class=\"line\">      this.leakingTs = nowTs;</div><div class=\"line\">      if (this.leftQuota &gt; this.capacity) &#123;</div><div class=\"line\">        this.leftQuota = this.capacity;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boolean watering(int quota) &#123;</div><div class=\"line\">      makeSpace();</div><div class=\"line\">      if (this.leftQuota &gt;= quota) &#123;</div><div class=\"line\">        this.leftQuota -= quota;</div><div class=\"line\">        return true;</div><div class=\"line\">      &#125;</div><div class=\"line\">      return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private Map&lt;String, Funnel&gt; funnels = new HashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">  public boolean isActionAllowed(String userId, String actionKey, int capacity, float leakingRate) &#123;</div><div class=\"line\">    String key = String.format(&quot;%s:%s&quot;, userId, actionKey);</div><div class=\"line\">    Funnel funnel = funnels.get(key);</div><div class=\"line\">    if (funnel == null) &#123;</div><div class=\"line\">      funnel = new Funnel(capacity, leakingRate);</div><div class=\"line\">      funnels.put(key, funnel);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return funnel.watering(1); // 需要1个quota</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"限流\"><a href=\"#限流\" class=\"headerlink\" title=\"限流\"></a>限流</h3><h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>可以使用zset的score值为时间戳，这样就可以通过score找到这个时间窗口，只保留这个时间窗口的值，其他的数据都可以砍掉。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class SimpleRateLimiter &#123;</div><div class=\"line\"></div><div class=\"line\">  private Jedis jedis;</div><div class=\"line\"></div><div class=\"line\">  public SimpleRateLimiter(Jedis jedis) &#123;</div><div class=\"line\">    this.jedis = jedis;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public boolean isActionAllowed(String userId, String actionKey, int period, int maxCount) &#123;</div><div class=\"line\">    String key = String.format(&quot;hist:%s:%s&quot;, userId, actionKey);</div><div class=\"line\">    long nowTs = System.currentTimeMillis();</div><div class=\"line\">    Pipeline pipe = jedis.pipelined();</div><div class=\"line\">    pipe.multi();</div><div class=\"line\">    pipe.zadd(key, nowTs, &quot;&quot; + nowTs);</div><div class=\"line\">    pipe.zremrangeByScore(key, 0, nowTs - period * 1000);</div><div class=\"line\">    Response&lt;Long&gt; count = pipe.zcard(key);</div><div class=\"line\">    pipe.expire(key, period + 1);</div><div class=\"line\">    pipe.exec();</div><div class=\"line\">    pipe.close();</div><div class=\"line\">    return count.get() &lt;= maxCount;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  public static void main(String[] args) &#123;</div><div class=\"line\">    Jedis jedis = new Jedis();</div><div class=\"line\">    SimpleRateLimiter limiter = new SimpleRateLimiter(jedis);</div><div class=\"line\">    for(int i=0;i&lt;20;i++) &#123;</div><div class=\"line\">      System.out.println(limiter.isActionAllowed(&quot;laoqian&quot;, &quot;reply&quot;, 60, 5));</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"漏斗限流\"><a href=\"#漏斗限流\" class=\"headerlink\" title=\"漏斗限流\"></a>漏斗限流</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class FunnelRateLimiter &#123;</div><div class=\"line\"></div><div class=\"line\">  static class Funnel &#123;</div><div class=\"line\">    int capacity;</div><div class=\"line\">    float leakingRate;</div><div class=\"line\">    int leftQuota;</div><div class=\"line\">    long leakingTs;</div><div class=\"line\"></div><div class=\"line\">    public Funnel(int capacity, float leakingRate) &#123;</div><div class=\"line\">      this.capacity = capacity;</div><div class=\"line\">      this.leakingRate = leakingRate;</div><div class=\"line\">      this.leftQuota = capacity;</div><div class=\"line\">      this.leakingTs = System.currentTimeMillis();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    void makeSpace() &#123;</div><div class=\"line\">      long nowTs = System.currentTimeMillis();</div><div class=\"line\">      long deltaTs = nowTs - leakingTs;</div><div class=\"line\">      int deltaQuota = (int) (deltaTs * leakingRate);</div><div class=\"line\">      if (deltaQuota &lt; 0) &#123; // 间隔时间太长，整数数字过大溢出</div><div class=\"line\">        this.leftQuota = capacity;</div><div class=\"line\">        this.leakingTs = nowTs;</div><div class=\"line\">        return;</div><div class=\"line\">      &#125;</div><div class=\"line\">      if (deltaQuota &lt; 1) &#123; // 腾出空间太小，最小单位是1</div><div class=\"line\">        return;</div><div class=\"line\">      &#125;</div><div class=\"line\">      this.leftQuota += deltaQuota;</div><div class=\"line\">      this.leakingTs = nowTs;</div><div class=\"line\">      if (this.leftQuota &gt; this.capacity) &#123;</div><div class=\"line\">        this.leftQuota = this.capacity;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    boolean watering(int quota) &#123;</div><div class=\"line\">      makeSpace();</div><div class=\"line\">      if (this.leftQuota &gt;= quota) &#123;</div><div class=\"line\">        this.leftQuota -= quota;</div><div class=\"line\">        return true;</div><div class=\"line\">      &#125;</div><div class=\"line\">      return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  private Map&lt;String, Funnel&gt; funnels = new HashMap&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">  public boolean isActionAllowed(String userId, String actionKey, int capacity, float leakingRate) &#123;</div><div class=\"line\">    String key = String.format(&quot;%s:%s&quot;, userId, actionKey);</div><div class=\"line\">    Funnel funnel = funnels.get(key);</div><div class=\"line\">    if (funnel == null) &#123;</div><div class=\"line\">      funnel = new Funnel(capacity, leakingRate);</div><div class=\"line\">      funnels.put(key, funnel);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return funnel.watering(1); // 需要1个quota</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Spring——AOP","date":"2020-01-06T13:20:00.000Z","comments":0,"keywords":["java","spring","aop"],"_content":"\n### Spring——AOP\n\n#### AOP\n\nAOP(Aspect Oriented Programming) 面向切面编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注点，如事务管理、日志、缓存等等。AOP实现的关键在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理。\n\n##### 静态代理\n\n###### AspectJ静态代理\n\nAspectJ 是一个java实现的面向切面的框架，它扩展了java语言，有定义的语法，因此它有一个专门的编译器来生成遵守java字节编码规范的Class文件。\n\n使用AspectJ可以引入依赖：\n```\n<dependency>\n  <groupId>org.aspectj</groupId>\n  <artifactId>aspectjrt</artifactId>\n  <version>1.8.9</version>\n</dependency>\n<dependency>\n  <groupId>org.aspectj</groupId>\n  <artifactId>aspectjtools</artifactId>\n  <version>1.8.9</version>\n</dependency>\n```\n\n编写一个普通类\n\n```\npublic class Hello {\n    public void sayHello() {\n        System.out.println(\"hello\");\n    }\n\n    public static void main(String[] args) {\n        Hello h = new Hello();\n        h.sayHello();\n    }\n}\n```\n\n使用AspectJ编写Aspect\n\n```\npublic aspect TxAspect {\n    void around():call(void Hello.sayHello()){\n        System.out.println(\"start\");\n        proceed();\n        System.out.println(\"\");\n    }\n}\n```\n\n> AspectJ编译使用 ajc\n\n上面代码会输出：\n\n```\nstart\nhello\nend\n```\n\n可以看出AOP已经生效，在没有修改Hello类的情况下就为Hello类增加了新功能。\n\n编译后的Hello类如下：\n\n```\npublic class Hello {\n    public Hello() {\n    }\n\n    public void sayHello() {\n        System.out.println(\"hello\");\n    }\n\n    public static void main(String[] args) {\n        Hello h = new Hello();\n        sayHello_aroundBody1$advice(h, TxAspect.aspectOf(), (AroundClosure)null);\n    }\n}\n```\n\nAspectJ的静态代理会在编译阶段将Aspect写入Java字节码中，运行的时候就是经过增强的AOP对象。\n\n###### JDK静态代理\n\nJDK的静态代理更多的是一种设计模式，JDK静态代理的代理类和委托类会实现同一接口或继承自相同的类。\n\n具体例子可以参看：[代理模式](http://fk5431.com/20170803/Design_pattern/15_proxy/)\n\n##### 动态代理\n\n动态代理是在程序运行期间由JVM根据反射等机制动态生成的\n\n###### JDK动态代理\n\nJDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。\n\n具体例子可以参看：[代理模式](http://fk5431.com/20170803/Design_pattern/15_proxy/)\n\n###### CGLIB动态代理\n\nJDK动态代理要求某个类必须有实现的接口，而生成的代理类也智能代理某个类接口定义的方法。如果某个类没有实现接口，就不能使用JDK产生动态代理了。\n\ncglib（Code Generation Library）是一个强大、高性能、高质量的Code生成类库，可以在运行期扩展Java类和实现Java接口。\n\ncglib创建某个类的动态代理类的模式是：\n1. 查找类上所有非final的public类型的方法定义。\n2. 将这些方法的定义转换成字节码。\n3. 将组成的字节码转换成相应的代理的class对象。\n4. 实现MethodInterceptor接口，用来处理对代理类上所有方法的请求（和JDK动态代理的InvocationHandler的功能一样）。\n\n定义一个简单的类：\n\n```\npublic class RealImage  {\n    private String fileName;\n\n    public RealImage() {\n    }\n\n    public void dispalay() {\n        System.out.println(\"Displaying \");\n    }\n}\n```\n\n实现MethodInterceptor：\n\n```\npublic class MethodInterceptorImpl implements MethodInterceptor {\n    @Override\n    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        System.out.println(\"proxy before\");\n        Object invoke = methodProxy.invokeSuper(o, objects);\n        System.out.println(\"proxy after\");\n        return invoke;\n    }\n}\n```\n代理类测试：\n\n```\npublic class CglibProxyDemo {\n\n    public static void main(String[] args) {\n        RealImage image = new RealImage();\n        MethodInterceptor interceptor = new MethodInterceptorImpl();\n\n        //cglib 中加强器，用来创建动态代理\n        Enhancer enhancer = new Enhancer();\n        //设置要创建动态代理的类\n        enhancer.setSuperclass(image.getClass());\n        // 设置回调，这里相当于是对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实行intercept()方法进行拦截\n        enhancer.setCallback(interceptor);\n        RealImage proxyImage = (RealImage) enhancer.create();\n        proxyImage.dispalay();\n    }\n}\n```\n\n输出\n\n```\nproxy before\nDisplaying \nproxy after\n```\n\n通过以上实例可以看出，Cglib通过继承实现动态代理，具体类不需要实现特定的接口，而且代理类可以调用具体类的非接口方法，更加灵活。\n\n#### Spring AOP\n\nSpring AOP采用的是动态代理，在运行期间对业务方法进行增强，不会生成新类，Spring的动态代理提供了对JDK动态代理和cglib的支持：\n\n1. 如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。\n2. 如果目标对象实现了接口，可以强制使用cglib实现AOP。\n3. 如果目标对象没有实现了接口，必须采用cglib。\n\n> Spring AOP 基于注解配置的情况下，需要依赖于AspectJ包的标准注解，但不需要额外的编译以及AspectJ的织入器，而基于XMl配置不需要，所以Spring AOP只是复用了AspectJ的注解，并没有其他依赖AspectJ的地方。\n\n强制使用cglib 可以在配置文件中配置：\n```\n<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n```\n\n","source":"_posts/spring/aop.md","raw":"---\ntitle: Spring——AOP\ndate: 2020-01-06 21:20\ncomments: false\ntags: \n- java\n- spring\n- aop\ncategories: \n- spring\nkeywords: \n- java\n- spring\n- aop\n---\n\n### Spring——AOP\n\n#### AOP\n\nAOP(Aspect Oriented Programming) 面向切面编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注点，如事务管理、日志、缓存等等。AOP实现的关键在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理。\n\n##### 静态代理\n\n###### AspectJ静态代理\n\nAspectJ 是一个java实现的面向切面的框架，它扩展了java语言，有定义的语法，因此它有一个专门的编译器来生成遵守java字节编码规范的Class文件。\n\n使用AspectJ可以引入依赖：\n```\n<dependency>\n  <groupId>org.aspectj</groupId>\n  <artifactId>aspectjrt</artifactId>\n  <version>1.8.9</version>\n</dependency>\n<dependency>\n  <groupId>org.aspectj</groupId>\n  <artifactId>aspectjtools</artifactId>\n  <version>1.8.9</version>\n</dependency>\n```\n\n编写一个普通类\n\n```\npublic class Hello {\n    public void sayHello() {\n        System.out.println(\"hello\");\n    }\n\n    public static void main(String[] args) {\n        Hello h = new Hello();\n        h.sayHello();\n    }\n}\n```\n\n使用AspectJ编写Aspect\n\n```\npublic aspect TxAspect {\n    void around():call(void Hello.sayHello()){\n        System.out.println(\"start\");\n        proceed();\n        System.out.println(\"\");\n    }\n}\n```\n\n> AspectJ编译使用 ajc\n\n上面代码会输出：\n\n```\nstart\nhello\nend\n```\n\n可以看出AOP已经生效，在没有修改Hello类的情况下就为Hello类增加了新功能。\n\n编译后的Hello类如下：\n\n```\npublic class Hello {\n    public Hello() {\n    }\n\n    public void sayHello() {\n        System.out.println(\"hello\");\n    }\n\n    public static void main(String[] args) {\n        Hello h = new Hello();\n        sayHello_aroundBody1$advice(h, TxAspect.aspectOf(), (AroundClosure)null);\n    }\n}\n```\n\nAspectJ的静态代理会在编译阶段将Aspect写入Java字节码中，运行的时候就是经过增强的AOP对象。\n\n###### JDK静态代理\n\nJDK的静态代理更多的是一种设计模式，JDK静态代理的代理类和委托类会实现同一接口或继承自相同的类。\n\n具体例子可以参看：[代理模式](http://fk5431.com/20170803/Design_pattern/15_proxy/)\n\n##### 动态代理\n\n动态代理是在程序运行期间由JVM根据反射等机制动态生成的\n\n###### JDK动态代理\n\nJDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。\n\n具体例子可以参看：[代理模式](http://fk5431.com/20170803/Design_pattern/15_proxy/)\n\n###### CGLIB动态代理\n\nJDK动态代理要求某个类必须有实现的接口，而生成的代理类也智能代理某个类接口定义的方法。如果某个类没有实现接口，就不能使用JDK产生动态代理了。\n\ncglib（Code Generation Library）是一个强大、高性能、高质量的Code生成类库，可以在运行期扩展Java类和实现Java接口。\n\ncglib创建某个类的动态代理类的模式是：\n1. 查找类上所有非final的public类型的方法定义。\n2. 将这些方法的定义转换成字节码。\n3. 将组成的字节码转换成相应的代理的class对象。\n4. 实现MethodInterceptor接口，用来处理对代理类上所有方法的请求（和JDK动态代理的InvocationHandler的功能一样）。\n\n定义一个简单的类：\n\n```\npublic class RealImage  {\n    private String fileName;\n\n    public RealImage() {\n    }\n\n    public void dispalay() {\n        System.out.println(\"Displaying \");\n    }\n}\n```\n\n实现MethodInterceptor：\n\n```\npublic class MethodInterceptorImpl implements MethodInterceptor {\n    @Override\n    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n        System.out.println(\"proxy before\");\n        Object invoke = methodProxy.invokeSuper(o, objects);\n        System.out.println(\"proxy after\");\n        return invoke;\n    }\n}\n```\n代理类测试：\n\n```\npublic class CglibProxyDemo {\n\n    public static void main(String[] args) {\n        RealImage image = new RealImage();\n        MethodInterceptor interceptor = new MethodInterceptorImpl();\n\n        //cglib 中加强器，用来创建动态代理\n        Enhancer enhancer = new Enhancer();\n        //设置要创建动态代理的类\n        enhancer.setSuperclass(image.getClass());\n        // 设置回调，这里相当于是对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实行intercept()方法进行拦截\n        enhancer.setCallback(interceptor);\n        RealImage proxyImage = (RealImage) enhancer.create();\n        proxyImage.dispalay();\n    }\n}\n```\n\n输出\n\n```\nproxy before\nDisplaying \nproxy after\n```\n\n通过以上实例可以看出，Cglib通过继承实现动态代理，具体类不需要实现特定的接口，而且代理类可以调用具体类的非接口方法，更加灵活。\n\n#### Spring AOP\n\nSpring AOP采用的是动态代理，在运行期间对业务方法进行增强，不会生成新类，Spring的动态代理提供了对JDK动态代理和cglib的支持：\n\n1. 如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。\n2. 如果目标对象实现了接口，可以强制使用cglib实现AOP。\n3. 如果目标对象没有实现了接口，必须采用cglib。\n\n> Spring AOP 基于注解配置的情况下，需要依赖于AspectJ包的标准注解，但不需要额外的编译以及AspectJ的织入器，而基于XMl配置不需要，所以Spring AOP只是复用了AspectJ的注解，并没有其他依赖AspectJ的地方。\n\n强制使用cglib 可以在配置文件中配置：\n```\n<aop:aspectj-autoproxy proxy-target-class=\"true\"/>\n```\n\n","slug":"spring/aop","published":1,"updated":"2020-01-09T06:56:08.743Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsf0034n0ztgqqw1umm","content":"<h3 id=\"Spring——AOP\"><a href=\"#Spring——AOP\" class=\"headerlink\" title=\"Spring——AOP\"></a>Spring——AOP</h3><h4 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h4><p>AOP(Aspect Oriented Programming) 面向切面编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注点，如事务管理、日志、缓存等等。AOP实现的关键在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理。</p>\n<h5 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h5><h6 id=\"AspectJ静态代理\"><a href=\"#AspectJ静态代理\" class=\"headerlink\" title=\"AspectJ静态代理\"></a>AspectJ静态代理</h6><p>AspectJ 是一个java实现的面向切面的框架，它扩展了java语言，有定义的语法，因此它有一个专门的编译器来生成遵守java字节编码规范的Class文件。</p>\n<p>使用AspectJ可以引入依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</div><div class=\"line\">  &lt;version&gt;1.8.9&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;aspectjtools&lt;/artifactId&gt;</div><div class=\"line\">  &lt;version&gt;1.8.9&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n<p>编写一个普通类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Hello &#123;</div><div class=\"line\">    public void sayHello() &#123;</div><div class=\"line\">        System.out.println(&quot;hello&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Hello h = new Hello();</div><div class=\"line\">        h.sayHello();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用AspectJ编写Aspect</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public aspect TxAspect &#123;</div><div class=\"line\">    void around():call(void Hello.sayHello())&#123;</div><div class=\"line\">        System.out.println(&quot;start&quot;);</div><div class=\"line\">        proceed();</div><div class=\"line\">        System.out.println(&quot;&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>AspectJ编译使用 ajc</p>\n</blockquote>\n<p>上面代码会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">start</div><div class=\"line\">hello</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>可以看出AOP已经生效，在没有修改Hello类的情况下就为Hello类增加了新功能。</p>\n<p>编译后的Hello类如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Hello &#123;</div><div class=\"line\">    public Hello() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void sayHello() &#123;</div><div class=\"line\">        System.out.println(&quot;hello&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Hello h = new Hello();</div><div class=\"line\">        sayHello_aroundBody1$advice(h, TxAspect.aspectOf(), (AroundClosure)null);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AspectJ的静态代理会在编译阶段将Aspect写入Java字节码中，运行的时候就是经过增强的AOP对象。</p>\n<h6 id=\"JDK静态代理\"><a href=\"#JDK静态代理\" class=\"headerlink\" title=\"JDK静态代理\"></a>JDK静态代理</h6><p>JDK的静态代理更多的是一种设计模式，JDK静态代理的代理类和委托类会实现同一接口或继承自相同的类。</p>\n<p>具体例子可以参看：<a href=\"http://fk5431.com/20170803/Design_pattern/15_proxy/\" target=\"_blank\" rel=\"external\">代理模式</a></p>\n<h5 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h5><p>动态代理是在程序运行期间由JVM根据反射等机制动态生成的</p>\n<h6 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h6><p>JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p>\n<p>具体例子可以参看：<a href=\"http://fk5431.com/20170803/Design_pattern/15_proxy/\" target=\"_blank\" rel=\"external\">代理模式</a></p>\n<h6 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h6><p>JDK动态代理要求某个类必须有实现的接口，而生成的代理类也智能代理某个类接口定义的方法。如果某个类没有实现接口，就不能使用JDK产生动态代理了。</p>\n<p>cglib（Code Generation Library）是一个强大、高性能、高质量的Code生成类库，可以在运行期扩展Java类和实现Java接口。</p>\n<p>cglib创建某个类的动态代理类的模式是：</p>\n<ol>\n<li>查找类上所有非final的public类型的方法定义。</li>\n<li>将这些方法的定义转换成字节码。</li>\n<li>将组成的字节码转换成相应的代理的class对象。</li>\n<li>实现MethodInterceptor接口，用来处理对代理类上所有方法的请求（和JDK动态代理的InvocationHandler的功能一样）。</li>\n</ol>\n<p>定义一个简单的类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RealImage  &#123;</div><div class=\"line\">    private String fileName;</div><div class=\"line\"></div><div class=\"line\">    public RealImage() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void dispalay() &#123;</div><div class=\"line\">        System.out.println(&quot;Displaying &quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现MethodInterceptor：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MethodInterceptorImpl implements MethodInterceptor &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</div><div class=\"line\">        System.out.println(&quot;proxy before&quot;);</div><div class=\"line\">        Object invoke = methodProxy.invokeSuper(o, objects);</div><div class=\"line\">        System.out.println(&quot;proxy after&quot;);</div><div class=\"line\">        return invoke;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代理类测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CglibProxyDemo &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        RealImage image = new RealImage();</div><div class=\"line\">        MethodInterceptor interceptor = new MethodInterceptorImpl();</div><div class=\"line\"></div><div class=\"line\">        //cglib 中加强器，用来创建动态代理</div><div class=\"line\">        Enhancer enhancer = new Enhancer();</div><div class=\"line\">        //设置要创建动态代理的类</div><div class=\"line\">        enhancer.setSuperclass(image.getClass());</div><div class=\"line\">        // 设置回调，这里相当于是对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实行intercept()方法进行拦截</div><div class=\"line\">        enhancer.setCallback(interceptor);</div><div class=\"line\">        RealImage proxyImage = (RealImage) enhancer.create();</div><div class=\"line\">        proxyImage.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">proxy before</div><div class=\"line\">Displaying </div><div class=\"line\">proxy after</div></pre></td></tr></table></figure>\n<p>通过以上实例可以看出，Cglib通过继承实现动态代理，具体类不需要实现特定的接口，而且代理类可以调用具体类的非接口方法，更加灵活。</p>\n<h4 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h4><p>Spring AOP采用的是动态代理，在运行期间对业务方法进行增强，不会生成新类，Spring的动态代理提供了对JDK动态代理和cglib的支持：</p>\n<ol>\n<li>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。</li>\n<li>如果目标对象实现了接口，可以强制使用cglib实现AOP。</li>\n<li>如果目标对象没有实现了接口，必须采用cglib。</li>\n</ol>\n<blockquote>\n<p>Spring AOP 基于注解配置的情况下，需要依赖于AspectJ包的标准注解，但不需要额外的编译以及AspectJ的织入器，而基于XMl配置不需要，所以Spring AOP只是复用了AspectJ的注解，并没有其他依赖AspectJ的地方。</p>\n</blockquote>\n<p>强制使用cglib 可以在配置文件中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Spring——AOP\"><a href=\"#Spring——AOP\" class=\"headerlink\" title=\"Spring——AOP\"></a>Spring——AOP</h3><h4 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h4><p>AOP(Aspect Oriented Programming) 面向切面编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注点，如事务管理、日志、缓存等等。AOP实现的关键在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理。</p>\n<h5 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h5><h6 id=\"AspectJ静态代理\"><a href=\"#AspectJ静态代理\" class=\"headerlink\" title=\"AspectJ静态代理\"></a>AspectJ静态代理</h6><p>AspectJ 是一个java实现的面向切面的框架，它扩展了java语言，有定义的语法，因此它有一个专门的编译器来生成遵守java字节编码规范的Class文件。</p>\n<p>使用AspectJ可以引入依赖：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;</div><div class=\"line\">  &lt;version&gt;1.8.9&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</div><div class=\"line\">  &lt;artifactId&gt;aspectjtools&lt;/artifactId&gt;</div><div class=\"line\">  &lt;version&gt;1.8.9&lt;/version&gt;</div><div class=\"line\">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>\n<p>编写一个普通类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Hello &#123;</div><div class=\"line\">    public void sayHello() &#123;</div><div class=\"line\">        System.out.println(&quot;hello&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Hello h = new Hello();</div><div class=\"line\">        h.sayHello();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用AspectJ编写Aspect</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public aspect TxAspect &#123;</div><div class=\"line\">    void around():call(void Hello.sayHello())&#123;</div><div class=\"line\">        System.out.println(&quot;start&quot;);</div><div class=\"line\">        proceed();</div><div class=\"line\">        System.out.println(&quot;&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>AspectJ编译使用 ajc</p>\n</blockquote>\n<p>上面代码会输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">start</div><div class=\"line\">hello</div><div class=\"line\">end</div></pre></td></tr></table></figure>\n<p>可以看出AOP已经生效，在没有修改Hello类的情况下就为Hello类增加了新功能。</p>\n<p>编译后的Hello类如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Hello &#123;</div><div class=\"line\">    public Hello() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void sayHello() &#123;</div><div class=\"line\">        System.out.println(&quot;hello&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Hello h = new Hello();</div><div class=\"line\">        sayHello_aroundBody1$advice(h, TxAspect.aspectOf(), (AroundClosure)null);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>AspectJ的静态代理会在编译阶段将Aspect写入Java字节码中，运行的时候就是经过增强的AOP对象。</p>\n<h6 id=\"JDK静态代理\"><a href=\"#JDK静态代理\" class=\"headerlink\" title=\"JDK静态代理\"></a>JDK静态代理</h6><p>JDK的静态代理更多的是一种设计模式，JDK静态代理的代理类和委托类会实现同一接口或继承自相同的类。</p>\n<p>具体例子可以参看：<a href=\"http://fk5431.com/20170803/Design_pattern/15_proxy/\">代理模式</a></p>\n<h5 id=\"动态代理\"><a href=\"#动态代理\" class=\"headerlink\" title=\"动态代理\"></a>动态代理</h5><p>动态代理是在程序运行期间由JVM根据反射等机制动态生成的</p>\n<h6 id=\"JDK动态代理\"><a href=\"#JDK动态代理\" class=\"headerlink\" title=\"JDK动态代理\"></a>JDK动态代理</h6><p>JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。JDK动态代理的核心是InvocationHandler接口和Proxy类。</p>\n<p>具体例子可以参看：<a href=\"http://fk5431.com/20170803/Design_pattern/15_proxy/\">代理模式</a></p>\n<h6 id=\"CGLIB动态代理\"><a href=\"#CGLIB动态代理\" class=\"headerlink\" title=\"CGLIB动态代理\"></a>CGLIB动态代理</h6><p>JDK动态代理要求某个类必须有实现的接口，而生成的代理类也智能代理某个类接口定义的方法。如果某个类没有实现接口，就不能使用JDK产生动态代理了。</p>\n<p>cglib（Code Generation Library）是一个强大、高性能、高质量的Code生成类库，可以在运行期扩展Java类和实现Java接口。</p>\n<p>cglib创建某个类的动态代理类的模式是：</p>\n<ol>\n<li>查找类上所有非final的public类型的方法定义。</li>\n<li>将这些方法的定义转换成字节码。</li>\n<li>将组成的字节码转换成相应的代理的class对象。</li>\n<li>实现MethodInterceptor接口，用来处理对代理类上所有方法的请求（和JDK动态代理的InvocationHandler的功能一样）。</li>\n</ol>\n<p>定义一个简单的类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class RealImage  &#123;</div><div class=\"line\">    private String fileName;</div><div class=\"line\"></div><div class=\"line\">    public RealImage() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void dispalay() &#123;</div><div class=\"line\">        System.out.println(&quot;Displaying &quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>实现MethodInterceptor：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class MethodInterceptorImpl implements MethodInterceptor &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</div><div class=\"line\">        System.out.println(&quot;proxy before&quot;);</div><div class=\"line\">        Object invoke = methodProxy.invokeSuper(o, objects);</div><div class=\"line\">        System.out.println(&quot;proxy after&quot;);</div><div class=\"line\">        return invoke;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代理类测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class CglibProxyDemo &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        RealImage image = new RealImage();</div><div class=\"line\">        MethodInterceptor interceptor = new MethodInterceptorImpl();</div><div class=\"line\"></div><div class=\"line\">        //cglib 中加强器，用来创建动态代理</div><div class=\"line\">        Enhancer enhancer = new Enhancer();</div><div class=\"line\">        //设置要创建动态代理的类</div><div class=\"line\">        enhancer.setSuperclass(image.getClass());</div><div class=\"line\">        // 设置回调，这里相当于是对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实行intercept()方法进行拦截</div><div class=\"line\">        enhancer.setCallback(interceptor);</div><div class=\"line\">        RealImage proxyImage = (RealImage) enhancer.create();</div><div class=\"line\">        proxyImage.dispalay();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">proxy before</div><div class=\"line\">Displaying </div><div class=\"line\">proxy after</div></pre></td></tr></table></figure>\n<p>通过以上实例可以看出，Cglib通过继承实现动态代理，具体类不需要实现特定的接口，而且代理类可以调用具体类的非接口方法，更加灵活。</p>\n<h4 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h4><p>Spring AOP采用的是动态代理，在运行期间对业务方法进行增强，不会生成新类，Spring的动态代理提供了对JDK动态代理和cglib的支持：</p>\n<ol>\n<li>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP。</li>\n<li>如果目标对象实现了接口，可以强制使用cglib实现AOP。</li>\n<li>如果目标对象没有实现了接口，必须采用cglib。</li>\n</ol>\n<blockquote>\n<p>Spring AOP 基于注解配置的情况下，需要依赖于AspectJ包的标准注解，但不需要额外的编译以及AspectJ的织入器，而基于XMl配置不需要，所以Spring AOP只是复用了AspectJ的注解，并没有其他依赖AspectJ的地方。</p>\n</blockquote>\n<p>强制使用cglib 可以在配置文件中配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p>\n"},{"title":"Spring——IoC的理解","date":"2019-12-28T03:29:00.000Z","comments":0,"keywords":["java","spring","IoC"],"_content":"\n### IoC\n\nIoC即Inversion of Control，是控制反转的意思：所谓IoC，就是由spring IoC容器来负责对象的生命周期和对象之间的关系。\nSpring通过一个配置文件描述Bean及Bean之间的关系，利用Java的反射实例化Bean并建立Bean之间的依赖关系。Spring的Ioc容易在完成基础工作上，还提供了Bean实例缓存、生命周期管理、Bean实例化、事件发布、资源装载等服务。\n\n#### IoC容器\n\n对于spring-IoC来说，最重要的就是容器。容器管理着Bean的生命周期，控制着Bean的依赖注入。\nspring启动时会读取程序中提供的Bean配置信息，然后在容器中生成一份相应的Bean配置的注册表，根据这份注册表实例化Bean，装配好Bean之间的关系。\n\n![容器](../../../uploads/spring/ioc/1.jpg)\n\n#### 主要实现（BeanFactory/ApplicationContext）\n\nBeanFactory是spring框架的基础设施面向spring（低级容器）；ApplicationContext面向spring使用者，提供了更多的功能（高级容器）。\n\n![容器](../../../uploads/spring/ioc/2.png)\n\n通过常用的ClassPathXmlApplicationContext来展示整个容易的XML类图如上所示，像BeanFactory、HierarchicalBeanFactory、ListableBeanFactory、XMLBeanFactory这些都属于低级容器，ApplicationContext和它的实现都是高级容器。\n可以看出ApplicationContext不仅仅实现了BeanFactory的功能，还实现了ResourceLoader、MessageSource、ApplicationEventPublisher、EnvironmentCapable，所以ApplicationContext除了BeanFactory提供的功能以外，还支持：\n\n- 默认初始化所有的Singleton，也可以通过配置取消预初始化。\n- 继承MessageSource，因此支持国际化。\n- 资源访问，比如访问URL和文件。\n- 事件机制。\n- 同时加载多个配置文件。\n- 以声明式方式启动并创建Spring容器。\n\n所以，可以说ApplicationContext是高级容器，依赖着低级容器的getBean的功能，并提供了更多的额外功能。\n\n下面是一些主要类（低级容器）的功能：\n\n- BeanDefinitionRegistry（注册表）:spring配置文件中每一个节点元素在spring容器中都通过一个BeanDefinition对象表示，它描述了Bean的配置信息。而BeanDefinitionRegistry接口提供了向容器注册BeanDefinition对象的方法。\n- BeanFactory（顶层接口）:它最主要的方法就是getBean(String beanName)，该方法从容器中返回特定名称的Bean，BeanFactory的功能通过其他的接口得到不断扩展。\n- ListableBeanFactory:该接口提供了访问容器内Bean基本信息的一些方法，如查看Bean的个数、获取某一类型Bean的配置名、查看容器中是否包括某一Bean等方法。\n- HierarchicalBeanFactory（父子级联）:子容器可以通过该接口访问父容器；通过HierarchicalBeanFactory，Spring的IoC容器可以建立父子层级关联的容器体系，子容器可以访问父容器中的Bean，但父容器不能访问子容器的Bean。\n- ConfigurableBeanFactory: 增强了IoC容器的可定制性，它定义了设置类装载器、属性编辑器、容器初始化后置处理器等方法.\n- AutowireCapableBeanFactory（自动装配）:定义了将容器中的Bean按某种规则(如按名字匹配、按类型匹配等)进行自动装配的方法。\n- SingletonBeanRegistry:定义了允许在运行期间向容器注册单实例Bean的方法；对于单实例(singleton)的Bean来说，BeanFactory会缓存Bean实例，所以第二次使用getBean()获取Bean时将直接从IoC容器的缓存中获取Bean实例。Spring在DefaultSingletonBeanRegistry类中提供了一个用于缓存单实例Bean的缓存器，它是一个用HashMap实现的缓存器，单实例的Bean以beanName为键保存在这个HashMap中。\n\n#### Spring IoC初始化过程\n\nIoC容器初始化的过程基本如下图：\n\n![容器](../../../uploads/spring/ioc/3.jpg)\n\n1. 用户构造 ClassPathXmlApplicationContext。\n2. 访问高级容器（AbstractApplicationContext）的refresh方。此方法是模板方法，很多方法都让不同的实现类去实现，obtainFreshBeanFactory创建bean工厂回调低级容器的refreshBeanFactory方法，将所有的BeanDefinition 和 Properties加载到容器中。\n3. 低级容器加载后，高级容器会处理一些回调，例如Bean的后置处理器、注册监听器、发布事件、实例化单例Bean等。\n\n容器初始化之后，会使用getBean去获取Bean：\n\n![容器](../../../uploads/spring/ioc/4.jpeg)\n\ngetBean的操作都是在低级容器中进行的。\n当Bean_A依赖着Bean_B，而这个Bean_A在加载的时候，其配置的ref=\"Bean_B\"在解析的时候只是一个占位符，被放入了Bean_A的属性集合中，当调用getBean时，需要真正Bean_B注入到Bean_A内部时，就需要从容器中获取这个Bean_B，这里会产生递归。\n\n- 加载所有的Bean包装为BeanDefinition到容器中，如果Bean有依赖关系，则使用占位符先替代。\n- 在调用getBean的时候，会进行真正的依赖注入（如果碰到属性是ref的，就从容器中获取这个bean，然后注入到实例中）。\n\n#### Spring Bean的作用域\n\nSpring中Bean定义了5种作用域，分别为singleton（单例）、prototype（原型）、request、session和global session。\n\n1. singleton：单例模式，Spring中默认的作用域，在容器中只会存在一个共享的Bean实例，在多线程的情况下是不安全的。\n2. prototype：原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态。\n3. request：一次request会产生一个实例，在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该Bean仅在当前Http Request内有效,当前Http请求结束，该Bean实例也将会被销毁。\n4. session：在一次Http Session中，容器会返回该Bean的同一实例。\n5. global Session：在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效。\n\n#### Spring Bean的生命周期\n\nSpring Bean的生命周期有四个过程：实例化->属性赋值->初始化->销毁。但是Spring在对Bean管理的过程中，具体化了很多接口，完整的过程如下\n\n![容器](../../../uploads/spring/ioc/5.jpg)\n\n- postProcessBeanFactory：BeanFactoryPostProcessor的方法，允许使用者修改容器中的bean definitions，但是不能进行Bean的实例化（会导致依赖注入失败）。\n- postProcessBeforeInstantiation：InstantiationAwareBeanPostProcessorAdapter的方法，在Bean实例化之前调用，在Bean的构造函数之前。\n- postProcessPropertyValues：在属性中被设置到目标实例之前调用，可以完成对属性的各种操作，注解中元数据的解析。\n- setBeanName：如果这个Bean实现BeanNameAware接口，就会调用它的setBeanName方法。\n- setBeanFactory：如果这个Bean实现了BeanFactoryAware接口，就会调用它的setBeanFactory(BeanFactory)方法，这个参数传递的是Spring工厂本身。\n- setApplicationContext：如果这个Bean实现了ApplicationContext方法，则会调用它的setApplicationContext方法，传入的参数是Spring的上下文。\n- postProcessBeforeInitialization：如果这个Bean实现了BeanPostProcessor接口，会调用此方法。\n- afterPropertiesSet：InitializingBean的方法（如果实现会调用）。\n- init method：如果Bean在配置文件中配置了init-method属性，则会调用这个方法。\n- postProcessAfterInitialization：InstantiationAwareBeanPostProcessorAdapter的方法（如果实现会调用）。\n- destroy：Bean不在使用时，如果Bean实现了DiposibleBean接口，会执行此方法。\n- destroy-method：如果Bean在配置文件中配置了destroy-method属性，则会调用这个方法。\n\n这些过程也可以归为下面四个大过程：\n\n![容器](../../../uploads/spring/ioc/6.jpg)\n\n\n","source":"_posts/spring/ioc.md","raw":"---\ntitle: Spring——IoC的理解\ndate: 2019-12-28 11:29\ncomments: false\ntags: \n- java\n- spring\n- IoC\ncategories: \n- spring\nkeywords:\n- java\n- spring\n- IoC\n---\n\n### IoC\n\nIoC即Inversion of Control，是控制反转的意思：所谓IoC，就是由spring IoC容器来负责对象的生命周期和对象之间的关系。\nSpring通过一个配置文件描述Bean及Bean之间的关系，利用Java的反射实例化Bean并建立Bean之间的依赖关系。Spring的Ioc容易在完成基础工作上，还提供了Bean实例缓存、生命周期管理、Bean实例化、事件发布、资源装载等服务。\n\n#### IoC容器\n\n对于spring-IoC来说，最重要的就是容器。容器管理着Bean的生命周期，控制着Bean的依赖注入。\nspring启动时会读取程序中提供的Bean配置信息，然后在容器中生成一份相应的Bean配置的注册表，根据这份注册表实例化Bean，装配好Bean之间的关系。\n\n![容器](../../../uploads/spring/ioc/1.jpg)\n\n#### 主要实现（BeanFactory/ApplicationContext）\n\nBeanFactory是spring框架的基础设施面向spring（低级容器）；ApplicationContext面向spring使用者，提供了更多的功能（高级容器）。\n\n![容器](../../../uploads/spring/ioc/2.png)\n\n通过常用的ClassPathXmlApplicationContext来展示整个容易的XML类图如上所示，像BeanFactory、HierarchicalBeanFactory、ListableBeanFactory、XMLBeanFactory这些都属于低级容器，ApplicationContext和它的实现都是高级容器。\n可以看出ApplicationContext不仅仅实现了BeanFactory的功能，还实现了ResourceLoader、MessageSource、ApplicationEventPublisher、EnvironmentCapable，所以ApplicationContext除了BeanFactory提供的功能以外，还支持：\n\n- 默认初始化所有的Singleton，也可以通过配置取消预初始化。\n- 继承MessageSource，因此支持国际化。\n- 资源访问，比如访问URL和文件。\n- 事件机制。\n- 同时加载多个配置文件。\n- 以声明式方式启动并创建Spring容器。\n\n所以，可以说ApplicationContext是高级容器，依赖着低级容器的getBean的功能，并提供了更多的额外功能。\n\n下面是一些主要类（低级容器）的功能：\n\n- BeanDefinitionRegistry（注册表）:spring配置文件中每一个节点元素在spring容器中都通过一个BeanDefinition对象表示，它描述了Bean的配置信息。而BeanDefinitionRegistry接口提供了向容器注册BeanDefinition对象的方法。\n- BeanFactory（顶层接口）:它最主要的方法就是getBean(String beanName)，该方法从容器中返回特定名称的Bean，BeanFactory的功能通过其他的接口得到不断扩展。\n- ListableBeanFactory:该接口提供了访问容器内Bean基本信息的一些方法，如查看Bean的个数、获取某一类型Bean的配置名、查看容器中是否包括某一Bean等方法。\n- HierarchicalBeanFactory（父子级联）:子容器可以通过该接口访问父容器；通过HierarchicalBeanFactory，Spring的IoC容器可以建立父子层级关联的容器体系，子容器可以访问父容器中的Bean，但父容器不能访问子容器的Bean。\n- ConfigurableBeanFactory: 增强了IoC容器的可定制性，它定义了设置类装载器、属性编辑器、容器初始化后置处理器等方法.\n- AutowireCapableBeanFactory（自动装配）:定义了将容器中的Bean按某种规则(如按名字匹配、按类型匹配等)进行自动装配的方法。\n- SingletonBeanRegistry:定义了允许在运行期间向容器注册单实例Bean的方法；对于单实例(singleton)的Bean来说，BeanFactory会缓存Bean实例，所以第二次使用getBean()获取Bean时将直接从IoC容器的缓存中获取Bean实例。Spring在DefaultSingletonBeanRegistry类中提供了一个用于缓存单实例Bean的缓存器，它是一个用HashMap实现的缓存器，单实例的Bean以beanName为键保存在这个HashMap中。\n\n#### Spring IoC初始化过程\n\nIoC容器初始化的过程基本如下图：\n\n![容器](../../../uploads/spring/ioc/3.jpg)\n\n1. 用户构造 ClassPathXmlApplicationContext。\n2. 访问高级容器（AbstractApplicationContext）的refresh方。此方法是模板方法，很多方法都让不同的实现类去实现，obtainFreshBeanFactory创建bean工厂回调低级容器的refreshBeanFactory方法，将所有的BeanDefinition 和 Properties加载到容器中。\n3. 低级容器加载后，高级容器会处理一些回调，例如Bean的后置处理器、注册监听器、发布事件、实例化单例Bean等。\n\n容器初始化之后，会使用getBean去获取Bean：\n\n![容器](../../../uploads/spring/ioc/4.jpeg)\n\ngetBean的操作都是在低级容器中进行的。\n当Bean_A依赖着Bean_B，而这个Bean_A在加载的时候，其配置的ref=\"Bean_B\"在解析的时候只是一个占位符，被放入了Bean_A的属性集合中，当调用getBean时，需要真正Bean_B注入到Bean_A内部时，就需要从容器中获取这个Bean_B，这里会产生递归。\n\n- 加载所有的Bean包装为BeanDefinition到容器中，如果Bean有依赖关系，则使用占位符先替代。\n- 在调用getBean的时候，会进行真正的依赖注入（如果碰到属性是ref的，就从容器中获取这个bean，然后注入到实例中）。\n\n#### Spring Bean的作用域\n\nSpring中Bean定义了5种作用域，分别为singleton（单例）、prototype（原型）、request、session和global session。\n\n1. singleton：单例模式，Spring中默认的作用域，在容器中只会存在一个共享的Bean实例，在多线程的情况下是不安全的。\n2. prototype：原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态。\n3. request：一次request会产生一个实例，在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该Bean仅在当前Http Request内有效,当前Http请求结束，该Bean实例也将会被销毁。\n4. session：在一次Http Session中，容器会返回该Bean的同一实例。\n5. global Session：在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效。\n\n#### Spring Bean的生命周期\n\nSpring Bean的生命周期有四个过程：实例化->属性赋值->初始化->销毁。但是Spring在对Bean管理的过程中，具体化了很多接口，完整的过程如下\n\n![容器](../../../uploads/spring/ioc/5.jpg)\n\n- postProcessBeanFactory：BeanFactoryPostProcessor的方法，允许使用者修改容器中的bean definitions，但是不能进行Bean的实例化（会导致依赖注入失败）。\n- postProcessBeforeInstantiation：InstantiationAwareBeanPostProcessorAdapter的方法，在Bean实例化之前调用，在Bean的构造函数之前。\n- postProcessPropertyValues：在属性中被设置到目标实例之前调用，可以完成对属性的各种操作，注解中元数据的解析。\n- setBeanName：如果这个Bean实现BeanNameAware接口，就会调用它的setBeanName方法。\n- setBeanFactory：如果这个Bean实现了BeanFactoryAware接口，就会调用它的setBeanFactory(BeanFactory)方法，这个参数传递的是Spring工厂本身。\n- setApplicationContext：如果这个Bean实现了ApplicationContext方法，则会调用它的setApplicationContext方法，传入的参数是Spring的上下文。\n- postProcessBeforeInitialization：如果这个Bean实现了BeanPostProcessor接口，会调用此方法。\n- afterPropertiesSet：InitializingBean的方法（如果实现会调用）。\n- init method：如果Bean在配置文件中配置了init-method属性，则会调用这个方法。\n- postProcessAfterInitialization：InstantiationAwareBeanPostProcessorAdapter的方法（如果实现会调用）。\n- destroy：Bean不在使用时，如果Bean实现了DiposibleBean接口，会执行此方法。\n- destroy-method：如果Bean在配置文件中配置了destroy-method属性，则会调用这个方法。\n\n这些过程也可以归为下面四个大过程：\n\n![容器](../../../uploads/spring/ioc/6.jpg)\n\n\n","slug":"spring/ioc","published":1,"updated":"2020-01-09T06:55:59.262Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsg0036n0ztjv8ne0q5","content":"<h3 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h3><p>IoC即Inversion of Control，是控制反转的意思：所谓IoC，就是由spring IoC容器来负责对象的生命周期和对象之间的关系。<br>Spring通过一个配置文件描述Bean及Bean之间的关系，利用Java的反射实例化Bean并建立Bean之间的依赖关系。Spring的Ioc容易在完成基础工作上，还提供了Bean实例缓存、生命周期管理、Bean实例化、事件发布、资源装载等服务。</p>\n<h4 id=\"IoC容器\"><a href=\"#IoC容器\" class=\"headerlink\" title=\"IoC容器\"></a>IoC容器</h4><p>对于spring-IoC来说，最重要的就是容器。容器管理着Bean的生命周期，控制着Bean的依赖注入。<br>spring启动时会读取程序中提供的Bean配置信息，然后在容器中生成一份相应的Bean配置的注册表，根据这份注册表实例化Bean，装配好Bean之间的关系。</p>\n<p><img src=\"../../../uploads/spring/ioc/1.jpg\" alt=\"容器\"></p>\n<h4 id=\"主要实现（BeanFactory-ApplicationContext）\"><a href=\"#主要实现（BeanFactory-ApplicationContext）\" class=\"headerlink\" title=\"主要实现（BeanFactory/ApplicationContext）\"></a>主要实现（BeanFactory/ApplicationContext）</h4><p>BeanFactory是spring框架的基础设施面向spring（低级容器）；ApplicationContext面向spring使用者，提供了更多的功能（高级容器）。</p>\n<p><img src=\"../../../uploads/spring/ioc/2.png\" alt=\"容器\"></p>\n<p>通过常用的ClassPathXmlApplicationContext来展示整个容易的XML类图如上所示，像BeanFactory、HierarchicalBeanFactory、ListableBeanFactory、XMLBeanFactory这些都属于低级容器，ApplicationContext和它的实现都是高级容器。<br>可以看出ApplicationContext不仅仅实现了BeanFactory的功能，还实现了ResourceLoader、MessageSource、ApplicationEventPublisher、EnvironmentCapable，所以ApplicationContext除了BeanFactory提供的功能以外，还支持：</p>\n<ul>\n<li>默认初始化所有的Singleton，也可以通过配置取消预初始化。</li>\n<li>继承MessageSource，因此支持国际化。</li>\n<li>资源访问，比如访问URL和文件。</li>\n<li>事件机制。</li>\n<li>同时加载多个配置文件。</li>\n<li>以声明式方式启动并创建Spring容器。</li>\n</ul>\n<p>所以，可以说ApplicationContext是高级容器，依赖着低级容器的getBean的功能，并提供了更多的额外功能。</p>\n<p>下面是一些主要类（低级容器）的功能：</p>\n<ul>\n<li>BeanDefinitionRegistry（注册表）:spring配置文件中每一个节点元素在spring容器中都通过一个BeanDefinition对象表示，它描述了Bean的配置信息。而BeanDefinitionRegistry接口提供了向容器注册BeanDefinition对象的方法。</li>\n<li>BeanFactory（顶层接口）:它最主要的方法就是getBean(String beanName)，该方法从容器中返回特定名称的Bean，BeanFactory的功能通过其他的接口得到不断扩展。</li>\n<li>ListableBeanFactory:该接口提供了访问容器内Bean基本信息的一些方法，如查看Bean的个数、获取某一类型Bean的配置名、查看容器中是否包括某一Bean等方法。</li>\n<li>HierarchicalBeanFactory（父子级联）:子容器可以通过该接口访问父容器；通过HierarchicalBeanFactory，Spring的IoC容器可以建立父子层级关联的容器体系，子容器可以访问父容器中的Bean，但父容器不能访问子容器的Bean。</li>\n<li>ConfigurableBeanFactory: 增强了IoC容器的可定制性，它定义了设置类装载器、属性编辑器、容器初始化后置处理器等方法.</li>\n<li>AutowireCapableBeanFactory（自动装配）:定义了将容器中的Bean按某种规则(如按名字匹配、按类型匹配等)进行自动装配的方法。</li>\n<li>SingletonBeanRegistry:定义了允许在运行期间向容器注册单实例Bean的方法；对于单实例(singleton)的Bean来说，BeanFactory会缓存Bean实例，所以第二次使用getBean()获取Bean时将直接从IoC容器的缓存中获取Bean实例。Spring在DefaultSingletonBeanRegistry类中提供了一个用于缓存单实例Bean的缓存器，它是一个用HashMap实现的缓存器，单实例的Bean以beanName为键保存在这个HashMap中。</li>\n</ul>\n<h4 id=\"Spring-IoC初始化过程\"><a href=\"#Spring-IoC初始化过程\" class=\"headerlink\" title=\"Spring IoC初始化过程\"></a>Spring IoC初始化过程</h4><p>IoC容器初始化的过程基本如下图：</p>\n<p><img src=\"../../../uploads/spring/ioc/3.jpg\" alt=\"容器\"></p>\n<ol>\n<li>用户构造 ClassPathXmlApplicationContext。</li>\n<li>访问高级容器（AbstractApplicationContext）的refresh方。此方法是模板方法，很多方法都让不同的实现类去实现，obtainFreshBeanFactory创建bean工厂回调低级容器的refreshBeanFactory方法，将所有的BeanDefinition 和 Properties加载到容器中。</li>\n<li>低级容器加载后，高级容器会处理一些回调，例如Bean的后置处理器、注册监听器、发布事件、实例化单例Bean等。</li>\n</ol>\n<p>容器初始化之后，会使用getBean去获取Bean：</p>\n<p><img src=\"../../../uploads/spring/ioc/4.jpeg\" alt=\"容器\"></p>\n<p>getBean的操作都是在低级容器中进行的。<br>当Bean_A依赖着Bean_B，而这个Bean_A在加载的时候，其配置的ref=”Bean_B”在解析的时候只是一个占位符，被放入了Bean_A的属性集合中，当调用getBean时，需要真正Bean_B注入到Bean_A内部时，就需要从容器中获取这个Bean_B，这里会产生递归。</p>\n<ul>\n<li>加载所有的Bean包装为BeanDefinition到容器中，如果Bean有依赖关系，则使用占位符先替代。</li>\n<li>在调用getBean的时候，会进行真正的依赖注入（如果碰到属性是ref的，就从容器中获取这个bean，然后注入到实例中）。</li>\n</ul>\n<h4 id=\"Spring-Bean的作用域\"><a href=\"#Spring-Bean的作用域\" class=\"headerlink\" title=\"Spring Bean的作用域\"></a>Spring Bean的作用域</h4><p>Spring中Bean定义了5种作用域，分别为singleton（单例）、prototype（原型）、request、session和global session。</p>\n<ol>\n<li>singleton：单例模式，Spring中默认的作用域，在容器中只会存在一个共享的Bean实例，在多线程的情况下是不安全的。</li>\n<li>prototype：原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态。</li>\n<li>request：一次request会产生一个实例，在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该Bean仅在当前Http Request内有效,当前Http请求结束，该Bean实例也将会被销毁。</li>\n<li>session：在一次Http Session中，容器会返回该Bean的同一实例。</li>\n<li>global Session：在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效。</li>\n</ol>\n<h4 id=\"Spring-Bean的生命周期\"><a href=\"#Spring-Bean的生命周期\" class=\"headerlink\" title=\"Spring Bean的生命周期\"></a>Spring Bean的生命周期</h4><p>Spring Bean的生命周期有四个过程：实例化-&gt;属性赋值-&gt;初始化-&gt;销毁。但是Spring在对Bean管理的过程中，具体化了很多接口，完整的过程如下</p>\n<p><img src=\"../../../uploads/spring/ioc/5.jpg\" alt=\"容器\"></p>\n<ul>\n<li>postProcessBeanFactory：BeanFactoryPostProcessor的方法，允许使用者修改容器中的bean definitions，但是不能进行Bean的实例化（会导致依赖注入失败）。</li>\n<li>postProcessBeforeInstantiation：InstantiationAwareBeanPostProcessorAdapter的方法，在Bean实例化之前调用，在Bean的构造函数之前。</li>\n<li>postProcessPropertyValues：在属性中被设置到目标实例之前调用，可以完成对属性的各种操作，注解中元数据的解析。</li>\n<li>setBeanName：如果这个Bean实现BeanNameAware接口，就会调用它的setBeanName方法。</li>\n<li>setBeanFactory：如果这个Bean实现了BeanFactoryAware接口，就会调用它的setBeanFactory(BeanFactory)方法，这个参数传递的是Spring工厂本身。</li>\n<li>setApplicationContext：如果这个Bean实现了ApplicationContext方法，则会调用它的setApplicationContext方法，传入的参数是Spring的上下文。</li>\n<li>postProcessBeforeInitialization：如果这个Bean实现了BeanPostProcessor接口，会调用此方法。</li>\n<li>afterPropertiesSet：InitializingBean的方法（如果实现会调用）。</li>\n<li>init method：如果Bean在配置文件中配置了init-method属性，则会调用这个方法。</li>\n<li>postProcessAfterInitialization：InstantiationAwareBeanPostProcessorAdapter的方法（如果实现会调用）。</li>\n<li>destroy：Bean不在使用时，如果Bean实现了DiposibleBean接口，会执行此方法。</li>\n<li>destroy-method：如果Bean在配置文件中配置了destroy-method属性，则会调用这个方法。</li>\n</ul>\n<p>这些过程也可以归为下面四个大过程：</p>\n<p><img src=\"../../../uploads/spring/ioc/6.jpg\" alt=\"容器\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"IoC\"><a href=\"#IoC\" class=\"headerlink\" title=\"IoC\"></a>IoC</h3><p>IoC即Inversion of Control，是控制反转的意思：所谓IoC，就是由spring IoC容器来负责对象的生命周期和对象之间的关系。<br>Spring通过一个配置文件描述Bean及Bean之间的关系，利用Java的反射实例化Bean并建立Bean之间的依赖关系。Spring的Ioc容易在完成基础工作上，还提供了Bean实例缓存、生命周期管理、Bean实例化、事件发布、资源装载等服务。</p>\n<h4 id=\"IoC容器\"><a href=\"#IoC容器\" class=\"headerlink\" title=\"IoC容器\"></a>IoC容器</h4><p>对于spring-IoC来说，最重要的就是容器。容器管理着Bean的生命周期，控制着Bean的依赖注入。<br>spring启动时会读取程序中提供的Bean配置信息，然后在容器中生成一份相应的Bean配置的注册表，根据这份注册表实例化Bean，装配好Bean之间的关系。</p>\n<p><img src=\"../../../uploads/spring/ioc/1.jpg\" alt=\"容器\"></p>\n<h4 id=\"主要实现（BeanFactory-ApplicationContext）\"><a href=\"#主要实现（BeanFactory-ApplicationContext）\" class=\"headerlink\" title=\"主要实现（BeanFactory/ApplicationContext）\"></a>主要实现（BeanFactory/ApplicationContext）</h4><p>BeanFactory是spring框架的基础设施面向spring（低级容器）；ApplicationContext面向spring使用者，提供了更多的功能（高级容器）。</p>\n<p><img src=\"../../../uploads/spring/ioc/2.png\" alt=\"容器\"></p>\n<p>通过常用的ClassPathXmlApplicationContext来展示整个容易的XML类图如上所示，像BeanFactory、HierarchicalBeanFactory、ListableBeanFactory、XMLBeanFactory这些都属于低级容器，ApplicationContext和它的实现都是高级容器。<br>可以看出ApplicationContext不仅仅实现了BeanFactory的功能，还实现了ResourceLoader、MessageSource、ApplicationEventPublisher、EnvironmentCapable，所以ApplicationContext除了BeanFactory提供的功能以外，还支持：</p>\n<ul>\n<li>默认初始化所有的Singleton，也可以通过配置取消预初始化。</li>\n<li>继承MessageSource，因此支持国际化。</li>\n<li>资源访问，比如访问URL和文件。</li>\n<li>事件机制。</li>\n<li>同时加载多个配置文件。</li>\n<li>以声明式方式启动并创建Spring容器。</li>\n</ul>\n<p>所以，可以说ApplicationContext是高级容器，依赖着低级容器的getBean的功能，并提供了更多的额外功能。</p>\n<p>下面是一些主要类（低级容器）的功能：</p>\n<ul>\n<li>BeanDefinitionRegistry（注册表）:spring配置文件中每一个节点元素在spring容器中都通过一个BeanDefinition对象表示，它描述了Bean的配置信息。而BeanDefinitionRegistry接口提供了向容器注册BeanDefinition对象的方法。</li>\n<li>BeanFactory（顶层接口）:它最主要的方法就是getBean(String beanName)，该方法从容器中返回特定名称的Bean，BeanFactory的功能通过其他的接口得到不断扩展。</li>\n<li>ListableBeanFactory:该接口提供了访问容器内Bean基本信息的一些方法，如查看Bean的个数、获取某一类型Bean的配置名、查看容器中是否包括某一Bean等方法。</li>\n<li>HierarchicalBeanFactory（父子级联）:子容器可以通过该接口访问父容器；通过HierarchicalBeanFactory，Spring的IoC容器可以建立父子层级关联的容器体系，子容器可以访问父容器中的Bean，但父容器不能访问子容器的Bean。</li>\n<li>ConfigurableBeanFactory: 增强了IoC容器的可定制性，它定义了设置类装载器、属性编辑器、容器初始化后置处理器等方法.</li>\n<li>AutowireCapableBeanFactory（自动装配）:定义了将容器中的Bean按某种规则(如按名字匹配、按类型匹配等)进行自动装配的方法。</li>\n<li>SingletonBeanRegistry:定义了允许在运行期间向容器注册单实例Bean的方法；对于单实例(singleton)的Bean来说，BeanFactory会缓存Bean实例，所以第二次使用getBean()获取Bean时将直接从IoC容器的缓存中获取Bean实例。Spring在DefaultSingletonBeanRegistry类中提供了一个用于缓存单实例Bean的缓存器，它是一个用HashMap实现的缓存器，单实例的Bean以beanName为键保存在这个HashMap中。</li>\n</ul>\n<h4 id=\"Spring-IoC初始化过程\"><a href=\"#Spring-IoC初始化过程\" class=\"headerlink\" title=\"Spring IoC初始化过程\"></a>Spring IoC初始化过程</h4><p>IoC容器初始化的过程基本如下图：</p>\n<p><img src=\"../../../uploads/spring/ioc/3.jpg\" alt=\"容器\"></p>\n<ol>\n<li>用户构造 ClassPathXmlApplicationContext。</li>\n<li>访问高级容器（AbstractApplicationContext）的refresh方。此方法是模板方法，很多方法都让不同的实现类去实现，obtainFreshBeanFactory创建bean工厂回调低级容器的refreshBeanFactory方法，将所有的BeanDefinition 和 Properties加载到容器中。</li>\n<li>低级容器加载后，高级容器会处理一些回调，例如Bean的后置处理器、注册监听器、发布事件、实例化单例Bean等。</li>\n</ol>\n<p>容器初始化之后，会使用getBean去获取Bean：</p>\n<p><img src=\"../../../uploads/spring/ioc/4.jpeg\" alt=\"容器\"></p>\n<p>getBean的操作都是在低级容器中进行的。<br>当Bean_A依赖着Bean_B，而这个Bean_A在加载的时候，其配置的ref=”Bean_B”在解析的时候只是一个占位符，被放入了Bean_A的属性集合中，当调用getBean时，需要真正Bean_B注入到Bean_A内部时，就需要从容器中获取这个Bean_B，这里会产生递归。</p>\n<ul>\n<li>加载所有的Bean包装为BeanDefinition到容器中，如果Bean有依赖关系，则使用占位符先替代。</li>\n<li>在调用getBean的时候，会进行真正的依赖注入（如果碰到属性是ref的，就从容器中获取这个bean，然后注入到实例中）。</li>\n</ul>\n<h4 id=\"Spring-Bean的作用域\"><a href=\"#Spring-Bean的作用域\" class=\"headerlink\" title=\"Spring Bean的作用域\"></a>Spring Bean的作用域</h4><p>Spring中Bean定义了5种作用域，分别为singleton（单例）、prototype（原型）、request、session和global session。</p>\n<ol>\n<li>singleton：单例模式，Spring中默认的作用域，在容器中只会存在一个共享的Bean实例，在多线程的情况下是不安全的。</li>\n<li>prototype：原型模式，每次通过Spring容器获取prototype定义的bean时，容器都将创建一个新的Bean实例，每个Bean实例都有自己的属性和状态。</li>\n<li>request：一次request会产生一个实例，在一次Http请求中，容器会返回该Bean的同一实例。而对不同的Http请求则会产生新的Bean，而且该Bean仅在当前Http Request内有效,当前Http请求结束，该Bean实例也将会被销毁。</li>\n<li>session：在一次Http Session中，容器会返回该Bean的同一实例。</li>\n<li>global Session：在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效。</li>\n</ol>\n<h4 id=\"Spring-Bean的生命周期\"><a href=\"#Spring-Bean的生命周期\" class=\"headerlink\" title=\"Spring Bean的生命周期\"></a>Spring Bean的生命周期</h4><p>Spring Bean的生命周期有四个过程：实例化-&gt;属性赋值-&gt;初始化-&gt;销毁。但是Spring在对Bean管理的过程中，具体化了很多接口，完整的过程如下</p>\n<p><img src=\"../../../uploads/spring/ioc/5.jpg\" alt=\"容器\"></p>\n<ul>\n<li>postProcessBeanFactory：BeanFactoryPostProcessor的方法，允许使用者修改容器中的bean definitions，但是不能进行Bean的实例化（会导致依赖注入失败）。</li>\n<li>postProcessBeforeInstantiation：InstantiationAwareBeanPostProcessorAdapter的方法，在Bean实例化之前调用，在Bean的构造函数之前。</li>\n<li>postProcessPropertyValues：在属性中被设置到目标实例之前调用，可以完成对属性的各种操作，注解中元数据的解析。</li>\n<li>setBeanName：如果这个Bean实现BeanNameAware接口，就会调用它的setBeanName方法。</li>\n<li>setBeanFactory：如果这个Bean实现了BeanFactoryAware接口，就会调用它的setBeanFactory(BeanFactory)方法，这个参数传递的是Spring工厂本身。</li>\n<li>setApplicationContext：如果这个Bean实现了ApplicationContext方法，则会调用它的setApplicationContext方法，传入的参数是Spring的上下文。</li>\n<li>postProcessBeforeInitialization：如果这个Bean实现了BeanPostProcessor接口，会调用此方法。</li>\n<li>afterPropertiesSet：InitializingBean的方法（如果实现会调用）。</li>\n<li>init method：如果Bean在配置文件中配置了init-method属性，则会调用这个方法。</li>\n<li>postProcessAfterInitialization：InstantiationAwareBeanPostProcessorAdapter的方法（如果实现会调用）。</li>\n<li>destroy：Bean不在使用时，如果Bean实现了DiposibleBean接口，会执行此方法。</li>\n<li>destroy-method：如果Bean在配置文件中配置了destroy-method属性，则会调用这个方法。</li>\n</ul>\n<p>这些过程也可以归为下面四个大过程：</p>\n<p><img src=\"../../../uploads/spring/ioc/6.jpg\" alt=\"容器\"></p>\n"},{"title":"深入理解volatile","date":"2017-05-02T01:45:54.000Z","comments":0,"keywords":["java","volatile","并发"],"_content":"\n> java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。\n\n### Volatile\n\nVolatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。\n\n### 正确使用volatile变量的条件\n\n如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：\n\n- 该变量的写操作不依赖当前值\n- 该变量没有包含在具有其他变量的不变式中\n\n大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。\n\n#### 使用volatile和不用volatile的一个例子\njdk版本：jdk1.7.0_4\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n运行后程序会进入死循环，一直运行。\n\n> 在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 \n\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static volatile boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n程序输出end，然后马上退出。\n\n> 把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 \n\n#### 正确使用volatile的模式\n##### 状态标志\n也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。\n\n```\nvolatile boolean shutdownRequested;\n\n...\n\npublic void shutdown() { shutdownRequested = true; }\n\npublic void doWork() { \n    while (!shutdownRequested) { \n        // do stuff\n    }\n}\n```\n这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。\n\n##### 用于一次安全的发布\n缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。\n实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。\n```\npublic class BackgroundFloobleLoader {\n    public volatile Flooble theFlooble;\n\n    public void initInBackground() {\n        // do lots of stuff\n        theFlooble = new Flooble();  // this is the only write to theFlooble\n    }\n}\n\npublic class SomeOtherClass {\n    public void doWork() {\n        while (true) { \n            // do some stuff...\n            // use the Flooble, but only if it is ready\n            if (floobleLoader.theFlooble != null) \n                doSomething(floobleLoader.theFlooble);\n        }\n    }\n}\n```\n如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。\n该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。\n\n##### 独立观察模式\n安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。\n使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。\n\n```\npublic class UserManager {\n    public volatile String lastUser;\n\n    public boolean authenticate(String user, String password) {\n        boolean valid = passwordIsValid(user, password);\n        if (valid) {\n            User u = new User();\n            activeUsers.add(u);\n            lastUser = user;\n        }\n        return valid;\n    }\n}\n```\n该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。\n\n##### volatile bean 模式\nvolatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。\n在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：\n```\n@ThreadSafe\npublic class Person {\n    private volatile String firstName;\n    private volatile String lastName;\n    private volatile int age;\n\n    public String getFirstName() { return firstName; }\n    public String getLastName() { return lastName; }\n    public int getAge() { return age; }\n\n    public void setFirstName(String firstName) { \n        this.firstName = firstName;\n    }\n\n    public void setLastName(String lastName) { \n        this.lastName = lastName;\n    }\n\n    public void setAge(int age) { \n        this.age = age;\n    }\n}\n```\n\n##### 开销较低的读－写锁策略\n目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。\n然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。\n```\n@ThreadSafe\npublic class CheesyCounter {\n    // Employs the cheap read-write lock trick\n    // All mutative operations MUST be done with the 'this' lock held\n    @GuardedBy(\"this\") private volatile int value;\n\n    public int getValue() { return value; }\n\n    public synchronized int increment() {\n        return value++;\n    }\n}\n```\n之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。\n\n### 性能考虑\n使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。\n很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。\nvolatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。\n\n\n学习资料 ： [Java 理论与实践: 正确使用 Volatile 变量](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/2_volatile.md","raw":"---\ntitle: 深入理解volatile\ndate: 2017-05-02 09:45:54\ncomments: false\ntags: \n- java\n- volatile\n- 并发\ncategories: \n- java\nkeywords: \n- java\n- volatile\n- 并发\n---\n\n> java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。\n\n### Volatile\n\nVolatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。\n\n### 正确使用volatile变量的条件\n\n如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：\n\n- 该变量的写操作不依赖当前值\n- 该变量没有包含在具有其他变量的不变式中\n\n大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。\n\n#### 使用volatile和不用volatile的一个例子\njdk版本：jdk1.7.0_4\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n运行后程序会进入死循环，一直运行。\n\n> 在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 \n\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static volatile boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n程序输出end，然后马上退出。\n\n> 把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 \n\n#### 正确使用volatile的模式\n##### 状态标志\n也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。\n\n```\nvolatile boolean shutdownRequested;\n\n...\n\npublic void shutdown() { shutdownRequested = true; }\n\npublic void doWork() { \n    while (!shutdownRequested) { \n        // do stuff\n    }\n}\n```\n这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。\n\n##### 用于一次安全的发布\n缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。\n实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。\n```\npublic class BackgroundFloobleLoader {\n    public volatile Flooble theFlooble;\n\n    public void initInBackground() {\n        // do lots of stuff\n        theFlooble = new Flooble();  // this is the only write to theFlooble\n    }\n}\n\npublic class SomeOtherClass {\n    public void doWork() {\n        while (true) { \n            // do some stuff...\n            // use the Flooble, but only if it is ready\n            if (floobleLoader.theFlooble != null) \n                doSomething(floobleLoader.theFlooble);\n        }\n    }\n}\n```\n如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。\n该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。\n\n##### 独立观察模式\n安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。\n使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。\n\n```\npublic class UserManager {\n    public volatile String lastUser;\n\n    public boolean authenticate(String user, String password) {\n        boolean valid = passwordIsValid(user, password);\n        if (valid) {\n            User u = new User();\n            activeUsers.add(u);\n            lastUser = user;\n        }\n        return valid;\n    }\n}\n```\n该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。\n\n##### volatile bean 模式\nvolatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。\n在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：\n```\n@ThreadSafe\npublic class Person {\n    private volatile String firstName;\n    private volatile String lastName;\n    private volatile int age;\n\n    public String getFirstName() { return firstName; }\n    public String getLastName() { return lastName; }\n    public int getAge() { return age; }\n\n    public void setFirstName(String firstName) { \n        this.firstName = firstName;\n    }\n\n    public void setLastName(String lastName) { \n        this.lastName = lastName;\n    }\n\n    public void setAge(int age) { \n        this.age = age;\n    }\n}\n```\n\n##### 开销较低的读－写锁策略\n目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。\n然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。\n```\n@ThreadSafe\npublic class CheesyCounter {\n    // Employs the cheap read-write lock trick\n    // All mutative operations MUST be done with the 'this' lock held\n    @GuardedBy(\"this\") private volatile int value;\n\n    public int getValue() { return value; }\n\n    public synchronized int increment() {\n        return value++;\n    }\n}\n```\n之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。\n\n### 性能考虑\n使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。\n很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。\nvolatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。\n\n\n学习资料 ： [Java 理论与实践: 正确使用 Volatile 变量](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"java/2_volatile","published":1,"updated":"2020-01-02T05:49:23.761Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsh0039n0ztlnpnzm8o","content":"<blockquote>\n<p>java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。</p>\n</blockquote>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>Volatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。</p>\n<h3 id=\"正确使用volatile变量的条件\"><a href=\"#正确使用volatile变量的条件\" class=\"headerlink\" title=\"正确使用volatile变量的条件\"></a>正确使用volatile变量的条件</h3><p>如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：</p>\n<ul>\n<li>该变量的写操作不依赖当前值</li>\n<li>该变量没有包含在具有其他变量的不变式中</li>\n</ul>\n<p>大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。</p>\n<h4 id=\"使用volatile和不用volatile的一个例子\"><a href=\"#使用volatile和不用volatile的一个例子\" class=\"headerlink\" title=\"使用volatile和不用volatile的一个例子\"></a>使用volatile和不用volatile的一个例子</h4><p>jdk版本：jdk1.7.0_4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行后程序会进入死循环，一直运行。</p>\n<blockquote>\n<p>在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static volatile boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>程序输出end，然后马上退出。</p>\n<blockquote>\n<p>把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 </p>\n</blockquote>\n<h4 id=\"正确使用volatile的模式\"><a href=\"#正确使用volatile的模式\" class=\"headerlink\" title=\"正确使用volatile的模式\"></a>正确使用volatile的模式</h4><h5 id=\"状态标志\"><a href=\"#状态标志\" class=\"headerlink\" title=\"状态标志\"></a>状态标志</h5><p>也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">volatile boolean shutdownRequested;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">public void shutdown() &#123; shutdownRequested = true; &#125;</div><div class=\"line\"></div><div class=\"line\">public void doWork() &#123; </div><div class=\"line\">    while (!shutdownRequested) &#123; </div><div class=\"line\">        // do stuff</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。</p>\n<h5 id=\"用于一次安全的发布\"><a href=\"#用于一次安全的发布\" class=\"headerlink\" title=\"用于一次安全的发布\"></a>用于一次安全的发布</h5><p>缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。<br>实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BackgroundFloobleLoader &#123;</div><div class=\"line\">    public volatile Flooble theFlooble;</div><div class=\"line\"></div><div class=\"line\">    public void initInBackground() &#123;</div><div class=\"line\">        // do lots of stuff</div><div class=\"line\">        theFlooble = new Flooble();  // this is the only write to theFlooble</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class SomeOtherClass &#123;</div><div class=\"line\">    public void doWork() &#123;</div><div class=\"line\">        while (true) &#123; </div><div class=\"line\">            // do some stuff...</div><div class=\"line\">            // use the Flooble, but only if it is ready</div><div class=\"line\">            if (floobleLoader.theFlooble != null) </div><div class=\"line\">                doSomething(floobleLoader.theFlooble);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。<br>该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。</p>\n<h5 id=\"独立观察模式\"><a href=\"#独立观察模式\" class=\"headerlink\" title=\"独立观察模式\"></a>独立观察模式</h5><p>安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。<br>使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserManager &#123;</div><div class=\"line\">    public volatile String lastUser;</div><div class=\"line\"></div><div class=\"line\">    public boolean authenticate(String user, String password) &#123;</div><div class=\"line\">        boolean valid = passwordIsValid(user, password);</div><div class=\"line\">        if (valid) &#123;</div><div class=\"line\">            User u = new User();</div><div class=\"line\">            activeUsers.add(u);</div><div class=\"line\">            lastUser = user;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return valid;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。</p>\n<h5 id=\"volatile-bean-模式\"><a href=\"#volatile-bean-模式\" class=\"headerlink\" title=\"volatile bean 模式\"></a>volatile bean 模式</h5><p>volatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。<br>在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class Person &#123;</div><div class=\"line\">    private volatile String firstName;</div><div class=\"line\">    private volatile String lastName;</div><div class=\"line\">    private volatile int age;</div><div class=\"line\"></div><div class=\"line\">    public String getFirstName() &#123; return firstName; &#125;</div><div class=\"line\">    public String getLastName() &#123; return lastName; &#125;</div><div class=\"line\">    public int getAge() &#123; return age; &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setFirstName(String firstName) &#123; </div><div class=\"line\">        this.firstName = firstName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setLastName(String lastName) &#123; </div><div class=\"line\">        this.lastName = lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setAge(int age) &#123; </div><div class=\"line\">        this.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"开销较低的读－写锁策略\"><a href=\"#开销较低的读－写锁策略\" class=\"headerlink\" title=\"开销较低的读－写锁策略\"></a>开销较低的读－写锁策略</h5><p>目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。<br>然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class CheesyCounter &#123;</div><div class=\"line\">    // Employs the cheap read-write lock trick</div><div class=\"line\">    // All mutative operations MUST be done with the &apos;this&apos; lock held</div><div class=\"line\">    @GuardedBy(&quot;this&quot;) private volatile int value;</div><div class=\"line\"></div><div class=\"line\">    public int getValue() &#123; return value; &#125;</div><div class=\"line\"></div><div class=\"line\">    public synchronized int increment() &#123;</div><div class=\"line\">        return value++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。</p>\n<h3 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h3><p>使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。<br>很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。<br>volatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。</p>\n<p>学习资料 ： <a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\" target=\"_blank\" rel=\"external\">Java 理论与实践: 正确使用 Volatile 变量</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。</p>\n</blockquote>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>Volatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。</p>\n<h3 id=\"正确使用volatile变量的条件\"><a href=\"#正确使用volatile变量的条件\" class=\"headerlink\" title=\"正确使用volatile变量的条件\"></a>正确使用volatile变量的条件</h3><p>如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：</p>\n<ul>\n<li>该变量的写操作不依赖当前值</li>\n<li>该变量没有包含在具有其他变量的不变式中</li>\n</ul>\n<p>大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。</p>\n<h4 id=\"使用volatile和不用volatile的一个例子\"><a href=\"#使用volatile和不用volatile的一个例子\" class=\"headerlink\" title=\"使用volatile和不用volatile的一个例子\"></a>使用volatile和不用volatile的一个例子</h4><p>jdk版本：jdk1.7.0_4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行后程序会进入死循环，一直运行。</p>\n<blockquote>\n<p>在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static volatile boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>程序输出end，然后马上退出。</p>\n<blockquote>\n<p>把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 </p>\n</blockquote>\n<h4 id=\"正确使用volatile的模式\"><a href=\"#正确使用volatile的模式\" class=\"headerlink\" title=\"正确使用volatile的模式\"></a>正确使用volatile的模式</h4><h5 id=\"状态标志\"><a href=\"#状态标志\" class=\"headerlink\" title=\"状态标志\"></a>状态标志</h5><p>也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">volatile boolean shutdownRequested;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">public void shutdown() &#123; shutdownRequested = true; &#125;</div><div class=\"line\"></div><div class=\"line\">public void doWork() &#123; </div><div class=\"line\">    while (!shutdownRequested) &#123; </div><div class=\"line\">        // do stuff</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。</p>\n<h5 id=\"用于一次安全的发布\"><a href=\"#用于一次安全的发布\" class=\"headerlink\" title=\"用于一次安全的发布\"></a>用于一次安全的发布</h5><p>缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。<br>实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BackgroundFloobleLoader &#123;</div><div class=\"line\">    public volatile Flooble theFlooble;</div><div class=\"line\"></div><div class=\"line\">    public void initInBackground() &#123;</div><div class=\"line\">        // do lots of stuff</div><div class=\"line\">        theFlooble = new Flooble();  // this is the only write to theFlooble</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class SomeOtherClass &#123;</div><div class=\"line\">    public void doWork() &#123;</div><div class=\"line\">        while (true) &#123; </div><div class=\"line\">            // do some stuff...</div><div class=\"line\">            // use the Flooble, but only if it is ready</div><div class=\"line\">            if (floobleLoader.theFlooble != null) </div><div class=\"line\">                doSomething(floobleLoader.theFlooble);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。<br>该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。</p>\n<h5 id=\"独立观察模式\"><a href=\"#独立观察模式\" class=\"headerlink\" title=\"独立观察模式\"></a>独立观察模式</h5><p>安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。<br>使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserManager &#123;</div><div class=\"line\">    public volatile String lastUser;</div><div class=\"line\"></div><div class=\"line\">    public boolean authenticate(String user, String password) &#123;</div><div class=\"line\">        boolean valid = passwordIsValid(user, password);</div><div class=\"line\">        if (valid) &#123;</div><div class=\"line\">            User u = new User();</div><div class=\"line\">            activeUsers.add(u);</div><div class=\"line\">            lastUser = user;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return valid;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。</p>\n<h5 id=\"volatile-bean-模式\"><a href=\"#volatile-bean-模式\" class=\"headerlink\" title=\"volatile bean 模式\"></a>volatile bean 模式</h5><p>volatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。<br>在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class Person &#123;</div><div class=\"line\">    private volatile String firstName;</div><div class=\"line\">    private volatile String lastName;</div><div class=\"line\">    private volatile int age;</div><div class=\"line\"></div><div class=\"line\">    public String getFirstName() &#123; return firstName; &#125;</div><div class=\"line\">    public String getLastName() &#123; return lastName; &#125;</div><div class=\"line\">    public int getAge() &#123; return age; &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setFirstName(String firstName) &#123; </div><div class=\"line\">        this.firstName = firstName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setLastName(String lastName) &#123; </div><div class=\"line\">        this.lastName = lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setAge(int age) &#123; </div><div class=\"line\">        this.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"开销较低的读－写锁策略\"><a href=\"#开销较低的读－写锁策略\" class=\"headerlink\" title=\"开销较低的读－写锁策略\"></a>开销较低的读－写锁策略</h5><p>目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。<br>然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class CheesyCounter &#123;</div><div class=\"line\">    // Employs the cheap read-write lock trick</div><div class=\"line\">    // All mutative operations MUST be done with the &apos;this&apos; lock held</div><div class=\"line\">    @GuardedBy(&quot;this&quot;) private volatile int value;</div><div class=\"line\"></div><div class=\"line\">    public int getValue() &#123; return value; &#125;</div><div class=\"line\"></div><div class=\"line\">    public synchronized int increment() &#123;</div><div class=\"line\">        return value++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。</p>\n<h3 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h3><p>使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。<br>很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。<br>volatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。</p>\n<p>学习资料 ： <a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\">Java 理论与实践: 正确使用 Volatile 变量</a></p>\n"},{"title":"深入分析ConcurrentHashMap","date":"2017-05-03T07:24:25.000Z","comments":0,"keywords":["java","ConcurrentHashMap","并发"],"_content":"\n### HashMap的问题\nHashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。\n\n#### Hash表的数据结构\nHashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value>插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。\n如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。\n所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。\n\n#### HashMap的源码\n\n```\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    //计算Hash值\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    //如果存在值，替换旧值\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    //增加节点\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n上面代码是HashMap进行put一个元素时候的源码。\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    //如果大小大于现在的threshold时候，需要resize\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n```\n在增加节点时候会判断是否需要rehash操作。\n\n```\n void resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n    //新建一个Hash Table\n    Entry[] newTable = new Entry[newCapacity];\n    //吧旧oldtable 迁移到新的newTable上\n    transfer(newTable, initHashSeedAsNeeded(newCapacity));\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\n```\nresize源码会新建个更大的hash表\n\n```\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    //  从OldTable里摘一个元素出来，然后放到NewTable中\n    for (Entry<K,V> e : table) {\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n迁移原数据\n\n#### 正常ReHash过程\n\n就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。\n\n#### 并发下的Rehash\n\n假设有两个线程，当第一个线程执行到 \n```\n    Entry<K, V> next = e.next;\n```\n时候被挂起。\n```\n假设有三个值， <3,a>,<7,b>,<5,c>,HashMap的初始大小是2\n ______           e               next\n|__0___|       _______          _______          _______ \n|__1___| ---> |_<3,a>_| -----> |_<7,b>_| -----> |_<5,c>_|\n```\n那么现在线程1如下：\n```\n ______    \n|__0___|      \n|__1___|   \n|__2___|      \n|__3___|\n```\n那么线程2开始rehash：\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                next               e\n```\n\n那么如果现在线程1被调度开始执行：\n```\nnewTable[i] = e;\ne = next;\n```\n- 先是执行 newTalbe[i] = e;\n- 然后是e = next，导致了e指向了key(7)，\n- 而下一次循环的next = e.next导致了next指向了key(3)\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                e                 next\n```\n这样就会导致\n```\n线程1\n ______    \n|__0___|           __________________              \n|__1___|          |                 |            \n|__2___|       ___|___          ____|__ \n|__3___| ---> |_<3,a>_| -----> |_<7,b>_| ----> null\n                                \n```\n产生循环链表，导致死循环。\n\n### concurrentHashMap原理\nconcurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。\n\n![concurrentHashMap](../../../uploads/concurrentHashMap.png)\n\nHashEntry源码:\n```\nstatic final class HashEntry<K,V> {\n        final int hash;\n        final K key;\n        volatile V value;\n        volatile HashEntry<K,V> next;\n```\n\nvolatile关键字保证了多线程读取的时候一定是最新值。\n\nConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。\n\n#### 基本操作源码分析\n\n构造方法:\n```\npublic ConcurrentHashMap(int initialCapacity,\n                         float loadFactor, int concurrencyLevel) {\n    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)\n        throw new IllegalArgumentException();\n    if (concurrencyLevel > MAX_SEGMENTS)\n        concurrencyLevel = MAX_SEGMENTS;   //1\n    int sshift = 0;\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;    //2\n    }\n    this.segmentShift = 32 - sshift;  //3\n    this.segmentMask = ssize - 1;   //4\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    int c = initialCapacity / ssize;\n    if (c * ssize < initialCapacity)\n        ++c;\n    int cap = MIN_SEGMENT_TABLE_CAPACITY;\n    while (cap < c)\n        cap <<= 1;\n    Segment<K,V> s0 =\n        new Segment<K,V>(loadFactor, (int)(cap * loadFactor),\n                         (HashEntry<K,V>[])new HashEntry[cap]);//5\n    Segment<K,V>[] ss = (Segment<K,V>[])new Segment[ssize]; //6\n    UNSAFE.putOrderedObject(ss, SBASE, s0); \n    this.segments = ss;\n}\n```\n\n整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。\n\n注释1: 最大的并发等级不能超过MAX_SEGMENTS 1<<16(也就是1的二进制向左移16位,65535)\n\n注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.\n\n注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；\n\n注释5和6: 初始化segment\n\n1. 初始化每个segment的HashEntry长度；\n\n2. 创建segment数组和segment[0]。\n\n> HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。\n\n#### get操作\n```\npublic V get(Object key) {\n    Segment<K,V> s; \n    HashEntry<K,V>[] tab;\n    int h = hash(key);  //1\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&  //2\n        (tab = s.table) != null) {\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\n注释1: 根据key计算hash值\n\n注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环\n\n里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null\n\n#### put操作\n```\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash >>> segmentShift) & segmentMask;\n    if ((s = (Segment<K,V>)UNSAFE.getObject          \n         (segments, (j << SSHIFT) + SBASE)) == null) \n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}\n```\n1. 判断值是否为null\n\n2. 计算hash值\n\n3. 定位segment 如果不存在，则创建\n\n4. 调用segment的put方法\n\n还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true\n再来看看Segment的put方法\n```\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry<K,V> node = tryLock() ? null :\n        scanAndLockForPut(key, hash, value);  //1\n    V oldValue;\n    try {\n        HashEntry<K,V>[] tab = table;\n        int index = (tab.length - 1) & hash;\n        HashEntry<K,V> first = entryAt(tab, index);  //2\n        for (HashEntry<K,V> e = first;;) { //3\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash && key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry<K,V>(hash, key, value, first);\n                int c = count + 1;\n                if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}\n```\n注释1: 获取锁 ，保证线程安全\n\n注释2:定位到具体的HashEntry\n\n注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.\n\n最后释放锁,返回旧值.\n\n再说明一下put 和 putifAbsent的用法\n\n这两个方法本身是线程安全的,但是要看你的用法是否恰当\n\n例子:\n```\nprivate static ConcurrentHashMap<String,AtomicInteger> map = new ConcurrentHashMap<>();\npublic static void putInTo(String key) {\n    AtomicInteger obj = map.get(key);\n    if(obj == null){\n        map.put(key, new AtomicInteger(0));\n    }else{\n        obj.incrementAndGet();\n        map.put(key, obj);\n    }\n}\n```\n\n这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。\n\n原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。\n\n这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法\n```\nprivate static ConcurrentMap<String, AtomicLong> wordCounts = newConcurrentHashMap<>();  \n   \npublic static long increase(String word) {  \n    AtomicLong number = wordCounts.get(word);  \n    if(number == null) {  \n        AtomicLong newNumber = newAtomicLong(0);  \n        number = wordCounts.putIfAbsent(word, newNumber);  \n        if(number == null) {  \n            number = newNumber;  \n        }  \n    }  \n    return number.incrementAndGet();  \n}\n```\n获取size\n```\npublic int size() {\n    final Segment<K,V>[] segments = this.segments;\n    int size;\n    boolean overflow; \n    long sum;         \n    long last = 0L;   \n    int retries = -1; \n    try {\n        for (;;) {\n            if (retries++ == RETRIES_BEFORE_LOCK) {  //1\n                for (int j = 0; j < segments.length; ++j)\n                    ensureSegment(j).lock(); \n            }\n            sum = 0L;\n            size = 0;\n            overflow = false;\n            for (int j = 0; j < segments.length; ++j) {\n                Segment<K,V> seg = segmentAt(segments, j);\n                if (seg != null) {\n                    sum += seg.modCount;  //2\n                    int c = seg.count;\n                    if (c < 0 || (size += c) < 0)\n                        overflow = true;\n                }\n            }\n            if (sum == last)\n                break;\n            last = sum;\n        }\n    } finally {\n        if (retries > RETRIES_BEFORE_LOCK) {\n            for (int j = 0; j < segments.length; ++j)\n                segmentAt(segments, j).unlock();\n        }\n    }\n    return overflow ? Integer.MAX_VALUE : size;\n}\n```\n\n注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count\n ","source":"_posts/java/1_concurrentHashMap.md","raw":"---\ntitle: 深入分析ConcurrentHashMap \ndate: 2017-05-03 15:24:25\ncomments: false\ntags: \n- java\n- ConcurrentHashMap\n- 并发\ncategories: \n- java\nkeywords: \n- java\n- ConcurrentHashMap\n- 并发\n---\n\n### HashMap的问题\nHashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。\n\n#### Hash表的数据结构\nHashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value>插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。\n如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。\n所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。\n\n#### HashMap的源码\n\n```\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    //计算Hash值\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    //如果存在值，替换旧值\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    //增加节点\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n上面代码是HashMap进行put一个元素时候的源码。\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    //如果大小大于现在的threshold时候，需要resize\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n```\n在增加节点时候会判断是否需要rehash操作。\n\n```\n void resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n    //新建一个Hash Table\n    Entry[] newTable = new Entry[newCapacity];\n    //吧旧oldtable 迁移到新的newTable上\n    transfer(newTable, initHashSeedAsNeeded(newCapacity));\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\n```\nresize源码会新建个更大的hash表\n\n```\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    //  从OldTable里摘一个元素出来，然后放到NewTable中\n    for (Entry<K,V> e : table) {\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n迁移原数据\n\n#### 正常ReHash过程\n\n就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。\n\n#### 并发下的Rehash\n\n假设有两个线程，当第一个线程执行到 \n```\n    Entry<K, V> next = e.next;\n```\n时候被挂起。\n```\n假设有三个值， <3,a>,<7,b>,<5,c>,HashMap的初始大小是2\n ______           e               next\n|__0___|       _______          _______          _______ \n|__1___| ---> |_<3,a>_| -----> |_<7,b>_| -----> |_<5,c>_|\n```\n那么现在线程1如下：\n```\n ______    \n|__0___|      \n|__1___|   \n|__2___|      \n|__3___|\n```\n那么线程2开始rehash：\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                next               e\n```\n\n那么如果现在线程1被调度开始执行：\n```\nnewTable[i] = e;\ne = next;\n```\n- 先是执行 newTalbe[i] = e;\n- 然后是e = next，导致了e指向了key(7)，\n- 而下一次循环的next = e.next导致了next指向了key(3)\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                e                 next\n```\n这样就会导致\n```\n线程1\n ______    \n|__0___|           __________________              \n|__1___|          |                 |            \n|__2___|       ___|___          ____|__ \n|__3___| ---> |_<3,a>_| -----> |_<7,b>_| ----> null\n                                \n```\n产生循环链表，导致死循环。\n\n### concurrentHashMap原理\nconcurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。\n\n![concurrentHashMap](../../../uploads/concurrentHashMap.png)\n\nHashEntry源码:\n```\nstatic final class HashEntry<K,V> {\n        final int hash;\n        final K key;\n        volatile V value;\n        volatile HashEntry<K,V> next;\n```\n\nvolatile关键字保证了多线程读取的时候一定是最新值。\n\nConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。\n\n#### 基本操作源码分析\n\n构造方法:\n```\npublic ConcurrentHashMap(int initialCapacity,\n                         float loadFactor, int concurrencyLevel) {\n    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)\n        throw new IllegalArgumentException();\n    if (concurrencyLevel > MAX_SEGMENTS)\n        concurrencyLevel = MAX_SEGMENTS;   //1\n    int sshift = 0;\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;    //2\n    }\n    this.segmentShift = 32 - sshift;  //3\n    this.segmentMask = ssize - 1;   //4\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    int c = initialCapacity / ssize;\n    if (c * ssize < initialCapacity)\n        ++c;\n    int cap = MIN_SEGMENT_TABLE_CAPACITY;\n    while (cap < c)\n        cap <<= 1;\n    Segment<K,V> s0 =\n        new Segment<K,V>(loadFactor, (int)(cap * loadFactor),\n                         (HashEntry<K,V>[])new HashEntry[cap]);//5\n    Segment<K,V>[] ss = (Segment<K,V>[])new Segment[ssize]; //6\n    UNSAFE.putOrderedObject(ss, SBASE, s0); \n    this.segments = ss;\n}\n```\n\n整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。\n\n注释1: 最大的并发等级不能超过MAX_SEGMENTS 1<<16(也就是1的二进制向左移16位,65535)\n\n注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.\n\n注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；\n\n注释5和6: 初始化segment\n\n1. 初始化每个segment的HashEntry长度；\n\n2. 创建segment数组和segment[0]。\n\n> HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。\n\n#### get操作\n```\npublic V get(Object key) {\n    Segment<K,V> s; \n    HashEntry<K,V>[] tab;\n    int h = hash(key);  //1\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&  //2\n        (tab = s.table) != null) {\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\n注释1: 根据key计算hash值\n\n注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环\n\n里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null\n\n#### put操作\n```\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash >>> segmentShift) & segmentMask;\n    if ((s = (Segment<K,V>)UNSAFE.getObject          \n         (segments, (j << SSHIFT) + SBASE)) == null) \n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}\n```\n1. 判断值是否为null\n\n2. 计算hash值\n\n3. 定位segment 如果不存在，则创建\n\n4. 调用segment的put方法\n\n还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true\n再来看看Segment的put方法\n```\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry<K,V> node = tryLock() ? null :\n        scanAndLockForPut(key, hash, value);  //1\n    V oldValue;\n    try {\n        HashEntry<K,V>[] tab = table;\n        int index = (tab.length - 1) & hash;\n        HashEntry<K,V> first = entryAt(tab, index);  //2\n        for (HashEntry<K,V> e = first;;) { //3\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash && key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry<K,V>(hash, key, value, first);\n                int c = count + 1;\n                if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}\n```\n注释1: 获取锁 ，保证线程安全\n\n注释2:定位到具体的HashEntry\n\n注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.\n\n最后释放锁,返回旧值.\n\n再说明一下put 和 putifAbsent的用法\n\n这两个方法本身是线程安全的,但是要看你的用法是否恰当\n\n例子:\n```\nprivate static ConcurrentHashMap<String,AtomicInteger> map = new ConcurrentHashMap<>();\npublic static void putInTo(String key) {\n    AtomicInteger obj = map.get(key);\n    if(obj == null){\n        map.put(key, new AtomicInteger(0));\n    }else{\n        obj.incrementAndGet();\n        map.put(key, obj);\n    }\n}\n```\n\n这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。\n\n原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。\n\n这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法\n```\nprivate static ConcurrentMap<String, AtomicLong> wordCounts = newConcurrentHashMap<>();  \n   \npublic static long increase(String word) {  \n    AtomicLong number = wordCounts.get(word);  \n    if(number == null) {  \n        AtomicLong newNumber = newAtomicLong(0);  \n        number = wordCounts.putIfAbsent(word, newNumber);  \n        if(number == null) {  \n            number = newNumber;  \n        }  \n    }  \n    return number.incrementAndGet();  \n}\n```\n获取size\n```\npublic int size() {\n    final Segment<K,V>[] segments = this.segments;\n    int size;\n    boolean overflow; \n    long sum;         \n    long last = 0L;   \n    int retries = -1; \n    try {\n        for (;;) {\n            if (retries++ == RETRIES_BEFORE_LOCK) {  //1\n                for (int j = 0; j < segments.length; ++j)\n                    ensureSegment(j).lock(); \n            }\n            sum = 0L;\n            size = 0;\n            overflow = false;\n            for (int j = 0; j < segments.length; ++j) {\n                Segment<K,V> seg = segmentAt(segments, j);\n                if (seg != null) {\n                    sum += seg.modCount;  //2\n                    int c = seg.count;\n                    if (c < 0 || (size += c) < 0)\n                        overflow = true;\n                }\n            }\n            if (sum == last)\n                break;\n            last = sum;\n        }\n    } finally {\n        if (retries > RETRIES_BEFORE_LOCK) {\n            for (int j = 0; j < segments.length; ++j)\n                segmentAt(segments, j).unlock();\n        }\n    }\n    return overflow ? Integer.MAX_VALUE : size;\n}\n```\n\n注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count\n ","slug":"java/1_concurrentHashMap","published":1,"updated":"2020-01-09T07:26:20.233Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsi003cn0ztw8pufzt5","content":"<h3 id=\"HashMap的问题\"><a href=\"#HashMap的问题\" class=\"headerlink\" title=\"HashMap的问题\"></a>HashMap的问题</h3><p>HashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。</p>\n<h4 id=\"Hash表的数据结构\"><a href=\"#Hash表的数据结构\" class=\"headerlink\" title=\"Hash表的数据结构\"></a>Hash表的数据结构</h4><p>HashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value=\"\">插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。<br>如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。<br>所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。</key,></p>\n<h4 id=\"HashMap的源码\"><a href=\"#HashMap的源码\" class=\"headerlink\" title=\"HashMap的源码\"></a>HashMap的源码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    if (table == EMPTY_TABLE) &#123;</div><div class=\"line\">        inflateTable(threshold);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return putForNullKey(value);</div><div class=\"line\">    //计算Hash值</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int i = indexFor(hash, table.length);</div><div class=\"line\">    //如果存在值，替换旧值</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            e.recordAccess(this);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    modCount++;</div><div class=\"line\">    //增加节点</div><div class=\"line\">    addEntry(hash, key, value, i);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码是HashMap进行put一个元素时候的源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class=\"line\">    //如果大小大于现在的threshold时候，需要resize</div><div class=\"line\">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class=\"line\">        resize(2 * table.length);</div><div class=\"line\">        hash = (null != key) ? hash(key) : 0;</div><div class=\"line\">        bucketIndex = indexFor(hash, table.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createEntry(hash, key, value, bucketIndex);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在增加节点时候会判断是否需要rehash操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> void resize(int newCapacity) &#123;</div><div class=\"line\">    Entry[] oldTable = table;</div><div class=\"line\">    int oldCapacity = oldTable.length;</div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">        threshold = Integer.MAX_VALUE;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //新建一个Hash Table</div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];</div><div class=\"line\">    //吧旧oldtable 迁移到新的newTable上</div><div class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class=\"line\">    table = newTable;</div><div class=\"line\">    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resize源码会新建个更大的hash表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable, boolean rehash) &#123;</div><div class=\"line\">    int newCapacity = newTable.length;</div><div class=\"line\">    //  从OldTable里摘一个元素出来，然后放到NewTable中</div><div class=\"line\">    for (Entry&lt;K,V&gt; e : table) &#123;</div><div class=\"line\">        while(null != e) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; next = e.next;</div><div class=\"line\">            if (rehash) &#123;</div><div class=\"line\">                e.hash = null == e.key ? 0 : hash(e.key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            int i = indexFor(e.hash, newCapacity);</div><div class=\"line\">            e.next = newTable[i];</div><div class=\"line\">            newTable[i] = e;</div><div class=\"line\">            e = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迁移原数据</p>\n<h4 id=\"正常ReHash过程\"><a href=\"#正常ReHash过程\" class=\"headerlink\" title=\"正常ReHash过程\"></a>正常ReHash过程</h4><p>就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。</p>\n<h4 id=\"并发下的Rehash\"><a href=\"#并发下的Rehash\" class=\"headerlink\" title=\"并发下的Rehash\"></a>并发下的Rehash</h4><p>假设有两个线程，当第一个线程执行到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Entry&lt;K, V&gt; next = e.next;</div></pre></td></tr></table></figure></p>\n<p>时候被挂起。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">假设有三个值， &lt;3,a&gt;,&lt;7,b&gt;,&lt;5,c&gt;,HashMap的初始大小是2</div><div class=\"line\"> ______           e               next</div><div class=\"line\">|__0___|       _______          _______          _______ </div><div class=\"line\">|__1___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;5,c&gt;_|</div></pre></td></tr></table></figure></p>\n<p>那么现在线程1如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|      </div><div class=\"line\">|__1___|   </div><div class=\"line\">|__2___|      </div><div class=\"line\">|__3___|</div></pre></td></tr></table></figure></p>\n<p>那么线程2开始rehash：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                next               e</div></pre></td></tr></table></figure></p>\n<p>那么如果现在线程1被调度开始执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newTable[i] = e;</div><div class=\"line\">e = next;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>先是执行 newTalbe[i] = e;</li>\n<li>然后是e = next，导致了e指向了key(7)，</li>\n<li>而下一次循环的next = e.next导致了next指向了key(3)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                e                 next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就会导致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">线程1</div><div class=\"line\"> ______    </div><div class=\"line\">|__0___|           __________________              </div><div class=\"line\">|__1___|          |                 |            </div><div class=\"line\">|__2___|       ___|___          ____|__ </div><div class=\"line\">|__3___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| ----&gt; null</div></pre></td></tr></table></figure></p>\n<p>产生循环链表，导致死循环。</p>\n<h3 id=\"concurrentHashMap原理\"><a href=\"#concurrentHashMap原理\" class=\"headerlink\" title=\"concurrentHashMap原理\"></a>concurrentHashMap原理</h3><p>concurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>\n<p><img src=\"../../../uploads/concurrentHashMap.png\" alt=\"concurrentHashMap\"></p>\n<p>HashEntry源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class HashEntry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        volatile V value;</div><div class=\"line\">        volatile HashEntry&lt;K,V&gt; next;</div></pre></td></tr></table></figure></p>\n<p>volatile关键字保证了多线程读取的时候一定是最新值。</p>\n<p>ConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。</p>\n<h4 id=\"基本操作源码分析\"><a href=\"#基本操作源码分析\" class=\"headerlink\" title=\"基本操作源码分析\"></a>基本操作源码分析</h4><p>构造方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ConcurrentHashMap(int initialCapacity,</div><div class=\"line\">                         float loadFactor, int concurrencyLevel) &#123;</div><div class=\"line\">    if (!(loadFactor &gt; 0) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0)</div><div class=\"line\">        throw new IllegalArgumentException();</div><div class=\"line\">    if (concurrencyLevel &gt; MAX_SEGMENTS)</div><div class=\"line\">        concurrencyLevel = MAX_SEGMENTS;   //1</div><div class=\"line\">    int sshift = 0;</div><div class=\"line\">    int ssize = 1;</div><div class=\"line\">    while (ssize &lt; concurrencyLevel) &#123;</div><div class=\"line\">        ++sshift;</div><div class=\"line\">        ssize &lt;&lt;= 1;    //2</div><div class=\"line\">    &#125;</div><div class=\"line\">    this.segmentShift = 32 - sshift;  //3</div><div class=\"line\">    this.segmentMask = ssize - 1;   //4</div><div class=\"line\">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</div><div class=\"line\">    int c = initialCapacity / ssize;</div><div class=\"line\">    if (c * ssize &lt; initialCapacity)</div><div class=\"line\">        ++c;</div><div class=\"line\">    int cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class=\"line\">    while (cap &lt; c)</div><div class=\"line\">        cap &lt;&lt;= 1;</div><div class=\"line\">    Segment&lt;K,V&gt; s0 =</div><div class=\"line\">        new Segment&lt;K,V&gt;(loadFactor, (int)(cap * loadFactor),</div><div class=\"line\">                         (HashEntry&lt;K,V&gt;[])new HashEntry[cap]);//5</div><div class=\"line\">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])new Segment[ssize]; //6</div><div class=\"line\">    UNSAFE.putOrderedObject(ss, SBASE, s0); </div><div class=\"line\">    this.segments = ss;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。</p>\n<p>注释1: 最大的并发等级不能超过MAX_SEGMENTS 1&lt;&lt;16(也就是1的二进制向左移16位,65535)</p>\n<p>注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.</p>\n<p>注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；</p>\n<p>注释5和6: 初始化segment</p>\n<ol>\n<li><p>初始化每个segment的HashEntry长度；</p>\n</li>\n<li><p>创建segment数组和segment[0]。</p>\n</li>\n</ol>\n<blockquote>\n<p>HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。</p>\n</blockquote>\n<h4 id=\"get操作\"><a href=\"#get操作\" class=\"headerlink\" title=\"get操作\"></a>get操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s; </div><div class=\"line\">    HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">    int h = hash(key);  //1</div><div class=\"line\">    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;  //2</div><div class=\"line\">        (tab = s.table) != null) &#123;</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                 (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">             e != null; e = e.next) &#123;</div><div class=\"line\">            K k;</div><div class=\"line\">            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                return e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注释1: 根据key计算hash值</p>\n<p>注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环</p>\n<p>里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null</p>\n<h4 id=\"put操作\"><a href=\"#put操作\" class=\"headerlink\" title=\"put操作\"></a>put操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s;</div><div class=\"line\">    if (value == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </div><div class=\"line\">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) </div><div class=\"line\">        s = ensureSegment(j);</div><div class=\"line\">    return s.put(key, hash, value, false);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>判断值是否为null</p>\n</li>\n<li><p>计算hash值</p>\n</li>\n<li><p>定位segment 如果不存在，则创建</p>\n</li>\n<li><p>调用segment的put方法</p>\n</li>\n</ol>\n<p>还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true<br>再来看看Segment的put方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">    HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">        scanAndLockForPut(key, hash, value);  //1</div><div class=\"line\">    V oldValue;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">        int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);  //2</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = first;;) &#123; //3</div><div class=\"line\">            if (e != null) &#123;</div><div class=\"line\">                K k;</div><div class=\"line\">                if ((k = e.key) == key ||</div><div class=\"line\">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                    oldValue = e.value;</div><div class=\"line\">                    if (!onlyIfAbsent) &#123;</div><div class=\"line\">                        e.value = value;</div><div class=\"line\">                        ++modCount;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                if (node != null)</div><div class=\"line\">                    node.setNext(first);</div><div class=\"line\">                else</div><div class=\"line\">                    node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                int c = count + 1;</div><div class=\"line\">                if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                    rehash(node);</div><div class=\"line\">                else</div><div class=\"line\">                    setEntryAt(tab, index, node);</div><div class=\"line\">                ++modCount;</div><div class=\"line\">                count = c;</div><div class=\"line\">                oldValue = null;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">    return oldValue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1: 获取锁 ，保证线程安全</p>\n<p>注释2:定位到具体的HashEntry</p>\n<p>注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.</p>\n<p>最后释放锁,返回旧值.</p>\n<p>再说明一下put 和 putifAbsent的用法</p>\n<p>这两个方法本身是线程安全的,但是要看你的用法是否恰当</p>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentHashMap&lt;String,AtomicInteger&gt; map = new ConcurrentHashMap&lt;&gt;();</div><div class=\"line\">public static void putInTo(String key) &#123;</div><div class=\"line\">    AtomicInteger obj = map.get(key);</div><div class=\"line\">    if(obj == null)&#123;</div><div class=\"line\">        map.put(key, new AtomicInteger(0));</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        obj.incrementAndGet();</div><div class=\"line\">        map.put(key, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。</p>\n<p>原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。</p>\n<p>这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentMap&lt;String, AtomicLong&gt; wordCounts = newConcurrentHashMap&lt;&gt;();  </div><div class=\"line\">   </div><div class=\"line\">public static long increase(String word) &#123;  </div><div class=\"line\">    AtomicLong number = wordCounts.get(word);  </div><div class=\"line\">    if(number == null) &#123;  </div><div class=\"line\">        AtomicLong newNumber = newAtomicLong(0);  </div><div class=\"line\">        number = wordCounts.putIfAbsent(word, newNumber);  </div><div class=\"line\">        if(number == null) &#123;  </div><div class=\"line\">            number = newNumber;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return number.incrementAndGet();  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>获取size<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int size() &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] segments = this.segments;</div><div class=\"line\">    int size;</div><div class=\"line\">    boolean overflow; </div><div class=\"line\">    long sum;         </div><div class=\"line\">    long last = 0L;   </div><div class=\"line\">    int retries = -1; </div><div class=\"line\">    try &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            if (retries++ == RETRIES_BEFORE_LOCK) &#123;  //1</div><div class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                    ensureSegment(j).lock(); </div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = 0L;</div><div class=\"line\">            size = 0;</div><div class=\"line\">            overflow = false;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j) &#123;</div><div class=\"line\">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class=\"line\">                if (seg != null) &#123;</div><div class=\"line\">                    sum += seg.modCount;  //2</div><div class=\"line\">                    int c = seg.count;</div><div class=\"line\">                    if (c &lt; 0 || (size += c) &lt; 0)</div><div class=\"line\">                        overflow = true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum == last)</div><div class=\"line\">                break;</div><div class=\"line\">            last = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                segmentAt(segments, j).unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return overflow ? Integer.MAX_VALUE : size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HashMap的问题\"><a href=\"#HashMap的问题\" class=\"headerlink\" title=\"HashMap的问题\"></a>HashMap的问题</h3><p>HashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。</p>\n<h4 id=\"Hash表的数据结构\"><a href=\"#Hash表的数据结构\" class=\"headerlink\" title=\"Hash表的数据结构\"></a>Hash表的数据结构</h4><p>HashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value>插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。<br>如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。<br>所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。</p>\n<h4 id=\"HashMap的源码\"><a href=\"#HashMap的源码\" class=\"headerlink\" title=\"HashMap的源码\"></a>HashMap的源码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    if (table == EMPTY_TABLE) &#123;</div><div class=\"line\">        inflateTable(threshold);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return putForNullKey(value);</div><div class=\"line\">    //计算Hash值</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int i = indexFor(hash, table.length);</div><div class=\"line\">    //如果存在值，替换旧值</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            e.recordAccess(this);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    modCount++;</div><div class=\"line\">    //增加节点</div><div class=\"line\">    addEntry(hash, key, value, i);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码是HashMap进行put一个元素时候的源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class=\"line\">    //如果大小大于现在的threshold时候，需要resize</div><div class=\"line\">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class=\"line\">        resize(2 * table.length);</div><div class=\"line\">        hash = (null != key) ? hash(key) : 0;</div><div class=\"line\">        bucketIndex = indexFor(hash, table.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createEntry(hash, key, value, bucketIndex);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在增加节点时候会判断是否需要rehash操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> void resize(int newCapacity) &#123;</div><div class=\"line\">    Entry[] oldTable = table;</div><div class=\"line\">    int oldCapacity = oldTable.length;</div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">        threshold = Integer.MAX_VALUE;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //新建一个Hash Table</div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];</div><div class=\"line\">    //吧旧oldtable 迁移到新的newTable上</div><div class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class=\"line\">    table = newTable;</div><div class=\"line\">    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resize源码会新建个更大的hash表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable, boolean rehash) &#123;</div><div class=\"line\">    int newCapacity = newTable.length;</div><div class=\"line\">    //  从OldTable里摘一个元素出来，然后放到NewTable中</div><div class=\"line\">    for (Entry&lt;K,V&gt; e : table) &#123;</div><div class=\"line\">        while(null != e) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; next = e.next;</div><div class=\"line\">            if (rehash) &#123;</div><div class=\"line\">                e.hash = null == e.key ? 0 : hash(e.key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            int i = indexFor(e.hash, newCapacity);</div><div class=\"line\">            e.next = newTable[i];</div><div class=\"line\">            newTable[i] = e;</div><div class=\"line\">            e = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迁移原数据</p>\n<h4 id=\"正常ReHash过程\"><a href=\"#正常ReHash过程\" class=\"headerlink\" title=\"正常ReHash过程\"></a>正常ReHash过程</h4><p>就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。</p>\n<h4 id=\"并发下的Rehash\"><a href=\"#并发下的Rehash\" class=\"headerlink\" title=\"并发下的Rehash\"></a>并发下的Rehash</h4><p>假设有两个线程，当第一个线程执行到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Entry&lt;K, V&gt; next = e.next;</div></pre></td></tr></table></figure></p>\n<p>时候被挂起。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">假设有三个值， &lt;3,a&gt;,&lt;7,b&gt;,&lt;5,c&gt;,HashMap的初始大小是2</div><div class=\"line\"> ______           e               next</div><div class=\"line\">|__0___|       _______          _______          _______ </div><div class=\"line\">|__1___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;5,c&gt;_|</div></pre></td></tr></table></figure></p>\n<p>那么现在线程1如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|      </div><div class=\"line\">|__1___|   </div><div class=\"line\">|__2___|      </div><div class=\"line\">|__3___|</div></pre></td></tr></table></figure></p>\n<p>那么线程2开始rehash：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                next               e</div></pre></td></tr></table></figure></p>\n<p>那么如果现在线程1被调度开始执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newTable[i] = e;</div><div class=\"line\">e = next;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>先是执行 newTalbe[i] = e;</li>\n<li>然后是e = next，导致了e指向了key(7)，</li>\n<li>而下一次循环的next = e.next导致了next指向了key(3)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                e                 next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就会导致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">线程1</div><div class=\"line\"> ______    </div><div class=\"line\">|__0___|           __________________              </div><div class=\"line\">|__1___|          |                 |            </div><div class=\"line\">|__2___|       ___|___          ____|__ </div><div class=\"line\">|__3___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| ----&gt; null</div></pre></td></tr></table></figure></p>\n<p>产生循环链表，导致死循环。</p>\n<h3 id=\"concurrentHashMap原理\"><a href=\"#concurrentHashMap原理\" class=\"headerlink\" title=\"concurrentHashMap原理\"></a>concurrentHashMap原理</h3><p>concurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>\n<p><img src=\"../../../uploads/concurrentHashMap.png\" alt=\"concurrentHashMap\"></p>\n<p>HashEntry源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class HashEntry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        volatile V value;</div><div class=\"line\">        volatile HashEntry&lt;K,V&gt; next;</div></pre></td></tr></table></figure></p>\n<p>volatile关键字保证了多线程读取的时候一定是最新值。</p>\n<p>ConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。</p>\n<h4 id=\"基本操作源码分析\"><a href=\"#基本操作源码分析\" class=\"headerlink\" title=\"基本操作源码分析\"></a>基本操作源码分析</h4><p>构造方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ConcurrentHashMap(int initialCapacity,</div><div class=\"line\">                         float loadFactor, int concurrencyLevel) &#123;</div><div class=\"line\">    if (!(loadFactor &gt; 0) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0)</div><div class=\"line\">        throw new IllegalArgumentException();</div><div class=\"line\">    if (concurrencyLevel &gt; MAX_SEGMENTS)</div><div class=\"line\">        concurrencyLevel = MAX_SEGMENTS;   //1</div><div class=\"line\">    int sshift = 0;</div><div class=\"line\">    int ssize = 1;</div><div class=\"line\">    while (ssize &lt; concurrencyLevel) &#123;</div><div class=\"line\">        ++sshift;</div><div class=\"line\">        ssize &lt;&lt;= 1;    //2</div><div class=\"line\">    &#125;</div><div class=\"line\">    this.segmentShift = 32 - sshift;  //3</div><div class=\"line\">    this.segmentMask = ssize - 1;   //4</div><div class=\"line\">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</div><div class=\"line\">    int c = initialCapacity / ssize;</div><div class=\"line\">    if (c * ssize &lt; initialCapacity)</div><div class=\"line\">        ++c;</div><div class=\"line\">    int cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class=\"line\">    while (cap &lt; c)</div><div class=\"line\">        cap &lt;&lt;= 1;</div><div class=\"line\">    Segment&lt;K,V&gt; s0 =</div><div class=\"line\">        new Segment&lt;K,V&gt;(loadFactor, (int)(cap * loadFactor),</div><div class=\"line\">                         (HashEntry&lt;K,V&gt;[])new HashEntry[cap]);//5</div><div class=\"line\">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])new Segment[ssize]; //6</div><div class=\"line\">    UNSAFE.putOrderedObject(ss, SBASE, s0); </div><div class=\"line\">    this.segments = ss;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。</p>\n<p>注释1: 最大的并发等级不能超过MAX_SEGMENTS 1&lt;&lt;16(也就是1的二进制向左移16位,65535)</p>\n<p>注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.</p>\n<p>注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；</p>\n<p>注释5和6: 初始化segment</p>\n<ol>\n<li><p>初始化每个segment的HashEntry长度；</p>\n</li>\n<li><p>创建segment数组和segment[0]。</p>\n</li>\n</ol>\n<blockquote>\n<p>HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。</p>\n</blockquote>\n<h4 id=\"get操作\"><a href=\"#get操作\" class=\"headerlink\" title=\"get操作\"></a>get操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s; </div><div class=\"line\">    HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">    int h = hash(key);  //1</div><div class=\"line\">    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;  //2</div><div class=\"line\">        (tab = s.table) != null) &#123;</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                 (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">             e != null; e = e.next) &#123;</div><div class=\"line\">            K k;</div><div class=\"line\">            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                return e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注释1: 根据key计算hash值</p>\n<p>注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环</p>\n<p>里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null</p>\n<h4 id=\"put操作\"><a href=\"#put操作\" class=\"headerlink\" title=\"put操作\"></a>put操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s;</div><div class=\"line\">    if (value == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </div><div class=\"line\">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) </div><div class=\"line\">        s = ensureSegment(j);</div><div class=\"line\">    return s.put(key, hash, value, false);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>判断值是否为null</p>\n</li>\n<li><p>计算hash值</p>\n</li>\n<li><p>定位segment 如果不存在，则创建</p>\n</li>\n<li><p>调用segment的put方法</p>\n</li>\n</ol>\n<p>还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true<br>再来看看Segment的put方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">    HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">        scanAndLockForPut(key, hash, value);  //1</div><div class=\"line\">    V oldValue;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">        int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);  //2</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = first;;) &#123; //3</div><div class=\"line\">            if (e != null) &#123;</div><div class=\"line\">                K k;</div><div class=\"line\">                if ((k = e.key) == key ||</div><div class=\"line\">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                    oldValue = e.value;</div><div class=\"line\">                    if (!onlyIfAbsent) &#123;</div><div class=\"line\">                        e.value = value;</div><div class=\"line\">                        ++modCount;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                if (node != null)</div><div class=\"line\">                    node.setNext(first);</div><div class=\"line\">                else</div><div class=\"line\">                    node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                int c = count + 1;</div><div class=\"line\">                if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                    rehash(node);</div><div class=\"line\">                else</div><div class=\"line\">                    setEntryAt(tab, index, node);</div><div class=\"line\">                ++modCount;</div><div class=\"line\">                count = c;</div><div class=\"line\">                oldValue = null;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">    return oldValue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1: 获取锁 ，保证线程安全</p>\n<p>注释2:定位到具体的HashEntry</p>\n<p>注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.</p>\n<p>最后释放锁,返回旧值.</p>\n<p>再说明一下put 和 putifAbsent的用法</p>\n<p>这两个方法本身是线程安全的,但是要看你的用法是否恰当</p>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentHashMap&lt;String,AtomicInteger&gt; map = new ConcurrentHashMap&lt;&gt;();</div><div class=\"line\">public static void putInTo(String key) &#123;</div><div class=\"line\">    AtomicInteger obj = map.get(key);</div><div class=\"line\">    if(obj == null)&#123;</div><div class=\"line\">        map.put(key, new AtomicInteger(0));</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        obj.incrementAndGet();</div><div class=\"line\">        map.put(key, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。</p>\n<p>原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。</p>\n<p>这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentMap&lt;String, AtomicLong&gt; wordCounts = newConcurrentHashMap&lt;&gt;();  </div><div class=\"line\">   </div><div class=\"line\">public static long increase(String word) &#123;  </div><div class=\"line\">    AtomicLong number = wordCounts.get(word);  </div><div class=\"line\">    if(number == null) &#123;  </div><div class=\"line\">        AtomicLong newNumber = newAtomicLong(0);  </div><div class=\"line\">        number = wordCounts.putIfAbsent(word, newNumber);  </div><div class=\"line\">        if(number == null) &#123;  </div><div class=\"line\">            number = newNumber;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return number.incrementAndGet();  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>获取size<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int size() &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] segments = this.segments;</div><div class=\"line\">    int size;</div><div class=\"line\">    boolean overflow; </div><div class=\"line\">    long sum;         </div><div class=\"line\">    long last = 0L;   </div><div class=\"line\">    int retries = -1; </div><div class=\"line\">    try &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            if (retries++ == RETRIES_BEFORE_LOCK) &#123;  //1</div><div class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                    ensureSegment(j).lock(); </div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = 0L;</div><div class=\"line\">            size = 0;</div><div class=\"line\">            overflow = false;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j) &#123;</div><div class=\"line\">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class=\"line\">                if (seg != null) &#123;</div><div class=\"line\">                    sum += seg.modCount;  //2</div><div class=\"line\">                    int c = seg.count;</div><div class=\"line\">                    if (c &lt; 0 || (size += c) &lt; 0)</div><div class=\"line\">                        overflow = true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum == last)</div><div class=\"line\">                break;</div><div class=\"line\">            last = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                segmentAt(segments, j).unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return overflow ? Integer.MAX_VALUE : size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count</p>\n"},{"title":"synchronized和lock","date":"2019-11-16T03:46:23.000Z","comments":0,"keywords":["java","synchronized","lock","并发"],"_content":"\n### 锁的种类\n\n锁的种类很多，包括：自旋锁(CAS)、阻塞锁、可重入锁、读写锁、互斥锁、悲观锁、乐观锁、公平锁、可中断锁等等，主要介绍下可重入锁、读写锁、可中断锁和公平锁。\n\n#### 可重入锁\n\n> 如果锁具备可重入性，则称作为可重入锁。synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举比如说，当一个线程执行到method1 的synchronized方法时，而在method1中会调用另外一个synchronized方法method2，此时该线程不必重新去申请锁，而是可以直接执行方法method2。\n\n#### 读写锁\n\n> 读写锁将对一个资源的访问分成了2个锁，如文件，一个读锁和一个写锁。正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。可以通过readLock()获取读锁，通过writeLock()获取写锁。\n\n#### 可中断锁\n\n> 可中断锁，即可以中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。\n> 如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。\n> Lock接口中的lockInterruptibly()方法就体现了Lock的可中断性。\n\n#### 公平锁\n\n> 公平锁即尽量以请求锁的顺序来获取锁。同时有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该锁，这种就是公平锁。\n> 非公平锁即无法保证锁的获取是按照请求锁的顺序进行的，这样就可能导致某个或者一些线程永远获取不到锁。\n> synchronized是非公平锁，它无法保证等待的线程获取锁的顺序。对于ReentrantLock和ReentrantReadWriteLock，默认情况下是非公平锁，但是可以设置为公平锁。\n\n### synchronized和lock的用法\n\n#### synchronized\n\nsynchronized是Java的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码，同时它还可以保证共享变量的内存可见性。\n\n##### 修饰代码块\n\n```\npublic void method(){\n    synchronized (Object o){\n        //\n    }\n}\n```\n> 作用于代码块，synchronized后跟括号，括号里是变量，每次只会有一个线程进入该代码块。\n\n##### 修饰方法\n\n```\npublic synchronized void method(){\n    //\n}\n```\n\n> 作用于方法时，一次只有一个线程进入该方法，其他线程此时想调用只能排队等候。\n\n##### 修饰类\n\n```\npublic static void menthed(){\n    synchronized(Service.class) {\n    }\n}\n```\n\n> 如果线程进入，则线程在该类中所有操作不能进行，包括静态变量和静态方法，对于含有静态方法和静态变量的代码块的同步，通常使用这种方式。\n\n#### Lock\n\njava.util.concurrent.locks 包下有以下这些类：\n\n![类](../../uploads/javasource/lock.jpeg)\n\nReetrantLock实现了Lock接口，ReadWriteLock是读写锁的接口，由ReentrantReadWriteLock实现。\n\n##### Lock\n\n```\npublic interface Lock {\n\n    void lock();\n\n    void lockInterruptibly() throws InterruptedException;\n\n    boolean tryLock();\n\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n\n    void unlock();\n\n    Condition newCondition();\n}\n```\n\nLock接口中定义了这6个接口。\n\n- lock():用来获取锁，如果锁已经被其他线程获取，则会处于等待状态。使用Lock则必须主动释放锁，发生异常也不会自动释放锁，所以要在try{}catch()中进行，finally中释放锁。\n- lockInterruptibly():通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。\n- tryLock():尝试获取锁，如果获取成功，则返回true，如果获取失败则返回false。这个方法会立即返回，拿不到锁也不会等待。\n- tryLock(long time, TimeUnit unit):也是尝试获取锁，不过会有设定的等待时间。\n- unlock():释放锁\n- newCondition(): 创建一个Condition，Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式。\n\n##### ReentrantLock\n\nReentrantLock 实现了Lock接口，是一个可重入锁，内部定义了公平锁和非公平锁，默认是非公平锁。\n\n```\npublic class ReentrantLockTest {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        ReentrantLock lock = new ReentrantLock();\n\n        for (int i = 1; i <= 3; i++) {\n            lock.lock();\n        }\n\n        for(int i=1;i<=3;i++){\n            try {\n\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n```\n\n> ReentrantLock 可以通过lock()方法加锁多次，在通过unlock()方法释放锁多次使得程序正常退出，所以ReentrantLocl是可重入锁。\n\n- ReentrantLock和synchronized都是独占锁,只允许线程互斥的访问临界区。synchronized是隐式的，ReentrantLocl是显示的。\n- ReentrantLock和synchronized都是可重入的。synchronized因为可重入因此可以放在被递归执行的方法上,且不用担心线程最后能否正确释放锁；而ReentrantLock在重入时要却确保重复获取锁的次数必须和重复释放锁的次数一样，否则可能导致其他线程无法获得该锁。\n\n##### ReadWriteLock\n\n```\npublic interface ReadWriteLock {\n    Lock readLock();\n\n    Lock writeLock();\n}\n```\n\nReadWriteLock是读写锁，定义了一个获取读锁，一个获取写锁的方法。如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁；如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。\n\n#### synchronized和lock的区别\n\n- Lock是一个接口，而synchronized是java中的关键字。\n- synchronized在发生异常的时候会自动释放锁，而Lock在发生异常的时候仍需要手动去释放锁。\n- Lock可以让等待的线程响应中断，而synchronized不可以，会是等待线程一直等待下去，直到获取锁。\n- Lock可以知道是否获取到锁。\n- ReadWriteLock可以提高多读的效率。\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/3_synchronizedAndlock.md","raw":"---\ntitle: synchronized和lock\ndate: 2019-11-16 11:46:23\ncomments: false\ntags: \n- java\n- synchronized\n- lock\n- 并发\ncategories: \n- java\nkeywords: \n- java\n- synchronized\n- lock\n- 并发\n---\n\n### 锁的种类\n\n锁的种类很多，包括：自旋锁(CAS)、阻塞锁、可重入锁、读写锁、互斥锁、悲观锁、乐观锁、公平锁、可中断锁等等，主要介绍下可重入锁、读写锁、可中断锁和公平锁。\n\n#### 可重入锁\n\n> 如果锁具备可重入性，则称作为可重入锁。synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举比如说，当一个线程执行到method1 的synchronized方法时，而在method1中会调用另外一个synchronized方法method2，此时该线程不必重新去申请锁，而是可以直接执行方法method2。\n\n#### 读写锁\n\n> 读写锁将对一个资源的访问分成了2个锁，如文件，一个读锁和一个写锁。正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。可以通过readLock()获取读锁，通过writeLock()获取写锁。\n\n#### 可中断锁\n\n> 可中断锁，即可以中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。\n> 如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。\n> Lock接口中的lockInterruptibly()方法就体现了Lock的可中断性。\n\n#### 公平锁\n\n> 公平锁即尽量以请求锁的顺序来获取锁。同时有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该锁，这种就是公平锁。\n> 非公平锁即无法保证锁的获取是按照请求锁的顺序进行的，这样就可能导致某个或者一些线程永远获取不到锁。\n> synchronized是非公平锁，它无法保证等待的线程获取锁的顺序。对于ReentrantLock和ReentrantReadWriteLock，默认情况下是非公平锁，但是可以设置为公平锁。\n\n### synchronized和lock的用法\n\n#### synchronized\n\nsynchronized是Java的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码，同时它还可以保证共享变量的内存可见性。\n\n##### 修饰代码块\n\n```\npublic void method(){\n    synchronized (Object o){\n        //\n    }\n}\n```\n> 作用于代码块，synchronized后跟括号，括号里是变量，每次只会有一个线程进入该代码块。\n\n##### 修饰方法\n\n```\npublic synchronized void method(){\n    //\n}\n```\n\n> 作用于方法时，一次只有一个线程进入该方法，其他线程此时想调用只能排队等候。\n\n##### 修饰类\n\n```\npublic static void menthed(){\n    synchronized(Service.class) {\n    }\n}\n```\n\n> 如果线程进入，则线程在该类中所有操作不能进行，包括静态变量和静态方法，对于含有静态方法和静态变量的代码块的同步，通常使用这种方式。\n\n#### Lock\n\njava.util.concurrent.locks 包下有以下这些类：\n\n![类](../../uploads/javasource/lock.jpeg)\n\nReetrantLock实现了Lock接口，ReadWriteLock是读写锁的接口，由ReentrantReadWriteLock实现。\n\n##### Lock\n\n```\npublic interface Lock {\n\n    void lock();\n\n    void lockInterruptibly() throws InterruptedException;\n\n    boolean tryLock();\n\n    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n\n    void unlock();\n\n    Condition newCondition();\n}\n```\n\nLock接口中定义了这6个接口。\n\n- lock():用来获取锁，如果锁已经被其他线程获取，则会处于等待状态。使用Lock则必须主动释放锁，发生异常也不会自动释放锁，所以要在try{}catch()中进行，finally中释放锁。\n- lockInterruptibly():通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。\n- tryLock():尝试获取锁，如果获取成功，则返回true，如果获取失败则返回false。这个方法会立即返回，拿不到锁也不会等待。\n- tryLock(long time, TimeUnit unit):也是尝试获取锁，不过会有设定的等待时间。\n- unlock():释放锁\n- newCondition(): 创建一个Condition，Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式。\n\n##### ReentrantLock\n\nReentrantLock 实现了Lock接口，是一个可重入锁，内部定义了公平锁和非公平锁，默认是非公平锁。\n\n```\npublic class ReentrantLockTest {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        ReentrantLock lock = new ReentrantLock();\n\n        for (int i = 1; i <= 3; i++) {\n            lock.lock();\n        }\n\n        for(int i=1;i<=3;i++){\n            try {\n\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n```\n\n> ReentrantLock 可以通过lock()方法加锁多次，在通过unlock()方法释放锁多次使得程序正常退出，所以ReentrantLocl是可重入锁。\n\n- ReentrantLock和synchronized都是独占锁,只允许线程互斥的访问临界区。synchronized是隐式的，ReentrantLocl是显示的。\n- ReentrantLock和synchronized都是可重入的。synchronized因为可重入因此可以放在被递归执行的方法上,且不用担心线程最后能否正确释放锁；而ReentrantLock在重入时要却确保重复获取锁的次数必须和重复释放锁的次数一样，否则可能导致其他线程无法获得该锁。\n\n##### ReadWriteLock\n\n```\npublic interface ReadWriteLock {\n    Lock readLock();\n\n    Lock writeLock();\n}\n```\n\nReadWriteLock是读写锁，定义了一个获取读锁，一个获取写锁的方法。如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁；如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。\n\n#### synchronized和lock的区别\n\n- Lock是一个接口，而synchronized是java中的关键字。\n- synchronized在发生异常的时候会自动释放锁，而Lock在发生异常的时候仍需要手动去释放锁。\n- Lock可以让等待的线程响应中断，而synchronized不可以，会是等待线程一直等待下去，直到获取锁。\n- Lock可以知道是否获取到锁。\n- ReadWriteLock可以提高多读的效率。\n\n\n\n\n\n\n\n\n\n","slug":"java/3_synchronizedAndlock","published":1,"updated":"2020-01-02T05:49:23.762Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsl003gn0zt2ql6isbg","content":"<h3 id=\"锁的种类\"><a href=\"#锁的种类\" class=\"headerlink\" title=\"锁的种类\"></a>锁的种类</h3><p>锁的种类很多，包括：自旋锁(CAS)、阻塞锁、可重入锁、读写锁、互斥锁、悲观锁、乐观锁、公平锁、可中断锁等等，主要介绍下可重入锁、读写锁、可中断锁和公平锁。</p>\n<h4 id=\"可重入锁\"><a href=\"#可重入锁\" class=\"headerlink\" title=\"可重入锁\"></a>可重入锁</h4><blockquote>\n<p>如果锁具备可重入性，则称作为可重入锁。synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举比如说，当一个线程执行到method1 的synchronized方法时，而在method1中会调用另外一个synchronized方法method2，此时该线程不必重新去申请锁，而是可以直接执行方法method2。</p>\n</blockquote>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><blockquote>\n<p>读写锁将对一个资源的访问分成了2个锁，如文件，一个读锁和一个写锁。正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。可以通过readLock()获取读锁，通过writeLock()获取写锁。</p>\n</blockquote>\n<h4 id=\"可中断锁\"><a href=\"#可中断锁\" class=\"headerlink\" title=\"可中断锁\"></a>可中断锁</h4><blockquote>\n<p>可中断锁，即可以中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。<br>如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。<br>Lock接口中的lockInterruptibly()方法就体现了Lock的可中断性。</p>\n</blockquote>\n<h4 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h4><blockquote>\n<p>公平锁即尽量以请求锁的顺序来获取锁。同时有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该锁，这种就是公平锁。<br>非公平锁即无法保证锁的获取是按照请求锁的顺序进行的，这样就可能导致某个或者一些线程永远获取不到锁。<br>synchronized是非公平锁，它无法保证等待的线程获取锁的顺序。对于ReentrantLock和ReentrantReadWriteLock，默认情况下是非公平锁，但是可以设置为公平锁。</p>\n</blockquote>\n<h3 id=\"synchronized和lock的用法\"><a href=\"#synchronized和lock的用法\" class=\"headerlink\" title=\"synchronized和lock的用法\"></a>synchronized和lock的用法</h3><h4 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h4><p>synchronized是Java的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码，同时它还可以保证共享变量的内存可见性。</p>\n<h5 id=\"修饰代码块\"><a href=\"#修饰代码块\" class=\"headerlink\" title=\"修饰代码块\"></a>修饰代码块</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void method()&#123;</div><div class=\"line\">    synchronized (Object o)&#123;</div><div class=\"line\">        //</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>作用于代码块，synchronized后跟括号，括号里是变量，每次只会有一个线程进入该代码块。</p>\n</blockquote>\n<h5 id=\"修饰方法\"><a href=\"#修饰方法\" class=\"headerlink\" title=\"修饰方法\"></a>修饰方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public synchronized void method()&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>作用于方法时，一次只有一个线程进入该方法，其他线程此时想调用只能排队等候。</p>\n</blockquote>\n<h5 id=\"修饰类\"><a href=\"#修饰类\" class=\"headerlink\" title=\"修饰类\"></a>修饰类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void menthed()&#123;</div><div class=\"line\">    synchronized(Service.class) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果线程进入，则线程在该类中所有操作不能进行，包括静态变量和静态方法，对于含有静态方法和静态变量的代码块的同步，通常使用这种方式。</p>\n</blockquote>\n<h4 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h4><p>java.util.concurrent.locks 包下有以下这些类：</p>\n<p><img src=\"../../uploads/javasource/lock.jpeg\" alt=\"类\"></p>\n<p>ReetrantLock实现了Lock接口，ReadWriteLock是读写锁的接口，由ReentrantReadWriteLock实现。</p>\n<h5 id=\"Lock-1\"><a href=\"#Lock-1\" class=\"headerlink\" title=\"Lock\"></a>Lock</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Lock &#123;</div><div class=\"line\"></div><div class=\"line\">    void lock();</div><div class=\"line\"></div><div class=\"line\">    void lockInterruptibly() throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    boolean tryLock();</div><div class=\"line\"></div><div class=\"line\">    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    void unlock();</div><div class=\"line\"></div><div class=\"line\">    Condition newCondition();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Lock接口中定义了这6个接口。</p>\n<ul>\n<li>lock():用来获取锁，如果锁已经被其他线程获取，则会处于等待状态。使用Lock则必须主动释放锁，发生异常也不会自动释放锁，所以要在try{}catch()中进行，finally中释放锁。</li>\n<li>lockInterruptibly():通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。</li>\n<li>tryLock():尝试获取锁，如果获取成功，则返回true，如果获取失败则返回false。这个方法会立即返回，拿不到锁也不会等待。</li>\n<li>tryLock(long time, TimeUnit unit):也是尝试获取锁，不过会有设定的等待时间。</li>\n<li>unlock():释放锁</li>\n<li>newCondition(): 创建一个Condition，Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式。</li>\n</ul>\n<h5 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h5><p>ReentrantLock 实现了Lock接口，是一个可重入锁，内部定义了公平锁和非公平锁，默认是非公平锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ReentrantLockTest &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\"></div><div class=\"line\">        ReentrantLock lock = new ReentrantLock();</div><div class=\"line\"></div><div class=\"line\">        for (int i = 1; i &lt;= 3; i++) &#123;</div><div class=\"line\">            lock.lock();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for(int i=1;i&lt;=3;i++)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\"></div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                lock.unlock();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ReentrantLock 可以通过lock()方法加锁多次，在通过unlock()方法释放锁多次使得程序正常退出，所以ReentrantLocl是可重入锁。</p>\n</blockquote>\n<ul>\n<li>ReentrantLock和synchronized都是独占锁,只允许线程互斥的访问临界区。synchronized是隐式的，ReentrantLocl是显示的。</li>\n<li>ReentrantLock和synchronized都是可重入的。synchronized因为可重入因此可以放在被递归执行的方法上,且不用担心线程最后能否正确释放锁；而ReentrantLock在重入时要却确保重复获取锁的次数必须和重复释放锁的次数一样，否则可能导致其他线程无法获得该锁。</li>\n</ul>\n<h5 id=\"ReadWriteLock\"><a href=\"#ReadWriteLock\" class=\"headerlink\" title=\"ReadWriteLock\"></a>ReadWriteLock</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ReadWriteLock &#123;</div><div class=\"line\">    Lock readLock();</div><div class=\"line\"></div><div class=\"line\">    Lock writeLock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReadWriteLock是读写锁，定义了一个获取读锁，一个获取写锁的方法。如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁；如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</p>\n<h4 id=\"synchronized和lock的区别\"><a href=\"#synchronized和lock的区别\" class=\"headerlink\" title=\"synchronized和lock的区别\"></a>synchronized和lock的区别</h4><ul>\n<li>Lock是一个接口，而synchronized是java中的关键字。</li>\n<li>synchronized在发生异常的时候会自动释放锁，而Lock在发生异常的时候仍需要手动去释放锁。</li>\n<li>Lock可以让等待的线程响应中断，而synchronized不可以，会是等待线程一直等待下去，直到获取锁。</li>\n<li>Lock可以知道是否获取到锁。</li>\n<li>ReadWriteLock可以提高多读的效率。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"锁的种类\"><a href=\"#锁的种类\" class=\"headerlink\" title=\"锁的种类\"></a>锁的种类</h3><p>锁的种类很多，包括：自旋锁(CAS)、阻塞锁、可重入锁、读写锁、互斥锁、悲观锁、乐观锁、公平锁、可中断锁等等，主要介绍下可重入锁、读写锁、可中断锁和公平锁。</p>\n<h4 id=\"可重入锁\"><a href=\"#可重入锁\" class=\"headerlink\" title=\"可重入锁\"></a>可重入锁</h4><blockquote>\n<p>如果锁具备可重入性，则称作为可重入锁。synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举比如说，当一个线程执行到method1 的synchronized方法时，而在method1中会调用另外一个synchronized方法method2，此时该线程不必重新去申请锁，而是可以直接执行方法method2。</p>\n</blockquote>\n<h4 id=\"读写锁\"><a href=\"#读写锁\" class=\"headerlink\" title=\"读写锁\"></a>读写锁</h4><blockquote>\n<p>读写锁将对一个资源的访问分成了2个锁，如文件，一个读锁和一个写锁。正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。可以通过readLock()获取读锁，通过writeLock()获取写锁。</p>\n</blockquote>\n<h4 id=\"可中断锁\"><a href=\"#可中断锁\" class=\"headerlink\" title=\"可中断锁\"></a>可中断锁</h4><blockquote>\n<p>可中断锁，即可以中断的锁。在Java中，synchronized就不是可中断锁，而Lock是可中断锁。<br>如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。<br>Lock接口中的lockInterruptibly()方法就体现了Lock的可中断性。</p>\n</blockquote>\n<h4 id=\"公平锁\"><a href=\"#公平锁\" class=\"headerlink\" title=\"公平锁\"></a>公平锁</h4><blockquote>\n<p>公平锁即尽量以请求锁的顺序来获取锁。同时有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该锁，这种就是公平锁。<br>非公平锁即无法保证锁的获取是按照请求锁的顺序进行的，这样就可能导致某个或者一些线程永远获取不到锁。<br>synchronized是非公平锁，它无法保证等待的线程获取锁的顺序。对于ReentrantLock和ReentrantReadWriteLock，默认情况下是非公平锁，但是可以设置为公平锁。</p>\n</blockquote>\n<h3 id=\"synchronized和lock的用法\"><a href=\"#synchronized和lock的用法\" class=\"headerlink\" title=\"synchronized和lock的用法\"></a>synchronized和lock的用法</h3><h4 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h4><p>synchronized是Java的关键字，当它用来修饰一个方法或者一个代码块的时候，能够保证在同一时刻最多只有一个线程执行该段代码，同时它还可以保证共享变量的内存可见性。</p>\n<h5 id=\"修饰代码块\"><a href=\"#修饰代码块\" class=\"headerlink\" title=\"修饰代码块\"></a>修饰代码块</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void method()&#123;</div><div class=\"line\">    synchronized (Object o)&#123;</div><div class=\"line\">        //</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>作用于代码块，synchronized后跟括号，括号里是变量，每次只会有一个线程进入该代码块。</p>\n</blockquote>\n<h5 id=\"修饰方法\"><a href=\"#修饰方法\" class=\"headerlink\" title=\"修饰方法\"></a>修饰方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public synchronized void method()&#123;</div><div class=\"line\">    //</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>作用于方法时，一次只有一个线程进入该方法，其他线程此时想调用只能排队等候。</p>\n</blockquote>\n<h5 id=\"修饰类\"><a href=\"#修饰类\" class=\"headerlink\" title=\"修饰类\"></a>修饰类</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static void menthed()&#123;</div><div class=\"line\">    synchronized(Service.class) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果线程进入，则线程在该类中所有操作不能进行，包括静态变量和静态方法，对于含有静态方法和静态变量的代码块的同步，通常使用这种方式。</p>\n</blockquote>\n<h4 id=\"Lock\"><a href=\"#Lock\" class=\"headerlink\" title=\"Lock\"></a>Lock</h4><p>java.util.concurrent.locks 包下有以下这些类：</p>\n<p><img src=\"../../uploads/javasource/lock.jpeg\" alt=\"类\"></p>\n<p>ReetrantLock实现了Lock接口，ReadWriteLock是读写锁的接口，由ReentrantReadWriteLock实现。</p>\n<h5 id=\"Lock-1\"><a href=\"#Lock-1\" class=\"headerlink\" title=\"Lock\"></a>Lock</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Lock &#123;</div><div class=\"line\"></div><div class=\"line\">    void lock();</div><div class=\"line\"></div><div class=\"line\">    void lockInterruptibly() throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    boolean tryLock();</div><div class=\"line\"></div><div class=\"line\">    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    void unlock();</div><div class=\"line\"></div><div class=\"line\">    Condition newCondition();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Lock接口中定义了这6个接口。</p>\n<ul>\n<li>lock():用来获取锁，如果锁已经被其他线程获取，则会处于等待状态。使用Lock则必须主动释放锁，发生异常也不会自动释放锁，所以要在try{}catch()中进行，finally中释放锁。</li>\n<li>lockInterruptibly():通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。</li>\n<li>tryLock():尝试获取锁，如果获取成功，则返回true，如果获取失败则返回false。这个方法会立即返回，拿不到锁也不会等待。</li>\n<li>tryLock(long time, TimeUnit unit):也是尝试获取锁，不过会有设定的等待时间。</li>\n<li>unlock():释放锁</li>\n<li>newCondition(): 创建一个Condition，Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式。</li>\n</ul>\n<h5 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h5><p>ReentrantLock 实现了Lock接口，是一个可重入锁，内部定义了公平锁和非公平锁，默认是非公平锁。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ReentrantLockTest &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\"></div><div class=\"line\">        ReentrantLock lock = new ReentrantLock();</div><div class=\"line\"></div><div class=\"line\">        for (int i = 1; i &lt;= 3; i++) &#123;</div><div class=\"line\">            lock.lock();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        for(int i=1;i&lt;=3;i++)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\"></div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                lock.unlock();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>ReentrantLock 可以通过lock()方法加锁多次，在通过unlock()方法释放锁多次使得程序正常退出，所以ReentrantLocl是可重入锁。</p>\n</blockquote>\n<ul>\n<li>ReentrantLock和synchronized都是独占锁,只允许线程互斥的访问临界区。synchronized是隐式的，ReentrantLocl是显示的。</li>\n<li>ReentrantLock和synchronized都是可重入的。synchronized因为可重入因此可以放在被递归执行的方法上,且不用担心线程最后能否正确释放锁；而ReentrantLock在重入时要却确保重复获取锁的次数必须和重复释放锁的次数一样，否则可能导致其他线程无法获得该锁。</li>\n</ul>\n<h5 id=\"ReadWriteLock\"><a href=\"#ReadWriteLock\" class=\"headerlink\" title=\"ReadWriteLock\"></a>ReadWriteLock</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface ReadWriteLock &#123;</div><div class=\"line\">    Lock readLock();</div><div class=\"line\"></div><div class=\"line\">    Lock writeLock();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ReadWriteLock是读写锁，定义了一个获取读锁，一个获取写锁的方法。如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁；如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</p>\n<h4 id=\"synchronized和lock的区别\"><a href=\"#synchronized和lock的区别\" class=\"headerlink\" title=\"synchronized和lock的区别\"></a>synchronized和lock的区别</h4><ul>\n<li>Lock是一个接口，而synchronized是java中的关键字。</li>\n<li>synchronized在发生异常的时候会自动释放锁，而Lock在发生异常的时候仍需要手动去释放锁。</li>\n<li>Lock可以让等待的线程响应中断，而synchronized不可以，会是等待线程一直等待下去，直到获取锁。</li>\n<li>Lock可以知道是否获取到锁。</li>\n<li>ReadWriteLock可以提高多读的效率。</li>\n</ul>\n"},{"title":"java集合简述","date":"2019-11-24T12:21:33.000Z","comments":0,"keywords":["java","集合","List","Set","Map","Collection"],"_content":"\n### java集合\n\njava集合类存放在java.util下面，主要有三种：Set，List，Map。\n\n- Collection 是集合Set、List和Queue最基本的接口\n- Iterator 可以使用迭代器遍历集合中的元素\n- Map 是key value映射形式的基本接口\n\n|     |            |           |                |                                                                |\n| --- | ---------- | --------- | -------------- | -------------------------------------------------------------- |\n|     |            |           |  ArrayList     | 有序，底层是数组，查询快，增删慢，线程不安全，扩容 n*1.5+1            |\n|     |            |  List     |  Vector        | 有序，底层是数组，查询快，增删慢，线程安全，扩容n*2                   |\n|     |            |           |  LinkedList    | 有序，底层双向循环链表，查询慢，增删快，线程不安全                    |\n|     |            |           |                |                                                                |\n|     | Collection |           |  HashSet       | 无序，元素不可重复，封装HashMap实现，存取都比较快                    |\n|集合 |             |  Set     |  TreeSet        | 无序，元素不可重复，底层使用二叉树实现，内部是TreeMap的SortedSet     |\n|     |            |           |  LinkedHashSet | 使用Hash表存储，用双向链表记录插入顺序                              |\n|     |            |           |                |                                                                |\n|     |            |  Queue    |                | 在两端出入的List，可使用数组或者链表进行实现                         |\n|     |            |           |                |                                                                |\n|     |            |           |  HashMap       | 底层是hash存储，线程不安全，key和value都可为null                    |\n|     | Map        |           |  HashTable     | 底层是hash存储，线程安全，key和value都不可以为null                  |\n|     |            |           |  TreeMap       | 使用二叉树实现                                                   |\n\n#### List\n\nList的实现类主要是ArrayList，Vector，LinkedList\n\n##### ArrayList\n\nArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。\n\n##### Vector（线程安全）\n\nVector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写 Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问 ArrayList 慢。\n\n##### LinkList（链表）\n\nLinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了 List 接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆 栈、队列和双向队列使用。\n\n#### Set\n\nset主要是存储无序元素，元素的值不能重复。主要有HashSet，TreeSet和LinkedHashSet。\n\n##### HashSet\n\nHashSet内部其实是封装了HashMap，通过对内部HashMap的操作来实现HashSet的功能。\n\n##### TreeSet\n\nTreeSet是使用二叉树的原理对新 add()的对象按照指定的顺序排序(升序、降序)，每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。TreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。\nTreeSet的特点：\n1. 不能有重复的元素；\n2. 具有排序功能；\n3. TreeSet中的元素必须实现Comparable接口并重写compareTo()方法，TreeSet判断元素是否重复 、以及确定元素的顺序 靠的都是这个方法；\n    - 对于Java类库中定义的类，TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口);\n    - 对于自定义类，如果不做适当的处理，TreeSet中只能存储一个该类型的对象实例，否则无法判断是否重复。\n4. 依赖TreeMap。\n5. 相对HashSet,TreeSet的优势是有序，劣势是相对读取慢。根据不同的场景选择不同的集合。\n\n##### LinkedHashSet\n\nLinkedHashSet具有set集合不重复的特点，同时具有可预测的迭代顺序，也就是我们插入的顺序，它也是线程不安全的集合。\nLinkedHashSet继承自HashSet，唯一的区别是LinkedHashSet内部使用的是LinkHashMap。这样做的意义或者好处就是LinkedHashSet中的元素顺序是可以保证的，也就是说遍历序和插入序是一致的。\n\n#### Queue\n\n队列就是一个先入先出（FIFO）的数据结构。\n\n- 没有实现的阻塞接口的LinkedList，实现了java.util.Queue接口和java.util.AbstractQueue接口\n- 实现阻塞接口的（BlockingQueue）：\n    - ArrayBlockingQueue ：一个由数组支持的有界队列。\n    - LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。\n    - PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。\n    - DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。\n    - SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。\n\n#### Map\n\nMap是存储的key value形式的数据，Map的主要是实现有5种，HashMap，ConcurrentHashMap，HashTable，TreeMap，LinkedHashMap\n\n##### HashMap \n\nHashMap是通过hash表来实现键值对的存储，在JDK1.8与1.7的实现上还不同，具体的源码分析可以见 [HashMap阅读 （1.8|1.7）](http://fk5431.com/20191114/javasource/util/1_HashMap/)\n\n##### ConcurrentHashMap\n\nConcurrentHashMap 是线程安全的HashMap，但是此实现下的get方法其实是弱一致性的，有可能获取到过期的数据，具体的源码分析可以见 [ConcurrentHashMap(1.7|1.8)阅读](http://fk5431.com/20191114/javasource/util/4_ConcurrentHashMap/)\n\n##### HashTable\n\nHashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是它承自 Dictionary 类，并且是线程安全的，任一时间只有一个线程能写 Hashtable，并发性不如 ConcurrentHashMap，因为ConcurrentHashMap(1.7)引入了分段锁。但是HashTable的方法都是强一致性的，对数据的一致性要求没有那么苛刻不建议使用HashTable，可以使用ConcurrentHashMap替代。\n\n##### TreeMap（二叉树实现）\n\nTreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。\n在使用 TreeMap 时，key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。\n\n##### LinkedHashMap\n\nLinkedHashMap保存了记录的插入顺序，在用 Iterator 遍历LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。\n\nLinkedHashMap继承了HashMap，所以他们很多地方是相似的。LinkedHashMap结构中还维护着一个双向链表，用于记录顺序，所以可以做到跟存入顺序一样取出元素。\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/4_集合简介.md","raw":"---\ntitle: java集合简述\ndate: 2019-11-24 20:21:33\ncomments: false\ntags: \n- java\n- 集合 \n- List\n- Set\n- Map\n- Collection     \ncategories: \n- java\nkeywords: \n- java\n- 集合 \n- List\n- Set\n- Map\n- Collection    \n---\n\n### java集合\n\njava集合类存放在java.util下面，主要有三种：Set，List，Map。\n\n- Collection 是集合Set、List和Queue最基本的接口\n- Iterator 可以使用迭代器遍历集合中的元素\n- Map 是key value映射形式的基本接口\n\n|     |            |           |                |                                                                |\n| --- | ---------- | --------- | -------------- | -------------------------------------------------------------- |\n|     |            |           |  ArrayList     | 有序，底层是数组，查询快，增删慢，线程不安全，扩容 n*1.5+1            |\n|     |            |  List     |  Vector        | 有序，底层是数组，查询快，增删慢，线程安全，扩容n*2                   |\n|     |            |           |  LinkedList    | 有序，底层双向循环链表，查询慢，增删快，线程不安全                    |\n|     |            |           |                |                                                                |\n|     | Collection |           |  HashSet       | 无序，元素不可重复，封装HashMap实现，存取都比较快                    |\n|集合 |             |  Set     |  TreeSet        | 无序，元素不可重复，底层使用二叉树实现，内部是TreeMap的SortedSet     |\n|     |            |           |  LinkedHashSet | 使用Hash表存储，用双向链表记录插入顺序                              |\n|     |            |           |                |                                                                |\n|     |            |  Queue    |                | 在两端出入的List，可使用数组或者链表进行实现                         |\n|     |            |           |                |                                                                |\n|     |            |           |  HashMap       | 底层是hash存储，线程不安全，key和value都可为null                    |\n|     | Map        |           |  HashTable     | 底层是hash存储，线程安全，key和value都不可以为null                  |\n|     |            |           |  TreeMap       | 使用二叉树实现                                                   |\n\n#### List\n\nList的实现类主要是ArrayList，Vector，LinkedList\n\n##### ArrayList\n\nArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。\n\n##### Vector（线程安全）\n\nVector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写 Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问 ArrayList 慢。\n\n##### LinkList（链表）\n\nLinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了 List 接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆 栈、队列和双向队列使用。\n\n#### Set\n\nset主要是存储无序元素，元素的值不能重复。主要有HashSet，TreeSet和LinkedHashSet。\n\n##### HashSet\n\nHashSet内部其实是封装了HashMap，通过对内部HashMap的操作来实现HashSet的功能。\n\n##### TreeSet\n\nTreeSet是使用二叉树的原理对新 add()的对象按照指定的顺序排序(升序、降序)，每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。TreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。\nTreeSet的特点：\n1. 不能有重复的元素；\n2. 具有排序功能；\n3. TreeSet中的元素必须实现Comparable接口并重写compareTo()方法，TreeSet判断元素是否重复 、以及确定元素的顺序 靠的都是这个方法；\n    - 对于Java类库中定义的类，TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口);\n    - 对于自定义类，如果不做适当的处理，TreeSet中只能存储一个该类型的对象实例，否则无法判断是否重复。\n4. 依赖TreeMap。\n5. 相对HashSet,TreeSet的优势是有序，劣势是相对读取慢。根据不同的场景选择不同的集合。\n\n##### LinkedHashSet\n\nLinkedHashSet具有set集合不重复的特点，同时具有可预测的迭代顺序，也就是我们插入的顺序，它也是线程不安全的集合。\nLinkedHashSet继承自HashSet，唯一的区别是LinkedHashSet内部使用的是LinkHashMap。这样做的意义或者好处就是LinkedHashSet中的元素顺序是可以保证的，也就是说遍历序和插入序是一致的。\n\n#### Queue\n\n队列就是一个先入先出（FIFO）的数据结构。\n\n- 没有实现的阻塞接口的LinkedList，实现了java.util.Queue接口和java.util.AbstractQueue接口\n- 实现阻塞接口的（BlockingQueue）：\n    - ArrayBlockingQueue ：一个由数组支持的有界队列。\n    - LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。\n    - PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。\n    - DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。\n    - SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。\n\n#### Map\n\nMap是存储的key value形式的数据，Map的主要是实现有5种，HashMap，ConcurrentHashMap，HashTable，TreeMap，LinkedHashMap\n\n##### HashMap \n\nHashMap是通过hash表来实现键值对的存储，在JDK1.8与1.7的实现上还不同，具体的源码分析可以见 [HashMap阅读 （1.8|1.7）](http://fk5431.com/20191114/javasource/util/1_HashMap/)\n\n##### ConcurrentHashMap\n\nConcurrentHashMap 是线程安全的HashMap，但是此实现下的get方法其实是弱一致性的，有可能获取到过期的数据，具体的源码分析可以见 [ConcurrentHashMap(1.7|1.8)阅读](http://fk5431.com/20191114/javasource/util/4_ConcurrentHashMap/)\n\n##### HashTable\n\nHashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是它承自 Dictionary 类，并且是线程安全的，任一时间只有一个线程能写 Hashtable，并发性不如 ConcurrentHashMap，因为ConcurrentHashMap(1.7)引入了分段锁。但是HashTable的方法都是强一致性的，对数据的一致性要求没有那么苛刻不建议使用HashTable，可以使用ConcurrentHashMap替代。\n\n##### TreeMap（二叉树实现）\n\nTreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。\n在使用 TreeMap 时，key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。\n\n##### LinkedHashMap\n\nLinkedHashMap保存了记录的插入顺序，在用 Iterator 遍历LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。\n\nLinkedHashMap继承了HashMap，所以他们很多地方是相似的。LinkedHashMap结构中还维护着一个双向链表，用于记录顺序，所以可以做到跟存入顺序一样取出元素。\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"java/4_集合简介","published":1,"updated":"2020-01-02T05:49:23.762Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsm003in0ztsaayv45m","content":"<h3 id=\"java集合\"><a href=\"#java集合\" class=\"headerlink\" title=\"java集合\"></a>java集合</h3><p>java集合类存放在java.util下面，主要有三种：Set，List，Map。</p>\n<ul>\n<li>Collection 是集合Set、List和Queue最基本的接口</li>\n<li>Iterator 可以使用迭代器遍历集合中的元素</li>\n<li>Map 是key value映射形式的基本接口</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>ArrayList</td>\n<td>有序，底层是数组，查询快，增删慢，线程不安全，扩容 n*1.5+1</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>List</td>\n<td>Vector</td>\n<td>有序，底层是数组，查询快，增删慢，线程安全，扩容n*2</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>LinkedList</td>\n<td>有序，底层双向循环链表，查询慢，增删快，线程不安全</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Collection</td>\n<td></td>\n<td>HashSet</td>\n<td>无序，元素不可重复，封装HashMap实现，存取都比较快</td>\n</tr>\n<tr>\n<td>集合</td>\n<td></td>\n<td>Set</td>\n<td>TreeSet</td>\n<td>无序，元素不可重复，底层使用二叉树实现，内部是TreeMap的SortedSet</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>LinkedHashSet</td>\n<td>使用Hash表存储，用双向链表记录插入顺序</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Queue</td>\n<td></td>\n<td>在两端出入的List，可使用数组或者链表进行实现</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>HashMap</td>\n<td>底层是hash存储，线程不安全，key和value都可为null</td>\n</tr>\n<tr>\n<td></td>\n<td>Map</td>\n<td></td>\n<td>HashTable</td>\n<td>底层是hash存储，线程安全，key和value都不可以为null</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>TreeMap</td>\n<td>使用二叉树实现</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>List的实现类主要是ArrayList，Vector，LinkedList</p>\n<h5 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h5><p>ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p>\n<h5 id=\"Vector（线程安全）\"><a href=\"#Vector（线程安全）\" class=\"headerlink\" title=\"Vector（线程安全）\"></a>Vector（线程安全）</h5><p>Vector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写 Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问 ArrayList 慢。</p>\n<h5 id=\"LinkList（链表）\"><a href=\"#LinkList（链表）\" class=\"headerlink\" title=\"LinkList（链表）\"></a>LinkList（链表）</h5><p>LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了 List 接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆 栈、队列和双向队列使用。</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>set主要是存储无序元素，元素的值不能重复。主要有HashSet，TreeSet和LinkedHashSet。</p>\n<h5 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h5><p>HashSet内部其实是封装了HashMap，通过对内部HashMap的操作来实现HashSet的功能。</p>\n<h5 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h5><p>TreeSet是使用二叉树的原理对新 add()的对象按照指定的顺序排序(升序、降序)，每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。TreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。<br>TreeSet的特点：</p>\n<ol>\n<li>不能有重复的元素；</li>\n<li>具有排序功能；</li>\n<li>TreeSet中的元素必须实现Comparable接口并重写compareTo()方法，TreeSet判断元素是否重复 、以及确定元素的顺序 靠的都是这个方法；<ul>\n<li>对于Java类库中定义的类，TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口);</li>\n<li>对于自定义类，如果不做适当的处理，TreeSet中只能存储一个该类型的对象实例，否则无法判断是否重复。</li>\n</ul>\n</li>\n<li>依赖TreeMap。</li>\n<li>相对HashSet,TreeSet的优势是有序，劣势是相对读取慢。根据不同的场景选择不同的集合。</li>\n</ol>\n<h5 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h5><p>LinkedHashSet具有set集合不重复的特点，同时具有可预测的迭代顺序，也就是我们插入的顺序，它也是线程不安全的集合。<br>LinkedHashSet继承自HashSet，唯一的区别是LinkedHashSet内部使用的是LinkHashMap。这样做的意义或者好处就是LinkedHashSet中的元素顺序是可以保证的，也就是说遍历序和插入序是一致的。</p>\n<h4 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h4><p>队列就是一个先入先出（FIFO）的数据结构。</p>\n<ul>\n<li>没有实现的阻塞接口的LinkedList，实现了java.util.Queue接口和java.util.AbstractQueue接口</li>\n<li>实现阻塞接口的（BlockingQueue）：<ul>\n<li>ArrayBlockingQueue ：一个由数组支持的有界队列。</li>\n<li>LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。</li>\n<li>PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。</li>\n<li>DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。</li>\n<li>SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>Map是存储的key value形式的数据，Map的主要是实现有5种，HashMap，ConcurrentHashMap，HashTable，TreeMap，LinkedHashMap</p>\n<h5 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h5><p>HashMap是通过hash表来实现键值对的存储，在JDK1.8与1.7的实现上还不同，具体的源码分析可以见 <a href=\"http://fk5431.com/20191114/javasource/util/1_HashMap/\" target=\"_blank\" rel=\"external\">HashMap阅读 （1.8|1.7）</a></p>\n<h5 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h5><p>ConcurrentHashMap 是线程安全的HashMap，但是此实现下的get方法其实是弱一致性的，有可能获取到过期的数据，具体的源码分析可以见 <a href=\"http://fk5431.com/20191114/javasource/util/4_ConcurrentHashMap/\" target=\"_blank\" rel=\"external\">ConcurrentHashMap(1.7|1.8)阅读</a></p>\n<h5 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h5><p>Hashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是它承自 Dictionary 类，并且是线程安全的，任一时间只有一个线程能写 Hashtable，并发性不如 ConcurrentHashMap，因为ConcurrentHashMap(1.7)引入了分段锁。但是HashTable的方法都是强一致性的，对数据的一致性要求没有那么苛刻不建议使用HashTable，可以使用ConcurrentHashMap替代。</p>\n<h5 id=\"TreeMap（二叉树实现）\"><a href=\"#TreeMap（二叉树实现）\" class=\"headerlink\" title=\"TreeMap（二叉树实现）\"></a>TreeMap（二叉树实现）</h5><p>TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。<br>在使用 TreeMap 时，key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。</p>\n<h5 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h5><p>LinkedHashMap保存了记录的插入顺序，在用 Iterator 遍历LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p>\n<p>LinkedHashMap继承了HashMap，所以他们很多地方是相似的。LinkedHashMap结构中还维护着一个双向链表，用于记录顺序，所以可以做到跟存入顺序一样取出元素。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"java集合\"><a href=\"#java集合\" class=\"headerlink\" title=\"java集合\"></a>java集合</h3><p>java集合类存放在java.util下面，主要有三种：Set，List，Map。</p>\n<ul>\n<li>Collection 是集合Set、List和Queue最基本的接口</li>\n<li>Iterator 可以使用迭代器遍历集合中的元素</li>\n<li>Map 是key value映射形式的基本接口</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>ArrayList</td>\n<td>有序，底层是数组，查询快，增删慢，线程不安全，扩容 n*1.5+1</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>List</td>\n<td>Vector</td>\n<td>有序，底层是数组，查询快，增删慢，线程安全，扩容n*2</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>LinkedList</td>\n<td>有序，底层双向循环链表，查询慢，增删快，线程不安全</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>Collection</td>\n<td></td>\n<td>HashSet</td>\n<td>无序，元素不可重复，封装HashMap实现，存取都比较快</td>\n</tr>\n<tr>\n<td>集合</td>\n<td></td>\n<td>Set</td>\n<td>TreeSet</td>\n<td>无序，元素不可重复，底层使用二叉树实现，内部是TreeMap的SortedSet</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>LinkedHashSet</td>\n<td>使用Hash表存储，用双向链表记录插入顺序</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>Queue</td>\n<td></td>\n<td>在两端出入的List，可使用数组或者链表进行实现</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>HashMap</td>\n<td>底层是hash存储，线程不安全，key和value都可为null</td>\n</tr>\n<tr>\n<td></td>\n<td>Map</td>\n<td></td>\n<td>HashTable</td>\n<td>底层是hash存储，线程安全，key和value都不可以为null</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>TreeMap</td>\n<td>使用二叉树实现</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h4><p>List的实现类主要是ArrayList，Vector，LinkedList</p>\n<h5 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h5><p>ArrayList是最常用的List实现类，内部是通过数组实现的，它允许对元素进行快速随机访问。数组的缺点是每个元素之间不能有间隔，当数组大小不满足时需要增加存储能力，就要将已经有数组的数据复制到新的存储空间中。当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。因此，它适合随机查找和遍历，不适合插入和删除。</p>\n<h5 id=\"Vector（线程安全）\"><a href=\"#Vector（线程安全）\" class=\"headerlink\" title=\"Vector（线程安全）\"></a>Vector（线程安全）</h5><p>Vector 与 ArrayList 一样，也是通过数组实现的，不同的是它支持线程的同步，即某一时刻只有一个线程能够写 Vector，避免多线程同时写而引起的不一致性，但实现同步需要很高的花费，因此，访问它比访问 ArrayList 慢。</p>\n<h5 id=\"LinkList（链表）\"><a href=\"#LinkList（链表）\" class=\"headerlink\" title=\"LinkList（链表）\"></a>LinkList（链表）</h5><p>LinkedList是用链表结构存储数据的，很适合数据的动态插入和删除，随机访问和遍历速度比较慢。另外，他还提供了 List 接口中没有定义的方法，专门用于操作表头和表尾元素，可以当作堆 栈、队列和双向队列使用。</p>\n<h4 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h4><p>set主要是存储无序元素，元素的值不能重复。主要有HashSet，TreeSet和LinkedHashSet。</p>\n<h5 id=\"HashSet\"><a href=\"#HashSet\" class=\"headerlink\" title=\"HashSet\"></a>HashSet</h5><p>HashSet内部其实是封装了HashMap，通过对内部HashMap的操作来实现HashSet的功能。</p>\n<h5 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h5><p>TreeSet是使用二叉树的原理对新 add()的对象按照指定的顺序排序(升序、降序)，每增加一个对象都会进行排序，将对象插入的二叉树指定的位置。TreeSet是基于TreeMap实现的，TreeSet的元素支持2种排序方式：自然排序或者根据提供的Comparator进行排序。<br>TreeSet的特点：</p>\n<ol>\n<li>不能有重复的元素；</li>\n<li>具有排序功能；</li>\n<li>TreeSet中的元素必须实现Comparable接口并重写compareTo()方法，TreeSet判断元素是否重复 、以及确定元素的顺序 靠的都是这个方法；<ul>\n<li>对于Java类库中定义的类，TreeSet可以直接对其进行存储，如String，Integer等,因为这些类已经实现了Comparable接口);</li>\n<li>对于自定义类，如果不做适当的处理，TreeSet中只能存储一个该类型的对象实例，否则无法判断是否重复。</li>\n</ul>\n</li>\n<li>依赖TreeMap。</li>\n<li>相对HashSet,TreeSet的优势是有序，劣势是相对读取慢。根据不同的场景选择不同的集合。</li>\n</ol>\n<h5 id=\"LinkedHashSet\"><a href=\"#LinkedHashSet\" class=\"headerlink\" title=\"LinkedHashSet\"></a>LinkedHashSet</h5><p>LinkedHashSet具有set集合不重复的特点，同时具有可预测的迭代顺序，也就是我们插入的顺序，它也是线程不安全的集合。<br>LinkedHashSet继承自HashSet，唯一的区别是LinkedHashSet内部使用的是LinkHashMap。这样做的意义或者好处就是LinkedHashSet中的元素顺序是可以保证的，也就是说遍历序和插入序是一致的。</p>\n<h4 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h4><p>队列就是一个先入先出（FIFO）的数据结构。</p>\n<ul>\n<li>没有实现的阻塞接口的LinkedList，实现了java.util.Queue接口和java.util.AbstractQueue接口</li>\n<li>实现阻塞接口的（BlockingQueue）：<ul>\n<li>ArrayBlockingQueue ：一个由数组支持的有界队列。</li>\n<li>LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。</li>\n<li>PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。</li>\n<li>DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。</li>\n<li>SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><p>Map是存储的key value形式的数据，Map的主要是实现有5种，HashMap，ConcurrentHashMap，HashTable，TreeMap，LinkedHashMap</p>\n<h5 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h5><p>HashMap是通过hash表来实现键值对的存储，在JDK1.8与1.7的实现上还不同，具体的源码分析可以见 <a href=\"http://fk5431.com/20191114/javasource/util/1_HashMap/\">HashMap阅读 （1.8|1.7）</a></p>\n<h5 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h5><p>ConcurrentHashMap 是线程安全的HashMap，但是此实现下的get方法其实是弱一致性的，有可能获取到过期的数据，具体的源码分析可以见 <a href=\"http://fk5431.com/20191114/javasource/util/4_ConcurrentHashMap/\">ConcurrentHashMap(1.7|1.8)阅读</a></p>\n<h5 id=\"HashTable\"><a href=\"#HashTable\" class=\"headerlink\" title=\"HashTable\"></a>HashTable</h5><p>Hashtable 是遗留类，很多映射的常用功能与 HashMap 类似，不同的是它承自 Dictionary 类，并且是线程安全的，任一时间只有一个线程能写 Hashtable，并发性不如 ConcurrentHashMap，因为ConcurrentHashMap(1.7)引入了分段锁。但是HashTable的方法都是强一致性的，对数据的一致性要求没有那么苛刻不建议使用HashTable，可以使用ConcurrentHashMap替代。</p>\n<h5 id=\"TreeMap（二叉树实现）\"><a href=\"#TreeMap（二叉树实现）\" class=\"headerlink\" title=\"TreeMap（二叉树实现）\"></a>TreeMap（二叉树实现）</h5><p>TreeMap 实现 SortedMap 接口，能够把它保存的记录根据键排序，默认是按键值的升序排序，也可以指定排序的比较器，当用 Iterator 遍历 TreeMap 时，得到的记录是排过序的。<br>在使用 TreeMap 时，key 必须实现 Comparable 接口或者在构造 TreeMap 传入自定义的Comparator，否则会在运行时抛出 java.lang.ClassCastException 类型的异常。</p>\n<h5 id=\"LinkedHashMap\"><a href=\"#LinkedHashMap\" class=\"headerlink\" title=\"LinkedHashMap\"></a>LinkedHashMap</h5><p>LinkedHashMap保存了记录的插入顺序，在用 Iterator 遍历LinkedHashMap 时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序。</p>\n<p>LinkedHashMap继承了HashMap，所以他们很多地方是相似的。LinkedHashMap结构中还维护着一个双向链表，用于记录顺序，所以可以做到跟存入顺序一样取出元素。</p>\n"},{"title":"synchronized","date":"2019-11-27T14:22:13.000Z","comments":0,"keywords":["synchronized","锁"],"_content":"\nsynchronized 可以使用任意一个非空的对象当做锁。synchronized属于独占式的悲观锁，也是可重入锁。它可以保证同一时刻只有一个线程执行某个方法或某个代码块，还可保证共享变量的可见性。\n\n### synchronized的三种作用范围\n\n- 作用于方法，锁住的是对象实例。\n- 作用于代码块，指定加锁对象。\n- 作用于静态方法，锁住的是class实例，相当于类的全局锁。\n\n### java对象头和Monitor（来自深入理解java虚拟机）\n\n在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。\n\n- 对象头：对象头主要包括两部分信息，第一部分用于存储对象自身的的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态表示、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据长度在32为和64为虚拟机中分别为32bit和64bit，简称Mark Word。对象头的另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个数组，在对象头还必须有一块用于记录数组长度的数据（1字节），这样虚拟机可以通过普通java对象的元数据信息确定java对象的大小。\n    > 由于对象运行时的数据很多，已经超过了32/64位bit能记录的限度，但是对象头信息是与对象自身定义的数据无关的额外存储，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间存储尽量多的数据。\n- 实例数据：这是对象真正存储的有效信息，就是代码中定义的各种字段内容（包括从父类继承的）。\n- 对齐填充：这部分不是必然存在的，仅仅是占位符的作用，JVM 要求对象起始地址必须是8字节的整数倍。（对象大小必须是8字节的整数倍）\n\nMark Word 默认存储\n\n| 锁状态 | 25bit | 4bit | 1bit是否是偏向锁 | 2bit锁标志位 |\n| ----- | ----- | ---- | --------------- | ----------- |\n| 无锁状态 | 对象HashCode | 对象分代年龄 | 0 | 01         |\n\n可能变化的结构：\n<table border=0 cellpadding=0 cellspacing=0 style='border-collapse:collapse;table-layout:fixed'><tr><td rowspan=\"2\">锁状态</td><td colspan=\"2\">25bit</td><td rowspan=\"2\">4bit</td><td>1bit</td><td>2bit</td></tr><tr><td>23bit</td><td>2bit</td><td>是否是偏向锁</td><td>锁标志位</td></tr><tr><td>轻量级锁</td><td colspan=\"4\">指向栈中锁记录的指针</td><td>00</td></tr><tr><td>重量级锁</td><td colspan=\"4\">指向重量级锁的指针</td><td>10</td></tr><tr><td>GC标记</td><td colspan=\"4\">空，不需要记录信息</td><td>11</td></tr><tr><td>偏向锁</td><td>偏向线程ID</td><td>偏向时间戳</td><td>对象分代年龄</td><td>1</td><td>01</td></tr></table>\n\n在锁标志位为10时，也就是代表重量级锁（synchronized），其中指针指向的是Monitor对象的起始地址。每个对象都与一个Monitor关联，对象和其Monitor之间有多种实现的方式（Monitor可以和对象一起创建销毁或获取锁对象的时候生成），但是当一个Monitor被某个线程持有便处于锁定状态。\n\n> Monitor是由C++实现的，核心组件如下 ：\n> - WaitSet：调用wait的方法被阻塞的线程被放在这；\n> - ContentionList：竞争队列，所有请求锁的线程被先放在这个队列；\n> - EntryList：Contention中资格成功候选资源的线程被放入这；\n> - OnDeck：任意时刻，只有一个线程正在竞争锁，该线程就是OnDeck；\n> - Owner：当前获取到锁资源的线程被称为Owner；\n> - !Owner：当前释放锁的线程；\n\n### synchronized原理\n\n对于同步方法，JVM采用ACC_SYNCHRONIZED标记符来实现；对于同步代码块，JVM采用monitorenter、monitorexit来实现。\n\n- 方法级同步是隐式的。同步方法的常量池中会有一个ACC_SYNCHRONIZED标识，当某个线程访问某方法的时候，会先检查有没有ACC_SYNCHRONIZED标识，如果有的话，需要去获取监视器锁，然后开始执行方法，执行完之后释放锁。此时如果有其他线程来执行，则会因为获取不到监视器锁而被阻塞。\n- 可以把执行monitorenter指令理解为加锁，执行monitorexit理解为释放锁。 每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁（执行monitorenter）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行monitorexit指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。\n\n![synchronized](../../../uploads/java/synchronize.png)\n\n1. JVM每次从队列尾部取出一个数据用于锁的竞争候选者（OnDeck），但是并发情况，ContentionList会被大量的并发线程进行CAS访问，为了降低对尾部元素的竞争，JVM会将一部分线程移动到EntryList中作为候选竞争线程。\n2. Owner线程会在unlock时，将ContentionList中部分线程迁移到EntryList中，并制定EntryList中某个线程为OnDeck现场。（一般是最先进去的线程）\n3. Owner线程不直接把锁传递给OnDeck线程，而是把锁竞争权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了公平性，但是可以极大提升系统的吞吐量。（这种行为成为竞争切换）\n4. OnDeck线程获取到锁资源后会变为Owner线程，没有获取到锁资源的话会继续停留在EntryList中（仍是头部）。如果Owner线程为wait阻塞则会被转移到waitset队列，等到被notify或notifyAll唤醒，会重新进入EntryList。\n\n> - 处于ContentionList、EntryList、WaitSet中的线程都是阻塞状态的。（由操作系统完成）\n> - Synchronized是非公平锁。Synchronized在线程进入ContentionList时，等待的线程会先尝试获取锁，获取不到才进去ContentionList，自旋获取锁可能会直接抢占OnDeck线程的锁资源。\n\n### Synchronized锁优化\n\n高效并发是JDK1.5到JDK1.6的的一个重要改进，HotSpot团队实现来了很多锁优化的技术，例如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁。\n\n> 无锁->偏向锁->轻量级锁->重量级锁，它会随着竞争情况逐渐升级。锁可以升级但不能降级，目的是为了提高获得锁和释放锁的效率。\n\n#### 自旋锁与适应性自旋\n\n互斥同步对性能影响最大的是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态来实现，这些操作会给内核系统的并发性带来很大的压力。同时虚拟机的团队注意到很多应用共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程很不值得。如果物理机上有一个以上的处理器，能让两个或者以上的线程同时执行就可以让后面请求锁的那个线程稍等一下，不放弃处理器的执行时间，看看持有锁的线程是否很快会释放锁。为了让线程等待只需要让线程进行一个自旋，这就是自旋锁。\n自旋锁在JDK1.4.2就被引入，默认是关闭的，可通过-XX:+UseSpinning参数开启，在JDK1.6中就改为默认开启了。自旋不能代替阻塞，自旋虽然避免了线程切换带来的开销，但是需要占用处理器的时间，如果占用处理的时间很长，那就白白消耗处理器的资源，反而性能被浪费。因此自旋等待时间有个限度，如果超过限度的自旋次数还没获取锁就去挂起线程。自旋的默认次数是10次，可使用-XX:PreBlockSpin来修改。\n在JDK1.6中引入了自适应的自旋锁。自适应意味着自旋的时间不在固定，而是由前一次在同一个锁上的自旋时间以及锁的拥有者状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行，那虚拟机会认为这次自旋也有可能再次获取成功，进而它的允许自旋等待时间将会更长。如果对于某个锁，自旋很少成功获取过，那么在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器的资源。\n\n#### 锁消除\n\n锁消除是指虚拟机即时编译器运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据均不会逃逸到出去从而被其他线程访问到，那就可以吧他们当做展示数据对待，认为它们是线程私有的，同步加锁自然无需执行。\n\n锁消除主要是由于很多同步措施不是我们自己加入的，同步的代码在java程序中的普遍程度超过了大多数人的想象。如下代码无论从源码字面还是程序语义上都没有同步。\n\n```\npublic String concatString(String s1, String s2, String s3) {\n    return s1 + s2 + s3;\n}\n```\n\n由于String是不可变的类，对字符串的连接操作总是通过生成新的String对象来进行，因此Javac编译器会对String连接做字段优化。所以上述代码可能会被优化为如下:\n\n```\npublic String concatString(String s1, String s2, String s3) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    sb.append(s3);\n    return sb.toString();\n}\n```\n\n每个StringBuffer.append()方法中都有一个同步块，锁就是sb对象，如果虚拟机发现它的动态作用域被限制在concatString()方法的内部。sb的所有引用不会逃逸到concatString()方法的外部，其他线程也不会访问到它。因此虽然这里有锁，但是可以被安全的消除，在即时编译红藕，这段代码就会忽略掉所有的同步而直接执行。\n\n#### 锁粗化\n\n原则上，在编写代码的时候，推荐将同步快的作用范围限制的很小，只在共享数据的实际作用域中才进行同步，这样为了使得同步的操作数据尽可能的小，如果存在竞争，那等待锁的线程也可以尽快拿到锁。\n如果一系列连续操作都对同一对象反复加锁和解锁，甚至加锁操作出现在循环体中，即便没有线程竞争也会造成不必要的性能消耗。\n例如\n```\npublic String concatString(String s1, String s2, String s3) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    sb.append(s3);\n    return sb.toString();\n}\n```\n上述代码就是这种情况，虚拟机检测到这样的零碎操作都对同一对象加锁，则会把加锁同步的范围扩大道整个操作序列的外部，这样只需要加锁一次即可。\n\n#### 轻量级锁\n\n轻量级锁是相对于使用操作系统互斥量来实现的传统锁而言，轻量级锁不是来代替重量级锁，而是在没有多线程竞争的前提下减少传统的重量级锁使用操作系统的互斥量产生的性能消耗。\n\n加锁过程如下：\n\n- 在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。\n\n- 拷贝对象头中的Mark Word复制到锁记录（Lock Record）中；\n\n- 拷贝成功后，虚拟机将使用CAS操作尝试将锁对象的Mark Word更新为指向Lock Record的指针，并将线程栈帧中的Lock Record里的owner指针指向Object的 Mark Word。\n\n- 如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如图所示。\n\n- 如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。\n\n#### 偏向锁\n\n偏向锁的目的是消除数据在无竞争情况下的同步原语，如果轻量级锁是在无竞争情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是无竞争情况下吧整个同步都消除，CAS操作也不需要。\n\n偏向锁意思是这个锁会偏向于第一个获取它的线程，如果在接下来的过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要进行同步。\n\n当锁对象第一次被线程获取到的时候，虚拟机将会吧对象头中的标志位设为01，即偏向模式，同时使用CAS操作将获取到这个锁的线程ID记录到对象的Mark Word中，如果CAS成功，持有偏向锁的线程以后每次即进入这个锁相关的同步块时，虚拟机可以不进行任何同步操作。\n\n当有另外一个线程尝试获取这个锁时，偏向锁就结束了。根据对象目前是否处于被锁定状态，撤销偏向后恢复到未锁定或轻量级锁的状态。\n\n![synchronized1](../../../uploads/java/synchronize1.png)\n\n锁偏向可以提高带有同步但无竞争的程序性能。但是程序中大多数锁总是被多个不同的线程访问，那偏向模式则是多余的，可以通过-XX:UseBiasedLocking来禁止偏向锁优化。\n","source":"_posts/java/5_synchronized.md","raw":"---\ntitle: synchronized \ndate: 2019-11-27 22:22:13\ncomments: false\ntags: \n- synchronized\n- 锁\ncategories: \n- synchronized\nkeywords: \n- synchronized\n- 锁\n---\n\nsynchronized 可以使用任意一个非空的对象当做锁。synchronized属于独占式的悲观锁，也是可重入锁。它可以保证同一时刻只有一个线程执行某个方法或某个代码块，还可保证共享变量的可见性。\n\n### synchronized的三种作用范围\n\n- 作用于方法，锁住的是对象实例。\n- 作用于代码块，指定加锁对象。\n- 作用于静态方法，锁住的是class实例，相当于类的全局锁。\n\n### java对象头和Monitor（来自深入理解java虚拟机）\n\n在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。\n\n- 对象头：对象头主要包括两部分信息，第一部分用于存储对象自身的的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态表示、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据长度在32为和64为虚拟机中分别为32bit和64bit，简称Mark Word。对象头的另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个数组，在对象头还必须有一块用于记录数组长度的数据（1字节），这样虚拟机可以通过普通java对象的元数据信息确定java对象的大小。\n    > 由于对象运行时的数据很多，已经超过了32/64位bit能记录的限度，但是对象头信息是与对象自身定义的数据无关的额外存储，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间存储尽量多的数据。\n- 实例数据：这是对象真正存储的有效信息，就是代码中定义的各种字段内容（包括从父类继承的）。\n- 对齐填充：这部分不是必然存在的，仅仅是占位符的作用，JVM 要求对象起始地址必须是8字节的整数倍。（对象大小必须是8字节的整数倍）\n\nMark Word 默认存储\n\n| 锁状态 | 25bit | 4bit | 1bit是否是偏向锁 | 2bit锁标志位 |\n| ----- | ----- | ---- | --------------- | ----------- |\n| 无锁状态 | 对象HashCode | 对象分代年龄 | 0 | 01         |\n\n可能变化的结构：\n<table border=0 cellpadding=0 cellspacing=0 style='border-collapse:collapse;table-layout:fixed'><tr><td rowspan=\"2\">锁状态</td><td colspan=\"2\">25bit</td><td rowspan=\"2\">4bit</td><td>1bit</td><td>2bit</td></tr><tr><td>23bit</td><td>2bit</td><td>是否是偏向锁</td><td>锁标志位</td></tr><tr><td>轻量级锁</td><td colspan=\"4\">指向栈中锁记录的指针</td><td>00</td></tr><tr><td>重量级锁</td><td colspan=\"4\">指向重量级锁的指针</td><td>10</td></tr><tr><td>GC标记</td><td colspan=\"4\">空，不需要记录信息</td><td>11</td></tr><tr><td>偏向锁</td><td>偏向线程ID</td><td>偏向时间戳</td><td>对象分代年龄</td><td>1</td><td>01</td></tr></table>\n\n在锁标志位为10时，也就是代表重量级锁（synchronized），其中指针指向的是Monitor对象的起始地址。每个对象都与一个Monitor关联，对象和其Monitor之间有多种实现的方式（Monitor可以和对象一起创建销毁或获取锁对象的时候生成），但是当一个Monitor被某个线程持有便处于锁定状态。\n\n> Monitor是由C++实现的，核心组件如下 ：\n> - WaitSet：调用wait的方法被阻塞的线程被放在这；\n> - ContentionList：竞争队列，所有请求锁的线程被先放在这个队列；\n> - EntryList：Contention中资格成功候选资源的线程被放入这；\n> - OnDeck：任意时刻，只有一个线程正在竞争锁，该线程就是OnDeck；\n> - Owner：当前获取到锁资源的线程被称为Owner；\n> - !Owner：当前释放锁的线程；\n\n### synchronized原理\n\n对于同步方法，JVM采用ACC_SYNCHRONIZED标记符来实现；对于同步代码块，JVM采用monitorenter、monitorexit来实现。\n\n- 方法级同步是隐式的。同步方法的常量池中会有一个ACC_SYNCHRONIZED标识，当某个线程访问某方法的时候，会先检查有没有ACC_SYNCHRONIZED标识，如果有的话，需要去获取监视器锁，然后开始执行方法，执行完之后释放锁。此时如果有其他线程来执行，则会因为获取不到监视器锁而被阻塞。\n- 可以把执行monitorenter指令理解为加锁，执行monitorexit理解为释放锁。 每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁（执行monitorenter）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行monitorexit指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。\n\n![synchronized](../../../uploads/java/synchronize.png)\n\n1. JVM每次从队列尾部取出一个数据用于锁的竞争候选者（OnDeck），但是并发情况，ContentionList会被大量的并发线程进行CAS访问，为了降低对尾部元素的竞争，JVM会将一部分线程移动到EntryList中作为候选竞争线程。\n2. Owner线程会在unlock时，将ContentionList中部分线程迁移到EntryList中，并制定EntryList中某个线程为OnDeck现场。（一般是最先进去的线程）\n3. Owner线程不直接把锁传递给OnDeck线程，而是把锁竞争权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了公平性，但是可以极大提升系统的吞吐量。（这种行为成为竞争切换）\n4. OnDeck线程获取到锁资源后会变为Owner线程，没有获取到锁资源的话会继续停留在EntryList中（仍是头部）。如果Owner线程为wait阻塞则会被转移到waitset队列，等到被notify或notifyAll唤醒，会重新进入EntryList。\n\n> - 处于ContentionList、EntryList、WaitSet中的线程都是阻塞状态的。（由操作系统完成）\n> - Synchronized是非公平锁。Synchronized在线程进入ContentionList时，等待的线程会先尝试获取锁，获取不到才进去ContentionList，自旋获取锁可能会直接抢占OnDeck线程的锁资源。\n\n### Synchronized锁优化\n\n高效并发是JDK1.5到JDK1.6的的一个重要改进，HotSpot团队实现来了很多锁优化的技术，例如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁。\n\n> 无锁->偏向锁->轻量级锁->重量级锁，它会随着竞争情况逐渐升级。锁可以升级但不能降级，目的是为了提高获得锁和释放锁的效率。\n\n#### 自旋锁与适应性自旋\n\n互斥同步对性能影响最大的是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态来实现，这些操作会给内核系统的并发性带来很大的压力。同时虚拟机的团队注意到很多应用共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程很不值得。如果物理机上有一个以上的处理器，能让两个或者以上的线程同时执行就可以让后面请求锁的那个线程稍等一下，不放弃处理器的执行时间，看看持有锁的线程是否很快会释放锁。为了让线程等待只需要让线程进行一个自旋，这就是自旋锁。\n自旋锁在JDK1.4.2就被引入，默认是关闭的，可通过-XX:+UseSpinning参数开启，在JDK1.6中就改为默认开启了。自旋不能代替阻塞，自旋虽然避免了线程切换带来的开销，但是需要占用处理器的时间，如果占用处理的时间很长，那就白白消耗处理器的资源，反而性能被浪费。因此自旋等待时间有个限度，如果超过限度的自旋次数还没获取锁就去挂起线程。自旋的默认次数是10次，可使用-XX:PreBlockSpin来修改。\n在JDK1.6中引入了自适应的自旋锁。自适应意味着自旋的时间不在固定，而是由前一次在同一个锁上的自旋时间以及锁的拥有者状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行，那虚拟机会认为这次自旋也有可能再次获取成功，进而它的允许自旋等待时间将会更长。如果对于某个锁，自旋很少成功获取过，那么在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器的资源。\n\n#### 锁消除\n\n锁消除是指虚拟机即时编译器运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据均不会逃逸到出去从而被其他线程访问到，那就可以吧他们当做展示数据对待，认为它们是线程私有的，同步加锁自然无需执行。\n\n锁消除主要是由于很多同步措施不是我们自己加入的，同步的代码在java程序中的普遍程度超过了大多数人的想象。如下代码无论从源码字面还是程序语义上都没有同步。\n\n```\npublic String concatString(String s1, String s2, String s3) {\n    return s1 + s2 + s3;\n}\n```\n\n由于String是不可变的类，对字符串的连接操作总是通过生成新的String对象来进行，因此Javac编译器会对String连接做字段优化。所以上述代码可能会被优化为如下:\n\n```\npublic String concatString(String s1, String s2, String s3) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    sb.append(s3);\n    return sb.toString();\n}\n```\n\n每个StringBuffer.append()方法中都有一个同步块，锁就是sb对象，如果虚拟机发现它的动态作用域被限制在concatString()方法的内部。sb的所有引用不会逃逸到concatString()方法的外部，其他线程也不会访问到它。因此虽然这里有锁，但是可以被安全的消除，在即时编译红藕，这段代码就会忽略掉所有的同步而直接执行。\n\n#### 锁粗化\n\n原则上，在编写代码的时候，推荐将同步快的作用范围限制的很小，只在共享数据的实际作用域中才进行同步，这样为了使得同步的操作数据尽可能的小，如果存在竞争，那等待锁的线程也可以尽快拿到锁。\n如果一系列连续操作都对同一对象反复加锁和解锁，甚至加锁操作出现在循环体中，即便没有线程竞争也会造成不必要的性能消耗。\n例如\n```\npublic String concatString(String s1, String s2, String s3) {\n    StringBuffer sb = new StringBuffer();\n    sb.append(s1);\n    sb.append(s2);\n    sb.append(s3);\n    return sb.toString();\n}\n```\n上述代码就是这种情况，虚拟机检测到这样的零碎操作都对同一对象加锁，则会把加锁同步的范围扩大道整个操作序列的外部，这样只需要加锁一次即可。\n\n#### 轻量级锁\n\n轻量级锁是相对于使用操作系统互斥量来实现的传统锁而言，轻量级锁不是来代替重量级锁，而是在没有多线程竞争的前提下减少传统的重量级锁使用操作系统的互斥量产生的性能消耗。\n\n加锁过程如下：\n\n- 在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。\n\n- 拷贝对象头中的Mark Word复制到锁记录（Lock Record）中；\n\n- 拷贝成功后，虚拟机将使用CAS操作尝试将锁对象的Mark Word更新为指向Lock Record的指针，并将线程栈帧中的Lock Record里的owner指针指向Object的 Mark Word。\n\n- 如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如图所示。\n\n- 如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。\n\n#### 偏向锁\n\n偏向锁的目的是消除数据在无竞争情况下的同步原语，如果轻量级锁是在无竞争情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是无竞争情况下吧整个同步都消除，CAS操作也不需要。\n\n偏向锁意思是这个锁会偏向于第一个获取它的线程，如果在接下来的过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要进行同步。\n\n当锁对象第一次被线程获取到的时候，虚拟机将会吧对象头中的标志位设为01，即偏向模式，同时使用CAS操作将获取到这个锁的线程ID记录到对象的Mark Word中，如果CAS成功，持有偏向锁的线程以后每次即进入这个锁相关的同步块时，虚拟机可以不进行任何同步操作。\n\n当有另外一个线程尝试获取这个锁时，偏向锁就结束了。根据对象目前是否处于被锁定状态，撤销偏向后恢复到未锁定或轻量级锁的状态。\n\n![synchronized1](../../../uploads/java/synchronize1.png)\n\n锁偏向可以提高带有同步但无竞争的程序性能。但是程序中大多数锁总是被多个不同的线程访问，那偏向模式则是多余的，可以通过-XX:UseBiasedLocking来禁止偏向锁优化。\n","slug":"java/5_synchronized","published":1,"updated":"2020-01-02T05:49:23.763Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsn003ln0ztnihfiv3l","content":"<p>synchronized 可以使用任意一个非空的对象当做锁。synchronized属于独占式的悲观锁，也是可重入锁。它可以保证同一时刻只有一个线程执行某个方法或某个代码块，还可保证共享变量的可见性。</p>\n<h3 id=\"synchronized的三种作用范围\"><a href=\"#synchronized的三种作用范围\" class=\"headerlink\" title=\"synchronized的三种作用范围\"></a>synchronized的三种作用范围</h3><ul>\n<li>作用于方法，锁住的是对象实例。</li>\n<li>作用于代码块，指定加锁对象。</li>\n<li>作用于静态方法，锁住的是class实例，相当于类的全局锁。</li>\n</ul>\n<h3 id=\"java对象头和Monitor（来自深入理解java虚拟机）\"><a href=\"#java对象头和Monitor（来自深入理解java虚拟机）\" class=\"headerlink\" title=\"java对象头和Monitor（来自深入理解java虚拟机）\"></a>java对象头和Monitor（来自深入理解java虚拟机）</h3><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</p>\n<ul>\n<li>对象头：对象头主要包括两部分信息，第一部分用于存储对象自身的的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态表示、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据长度在32为和64为虚拟机中分别为32bit和64bit，简称Mark Word。对象头的另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个数组，在对象头还必须有一块用于记录数组长度的数据（1字节），这样虚拟机可以通过普通java对象的元数据信息确定java对象的大小。<blockquote>\n<p>由于对象运行时的数据很多，已经超过了32/64位bit能记录的限度，但是对象头信息是与对象自身定义的数据无关的额外存储，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间存储尽量多的数据。</p>\n</blockquote>\n</li>\n<li>实例数据：这是对象真正存储的有效信息，就是代码中定义的各种字段内容（包括从父类继承的）。</li>\n<li>对齐填充：这部分不是必然存在的，仅仅是占位符的作用，JVM 要求对象起始地址必须是8字节的整数倍。（对象大小必须是8字节的整数倍）</li>\n</ul>\n<p>Mark Word 默认存储</p>\n<table>\n<thead>\n<tr>\n<th>锁状态</th>\n<th>25bit</th>\n<th>4bit</th>\n<th>1bit是否是偏向锁</th>\n<th>2bit锁标志位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无锁状态</td>\n<td>对象HashCode</td>\n<td>对象分代年龄</td>\n<td>0</td>\n<td>01</td>\n</tr>\n</tbody>\n</table>\n<p>可能变化的结构：</p>\n<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"border-collapse:collapse;table-layout:fixed\"><tr><td rowspan=\"2\">锁状态</td><td colspan=\"2\">25bit</td><td rowspan=\"2\">4bit</td><td>1bit</td><td>2bit</td></tr><tr><td>23bit</td><td>2bit</td><td>是否是偏向锁</td><td>锁标志位</td></tr><tr><td>轻量级锁</td><td colspan=\"4\">指向栈中锁记录的指针</td><td>00</td></tr><tr><td>重量级锁</td><td colspan=\"4\">指向重量级锁的指针</td><td>10</td></tr><tr><td>GC标记</td><td colspan=\"4\">空，不需要记录信息</td><td>11</td></tr><tr><td>偏向锁</td><td>偏向线程ID</td><td>偏向时间戳</td><td>对象分代年龄</td><td>1</td><td>01</td></tr></table>\n\n<p>在锁标志位为10时，也就是代表重量级锁（synchronized），其中指针指向的是Monitor对象的起始地址。每个对象都与一个Monitor关联，对象和其Monitor之间有多种实现的方式（Monitor可以和对象一起创建销毁或获取锁对象的时候生成），但是当一个Monitor被某个线程持有便处于锁定状态。</p>\n<blockquote>\n<p>Monitor是由C++实现的，核心组件如下 ：</p>\n<ul>\n<li>WaitSet：调用wait的方法被阻塞的线程被放在这；</li>\n<li>ContentionList：竞争队列，所有请求锁的线程被先放在这个队列；</li>\n<li>EntryList：Contention中资格成功候选资源的线程被放入这；</li>\n<li>OnDeck：任意时刻，只有一个线程正在竞争锁，该线程就是OnDeck；</li>\n<li>Owner：当前获取到锁资源的线程被称为Owner；</li>\n<li>!Owner：当前释放锁的线程；</li>\n</ul>\n</blockquote>\n<h3 id=\"synchronized原理\"><a href=\"#synchronized原理\" class=\"headerlink\" title=\"synchronized原理\"></a>synchronized原理</h3><p>对于同步方法，JVM采用ACC_SYNCHRONIZED标记符来实现；对于同步代码块，JVM采用monitorenter、monitorexit来实现。</p>\n<ul>\n<li>方法级同步是隐式的。同步方法的常量池中会有一个ACC_SYNCHRONIZED标识，当某个线程访问某方法的时候，会先检查有没有ACC_SYNCHRONIZED标识，如果有的话，需要去获取监视器锁，然后开始执行方法，执行完之后释放锁。此时如果有其他线程来执行，则会因为获取不到监视器锁而被阻塞。</li>\n<li>可以把执行monitorenter指令理解为加锁，执行monitorexit理解为释放锁。 每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁（执行monitorenter）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行monitorexit指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。</li>\n</ul>\n<p><img src=\"../../../uploads/java/synchronize.png\" alt=\"synchronized\"></p>\n<ol>\n<li>JVM每次从队列尾部取出一个数据用于锁的竞争候选者（OnDeck），但是并发情况，ContentionList会被大量的并发线程进行CAS访问，为了降低对尾部元素的竞争，JVM会将一部分线程移动到EntryList中作为候选竞争线程。</li>\n<li>Owner线程会在unlock时，将ContentionList中部分线程迁移到EntryList中，并制定EntryList中某个线程为OnDeck现场。（一般是最先进去的线程）</li>\n<li>Owner线程不直接把锁传递给OnDeck线程，而是把锁竞争权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了公平性，但是可以极大提升系统的吞吐量。（这种行为成为竞争切换）</li>\n<li>OnDeck线程获取到锁资源后会变为Owner线程，没有获取到锁资源的话会继续停留在EntryList中（仍是头部）。如果Owner线程为wait阻塞则会被转移到waitset队列，等到被notify或notifyAll唤醒，会重新进入EntryList。</li>\n</ol>\n<blockquote>\n<ul>\n<li>处于ContentionList、EntryList、WaitSet中的线程都是阻塞状态的。（由操作系统完成）</li>\n<li>Synchronized是非公平锁。Synchronized在线程进入ContentionList时，等待的线程会先尝试获取锁，获取不到才进去ContentionList，自旋获取锁可能会直接抢占OnDeck线程的锁资源。</li>\n</ul>\n</blockquote>\n<h3 id=\"Synchronized锁优化\"><a href=\"#Synchronized锁优化\" class=\"headerlink\" title=\"Synchronized锁优化\"></a>Synchronized锁优化</h3><p>高效并发是JDK1.5到JDK1.6的的一个重要改进，HotSpot团队实现来了很多锁优化的技术，例如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁。</p>\n<blockquote>\n<p>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁，它会随着竞争情况逐渐升级。锁可以升级但不能降级，目的是为了提高获得锁和释放锁的效率。</p>\n</blockquote>\n<h4 id=\"自旋锁与适应性自旋\"><a href=\"#自旋锁与适应性自旋\" class=\"headerlink\" title=\"自旋锁与适应性自旋\"></a>自旋锁与适应性自旋</h4><p>互斥同步对性能影响最大的是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态来实现，这些操作会给内核系统的并发性带来很大的压力。同时虚拟机的团队注意到很多应用共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程很不值得。如果物理机上有一个以上的处理器，能让两个或者以上的线程同时执行就可以让后面请求锁的那个线程稍等一下，不放弃处理器的执行时间，看看持有锁的线程是否很快会释放锁。为了让线程等待只需要让线程进行一个自旋，这就是自旋锁。<br>自旋锁在JDK1.4.2就被引入，默认是关闭的，可通过-XX:+UseSpinning参数开启，在JDK1.6中就改为默认开启了。自旋不能代替阻塞，自旋虽然避免了线程切换带来的开销，但是需要占用处理器的时间，如果占用处理的时间很长，那就白白消耗处理器的资源，反而性能被浪费。因此自旋等待时间有个限度，如果超过限度的自旋次数还没获取锁就去挂起线程。自旋的默认次数是10次，可使用-XX:PreBlockSpin来修改。<br>在JDK1.6中引入了自适应的自旋锁。自适应意味着自旋的时间不在固定，而是由前一次在同一个锁上的自旋时间以及锁的拥有者状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行，那虚拟机会认为这次自旋也有可能再次获取成功，进而它的允许自旋等待时间将会更长。如果对于某个锁，自旋很少成功获取过，那么在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器的资源。</p>\n<h4 id=\"锁消除\"><a href=\"#锁消除\" class=\"headerlink\" title=\"锁消除\"></a>锁消除</h4><p>锁消除是指虚拟机即时编译器运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据均不会逃逸到出去从而被其他线程访问到，那就可以吧他们当做展示数据对待，认为它们是线程私有的，同步加锁自然无需执行。</p>\n<p>锁消除主要是由于很多同步措施不是我们自己加入的，同步的代码在java程序中的普遍程度超过了大多数人的想象。如下代码无论从源码字面还是程序语义上都没有同步。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String concatString(String s1, String s2, String s3) &#123;</div><div class=\"line\">    return s1 + s2 + s3;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于String是不可变的类，对字符串的连接操作总是通过生成新的String对象来进行，因此Javac编译器会对String连接做字段优化。所以上述代码可能会被优化为如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String concatString(String s1, String s2, String s3) &#123;</div><div class=\"line\">    StringBuffer sb = new StringBuffer();</div><div class=\"line\">    sb.append(s1);</div><div class=\"line\">    sb.append(s2);</div><div class=\"line\">    sb.append(s3);</div><div class=\"line\">    return sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每个StringBuffer.append()方法中都有一个同步块，锁就是sb对象，如果虚拟机发现它的动态作用域被限制在concatString()方法的内部。sb的所有引用不会逃逸到concatString()方法的外部，其他线程也不会访问到它。因此虽然这里有锁，但是可以被安全的消除，在即时编译红藕，这段代码就会忽略掉所有的同步而直接执行。</p>\n<h4 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h4><p>原则上，在编写代码的时候，推荐将同步快的作用范围限制的很小，只在共享数据的实际作用域中才进行同步，这样为了使得同步的操作数据尽可能的小，如果存在竞争，那等待锁的线程也可以尽快拿到锁。<br>如果一系列连续操作都对同一对象反复加锁和解锁，甚至加锁操作出现在循环体中，即便没有线程竞争也会造成不必要的性能消耗。<br>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String concatString(String s1, String s2, String s3) &#123;</div><div class=\"line\">    StringBuffer sb = new StringBuffer();</div><div class=\"line\">    sb.append(s1);</div><div class=\"line\">    sb.append(s2);</div><div class=\"line\">    sb.append(s3);</div><div class=\"line\">    return sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码就是这种情况，虚拟机检测到这样的零碎操作都对同一对象加锁，则会把加锁同步的范围扩大道整个操作序列的外部，这样只需要加锁一次即可。</p>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><p>轻量级锁是相对于使用操作系统互斥量来实现的传统锁而言，轻量级锁不是来代替重量级锁，而是在没有多线程竞争的前提下减少传统的重量级锁使用操作系统的互斥量产生的性能消耗。</p>\n<p>加锁过程如下：</p>\n<ul>\n<li><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。</p>\n</li>\n<li><p>拷贝对象头中的Mark Word复制到锁记录（Lock Record）中；</p>\n</li>\n<li><p>拷贝成功后，虚拟机将使用CAS操作尝试将锁对象的Mark Word更新为指向Lock Record的指针，并将线程栈帧中的Lock Record里的owner指针指向Object的 Mark Word。</p>\n</li>\n<li><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如图所示。</p>\n</li>\n<li><p>如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。</p>\n</li>\n</ul>\n<h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><p>偏向锁的目的是消除数据在无竞争情况下的同步原语，如果轻量级锁是在无竞争情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是无竞争情况下吧整个同步都消除，CAS操作也不需要。</p>\n<p>偏向锁意思是这个锁会偏向于第一个获取它的线程，如果在接下来的过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要进行同步。</p>\n<p>当锁对象第一次被线程获取到的时候，虚拟机将会吧对象头中的标志位设为01，即偏向模式，同时使用CAS操作将获取到这个锁的线程ID记录到对象的Mark Word中，如果CAS成功，持有偏向锁的线程以后每次即进入这个锁相关的同步块时，虚拟机可以不进行任何同步操作。</p>\n<p>当有另外一个线程尝试获取这个锁时，偏向锁就结束了。根据对象目前是否处于被锁定状态，撤销偏向后恢复到未锁定或轻量级锁的状态。</p>\n<p><img src=\"../../../uploads/java/synchronize1.png\" alt=\"synchronized1\"></p>\n<p>锁偏向可以提高带有同步但无竞争的程序性能。但是程序中大多数锁总是被多个不同的线程访问，那偏向模式则是多余的，可以通过-XX:UseBiasedLocking来禁止偏向锁优化。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>synchronized 可以使用任意一个非空的对象当做锁。synchronized属于独占式的悲观锁，也是可重入锁。它可以保证同一时刻只有一个线程执行某个方法或某个代码块，还可保证共享变量的可见性。</p>\n<h3 id=\"synchronized的三种作用范围\"><a href=\"#synchronized的三种作用范围\" class=\"headerlink\" title=\"synchronized的三种作用范围\"></a>synchronized的三种作用范围</h3><ul>\n<li>作用于方法，锁住的是对象实例。</li>\n<li>作用于代码块，指定加锁对象。</li>\n<li>作用于静态方法，锁住的是class实例，相当于类的全局锁。</li>\n</ul>\n<h3 id=\"java对象头和Monitor（来自深入理解java虚拟机）\"><a href=\"#java对象头和Monitor（来自深入理解java虚拟机）\" class=\"headerlink\" title=\"java对象头和Monitor（来自深入理解java虚拟机）\"></a>java对象头和Monitor（来自深入理解java虚拟机）</h3><p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。</p>\n<ul>\n<li>对象头：对象头主要包括两部分信息，第一部分用于存储对象自身的的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态表示、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据长度在32为和64为虚拟机中分别为32bit和64bit，简称Mark Word。对象头的另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。如果对象是一个数组，在对象头还必须有一块用于记录数组长度的数据（1字节），这样虚拟机可以通过普通java对象的元数据信息确定java对象的大小。<blockquote>\n<p>由于对象运行时的数据很多，已经超过了32/64位bit能记录的限度，但是对象头信息是与对象自身定义的数据无关的额外存储，考虑到虚拟机的空间效率，Mark Word被设计成一个非固定的数据结构以便在极小的空间存储尽量多的数据。</p>\n</blockquote>\n</li>\n<li>实例数据：这是对象真正存储的有效信息，就是代码中定义的各种字段内容（包括从父类继承的）。</li>\n<li>对齐填充：这部分不是必然存在的，仅仅是占位符的作用，JVM 要求对象起始地址必须是8字节的整数倍。（对象大小必须是8字节的整数倍）</li>\n</ul>\n<p>Mark Word 默认存储</p>\n<table>\n<thead>\n<tr>\n<th>锁状态</th>\n<th>25bit</th>\n<th>4bit</th>\n<th>1bit是否是偏向锁</th>\n<th>2bit锁标志位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>无锁状态</td>\n<td>对象HashCode</td>\n<td>对象分代年龄</td>\n<td>0</td>\n<td>01</td>\n</tr>\n</tbody>\n</table>\n<p>可能变化的结构：</p>\n<table border=0 cellpadding=0 cellspacing=0 style='border-collapse:collapse;table-layout:fixed'><tr><td rowspan=\"2\">锁状态</td><td colspan=\"2\">25bit</td><td rowspan=\"2\">4bit</td><td>1bit</td><td>2bit</td></tr><tr><td>23bit</td><td>2bit</td><td>是否是偏向锁</td><td>锁标志位</td></tr><tr><td>轻量级锁</td><td colspan=\"4\">指向栈中锁记录的指针</td><td>00</td></tr><tr><td>重量级锁</td><td colspan=\"4\">指向重量级锁的指针</td><td>10</td></tr><tr><td>GC标记</td><td colspan=\"4\">空，不需要记录信息</td><td>11</td></tr><tr><td>偏向锁</td><td>偏向线程ID</td><td>偏向时间戳</td><td>对象分代年龄</td><td>1</td><td>01</td></tr></table>\n\n<p>在锁标志位为10时，也就是代表重量级锁（synchronized），其中指针指向的是Monitor对象的起始地址。每个对象都与一个Monitor关联，对象和其Monitor之间有多种实现的方式（Monitor可以和对象一起创建销毁或获取锁对象的时候生成），但是当一个Monitor被某个线程持有便处于锁定状态。</p>\n<blockquote>\n<p>Monitor是由C++实现的，核心组件如下 ：</p>\n<ul>\n<li>WaitSet：调用wait的方法被阻塞的线程被放在这；</li>\n<li>ContentionList：竞争队列，所有请求锁的线程被先放在这个队列；</li>\n<li>EntryList：Contention中资格成功候选资源的线程被放入这；</li>\n<li>OnDeck：任意时刻，只有一个线程正在竞争锁，该线程就是OnDeck；</li>\n<li>Owner：当前获取到锁资源的线程被称为Owner；</li>\n<li>!Owner：当前释放锁的线程；</li>\n</ul>\n</blockquote>\n<h3 id=\"synchronized原理\"><a href=\"#synchronized原理\" class=\"headerlink\" title=\"synchronized原理\"></a>synchronized原理</h3><p>对于同步方法，JVM采用ACC_SYNCHRONIZED标记符来实现；对于同步代码块，JVM采用monitorenter、monitorexit来实现。</p>\n<ul>\n<li>方法级同步是隐式的。同步方法的常量池中会有一个ACC_SYNCHRONIZED标识，当某个线程访问某方法的时候，会先检查有没有ACC_SYNCHRONIZED标识，如果有的话，需要去获取监视器锁，然后开始执行方法，执行完之后释放锁。此时如果有其他线程来执行，则会因为获取不到监视器锁而被阻塞。</li>\n<li>可以把执行monitorenter指令理解为加锁，执行monitorexit理解为释放锁。 每个对象维护着一个记录着被锁次数的计数器。未被锁定的对象的该计数器为0，当一个线程获得锁（执行monitorenter）后，该计数器自增变为 1 ，当同一个线程再次获得该对象的锁的时候，计数器再次自增。当同一个线程释放锁（执行monitorexit指令）的时候，计数器再自减。当计数器为0的时候。锁将被释放，其他线程便可以获得锁。</li>\n</ul>\n<p><img src=\"../../../uploads/java/synchronize.png\" alt=\"synchronized\"></p>\n<ol>\n<li>JVM每次从队列尾部取出一个数据用于锁的竞争候选者（OnDeck），但是并发情况，ContentionList会被大量的并发线程进行CAS访问，为了降低对尾部元素的竞争，JVM会将一部分线程移动到EntryList中作为候选竞争线程。</li>\n<li>Owner线程会在unlock时，将ContentionList中部分线程迁移到EntryList中，并制定EntryList中某个线程为OnDeck现场。（一般是最先进去的线程）</li>\n<li>Owner线程不直接把锁传递给OnDeck线程，而是把锁竞争权利交给OnDeck，OnDeck需要重新竞争锁。这样虽然牺牲了公平性，但是可以极大提升系统的吞吐量。（这种行为成为竞争切换）</li>\n<li>OnDeck线程获取到锁资源后会变为Owner线程，没有获取到锁资源的话会继续停留在EntryList中（仍是头部）。如果Owner线程为wait阻塞则会被转移到waitset队列，等到被notify或notifyAll唤醒，会重新进入EntryList。</li>\n</ol>\n<blockquote>\n<ul>\n<li>处于ContentionList、EntryList、WaitSet中的线程都是阻塞状态的。（由操作系统完成）</li>\n<li>Synchronized是非公平锁。Synchronized在线程进入ContentionList时，等待的线程会先尝试获取锁，获取不到才进去ContentionList，自旋获取锁可能会直接抢占OnDeck线程的锁资源。</li>\n</ul>\n</blockquote>\n<h3 id=\"Synchronized锁优化\"><a href=\"#Synchronized锁优化\" class=\"headerlink\" title=\"Synchronized锁优化\"></a>Synchronized锁优化</h3><p>高效并发是JDK1.5到JDK1.6的的一个重要改进，HotSpot团队实现来了很多锁优化的技术，例如适应性自旋、锁消除、锁粗化、轻量级锁和偏向锁。</p>\n<blockquote>\n<p>无锁-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁，它会随着竞争情况逐渐升级。锁可以升级但不能降级，目的是为了提高获得锁和释放锁的效率。</p>\n</blockquote>\n<h4 id=\"自旋锁与适应性自旋\"><a href=\"#自旋锁与适应性自旋\" class=\"headerlink\" title=\"自旋锁与适应性自旋\"></a>自旋锁与适应性自旋</h4><p>互斥同步对性能影响最大的是阻塞的实现，挂起线程和恢复线程的操作都需要转入内核态来实现，这些操作会给内核系统的并发性带来很大的压力。同时虚拟机的团队注意到很多应用共享数据的锁定状态只会持续很短的一段时间，为了这段时间去挂起和恢复线程很不值得。如果物理机上有一个以上的处理器，能让两个或者以上的线程同时执行就可以让后面请求锁的那个线程稍等一下，不放弃处理器的执行时间，看看持有锁的线程是否很快会释放锁。为了让线程等待只需要让线程进行一个自旋，这就是自旋锁。<br>自旋锁在JDK1.4.2就被引入，默认是关闭的，可通过-XX:+UseSpinning参数开启，在JDK1.6中就改为默认开启了。自旋不能代替阻塞，自旋虽然避免了线程切换带来的开销，但是需要占用处理器的时间，如果占用处理的时间很长，那就白白消耗处理器的资源，反而性能被浪费。因此自旋等待时间有个限度，如果超过限度的自旋次数还没获取锁就去挂起线程。自旋的默认次数是10次，可使用-XX:PreBlockSpin来修改。<br>在JDK1.6中引入了自适应的自旋锁。自适应意味着自旋的时间不在固定，而是由前一次在同一个锁上的自旋时间以及锁的拥有者状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获取过锁，并且持有锁的线程正在运行，那虚拟机会认为这次自旋也有可能再次获取成功，进而它的允许自旋等待时间将会更长。如果对于某个锁，自旋很少成功获取过，那么在以后要获取这个锁时将可能省略掉自旋过程，以避免浪费处理器的资源。</p>\n<h4 id=\"锁消除\"><a href=\"#锁消除\" class=\"headerlink\" title=\"锁消除\"></a>锁消除</h4><p>锁消除是指虚拟机即时编译器运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行消除。锁消除主要判定依据来源于逃逸分析的数据支持，如果判断在一段代码中，堆上的所有数据均不会逃逸到出去从而被其他线程访问到，那就可以吧他们当做展示数据对待，认为它们是线程私有的，同步加锁自然无需执行。</p>\n<p>锁消除主要是由于很多同步措施不是我们自己加入的，同步的代码在java程序中的普遍程度超过了大多数人的想象。如下代码无论从源码字面还是程序语义上都没有同步。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String concatString(String s1, String s2, String s3) &#123;</div><div class=\"line\">    return s1 + s2 + s3;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于String是不可变的类，对字符串的连接操作总是通过生成新的String对象来进行，因此Javac编译器会对String连接做字段优化。所以上述代码可能会被优化为如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String concatString(String s1, String s2, String s3) &#123;</div><div class=\"line\">    StringBuffer sb = new StringBuffer();</div><div class=\"line\">    sb.append(s1);</div><div class=\"line\">    sb.append(s2);</div><div class=\"line\">    sb.append(s3);</div><div class=\"line\">    return sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>每个StringBuffer.append()方法中都有一个同步块，锁就是sb对象，如果虚拟机发现它的动态作用域被限制在concatString()方法的内部。sb的所有引用不会逃逸到concatString()方法的外部，其他线程也不会访问到它。因此虽然这里有锁，但是可以被安全的消除，在即时编译红藕，这段代码就会忽略掉所有的同步而直接执行。</p>\n<h4 id=\"锁粗化\"><a href=\"#锁粗化\" class=\"headerlink\" title=\"锁粗化\"></a>锁粗化</h4><p>原则上，在编写代码的时候，推荐将同步快的作用范围限制的很小，只在共享数据的实际作用域中才进行同步，这样为了使得同步的操作数据尽可能的小，如果存在竞争，那等待锁的线程也可以尽快拿到锁。<br>如果一系列连续操作都对同一对象反复加锁和解锁，甚至加锁操作出现在循环体中，即便没有线程竞争也会造成不必要的性能消耗。<br>例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public String concatString(String s1, String s2, String s3) &#123;</div><div class=\"line\">    StringBuffer sb = new StringBuffer();</div><div class=\"line\">    sb.append(s1);</div><div class=\"line\">    sb.append(s2);</div><div class=\"line\">    sb.append(s3);</div><div class=\"line\">    return sb.toString();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码就是这种情况，虚拟机检测到这样的零碎操作都对同一对象加锁，则会把加锁同步的范围扩大道整个操作序列的外部，这样只需要加锁一次即可。</p>\n<h4 id=\"轻量级锁\"><a href=\"#轻量级锁\" class=\"headerlink\" title=\"轻量级锁\"></a>轻量级锁</h4><p>轻量级锁是相对于使用操作系统互斥量来实现的传统锁而言，轻量级锁不是来代替重量级锁，而是在没有多线程竞争的前提下减少传统的重量级锁使用操作系统的互斥量产生的性能消耗。</p>\n<p>加锁过程如下：</p>\n<ul>\n<li><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，官方称之为 Displaced Mark Word。</p>\n</li>\n<li><p>拷贝对象头中的Mark Word复制到锁记录（Lock Record）中；</p>\n</li>\n<li><p>拷贝成功后，虚拟机将使用CAS操作尝试将锁对象的Mark Word更新为指向Lock Record的指针，并将线程栈帧中的Lock Record里的owner指针指向Object的 Mark Word。</p>\n</li>\n<li><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，即表示此对象处于轻量级锁定状态，这时候线程堆栈与对象头的状态如图所示。</p>\n</li>\n<li><p>如果这个更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行。否则说明多个线程竞争锁，轻量级锁就要膨胀为重量级锁，锁标志的状态值变为“10”，Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也要进入阻塞状态。</p>\n</li>\n</ul>\n<h4 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h4><p>偏向锁的目的是消除数据在无竞争情况下的同步原语，如果轻量级锁是在无竞争情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是无竞争情况下吧整个同步都消除，CAS操作也不需要。</p>\n<p>偏向锁意思是这个锁会偏向于第一个获取它的线程，如果在接下来的过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要进行同步。</p>\n<p>当锁对象第一次被线程获取到的时候，虚拟机将会吧对象头中的标志位设为01，即偏向模式，同时使用CAS操作将获取到这个锁的线程ID记录到对象的Mark Word中，如果CAS成功，持有偏向锁的线程以后每次即进入这个锁相关的同步块时，虚拟机可以不进行任何同步操作。</p>\n<p>当有另外一个线程尝试获取这个锁时，偏向锁就结束了。根据对象目前是否处于被锁定状态，撤销偏向后恢复到未锁定或轻量级锁的状态。</p>\n<p><img src=\"../../../uploads/java/synchronize1.png\" alt=\"synchronized1\"></p>\n<p>锁偏向可以提高带有同步但无竞争的程序性能。但是程序中大多数锁总是被多个不同的线程访问，那偏向模式则是多余的，可以通过-XX:UseBiasedLocking来禁止偏向锁优化。</p>\n"},{"title":"字典树","date":"2019-12-06T07:45:38.000Z","comments":0,"keywords":["structure","trie","字典数"],"_content":"\n### 字典树\n\n字典树又称单词查找树，是一种树形的结构，是一种哈希数的变种。典型应用是用于统计、排序和保存大量的字符串，经常被用于文本词频的统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。\n\n![字典树](../../../uploads/structure/trie.png)\n\n#### 基本性质\n\n1. 根节点不包含字符，除根节点意外每个节点只包含一个字符。\n\n2. 从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。\n\n3. 每个节点的所有子节点包含的字符串不相同。\n\n#### 实现\n\n```\npublic class Trie {\n\n    private static class Node {\n        public Map<Character, Node> next;\n        public boolean isWord;\n        public int count;\n\n        public Node() {\n            next = new TreeMap<>();\n            isWord = true;\n            count = 0;\n        }\n\n    }\n\n    private Node root;\n\n    public Trie() {\n        root = new Node();\n    }\n\n    public void addWord(String word) {\n        char[] chars = word.toCharArray();\n        Node current = root;\n        for (char c : chars) {\n            Node next = current.next.get(c);\n            if (next == null) {\n                current.next.put(c, new Node());\n            }\n            current = current.next.get(c);\n        }\n        if (!current.isWord) {\n            current.isWord = true;\n        }\n        current.count++;\n    }\n\n    public int query(String str) {\n        Node current = root;\n        if (root == null) {\n            return 0;\n        }\n        char[] chars = str.toCharArray();\n        for (char c : chars) {\n            Node next = current.next.get(c);\n            if (next == null) {\n                return 0;\n            }\n            current = next;\n        }\n        return current.count;\n    }\n\n    public boolean search(String str) {\n        Node current = root;\n        if (root == null) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        for (char c : chars) {\n            Node next = current.next.get(c);\n            if (next == null) {\n                return false;\n            }\n            current = next;\n        }\n        return current.isWord;\n    }\n\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.addWord(\"abc\");\n        trie.addWord(\"abc\");\n        System.out.println(trie.query(\"abc\"));\n    }\n}\n```\n\n字典树一般仅进行插入操作，然后去判断某个字段串是否存在，或者这个字符串存在的次数。","source":"_posts/structure/1_trie.md","raw":"---\ntitle: 字典树\ndate: 2019-12-06 15:45:38\ncomments: false\ntags: \n- structure\n- trie\n- 字典数\ncategories: \n- structure\nkeywords: \n- structure\n- trie\n- 字典数\n---\n\n### 字典树\n\n字典树又称单词查找树，是一种树形的结构，是一种哈希数的变种。典型应用是用于统计、排序和保存大量的字符串，经常被用于文本词频的统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。\n\n![字典树](../../../uploads/structure/trie.png)\n\n#### 基本性质\n\n1. 根节点不包含字符，除根节点意外每个节点只包含一个字符。\n\n2. 从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。\n\n3. 每个节点的所有子节点包含的字符串不相同。\n\n#### 实现\n\n```\npublic class Trie {\n\n    private static class Node {\n        public Map<Character, Node> next;\n        public boolean isWord;\n        public int count;\n\n        public Node() {\n            next = new TreeMap<>();\n            isWord = true;\n            count = 0;\n        }\n\n    }\n\n    private Node root;\n\n    public Trie() {\n        root = new Node();\n    }\n\n    public void addWord(String word) {\n        char[] chars = word.toCharArray();\n        Node current = root;\n        for (char c : chars) {\n            Node next = current.next.get(c);\n            if (next == null) {\n                current.next.put(c, new Node());\n            }\n            current = current.next.get(c);\n        }\n        if (!current.isWord) {\n            current.isWord = true;\n        }\n        current.count++;\n    }\n\n    public int query(String str) {\n        Node current = root;\n        if (root == null) {\n            return 0;\n        }\n        char[] chars = str.toCharArray();\n        for (char c : chars) {\n            Node next = current.next.get(c);\n            if (next == null) {\n                return 0;\n            }\n            current = next;\n        }\n        return current.count;\n    }\n\n    public boolean search(String str) {\n        Node current = root;\n        if (root == null) {\n            return false;\n        }\n        char[] chars = str.toCharArray();\n        for (char c : chars) {\n            Node next = current.next.get(c);\n            if (next == null) {\n                return false;\n            }\n            current = next;\n        }\n        return current.isWord;\n    }\n\n\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.addWord(\"abc\");\n        trie.addWord(\"abc\");\n        System.out.println(trie.query(\"abc\"));\n    }\n}\n```\n\n字典树一般仅进行插入操作，然后去判断某个字段串是否存在，或者这个字符串存在的次数。","slug":"structure/1_trie","published":1,"updated":"2020-01-02T05:49:23.777Z","layout":"post","photos":[],"link":"","_id":"ck6lvszso003nn0ztks5bmyyx","content":"<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><p>字典树又称单词查找树，是一种树形的结构，是一种哈希数的变种。典型应用是用于统计、排序和保存大量的字符串，经常被用于文本词频的统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p>\n<p><img src=\"../../../uploads/structure/trie.png\" alt=\"字典树\"></p>\n<h4 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h4><ol>\n<li><p>根节点不包含字符，除根节点意外每个节点只包含一个字符。</p>\n</li>\n<li><p>从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。</p>\n</li>\n<li><p>每个节点的所有子节点包含的字符串不相同。</p>\n</li>\n</ol>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Trie &#123;</div><div class=\"line\"></div><div class=\"line\">    private static class Node &#123;</div><div class=\"line\">        public Map&lt;Character, Node&gt; next;</div><div class=\"line\">        public boolean isWord;</div><div class=\"line\">        public int count;</div><div class=\"line\"></div><div class=\"line\">        public Node() &#123;</div><div class=\"line\">            next = new TreeMap&lt;&gt;();</div><div class=\"line\">            isWord = true;</div><div class=\"line\">            count = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private Node root;</div><div class=\"line\"></div><div class=\"line\">    public Trie() &#123;</div><div class=\"line\">        root = new Node();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void addWord(String word) &#123;</div><div class=\"line\">        char[] chars = word.toCharArray();</div><div class=\"line\">        Node current = root;</div><div class=\"line\">        for (char c : chars) &#123;</div><div class=\"line\">            Node next = current.next.get(c);</div><div class=\"line\">            if (next == null) &#123;</div><div class=\"line\">                current.next.put(c, new Node());</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = current.next.get(c);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (!current.isWord) &#123;</div><div class=\"line\">            current.isWord = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        current.count++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int query(String str) &#123;</div><div class=\"line\">        Node current = root;</div><div class=\"line\">        if (root == null) &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">        char[] chars = str.toCharArray();</div><div class=\"line\">        for (char c : chars) &#123;</div><div class=\"line\">            Node next = current.next.get(c);</div><div class=\"line\">            if (next == null) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return current.count;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean search(String str) &#123;</div><div class=\"line\">        Node current = root;</div><div class=\"line\">        if (root == null) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        char[] chars = str.toCharArray();</div><div class=\"line\">        for (char c : chars) &#123;</div><div class=\"line\">            Node next = current.next.get(c);</div><div class=\"line\">            if (next == null) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return current.isWord;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Trie trie = new Trie();</div><div class=\"line\">        trie.addWord(&quot;abc&quot;);</div><div class=\"line\">        trie.addWord(&quot;abc&quot;);</div><div class=\"line\">        System.out.println(trie.query(&quot;abc&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>字典树一般仅进行插入操作，然后去判断某个字段串是否存在，或者这个字符串存在的次数。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h3><p>字典树又称单词查找树，是一种树形的结构，是一种哈希数的变种。典型应用是用于统计、排序和保存大量的字符串，经常被用于文本词频的统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p>\n<p><img src=\"../../../uploads/structure/trie.png\" alt=\"字典树\"></p>\n<h4 id=\"基本性质\"><a href=\"#基本性质\" class=\"headerlink\" title=\"基本性质\"></a>基本性质</h4><ol>\n<li><p>根节点不包含字符，除根节点意外每个节点只包含一个字符。</p>\n</li>\n<li><p>从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串。</p>\n</li>\n<li><p>每个节点的所有子节点包含的字符串不相同。</p>\n</li>\n</ol>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Trie &#123;</div><div class=\"line\"></div><div class=\"line\">    private static class Node &#123;</div><div class=\"line\">        public Map&lt;Character, Node&gt; next;</div><div class=\"line\">        public boolean isWord;</div><div class=\"line\">        public int count;</div><div class=\"line\"></div><div class=\"line\">        public Node() &#123;</div><div class=\"line\">            next = new TreeMap&lt;&gt;();</div><div class=\"line\">            isWord = true;</div><div class=\"line\">            count = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private Node root;</div><div class=\"line\"></div><div class=\"line\">    public Trie() &#123;</div><div class=\"line\">        root = new Node();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void addWord(String word) &#123;</div><div class=\"line\">        char[] chars = word.toCharArray();</div><div class=\"line\">        Node current = root;</div><div class=\"line\">        for (char c : chars) &#123;</div><div class=\"line\">            Node next = current.next.get(c);</div><div class=\"line\">            if (next == null) &#123;</div><div class=\"line\">                current.next.put(c, new Node());</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = current.next.get(c);</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (!current.isWord) &#123;</div><div class=\"line\">            current.isWord = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        current.count++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public int query(String str) &#123;</div><div class=\"line\">        Node current = root;</div><div class=\"line\">        if (root == null) &#123;</div><div class=\"line\">            return 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">        char[] chars = str.toCharArray();</div><div class=\"line\">        for (char c : chars) &#123;</div><div class=\"line\">            Node next = current.next.get(c);</div><div class=\"line\">            if (next == null) &#123;</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return current.count;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public boolean search(String str) &#123;</div><div class=\"line\">        Node current = root;</div><div class=\"line\">        if (root == null) &#123;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">        char[] chars = str.toCharArray();</div><div class=\"line\">        for (char c : chars) &#123;</div><div class=\"line\">            Node next = current.next.get(c);</div><div class=\"line\">            if (next == null) &#123;</div><div class=\"line\">                return false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            current = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return current.isWord;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Trie trie = new Trie();</div><div class=\"line\">        trie.addWord(&quot;abc&quot;);</div><div class=\"line\">        trie.addWord(&quot;abc&quot;);</div><div class=\"line\">        System.out.println(trie.query(&quot;abc&quot;));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>字典树一般仅进行插入操作，然后去判断某个字段串是否存在，或者这个字符串存在的次数。</p>\n"},{"title":"zk","date":"2020-01-07T13:51:00.000Z","comments":0,"keywords":["zookeeper"],"_content":"\n### Zookeeper\n\nZookeeper是一个分布式协调服务，可用于服务发现、分布式锁、配置管理等。Zookeeper提供了一个类似于Linux文件系统的树形结构（轻量级的内存文件系统，适合存储少量信息，不适合存储大量文件或者大文件），同时提供了对于每个节点的监控和通知机制。\n\n#### Zookeeper角色\n\nZookeeper集群是一个基于主从复制的高可用集群，每个服务器承担了三个角色中的一个：Leader、Follower、Observer\n\n##### Leader\n \n1. 一个zk集群同一时间只会有一个实际工作的Leader，它会发起并维护与各Follower及Observer间的心跳。\n2. 所有的写操作必须要通过Leader完成在由Leader将写操作广播给其他服务器。只要有半数节点（不包括Observer）写入成功。该写请求就被会提交。\n\n##### Follower\n\n1. 一个zk集群可能同时存在多个Follower，它会响应Leader的心跳。\n2. Follower可直接处理并返回客户端的读请求，同时会将写请求转发给Leader处理。\n3. 并且负责在Leader处理写请求时对请求进行投票。\n\n##### Observer\n\n角色与Follower类似，但无投票权。zk需保证高可用和强一致性，为了支持更多的客户端，需要增加更多server；server增多，投票阶段延迟增加会影响性能；引入Observer，Observer不参与投票；Observer接收客户端的连接，并将写请求转发给Leader节点；加入更多的Observer，提高伸缩性，同时不影响吞吐率。\n\n##### ZAB协议（Zookeeper Atomic Broadcast，ZooKeeper原子消息广播协议）\n\nZAB协议是zk作为保证数据一致性的核心算法，视为分布式协调服务zookeeper专门设计的一种支持崩溃恢复的原子协议。\n\n\n###### 事务编号Zxid（事务请求计数器+epoch）\n\n在ZAB协议的事务编号Zxid设计中，Zxid是一个64位的数字，其中低32位是一个简单的单调递增计数器，针对客户端每一个事务请求，计数器就会+1；高32位则代表Leader周期的epoch编号，每当选举出一个新的Leader服务器，就会从这个Leader服务器上取出其本地日志中最大的事务的Zxid，并从中读取epoch值然后+1作为新的epoch，低32为从0开始计数。\nZxid类似于RDBMS中的事务ID，用于标识一次更新操作的ID，为保证顺序性必须单调递增。\n\n> epoch 可以理解为当前集群所处的年代或者周期，每次Leader变更之后，都会在前一个年代的基础上+1。\n\n###### ZAB协议——恢复模式（选主）\\广播模式（同步）\n\nZAB 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在Leader崩溃后，ZAB就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和Leader的状态同步后，恢复模式就结束了，此时整个服务框架就可进入消息广播模式了。状态同步保证了Leader和Server具有相同的系统状态。\n\n> 状态同步就是数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致。\n\n当一台同样遵守ZAB协议的服务器启动后加入集群中时，如果此时集群中已经存在一个Leader服务器在负责消息广播，那么新加入的服务器就会进入数据恢复模式：找到数Leader所在的服务器，然后进行数据同步，然后一起参与到消息广播的流程中。\n\n> ZAB 协议的消息广播过程使用的是一个原子广播协议，类似一个 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal，将其发送给所有 Follwer ，然后，根据所有 Follwer 的反馈，如果超过半数成功响应，则执行 commit 操作（先提交自己，再发送 commit 给所有 Follwer）。\n\n\n###### ZAB协议4阶段\n\n1. Leader election（选举阶段）：节点在一开始就处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准Leader。只有到达广播阶段准Leader才会成为真正的Leader。这一阶段的目的是为了选出一个准Leader然后进入下一个阶段。\n2. Discovery（发现阶段）：在这个节点，Follower和准Leader进行通信，同步Follower最近接收的事务提议。这一个阶段的主要目的是发现当前大多数节点接收的最新提议，并且准Leader生成新的epoch，让Follower接收并且更新它们的accepted Epoch。\n    一个Follower只会链接一个Leader，如果有一个节点f认为另一个Follower p是Leader，f在尝试链接p时会被拒绝，f被拒绝之后，就会重新进入选举阶段。\n3. Synchronization（同步阶段）：同步阶段主要是利用Leader前一阶段获得的最新提议历史，同步集群中所有的副本。只有当大多数节点同步完成，准Leader才会成为真正的Leader。Follower只会接受Zxid比自己lastZxid大的提议。\n4. Broadcast（广播阶段）：这个阶段zk集群可以对外提供事务服务，并且Leader可以进行消息广播，如果有新的节点加入，还需要对新节点进行同步。\n\n###### 投票机制\n\n每个server首先给自己投票，然后用自己的选票和其他server选票的对比，权重大的胜出，使用权重较大的更新自身的选票箱：\n\n> myid：是zk集群中服务器的唯一标识，例如3台zkserver，编号就是1、2、3，权重依次增大。\n\n1. 每个Server启动后都询问其他的Server要投票给谁。对于其他server的询问，server每次根据自己的状态都回复自己推荐的leader的id和上一次处理事务的zxid（系统启动时每个server都会推荐自己）。\n2. 收到所有server回复后，就计算出zxid最大的那个server，并将这个server相关信息设置成下一次要投票的server。(如果zxid相同，就比较myid，myid较大的作为下次投票)\n3. 计算这过程中获得票数最多的server为获胜者，如果获胜者的票数超过半数，则该server被选为leader。否则继续这个过程直到leader被选举出来。\n4. leader开始等待server连接。（由LOOKING状态变为LEADING状态）\n5. Follower连接Leader，将最大的zxid发送给leader。（由LOOKING状态变为FOLLOWING状态）\n6. Leader根据Follower的zxid确定同步点，到这里选举阶段完成。\n\n\n\n\n\n\n\n\n","source":"_posts/zookeeper/zk.md","raw":"---\ntitle: zk\ndate: 2020-01-07 21:51\ncomments: false\ntags: \n- zookeeper\ncategories: \n- zookeeper\nkeywords: \n- zookeeper\n---\n\n### Zookeeper\n\nZookeeper是一个分布式协调服务，可用于服务发现、分布式锁、配置管理等。Zookeeper提供了一个类似于Linux文件系统的树形结构（轻量级的内存文件系统，适合存储少量信息，不适合存储大量文件或者大文件），同时提供了对于每个节点的监控和通知机制。\n\n#### Zookeeper角色\n\nZookeeper集群是一个基于主从复制的高可用集群，每个服务器承担了三个角色中的一个：Leader、Follower、Observer\n\n##### Leader\n \n1. 一个zk集群同一时间只会有一个实际工作的Leader，它会发起并维护与各Follower及Observer间的心跳。\n2. 所有的写操作必须要通过Leader完成在由Leader将写操作广播给其他服务器。只要有半数节点（不包括Observer）写入成功。该写请求就被会提交。\n\n##### Follower\n\n1. 一个zk集群可能同时存在多个Follower，它会响应Leader的心跳。\n2. Follower可直接处理并返回客户端的读请求，同时会将写请求转发给Leader处理。\n3. 并且负责在Leader处理写请求时对请求进行投票。\n\n##### Observer\n\n角色与Follower类似，但无投票权。zk需保证高可用和强一致性，为了支持更多的客户端，需要增加更多server；server增多，投票阶段延迟增加会影响性能；引入Observer，Observer不参与投票；Observer接收客户端的连接，并将写请求转发给Leader节点；加入更多的Observer，提高伸缩性，同时不影响吞吐率。\n\n##### ZAB协议（Zookeeper Atomic Broadcast，ZooKeeper原子消息广播协议）\n\nZAB协议是zk作为保证数据一致性的核心算法，视为分布式协调服务zookeeper专门设计的一种支持崩溃恢复的原子协议。\n\n\n###### 事务编号Zxid（事务请求计数器+epoch）\n\n在ZAB协议的事务编号Zxid设计中，Zxid是一个64位的数字，其中低32位是一个简单的单调递增计数器，针对客户端每一个事务请求，计数器就会+1；高32位则代表Leader周期的epoch编号，每当选举出一个新的Leader服务器，就会从这个Leader服务器上取出其本地日志中最大的事务的Zxid，并从中读取epoch值然后+1作为新的epoch，低32为从0开始计数。\nZxid类似于RDBMS中的事务ID，用于标识一次更新操作的ID，为保证顺序性必须单调递增。\n\n> epoch 可以理解为当前集群所处的年代或者周期，每次Leader变更之后，都会在前一个年代的基础上+1。\n\n###### ZAB协议——恢复模式（选主）\\广播模式（同步）\n\nZAB 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在Leader崩溃后，ZAB就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和Leader的状态同步后，恢复模式就结束了，此时整个服务框架就可进入消息广播模式了。状态同步保证了Leader和Server具有相同的系统状态。\n\n> 状态同步就是数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致。\n\n当一台同样遵守ZAB协议的服务器启动后加入集群中时，如果此时集群中已经存在一个Leader服务器在负责消息广播，那么新加入的服务器就会进入数据恢复模式：找到数Leader所在的服务器，然后进行数据同步，然后一起参与到消息广播的流程中。\n\n> ZAB 协议的消息广播过程使用的是一个原子广播协议，类似一个 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal，将其发送给所有 Follwer ，然后，根据所有 Follwer 的反馈，如果超过半数成功响应，则执行 commit 操作（先提交自己，再发送 commit 给所有 Follwer）。\n\n\n###### ZAB协议4阶段\n\n1. Leader election（选举阶段）：节点在一开始就处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准Leader。只有到达广播阶段准Leader才会成为真正的Leader。这一阶段的目的是为了选出一个准Leader然后进入下一个阶段。\n2. Discovery（发现阶段）：在这个节点，Follower和准Leader进行通信，同步Follower最近接收的事务提议。这一个阶段的主要目的是发现当前大多数节点接收的最新提议，并且准Leader生成新的epoch，让Follower接收并且更新它们的accepted Epoch。\n    一个Follower只会链接一个Leader，如果有一个节点f认为另一个Follower p是Leader，f在尝试链接p时会被拒绝，f被拒绝之后，就会重新进入选举阶段。\n3. Synchronization（同步阶段）：同步阶段主要是利用Leader前一阶段获得的最新提议历史，同步集群中所有的副本。只有当大多数节点同步完成，准Leader才会成为真正的Leader。Follower只会接受Zxid比自己lastZxid大的提议。\n4. Broadcast（广播阶段）：这个阶段zk集群可以对外提供事务服务，并且Leader可以进行消息广播，如果有新的节点加入，还需要对新节点进行同步。\n\n###### 投票机制\n\n每个server首先给自己投票，然后用自己的选票和其他server选票的对比，权重大的胜出，使用权重较大的更新自身的选票箱：\n\n> myid：是zk集群中服务器的唯一标识，例如3台zkserver，编号就是1、2、3，权重依次增大。\n\n1. 每个Server启动后都询问其他的Server要投票给谁。对于其他server的询问，server每次根据自己的状态都回复自己推荐的leader的id和上一次处理事务的zxid（系统启动时每个server都会推荐自己）。\n2. 收到所有server回复后，就计算出zxid最大的那个server，并将这个server相关信息设置成下一次要投票的server。(如果zxid相同，就比较myid，myid较大的作为下次投票)\n3. 计算这过程中获得票数最多的server为获胜者，如果获胜者的票数超过半数，则该server被选为leader。否则继续这个过程直到leader被选举出来。\n4. leader开始等待server连接。（由LOOKING状态变为LEADING状态）\n5. Follower连接Leader，将最大的zxid发送给leader。（由LOOKING状态变为FOLLOWING状态）\n6. Leader根据Follower的zxid确定同步点，到这里选举阶段完成。\n\n\n\n\n\n\n\n\n","slug":"zookeeper/zk","published":1,"updated":"2020-01-09T06:55:59.118Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsq003sn0ztgmixa2es","content":"<h3 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h3><p>Zookeeper是一个分布式协调服务，可用于服务发现、分布式锁、配置管理等。Zookeeper提供了一个类似于Linux文件系统的树形结构（轻量级的内存文件系统，适合存储少量信息，不适合存储大量文件或者大文件），同时提供了对于每个节点的监控和通知机制。</p>\n<h4 id=\"Zookeeper角色\"><a href=\"#Zookeeper角色\" class=\"headerlink\" title=\"Zookeeper角色\"></a>Zookeeper角色</h4><p>Zookeeper集群是一个基于主从复制的高可用集群，每个服务器承担了三个角色中的一个：Leader、Follower、Observer</p>\n<h5 id=\"Leader\"><a href=\"#Leader\" class=\"headerlink\" title=\"Leader\"></a>Leader</h5><ol>\n<li>一个zk集群同一时间只会有一个实际工作的Leader，它会发起并维护与各Follower及Observer间的心跳。</li>\n<li>所有的写操作必须要通过Leader完成在由Leader将写操作广播给其他服务器。只要有半数节点（不包括Observer）写入成功。该写请求就被会提交。</li>\n</ol>\n<h5 id=\"Follower\"><a href=\"#Follower\" class=\"headerlink\" title=\"Follower\"></a>Follower</h5><ol>\n<li>一个zk集群可能同时存在多个Follower，它会响应Leader的心跳。</li>\n<li>Follower可直接处理并返回客户端的读请求，同时会将写请求转发给Leader处理。</li>\n<li>并且负责在Leader处理写请求时对请求进行投票。</li>\n</ol>\n<h5 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h5><p>角色与Follower类似，但无投票权。zk需保证高可用和强一致性，为了支持更多的客户端，需要增加更多server；server增多，投票阶段延迟增加会影响性能；引入Observer，Observer不参与投票；Observer接收客户端的连接，并将写请求转发给Leader节点；加入更多的Observer，提高伸缩性，同时不影响吞吐率。</p>\n<h5 id=\"ZAB协议（Zookeeper-Atomic-Broadcast，ZooKeeper原子消息广播协议）\"><a href=\"#ZAB协议（Zookeeper-Atomic-Broadcast，ZooKeeper原子消息广播协议）\" class=\"headerlink\" title=\"ZAB协议（Zookeeper Atomic Broadcast，ZooKeeper原子消息广播协议）\"></a>ZAB协议（Zookeeper Atomic Broadcast，ZooKeeper原子消息广播协议）</h5><p>ZAB协议是zk作为保证数据一致性的核心算法，视为分布式协调服务zookeeper专门设计的一种支持崩溃恢复的原子协议。</p>\n<h6 id=\"事务编号Zxid（事务请求计数器-epoch）\"><a href=\"#事务编号Zxid（事务请求计数器-epoch）\" class=\"headerlink\" title=\"事务编号Zxid（事务请求计数器+epoch）\"></a>事务编号Zxid（事务请求计数器+epoch）</h6><p>在ZAB协议的事务编号Zxid设计中，Zxid是一个64位的数字，其中低32位是一个简单的单调递增计数器，针对客户端每一个事务请求，计数器就会+1；高32位则代表Leader周期的epoch编号，每当选举出一个新的Leader服务器，就会从这个Leader服务器上取出其本地日志中最大的事务的Zxid，并从中读取epoch值然后+1作为新的epoch，低32为从0开始计数。<br>Zxid类似于RDBMS中的事务ID，用于标识一次更新操作的ID，为保证顺序性必须单调递增。</p>\n<blockquote>\n<p>epoch 可以理解为当前集群所处的年代或者周期，每次Leader变更之后，都会在前一个年代的基础上+1。</p>\n</blockquote>\n<h6 id=\"ZAB协议——恢复模式（选主）-广播模式（同步）\"><a href=\"#ZAB协议——恢复模式（选主）-广播模式（同步）\" class=\"headerlink\" title=\"ZAB协议——恢复模式（选主）\\广播模式（同步）\"></a>ZAB协议——恢复模式（选主）\\广播模式（同步）</h6><p>ZAB 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在Leader崩溃后，ZAB就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和Leader的状态同步后，恢复模式就结束了，此时整个服务框架就可进入消息广播模式了。状态同步保证了Leader和Server具有相同的系统状态。</p>\n<blockquote>\n<p>状态同步就是数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致。</p>\n</blockquote>\n<p>当一台同样遵守ZAB协议的服务器启动后加入集群中时，如果此时集群中已经存在一个Leader服务器在负责消息广播，那么新加入的服务器就会进入数据恢复模式：找到数Leader所在的服务器，然后进行数据同步，然后一起参与到消息广播的流程中。</p>\n<blockquote>\n<p>ZAB 协议的消息广播过程使用的是一个原子广播协议，类似一个 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal，将其发送给所有 Follwer ，然后，根据所有 Follwer 的反馈，如果超过半数成功响应，则执行 commit 操作（先提交自己，再发送 commit 给所有 Follwer）。</p>\n</blockquote>\n<h6 id=\"ZAB协议4阶段\"><a href=\"#ZAB协议4阶段\" class=\"headerlink\" title=\"ZAB协议4阶段\"></a>ZAB协议4阶段</h6><ol>\n<li>Leader election（选举阶段）：节点在一开始就处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准Leader。只有到达广播阶段准Leader才会成为真正的Leader。这一阶段的目的是为了选出一个准Leader然后进入下一个阶段。</li>\n<li>Discovery（发现阶段）：在这个节点，Follower和准Leader进行通信，同步Follower最近接收的事务提议。这一个阶段的主要目的是发现当前大多数节点接收的最新提议，并且准Leader生成新的epoch，让Follower接收并且更新它们的accepted Epoch。<br> 一个Follower只会链接一个Leader，如果有一个节点f认为另一个Follower p是Leader，f在尝试链接p时会被拒绝，f被拒绝之后，就会重新进入选举阶段。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用Leader前一阶段获得的最新提议历史，同步集群中所有的副本。只有当大多数节点同步完成，准Leader才会成为真正的Leader。Follower只会接受Zxid比自己lastZxid大的提议。</li>\n<li>Broadcast（广播阶段）：这个阶段zk集群可以对外提供事务服务，并且Leader可以进行消息广播，如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h6 id=\"投票机制\"><a href=\"#投票机制\" class=\"headerlink\" title=\"投票机制\"></a>投票机制</h6><p>每个server首先给自己投票，然后用自己的选票和其他server选票的对比，权重大的胜出，使用权重较大的更新自身的选票箱：</p>\n<blockquote>\n<p>myid：是zk集群中服务器的唯一标识，例如3台zkserver，编号就是1、2、3，权重依次增大。</p>\n</blockquote>\n<ol>\n<li>每个Server启动后都询问其他的Server要投票给谁。对于其他server的询问，server每次根据自己的状态都回复自己推荐的leader的id和上一次处理事务的zxid（系统启动时每个server都会推荐自己）。</li>\n<li>收到所有server回复后，就计算出zxid最大的那个server，并将这个server相关信息设置成下一次要投票的server。(如果zxid相同，就比较myid，myid较大的作为下次投票)</li>\n<li>计算这过程中获得票数最多的server为获胜者，如果获胜者的票数超过半数，则该server被选为leader。否则继续这个过程直到leader被选举出来。</li>\n<li>leader开始等待server连接。（由LOOKING状态变为LEADING状态）</li>\n<li>Follower连接Leader，将最大的zxid发送给leader。（由LOOKING状态变为FOLLOWING状态）</li>\n<li>Leader根据Follower的zxid确定同步点，到这里选举阶段完成。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Zookeeper\"><a href=\"#Zookeeper\" class=\"headerlink\" title=\"Zookeeper\"></a>Zookeeper</h3><p>Zookeeper是一个分布式协调服务，可用于服务发现、分布式锁、配置管理等。Zookeeper提供了一个类似于Linux文件系统的树形结构（轻量级的内存文件系统，适合存储少量信息，不适合存储大量文件或者大文件），同时提供了对于每个节点的监控和通知机制。</p>\n<h4 id=\"Zookeeper角色\"><a href=\"#Zookeeper角色\" class=\"headerlink\" title=\"Zookeeper角色\"></a>Zookeeper角色</h4><p>Zookeeper集群是一个基于主从复制的高可用集群，每个服务器承担了三个角色中的一个：Leader、Follower、Observer</p>\n<h5 id=\"Leader\"><a href=\"#Leader\" class=\"headerlink\" title=\"Leader\"></a>Leader</h5><ol>\n<li>一个zk集群同一时间只会有一个实际工作的Leader，它会发起并维护与各Follower及Observer间的心跳。</li>\n<li>所有的写操作必须要通过Leader完成在由Leader将写操作广播给其他服务器。只要有半数节点（不包括Observer）写入成功。该写请求就被会提交。</li>\n</ol>\n<h5 id=\"Follower\"><a href=\"#Follower\" class=\"headerlink\" title=\"Follower\"></a>Follower</h5><ol>\n<li>一个zk集群可能同时存在多个Follower，它会响应Leader的心跳。</li>\n<li>Follower可直接处理并返回客户端的读请求，同时会将写请求转发给Leader处理。</li>\n<li>并且负责在Leader处理写请求时对请求进行投票。</li>\n</ol>\n<h5 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h5><p>角色与Follower类似，但无投票权。zk需保证高可用和强一致性，为了支持更多的客户端，需要增加更多server；server增多，投票阶段延迟增加会影响性能；引入Observer，Observer不参与投票；Observer接收客户端的连接，并将写请求转发给Leader节点；加入更多的Observer，提高伸缩性，同时不影响吞吐率。</p>\n<h5 id=\"ZAB协议（Zookeeper-Atomic-Broadcast，ZooKeeper原子消息广播协议）\"><a href=\"#ZAB协议（Zookeeper-Atomic-Broadcast，ZooKeeper原子消息广播协议）\" class=\"headerlink\" title=\"ZAB协议（Zookeeper Atomic Broadcast，ZooKeeper原子消息广播协议）\"></a>ZAB协议（Zookeeper Atomic Broadcast，ZooKeeper原子消息广播协议）</h5><p>ZAB协议是zk作为保证数据一致性的核心算法，视为分布式协调服务zookeeper专门设计的一种支持崩溃恢复的原子协议。</p>\n<h6 id=\"事务编号Zxid（事务请求计数器-epoch）\"><a href=\"#事务编号Zxid（事务请求计数器-epoch）\" class=\"headerlink\" title=\"事务编号Zxid（事务请求计数器+epoch）\"></a>事务编号Zxid（事务请求计数器+epoch）</h6><p>在ZAB协议的事务编号Zxid设计中，Zxid是一个64位的数字，其中低32位是一个简单的单调递增计数器，针对客户端每一个事务请求，计数器就会+1；高32位则代表Leader周期的epoch编号，每当选举出一个新的Leader服务器，就会从这个Leader服务器上取出其本地日志中最大的事务的Zxid，并从中读取epoch值然后+1作为新的epoch，低32为从0开始计数。<br>Zxid类似于RDBMS中的事务ID，用于标识一次更新操作的ID，为保证顺序性必须单调递增。</p>\n<blockquote>\n<p>epoch 可以理解为当前集群所处的年代或者周期，每次Leader变更之后，都会在前一个年代的基础上+1。</p>\n</blockquote>\n<h6 id=\"ZAB协议——恢复模式（选主）-广播模式（同步）\"><a href=\"#ZAB协议——恢复模式（选主）-广播模式（同步）\" class=\"headerlink\" title=\"ZAB协议——恢复模式（选主）\\广播模式（同步）\"></a>ZAB协议——恢复模式（选主）\\广播模式（同步）</h6><p>ZAB 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在Leader崩溃后，ZAB就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和Leader的状态同步后，恢复模式就结束了，此时整个服务框架就可进入消息广播模式了。状态同步保证了Leader和Server具有相同的系统状态。</p>\n<blockquote>\n<p>状态同步就是数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致。</p>\n</blockquote>\n<p>当一台同样遵守ZAB协议的服务器启动后加入集群中时，如果此时集群中已经存在一个Leader服务器在负责消息广播，那么新加入的服务器就会进入数据恢复模式：找到数Leader所在的服务器，然后进行数据同步，然后一起参与到消息广播的流程中。</p>\n<blockquote>\n<p>ZAB 协议的消息广播过程使用的是一个原子广播协议，类似一个 二阶段提交过程。对于客户端发送的写请求，全部由 Leader 接收，Leader 将请求封装成一个事务 Proposal，将其发送给所有 Follwer ，然后，根据所有 Follwer 的反馈，如果超过半数成功响应，则执行 commit 操作（先提交自己，再发送 commit 给所有 Follwer）。</p>\n</blockquote>\n<h6 id=\"ZAB协议4阶段\"><a href=\"#ZAB协议4阶段\" class=\"headerlink\" title=\"ZAB协议4阶段\"></a>ZAB协议4阶段</h6><ol>\n<li>Leader election（选举阶段）：节点在一开始就处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准Leader。只有到达广播阶段准Leader才会成为真正的Leader。这一阶段的目的是为了选出一个准Leader然后进入下一个阶段。</li>\n<li>Discovery（发现阶段）：在这个节点，Follower和准Leader进行通信，同步Follower最近接收的事务提议。这一个阶段的主要目的是发现当前大多数节点接收的最新提议，并且准Leader生成新的epoch，让Follower接收并且更新它们的accepted Epoch。<br> 一个Follower只会链接一个Leader，如果有一个节点f认为另一个Follower p是Leader，f在尝试链接p时会被拒绝，f被拒绝之后，就会重新进入选举阶段。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用Leader前一阶段获得的最新提议历史，同步集群中所有的副本。只有当大多数节点同步完成，准Leader才会成为真正的Leader。Follower只会接受Zxid比自己lastZxid大的提议。</li>\n<li>Broadcast（广播阶段）：这个阶段zk集群可以对外提供事务服务，并且Leader可以进行消息广播，如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h6 id=\"投票机制\"><a href=\"#投票机制\" class=\"headerlink\" title=\"投票机制\"></a>投票机制</h6><p>每个server首先给自己投票，然后用自己的选票和其他server选票的对比，权重大的胜出，使用权重较大的更新自身的选票箱：</p>\n<blockquote>\n<p>myid：是zk集群中服务器的唯一标识，例如3台zkserver，编号就是1、2、3，权重依次增大。</p>\n</blockquote>\n<ol>\n<li>每个Server启动后都询问其他的Server要投票给谁。对于其他server的询问，server每次根据自己的状态都回复自己推荐的leader的id和上一次处理事务的zxid（系统启动时每个server都会推荐自己）。</li>\n<li>收到所有server回复后，就计算出zxid最大的那个server，并将这个server相关信息设置成下一次要投票的server。(如果zxid相同，就比较myid，myid较大的作为下次投票)</li>\n<li>计算这过程中获得票数最多的server为获胜者，如果获胜者的票数超过半数，则该server被选为leader。否则继续这个过程直到leader被选举出来。</li>\n<li>leader开始等待server连接。（由LOOKING状态变为LEADING状态）</li>\n<li>Follower连接Leader，将最大的zxid发送给leader。（由LOOKING状态变为FOLLOWING状态）</li>\n<li>Leader根据Follower的zxid确定同步点，到这里选举阶段完成。</li>\n</ol>\n"},{"title":"并查集","date":"2020-01-12T12:56:00.000Z","comments":0,"keywords":["并查集"],"_content":"\n### 并查集\n\n并查集，在一些有N个元素的集合应用问题中，通常在开始时让每一个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，这个过程中要反复查找一个元素在哪个集合。这类问题特点是看似不复杂，但是数据量很大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。\n\n并查集是一种树形结构，用于处理不相交集合的合并和查找问题。常常使用森林来表示。\n\n#### 主要操作\n\n- 初始化：吧每个点所在的集合初始化为其自身。（ O(N) ）\n- 查找：查找元素所在的集合，即根节点。\n- 合并：将两个元素所在集合合并为一个集合。\n\n#### 实现\n\n```\n/**\n * 存储每个元素的父节点\n */\nint[] father;\n\nprivate void init(int n) {\n    father = new int[n];\n}\n\n/**\n * 查找，找到父节点\n * @param item\n * @return\n */\nprivate int find(int item) {\n    int r = item;\n    if(item != father[item]) {\n        r = find(father[item]);\n    }\n    return r;\n}\n\n/**\n * 集合合并\n * @param a\n * @param b\n */\nprivate void union(int a, int b) {\n    int fa = find(a);\n    int fb = find(b);\n    //同一个集合\n    if(fa == fb) {\n        return;\n    }\n    if(fa > fb) {\n        father[fa] = fb;\n    } else {\n        father[fb] = fa;\n    }\n}\n```\n\n相关题目：[leetcode](https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/)\n","source":"_posts/structure/2_并查集.md","raw":"---\ntitle: 并查集\ndate: 2020-01-12 20:56\ncomments: false\ntags: \n- structure\n- 并查集\ncategories: \n- structure\n- 并查集\nkeywords:\n- 并查集\n---\n\n### 并查集\n\n并查集，在一些有N个元素的集合应用问题中，通常在开始时让每一个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，这个过程中要反复查找一个元素在哪个集合。这类问题特点是看似不复杂，但是数据量很大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。\n\n并查集是一种树形结构，用于处理不相交集合的合并和查找问题。常常使用森林来表示。\n\n#### 主要操作\n\n- 初始化：吧每个点所在的集合初始化为其自身。（ O(N) ）\n- 查找：查找元素所在的集合，即根节点。\n- 合并：将两个元素所在集合合并为一个集合。\n\n#### 实现\n\n```\n/**\n * 存储每个元素的父节点\n */\nint[] father;\n\nprivate void init(int n) {\n    father = new int[n];\n}\n\n/**\n * 查找，找到父节点\n * @param item\n * @return\n */\nprivate int find(int item) {\n    int r = item;\n    if(item != father[item]) {\n        r = find(father[item]);\n    }\n    return r;\n}\n\n/**\n * 集合合并\n * @param a\n * @param b\n */\nprivate void union(int a, int b) {\n    int fa = find(a);\n    int fb = find(b);\n    //同一个集合\n    if(fa == fb) {\n        return;\n    }\n    if(fa > fb) {\n        father[fa] = fb;\n    } else {\n        father[fb] = fa;\n    }\n}\n```\n\n相关题目：[leetcode](https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/)\n","slug":"structure/2_并查集","published":1,"updated":"2020-01-12T13:31:50.158Z","layout":"post","photos":[],"link":"","_id":"ck6lvszsr003tn0ztjq5earnw","content":"<h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><p>并查集，在一些有N个元素的集合应用问题中，通常在开始时让每一个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，这个过程中要反复查找一个元素在哪个集合。这类问题特点是看似不复杂，但是数据量很大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。</p>\n<p>并查集是一种树形结构，用于处理不相交集合的合并和查找问题。常常使用森林来表示。</p>\n<h4 id=\"主要操作\"><a href=\"#主要操作\" class=\"headerlink\" title=\"主要操作\"></a>主要操作</h4><ul>\n<li>初始化：吧每个点所在的集合初始化为其自身。（ O(N) ）</li>\n<li>查找：查找元素所在的集合，即根节点。</li>\n<li>合并：将两个元素所在集合合并为一个集合。</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 存储每个元素的父节点</div><div class=\"line\"> */</div><div class=\"line\">int[] father;</div><div class=\"line\"></div><div class=\"line\">private void init(int n) &#123;</div><div class=\"line\">    father = new int[n];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 查找，找到父节点</div><div class=\"line\"> * @param item</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">private int find(int item) &#123;</div><div class=\"line\">    int r = item;</div><div class=\"line\">    if(item != father[item]) &#123;</div><div class=\"line\">        r = find(father[item]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return r;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 集合合并</div><div class=\"line\"> * @param a</div><div class=\"line\"> * @param b</div><div class=\"line\"> */</div><div class=\"line\">private void union(int a, int b) &#123;</div><div class=\"line\">    int fa = find(a);</div><div class=\"line\">    int fb = find(b);</div><div class=\"line\">    //同一个集合</div><div class=\"line\">    if(fa == fb) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(fa &gt; fb) &#123;</div><div class=\"line\">        father[fa] = fb;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        father[fb] = fa;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关题目：<a href=\"https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/\" target=\"_blank\" rel=\"external\">leetcode</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3><p>并查集，在一些有N个元素的集合应用问题中，通常在开始时让每一个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，这个过程中要反复查找一个元素在哪个集合。这类问题特点是看似不复杂，但是数据量很大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。</p>\n<p>并查集是一种树形结构，用于处理不相交集合的合并和查找问题。常常使用森林来表示。</p>\n<h4 id=\"主要操作\"><a href=\"#主要操作\" class=\"headerlink\" title=\"主要操作\"></a>主要操作</h4><ul>\n<li>初始化：吧每个点所在的集合初始化为其自身。（ O(N) ）</li>\n<li>查找：查找元素所在的集合，即根节点。</li>\n<li>合并：将两个元素所在集合合并为一个集合。</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 存储每个元素的父节点</div><div class=\"line\"> */</div><div class=\"line\">int[] father;</div><div class=\"line\"></div><div class=\"line\">private void init(int n) &#123;</div><div class=\"line\">    father = new int[n];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 查找，找到父节点</div><div class=\"line\"> * @param item</div><div class=\"line\"> * @return</div><div class=\"line\"> */</div><div class=\"line\">private int find(int item) &#123;</div><div class=\"line\">    int r = item;</div><div class=\"line\">    if(item != father[item]) &#123;</div><div class=\"line\">        r = find(father[item]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return r;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 集合合并</div><div class=\"line\"> * @param a</div><div class=\"line\"> * @param b</div><div class=\"line\"> */</div><div class=\"line\">private void union(int a, int b) &#123;</div><div class=\"line\">    int fa = find(a);</div><div class=\"line\">    int fb = find(b);</div><div class=\"line\">    //同一个集合</div><div class=\"line\">    if(fa == fb) &#123;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if(fa &gt; fb) &#123;</div><div class=\"line\">        father[fa] = fb;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        father[fb] = fa;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>相关题目：<a href=\"https://leetcode-cn.com/problems/number-of-operations-to-make-network-connected/\">leetcode</a></p>\n"},{"title":"PriorityQueue阅读","date":"2019-12-18T14:25:00.000Z","comments":0,"keywords":["java","PriorityQueue"],"_content":"\n### PriorityQueue\n\nPriorityQueue是一个优先队列，优先队列不允许空值，而且不支持non-comparable的对象（自定义的对象）。\n\n优先队列的使用比较简单，常用的方法如下：\n\n- peek()//返回队首元素\n- poll()//返回队首元素，队首元素出队列\n- add()/offer()//添加元素\n- size()//返回队列元素个数\n- isEmpty()//判断队列是否为空，为空返回true,不空返回false\n\n优先对列通过小顶堆来实现，可以用一个完全二叉树来表示（任意一个非叶子节点的权值，都不大于其左右子节点的权值）。\n\n![PriorityQueue](../../../../uploads/structure/PriorityQueue.png)\n\n一般通过add方法来添加元素：\n```\npublic boolean add(E e) {\n    return offer(e);\n}\n```\n\nadd方法其实也是调用了offer：\n```\npublic boolean offer(E e) {\n    if (e == null)\n        throw new NullPointerException();\n    modCount++;\n    int i = size;\n    if (i >= queue.length)\n        grow(i + 1);//扩容\n    size = i + 1;\n    if (i == 0)\n        queue[0] = e;\n    else\n        siftUp(i, e);//加入树\n    return true;\n}\n```\n\noffer方法比较简单，不允许元素为空，如果超过现在数组的长度就进行扩容，如果是第一个元素，将数组第一个（根结点）设为此元素，否则进行调整加入完全二叉树。\n\n```\nprivate void grow(int minCapacity) {\n    int oldCapacity = queue.length;\n    // Double size if small; else grow by 50%\n    int newCapacity = oldCapacity + ((oldCapacity < 64) ?\n                                     (oldCapacity + 2) :\n                                     (oldCapacity >> 1));\n    // overflow-conscious code\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    queue = Arrays.copyOf(queue, newCapacity);\n}\n```\n扩容方法就是申请一个更大的数组，将原来数组复制过去，所以可以看出是线程不安全的。\n\n```\nprivate void siftUp(int k, E x) {\n    if (comparator != null)\n        siftUpUsingComparator(k, x);\n    else\n        siftUpComparable(k, x);\n}\nprivate void siftUpUsingComparator(int k, E x) {\n    while (k > 0) {\n        int parent = (k - 1) >>> 1;\n        Object e = queue[parent];\n        if (comparator.compare(x, (E) e) >= 0)\n            break;\n        queue[k] = e;\n        k = parent;\n    }\n    queue[k] = x;\n}\nprivate void siftUpComparable(int k, E x) {\n    Comparable<? super E> key = (Comparable<? super E>) x;\n    while (k > 0) {\n        int parent = (k - 1) >>> 1;\n        Object e = queue[parent];\n        if (key.compareTo((E) e) >= 0)\n            break;\n        queue[k] = e;\n        k = parent;\n    }\n    queue[k] = key;\n}\n```\n将此节点加入树的过程，就是调用默认的比较方法或者传入的比较方法去和父节点比较，如果小于，那就和parent交换位置。\n过程如下：\n![PriorityQueue](../../../../uploads/structure/PriorityQueue1.png)\n\n我们通过poll方法返回第一个对象并移除：\n```\npublic E poll() {\n    if (size == 0)\n        return null;\n    int s = --size;\n    modCount++;\n    E result = (E) queue[0];\n    E x = (E) queue[s];\n    queue[s] = null;\n    if (s != 0)\n        siftDown(0, x);//调整\n    return result;\n}\nprivate void siftDown(int k, E x) {\n    if (comparator != null)\n        siftDownUsingComparator(k, x);\n    else\n        siftDownComparable(k, x);\n}\n\nprivate void siftDownComparable(int k, E x) {\n    Comparable<? super E> key = (Comparable<? super E>)x;\n    int half = size >>> 1;        // loop while a non-leaf\n    while (k < half) {\n        int child = (k << 1) + 1; // 左节点\n        Object c = queue[child];\n        int right = child + 1;//右节点\n        if (right < size &&\n            ((Comparable<? super E>) c).compareTo((E) queue[right]) > 0)\n            c = queue[child = right];//找到更小的那个\n        if (key.compareTo((E) c) <= 0)\n            break;\n        queue[k] = c;//替换\n        k = child;\n    }\n    queue[k] = key;\n}\n\nprivate void siftDownUsingComparator(int k, E x) {\n    int half = size >>> 1;\n    while (k < half) {\n        int child = (k << 1) + 1;\n        Object c = queue[child];\n        int right = child + 1;\n        if (right < size &&\n            comparator.compare((E) c, (E) queue[right]) > 0)\n            c = queue[child = right];\n        if (comparator.compare(x, (E) c) <= 0)\n            break;\n        queue[k] = c;\n        k = child;\n    }\n    queue[k] = x;\n}\n```\n\n将根节点删除的过程，找到根节点左右孩子中最小的那个，然后和最后一个节点比较，如果大于等于最后一个节点，此节点替换根节点，递归调用即可。\n","source":"_posts/javasource/util/10_PriorityQueue.md","raw":"---\ntitle: PriorityQueue阅读\ndate: 2019-12-18 22:25\ncomments: false\ntags: \n- java\n- PriorityQueue\ncategories: \n- java\nkeywords: \n- java\n- PriorityQueue\n---\n\n### PriorityQueue\n\nPriorityQueue是一个优先队列，优先队列不允许空值，而且不支持non-comparable的对象（自定义的对象）。\n\n优先队列的使用比较简单，常用的方法如下：\n\n- peek()//返回队首元素\n- poll()//返回队首元素，队首元素出队列\n- add()/offer()//添加元素\n- size()//返回队列元素个数\n- isEmpty()//判断队列是否为空，为空返回true,不空返回false\n\n优先对列通过小顶堆来实现，可以用一个完全二叉树来表示（任意一个非叶子节点的权值，都不大于其左右子节点的权值）。\n\n![PriorityQueue](../../../../uploads/structure/PriorityQueue.png)\n\n一般通过add方法来添加元素：\n```\npublic boolean add(E e) {\n    return offer(e);\n}\n```\n\nadd方法其实也是调用了offer：\n```\npublic boolean offer(E e) {\n    if (e == null)\n        throw new NullPointerException();\n    modCount++;\n    int i = size;\n    if (i >= queue.length)\n        grow(i + 1);//扩容\n    size = i + 1;\n    if (i == 0)\n        queue[0] = e;\n    else\n        siftUp(i, e);//加入树\n    return true;\n}\n```\n\noffer方法比较简单，不允许元素为空，如果超过现在数组的长度就进行扩容，如果是第一个元素，将数组第一个（根结点）设为此元素，否则进行调整加入完全二叉树。\n\n```\nprivate void grow(int minCapacity) {\n    int oldCapacity = queue.length;\n    // Double size if small; else grow by 50%\n    int newCapacity = oldCapacity + ((oldCapacity < 64) ?\n                                     (oldCapacity + 2) :\n                                     (oldCapacity >> 1));\n    // overflow-conscious code\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    queue = Arrays.copyOf(queue, newCapacity);\n}\n```\n扩容方法就是申请一个更大的数组，将原来数组复制过去，所以可以看出是线程不安全的。\n\n```\nprivate void siftUp(int k, E x) {\n    if (comparator != null)\n        siftUpUsingComparator(k, x);\n    else\n        siftUpComparable(k, x);\n}\nprivate void siftUpUsingComparator(int k, E x) {\n    while (k > 0) {\n        int parent = (k - 1) >>> 1;\n        Object e = queue[parent];\n        if (comparator.compare(x, (E) e) >= 0)\n            break;\n        queue[k] = e;\n        k = parent;\n    }\n    queue[k] = x;\n}\nprivate void siftUpComparable(int k, E x) {\n    Comparable<? super E> key = (Comparable<? super E>) x;\n    while (k > 0) {\n        int parent = (k - 1) >>> 1;\n        Object e = queue[parent];\n        if (key.compareTo((E) e) >= 0)\n            break;\n        queue[k] = e;\n        k = parent;\n    }\n    queue[k] = key;\n}\n```\n将此节点加入树的过程，就是调用默认的比较方法或者传入的比较方法去和父节点比较，如果小于，那就和parent交换位置。\n过程如下：\n![PriorityQueue](../../../../uploads/structure/PriorityQueue1.png)\n\n我们通过poll方法返回第一个对象并移除：\n```\npublic E poll() {\n    if (size == 0)\n        return null;\n    int s = --size;\n    modCount++;\n    E result = (E) queue[0];\n    E x = (E) queue[s];\n    queue[s] = null;\n    if (s != 0)\n        siftDown(0, x);//调整\n    return result;\n}\nprivate void siftDown(int k, E x) {\n    if (comparator != null)\n        siftDownUsingComparator(k, x);\n    else\n        siftDownComparable(k, x);\n}\n\nprivate void siftDownComparable(int k, E x) {\n    Comparable<? super E> key = (Comparable<? super E>)x;\n    int half = size >>> 1;        // loop while a non-leaf\n    while (k < half) {\n        int child = (k << 1) + 1; // 左节点\n        Object c = queue[child];\n        int right = child + 1;//右节点\n        if (right < size &&\n            ((Comparable<? super E>) c).compareTo((E) queue[right]) > 0)\n            c = queue[child = right];//找到更小的那个\n        if (key.compareTo((E) c) <= 0)\n            break;\n        queue[k] = c;//替换\n        k = child;\n    }\n    queue[k] = key;\n}\n\nprivate void siftDownUsingComparator(int k, E x) {\n    int half = size >>> 1;\n    while (k < half) {\n        int child = (k << 1) + 1;\n        Object c = queue[child];\n        int right = child + 1;\n        if (right < size &&\n            comparator.compare((E) c, (E) queue[right]) > 0)\n            c = queue[child = right];\n        if (comparator.compare(x, (E) c) <= 0)\n            break;\n        queue[k] = c;\n        k = child;\n    }\n    queue[k] = x;\n}\n```\n\n将根节点删除的过程，找到根节点左右孩子中最小的那个，然后和最后一个节点比较，如果大于等于最后一个节点，此节点替换根节点，递归调用即可。\n","slug":"javasource/util/10_PriorityQueue","published":1,"updated":"2020-01-02T05:49:23.763Z","layout":"post","photos":[],"link":"","_id":"ck6lvszuu007rn0ztcroi7c0h","content":"<h3 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h3><p>PriorityQueue是一个优先队列，优先队列不允许空值，而且不支持non-comparable的对象（自定义的对象）。</p>\n<p>优先队列的使用比较简单，常用的方法如下：</p>\n<ul>\n<li>peek()//返回队首元素</li>\n<li>poll()//返回队首元素，队首元素出队列</li>\n<li>add()/offer()//添加元素</li>\n<li>size()//返回队列元素个数</li>\n<li>isEmpty()//判断队列是否为空，为空返回true,不空返回false</li>\n</ul>\n<p>优先对列通过小顶堆来实现，可以用一个完全二叉树来表示（任意一个非叶子节点的权值，都不大于其左右子节点的权值）。</p>\n<p><img src=\"../../../../uploads/structure/PriorityQueue.png\" alt=\"PriorityQueue\"></p>\n<p>一般通过add方法来添加元素：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public boolean add(E e) &#123;</div><div class=\"line\">    return offer(e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>add方法其实也是调用了offer：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public boolean offer(E e) &#123;</div><div class=\"line\">    if (e == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    modCount++;</div><div class=\"line\">    int i = size;</div><div class=\"line\">    if (i &gt;= queue.length)</div><div class=\"line\">        grow(i + 1);//扩容</div><div class=\"line\">    size = i + 1;</div><div class=\"line\">    if (i == 0)</div><div class=\"line\">        queue[0] = e;</div><div class=\"line\">    else</div><div class=\"line\">        siftUp(i, e);//加入树</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>offer方法比较简单，不允许元素为空，如果超过现在数组的长度就进行扩容，如果是第一个元素，将数组第一个（根结点）设为此元素，否则进行调整加入完全二叉树。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void grow(int minCapacity) &#123;</div><div class=\"line\">    int oldCapacity = queue.length;</div><div class=\"line\">    // Double size if small; else grow by 50%</div><div class=\"line\">    int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ?</div><div class=\"line\">                                     (oldCapacity + 2) :</div><div class=\"line\">                                     (oldCapacity &gt;&gt; 1));</div><div class=\"line\">    // overflow-conscious code</div><div class=\"line\">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</div><div class=\"line\">        newCapacity = hugeCapacity(minCapacity);</div><div class=\"line\">    queue = Arrays.copyOf(queue, newCapacity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>扩容方法就是申请一个更大的数组，将原来数组复制过去，所以可以看出是线程不安全的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void siftUp(int k, E x) &#123;</div><div class=\"line\">    if (comparator != null)</div><div class=\"line\">        siftUpUsingComparator(k, x);</div><div class=\"line\">    else</div><div class=\"line\">        siftUpComparable(k, x);</div><div class=\"line\">&#125;</div><div class=\"line\">private void siftUpUsingComparator(int k, E x) &#123;</div><div class=\"line\">    while (k &gt; 0) &#123;</div><div class=\"line\">        int parent = (k - 1) &gt;&gt;&gt; 1;</div><div class=\"line\">        Object e = queue[parent];</div><div class=\"line\">        if (comparator.compare(x, (E) e) &gt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = e;</div><div class=\"line\">        k = parent;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = x;</div><div class=\"line\">&#125;</div><div class=\"line\">private void siftUpComparable(int k, E x) &#123;</div><div class=\"line\">    Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x;</div><div class=\"line\">    while (k &gt; 0) &#123;</div><div class=\"line\">        int parent = (k - 1) &gt;&gt;&gt; 1;</div><div class=\"line\">        Object e = queue[parent];</div><div class=\"line\">        if (key.compareTo((E) e) &gt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = e;</div><div class=\"line\">        k = parent;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = key;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将此节点加入树的过程，就是调用默认的比较方法或者传入的比较方法去和父节点比较，如果小于，那就和parent交换位置。<br>过程如下：<br><img src=\"../../../../uploads/structure/PriorityQueue1.png\" alt=\"PriorityQueue\"></p>\n<p>我们通过poll方法返回第一个对象并移除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">public E poll() &#123;</div><div class=\"line\">    if (size == 0)</div><div class=\"line\">        return null;</div><div class=\"line\">    int s = --size;</div><div class=\"line\">    modCount++;</div><div class=\"line\">    E result = (E) queue[0];</div><div class=\"line\">    E x = (E) queue[s];</div><div class=\"line\">    queue[s] = null;</div><div class=\"line\">    if (s != 0)</div><div class=\"line\">        siftDown(0, x);//调整</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div><div class=\"line\">private void siftDown(int k, E x) &#123;</div><div class=\"line\">    if (comparator != null)</div><div class=\"line\">        siftDownUsingComparator(k, x);</div><div class=\"line\">    else</div><div class=\"line\">        siftDownComparable(k, x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void siftDownComparable(int k, E x) &#123;</div><div class=\"line\">    Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;)x;</div><div class=\"line\">    int half = size &gt;&gt;&gt; 1;        // loop while a non-leaf</div><div class=\"line\">    while (k &lt; half) &#123;</div><div class=\"line\">        int child = (k &lt;&lt; 1) + 1; // 左节点</div><div class=\"line\">        Object c = queue[child];</div><div class=\"line\">        int right = child + 1;//右节点</div><div class=\"line\">        if (right &lt; size &amp;&amp;</div><div class=\"line\">            ((Comparable&lt;? super E&gt;) c).compareTo((E) queue[right]) &gt; 0)</div><div class=\"line\">            c = queue[child = right];//找到更小的那个</div><div class=\"line\">        if (key.compareTo((E) c) &lt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = c;//替换</div><div class=\"line\">        k = child;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = key;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void siftDownUsingComparator(int k, E x) &#123;</div><div class=\"line\">    int half = size &gt;&gt;&gt; 1;</div><div class=\"line\">    while (k &lt; half) &#123;</div><div class=\"line\">        int child = (k &lt;&lt; 1) + 1;</div><div class=\"line\">        Object c = queue[child];</div><div class=\"line\">        int right = child + 1;</div><div class=\"line\">        if (right &lt; size &amp;&amp;</div><div class=\"line\">            comparator.compare((E) c, (E) queue[right]) &gt; 0)</div><div class=\"line\">            c = queue[child = right];</div><div class=\"line\">        if (comparator.compare(x, (E) c) &lt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = c;</div><div class=\"line\">        k = child;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>将根节点删除的过程，找到根节点左右孩子中最小的那个，然后和最后一个节点比较，如果大于等于最后一个节点，此节点替换根节点，递归调用即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h3><p>PriorityQueue是一个优先队列，优先队列不允许空值，而且不支持non-comparable的对象（自定义的对象）。</p>\n<p>优先队列的使用比较简单，常用的方法如下：</p>\n<ul>\n<li>peek()//返回队首元素</li>\n<li>poll()//返回队首元素，队首元素出队列</li>\n<li>add()/offer()//添加元素</li>\n<li>size()//返回队列元素个数</li>\n<li>isEmpty()//判断队列是否为空，为空返回true,不空返回false</li>\n</ul>\n<p>优先对列通过小顶堆来实现，可以用一个完全二叉树来表示（任意一个非叶子节点的权值，都不大于其左右子节点的权值）。</p>\n<p><img src=\"../../../../uploads/structure/PriorityQueue.png\" alt=\"PriorityQueue\"></p>\n<p>一般通过add方法来添加元素：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public boolean add(E e) &#123;</div><div class=\"line\">    return offer(e);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>add方法其实也是调用了offer：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">public boolean offer(E e) &#123;</div><div class=\"line\">    if (e == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    modCount++;</div><div class=\"line\">    int i = size;</div><div class=\"line\">    if (i &gt;= queue.length)</div><div class=\"line\">        grow(i + 1);//扩容</div><div class=\"line\">    size = i + 1;</div><div class=\"line\">    if (i == 0)</div><div class=\"line\">        queue[0] = e;</div><div class=\"line\">    else</div><div class=\"line\">        siftUp(i, e);//加入树</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>offer方法比较简单，不允许元素为空，如果超过现在数组的长度就进行扩容，如果是第一个元素，将数组第一个（根结点）设为此元素，否则进行调整加入完全二叉树。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void grow(int minCapacity) &#123;</div><div class=\"line\">    int oldCapacity = queue.length;</div><div class=\"line\">    // Double size if small; else grow by 50%</div><div class=\"line\">    int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ?</div><div class=\"line\">                                     (oldCapacity + 2) :</div><div class=\"line\">                                     (oldCapacity &gt;&gt; 1));</div><div class=\"line\">    // overflow-conscious code</div><div class=\"line\">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</div><div class=\"line\">        newCapacity = hugeCapacity(minCapacity);</div><div class=\"line\">    queue = Arrays.copyOf(queue, newCapacity);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>扩容方法就是申请一个更大的数组，将原来数组复制过去，所以可以看出是线程不安全的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void siftUp(int k, E x) &#123;</div><div class=\"line\">    if (comparator != null)</div><div class=\"line\">        siftUpUsingComparator(k, x);</div><div class=\"line\">    else</div><div class=\"line\">        siftUpComparable(k, x);</div><div class=\"line\">&#125;</div><div class=\"line\">private void siftUpUsingComparator(int k, E x) &#123;</div><div class=\"line\">    while (k &gt; 0) &#123;</div><div class=\"line\">        int parent = (k - 1) &gt;&gt;&gt; 1;</div><div class=\"line\">        Object e = queue[parent];</div><div class=\"line\">        if (comparator.compare(x, (E) e) &gt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = e;</div><div class=\"line\">        k = parent;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = x;</div><div class=\"line\">&#125;</div><div class=\"line\">private void siftUpComparable(int k, E x) &#123;</div><div class=\"line\">    Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x;</div><div class=\"line\">    while (k &gt; 0) &#123;</div><div class=\"line\">        int parent = (k - 1) &gt;&gt;&gt; 1;</div><div class=\"line\">        Object e = queue[parent];</div><div class=\"line\">        if (key.compareTo((E) e) &gt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = e;</div><div class=\"line\">        k = parent;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = key;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将此节点加入树的过程，就是调用默认的比较方法或者传入的比较方法去和父节点比较，如果小于，那就和parent交换位置。<br>过程如下：<br><img src=\"../../../../uploads/structure/PriorityQueue1.png\" alt=\"PriorityQueue\"></p>\n<p>我们通过poll方法返回第一个对象并移除：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">public E poll() &#123;</div><div class=\"line\">    if (size == 0)</div><div class=\"line\">        return null;</div><div class=\"line\">    int s = --size;</div><div class=\"line\">    modCount++;</div><div class=\"line\">    E result = (E) queue[0];</div><div class=\"line\">    E x = (E) queue[s];</div><div class=\"line\">    queue[s] = null;</div><div class=\"line\">    if (s != 0)</div><div class=\"line\">        siftDown(0, x);//调整</div><div class=\"line\">    return result;</div><div class=\"line\">&#125;</div><div class=\"line\">private void siftDown(int k, E x) &#123;</div><div class=\"line\">    if (comparator != null)</div><div class=\"line\">        siftDownUsingComparator(k, x);</div><div class=\"line\">    else</div><div class=\"line\">        siftDownComparable(k, x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void siftDownComparable(int k, E x) &#123;</div><div class=\"line\">    Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;)x;</div><div class=\"line\">    int half = size &gt;&gt;&gt; 1;        // loop while a non-leaf</div><div class=\"line\">    while (k &lt; half) &#123;</div><div class=\"line\">        int child = (k &lt;&lt; 1) + 1; // 左节点</div><div class=\"line\">        Object c = queue[child];</div><div class=\"line\">        int right = child + 1;//右节点</div><div class=\"line\">        if (right &lt; size &amp;&amp;</div><div class=\"line\">            ((Comparable&lt;? super E&gt;) c).compareTo((E) queue[right]) &gt; 0)</div><div class=\"line\">            c = queue[child = right];//找到更小的那个</div><div class=\"line\">        if (key.compareTo((E) c) &lt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = c;//替换</div><div class=\"line\">        k = child;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = key;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void siftDownUsingComparator(int k, E x) &#123;</div><div class=\"line\">    int half = size &gt;&gt;&gt; 1;</div><div class=\"line\">    while (k &lt; half) &#123;</div><div class=\"line\">        int child = (k &lt;&lt; 1) + 1;</div><div class=\"line\">        Object c = queue[child];</div><div class=\"line\">        int right = child + 1;</div><div class=\"line\">        if (right &lt; size &amp;&amp;</div><div class=\"line\">            comparator.compare((E) c, (E) queue[right]) &gt; 0)</div><div class=\"line\">            c = queue[child = right];</div><div class=\"line\">        if (comparator.compare(x, (E) c) &lt;= 0)</div><div class=\"line\">            break;</div><div class=\"line\">        queue[k] = c;</div><div class=\"line\">        k = child;</div><div class=\"line\">    &#125;</div><div class=\"line\">    queue[k] = x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>将根节点删除的过程，找到根节点左右孩子中最小的那个，然后和最后一个节点比较，如果大于等于最后一个节点，此节点替换根节点，递归调用即可。</p>\n"},{"title":"线程池阅读","date":"2019-11-15T08:45:45.000Z","comments":0,"keywords":["java","ExecutorService","ThreadPoolExecutor","线程池"],"_content":"\n### 类继承的结构\n\n![结构图](../../../../uploads/javasource/util/executor.jpeg)\n\nExecutor是最顶层的接口，定义了execute(Runnable runnable)方法。ExecutorService继承了Executor，继承了execute方法，还定义很多接口方法，例如shutdown、isTerminated、submit等方法。\n\n在下面一层是AbstractExecutorService，这是一个抽象类，实现一些很有用的方法供子类使用。\n\nThreadPoolExecutor是我们线程池的实现。\n\n### ThreadPoolExecutor\n\nThreadPoolExecutor实现了一个线程池需要的各个方法，它实现了任务提交、线程管理、监控等等方法。\n\n我们还可以在它的基础上进行扩展，比如实现定时任务的类 ScheduledThreadPoolExecutor（用来在给定延时后执行异步任务或者周期性执行任务） 就继承自 ThreadPoolExecutor。\n\n#### 构造函数参数\n\n```\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.acc = System.getSecurityManager() == null ?\n            null :\n            AccessController.getContext();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n我们创建一个线程池参数最全的构造方法如上，这些是我们最关心的参数。\n\n- corePoolSize 核心线程数\n- maximumPoolSize 最大线程数\n- keepAliveTime 空闲线程的存活时间\n- unit 存活时间的单位\n- workQueue 任务队列，BlockingQueue 接口的某个实现（常使用 ArrayBlockingQueue 和 LinkedBlockingQueue）。\n- threadFactory 用于创建线程，一般都使用默认的（Executors.defaultThreadFactory()），我们可以通过它将我们的线程的名字设置得比较可读一些，如 Message-Thread-1， Message-Thread-2 类似这样。\n- handler 拒绝策略\n\n#### 状态流转\n\n```\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\nprivate static final int RUNNING    = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\nprivate static final int STOP       =  1 << COUNT_BITS;\nprivate static final int TIDYING    =  2 << COUNT_BITS;\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n```\n\n> COUNT_BITS 设置为 29(32-3)，前三位用于存放线程状态，后29位用于存放线程数\n> CAPACITY = 2^29-1=536870911  即线程池的最大数量\n> RUNNING  111 00000000000000000000000000000 接受新的任务，处理等待队列中的任务\n> SHUTDOWN  000 00000000000000000000000000000 不接受新的任务提交，但是会继续处理等待队列中的任务\n> STOP  001 00000000000000000000000000000 不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程\n> TIDYING  010 00000000000000000000000000000 所有的任务都销毁了,线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()\n> TERMINATED  011 00000000000000000000000000000 terminated() 方法结束后，线程池的状态就会变成这个\n\n- RUNNING -> SHUTDOWN：当调用了 shutdown() 后，会发生这个状态转换，这也是最重要的\n- (RUNNING or SHUTDOWN) -> STOP：当调用 shutdownNow() 后，会发生这个状态转换，这下要清楚 shutDown() 和 shutDownNow() 的区别了\n- SHUTDOWN -> TIDYING：当任务队列和线程池都清空后，会由 SHUTDOWN 转换为 TIDYING\n- STOP -> TIDYING：当任务队列清空后，发生这个转换\n- TIDYING -> TERMINATED：这个前面说了，当 terminated() 方法结束后\n\n#### Worker\n\n```\nprivate final class Worker\n        extends AbstractQueuedSynchronizer\n        implements Runnable\n{\n    private static final long serialVersionUID = 6138294804551838833L;\n\n    final Thread thread;\n    Runnable firstTask;\n    volatile long completedTasks;\n\n    Worker(Runnable firstTask) {\n        setState(-1); // inhibit interrupts until runWorker\n        this.firstTask = firstTask;\n        this.thread = getThreadFactory().newThread(this);\n    }\n\n    public void run() {\n        runWorker(this);\n    }\n\n    protected boolean isHeldExclusively() {\n        return getState() != 0;\n    }\n\n    protected boolean tryAcquire(int unused) {\n        if (compareAndSetState(0, 1)) {\n            setExclusiveOwnerThread(Thread.currentThread());\n            return true;\n        }\n        return false;\n    }\n\n    protected boolean tryRelease(int unused) {\n        setExclusiveOwnerThread(null);\n        setState(0);\n        return true;\n    }\n\n    public void lock()        { acquire(1); }\n    public boolean tryLock()  { return tryAcquire(1); }\n    public void unlock()      { release(1); }\n    public boolean isLocked() { return isHeldExclusively(); }\n\n    void interruptIfStarted() {\n        Thread t;\n        if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {\n            try {\n                t.interrupt();\n            } catch (SecurityException ignore) {\n            }\n        }\n    }\n}\n```\n\n> Worker是线程池中的内部类，是线程池中真正执行任务的线程，Worker继承了AbstractQueuedSynchronizer（aqs）实现了Runable。\n> Worker中thread是真正的线程；firstTask是在创建线程的时候，如果同时指定了这个线程起来以后需要执行的第一个任务，那么第一个任务就是存放在这里的；completedTasks 存放了此线程完成的任务数\n> 构造函数传入firstTask，也可以传 null。run方法调用了外部类的runWorker方法。其余的方法用 AQS 操作，来获取这个线程的执行权，用了独占锁。\n\n##### runWorker\n```\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    w.unlock(); // allow interrupts\n    boolean completedAbruptly = true;\n    try {\n        while (task != null || (task = getTask()) != null) {\n            w.lock();\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &&\n                  runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n```\n\n> 这个方法由worker线程启动后调用，如果指定了该worker的firstTask，则先执行这个任务，之后通过while循环从队列中取任务。\n> 首先lock，然后判断线程池状态大于等于 STOP，那么意味着该线程也要中断。\n> beforeExecute方法是一个钩子方法，留给需要的子类进行实现;然后执行任务;afterExecutey也是钩子方法，将task和异常作为参数，留给子类实现使用;最后将task置为空，准备getTask，worker的完成任数加1，释放独占锁。\n> 如果能执行到最后的finally（对线程池进行关闭）有两种可能 1 getTask 返回 null，也就是说，队列中已经没有任务需要执行了，执行关闭。2 任务执行过程中发生了异常。\n\n##### getTask \n\n```\nprivate Runnable getTask() {\n    boolean timedOut = false; // Did the last poll() time out?\n\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n        //检查状态\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            //减少工作线程的数量，返回null CAS操作\n            decrementWorkerCount();\n            return null;\n        }\n        int wc = workerCountOf(c);\n        //核心线程是否超时回收 | 线程数大于核心线程数\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n        // 线程数大于最大线程数，因为有可能开发者调用了 setMaximumPoolSize() 将线程池的 maximumPoolSize 调小了，那么多余的 Worker 就需要被关闭\n        // 并且 线程数 > 1 获取队列为King，\n        if ((wc > maximumPoolSize || (timed && timedOut))\n            && (wc > 1 || workQueue.isEmpty())) {\n            //减少线程数 返回空\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            //CAS\n            continue;\n        }\n        try {\n            // 到 workQueue 中获取任务\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                workQueue.take();\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n}\n```\n\n> 此方法有三种可能：\n> 1. 阻塞直到获取到任务返回。()默认 corePoolSize 之内的线程是不会被回收的，它们会一直等待任务)\n> 2. 超时退出。keepAliveTime 起作用的时候，也就是如果这么多时间内都没有任务，那么应该执行关闭\n> 3. 如果发生了以下条件，此方法必须返回 null:\n>    - 池中有大于 maximumPoolSize 个 workers 存在(通过调用 setMaximumPoolSize 进行设置)\n>    - 线程池处于 SHUTDOWN，而且 workQueue 是空的，前面说了，这种不再接受新的任务\n>    - 线程池处于 STOP，不仅不接受新的线程，连 workQueue 中的线程也不再执行\n\n#### execute 方法\n```\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    \n    int c = ctl.get();\n    //当前线程数少于核心线程数，那么直接添加一个 worker 来执行任务,创建一个新的线程，并把当前任务 command 作为这个线程的第一个任务(firstTask)\n    if (workerCountOf(c) < corePoolSize) {\n        //添加任务成功，那么就结束了,返回 false 代表线程池不允许提交任务\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    //如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        //如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        //线程池还是 RUNNING 的，并且线程数为 0，那么开启新的线程\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    //如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n> 执行的流程很简单，如果当前线程数少于核心线程数直接add一个worker执行，如果大于等于核心线程数会加进任务队列等待worker执行，如果任务队列满了之后，继续添加worker执行，如果此时线程数超过最大线程数就会执行拒绝策略。\n\n#### 拒绝策略\n\n##### CallerRunsPolicy\n\n```\npublic static class CallerRunsPolicy implements RejectedExecutionHandler {\n    public CallerRunsPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            r.run();\n        }\n    }\n}\n```\n\n> 如果线程池没有被关闭，那么由提交任务的线程自己来执行这个任务。\n\n```\npublic static class AbortPolicy implements RejectedExecutionHandler {\n    public AbortPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        throw new RejectedExecutionException(\"Task \" + r.toString() +\n                                             \" rejected from \" +\n                                             e.toString());\n    }\n}\n```\n\n> 线程池的默认策略，直接抛出异常。\n\n```\npublic static class DiscardPolicy implements RejectedExecutionHandler {\n    public DiscardPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n    }\n}\n```\n\n> 不处理直接忽略。\n\n```\npublic static class DiscardOldestPolicy implements RejectedExecutionHandler {\n    public DiscardOldestPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            e.getQueue().poll();\n            e.execute(r);\n        }\n    }\n}\n```\n\n> 把队列队头的任务干掉，然后提交这个任务。\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/javasource/util/2_ExecutorService.md","raw":"---\ntitle: 线程池阅读 \ndate: 2019-11-15 16:45:45\ncomments: false\ntags: \n- java\n- ExecutorService\n- ThreadPoolExecutor\n- 线程池\ncategories: \n- java\nkeywords: \n- java\n- ExecutorService\n- ThreadPoolExecutor\n- 线程池\n---\n\n### 类继承的结构\n\n![结构图](../../../../uploads/javasource/util/executor.jpeg)\n\nExecutor是最顶层的接口，定义了execute(Runnable runnable)方法。ExecutorService继承了Executor，继承了execute方法，还定义很多接口方法，例如shutdown、isTerminated、submit等方法。\n\n在下面一层是AbstractExecutorService，这是一个抽象类，实现一些很有用的方法供子类使用。\n\nThreadPoolExecutor是我们线程池的实现。\n\n### ThreadPoolExecutor\n\nThreadPoolExecutor实现了一个线程池需要的各个方法，它实现了任务提交、线程管理、监控等等方法。\n\n我们还可以在它的基础上进行扩展，比如实现定时任务的类 ScheduledThreadPoolExecutor（用来在给定延时后执行异步任务或者周期性执行任务） 就继承自 ThreadPoolExecutor。\n\n#### 构造函数参数\n\n```\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.acc = System.getSecurityManager() == null ?\n            null :\n            AccessController.getContext();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n我们创建一个线程池参数最全的构造方法如上，这些是我们最关心的参数。\n\n- corePoolSize 核心线程数\n- maximumPoolSize 最大线程数\n- keepAliveTime 空闲线程的存活时间\n- unit 存活时间的单位\n- workQueue 任务队列，BlockingQueue 接口的某个实现（常使用 ArrayBlockingQueue 和 LinkedBlockingQueue）。\n- threadFactory 用于创建线程，一般都使用默认的（Executors.defaultThreadFactory()），我们可以通过它将我们的线程的名字设置得比较可读一些，如 Message-Thread-1， Message-Thread-2 类似这样。\n- handler 拒绝策略\n\n#### 状态流转\n\n```\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\nprivate static final int RUNNING    = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\nprivate static final int STOP       =  1 << COUNT_BITS;\nprivate static final int TIDYING    =  2 << COUNT_BITS;\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n```\n\n> COUNT_BITS 设置为 29(32-3)，前三位用于存放线程状态，后29位用于存放线程数\n> CAPACITY = 2^29-1=536870911  即线程池的最大数量\n> RUNNING  111 00000000000000000000000000000 接受新的任务，处理等待队列中的任务\n> SHUTDOWN  000 00000000000000000000000000000 不接受新的任务提交，但是会继续处理等待队列中的任务\n> STOP  001 00000000000000000000000000000 不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程\n> TIDYING  010 00000000000000000000000000000 所有的任务都销毁了,线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()\n> TERMINATED  011 00000000000000000000000000000 terminated() 方法结束后，线程池的状态就会变成这个\n\n- RUNNING -> SHUTDOWN：当调用了 shutdown() 后，会发生这个状态转换，这也是最重要的\n- (RUNNING or SHUTDOWN) -> STOP：当调用 shutdownNow() 后，会发生这个状态转换，这下要清楚 shutDown() 和 shutDownNow() 的区别了\n- SHUTDOWN -> TIDYING：当任务队列和线程池都清空后，会由 SHUTDOWN 转换为 TIDYING\n- STOP -> TIDYING：当任务队列清空后，发生这个转换\n- TIDYING -> TERMINATED：这个前面说了，当 terminated() 方法结束后\n\n#### Worker\n\n```\nprivate final class Worker\n        extends AbstractQueuedSynchronizer\n        implements Runnable\n{\n    private static final long serialVersionUID = 6138294804551838833L;\n\n    final Thread thread;\n    Runnable firstTask;\n    volatile long completedTasks;\n\n    Worker(Runnable firstTask) {\n        setState(-1); // inhibit interrupts until runWorker\n        this.firstTask = firstTask;\n        this.thread = getThreadFactory().newThread(this);\n    }\n\n    public void run() {\n        runWorker(this);\n    }\n\n    protected boolean isHeldExclusively() {\n        return getState() != 0;\n    }\n\n    protected boolean tryAcquire(int unused) {\n        if (compareAndSetState(0, 1)) {\n            setExclusiveOwnerThread(Thread.currentThread());\n            return true;\n        }\n        return false;\n    }\n\n    protected boolean tryRelease(int unused) {\n        setExclusiveOwnerThread(null);\n        setState(0);\n        return true;\n    }\n\n    public void lock()        { acquire(1); }\n    public boolean tryLock()  { return tryAcquire(1); }\n    public void unlock()      { release(1); }\n    public boolean isLocked() { return isHeldExclusively(); }\n\n    void interruptIfStarted() {\n        Thread t;\n        if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {\n            try {\n                t.interrupt();\n            } catch (SecurityException ignore) {\n            }\n        }\n    }\n}\n```\n\n> Worker是线程池中的内部类，是线程池中真正执行任务的线程，Worker继承了AbstractQueuedSynchronizer（aqs）实现了Runable。\n> Worker中thread是真正的线程；firstTask是在创建线程的时候，如果同时指定了这个线程起来以后需要执行的第一个任务，那么第一个任务就是存放在这里的；completedTasks 存放了此线程完成的任务数\n> 构造函数传入firstTask，也可以传 null。run方法调用了外部类的runWorker方法。其余的方法用 AQS 操作，来获取这个线程的执行权，用了独占锁。\n\n##### runWorker\n```\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    w.unlock(); // allow interrupts\n    boolean completedAbruptly = true;\n    try {\n        while (task != null || (task = getTask()) != null) {\n            w.lock();\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &&\n                  runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n```\n\n> 这个方法由worker线程启动后调用，如果指定了该worker的firstTask，则先执行这个任务，之后通过while循环从队列中取任务。\n> 首先lock，然后判断线程池状态大于等于 STOP，那么意味着该线程也要中断。\n> beforeExecute方法是一个钩子方法，留给需要的子类进行实现;然后执行任务;afterExecutey也是钩子方法，将task和异常作为参数，留给子类实现使用;最后将task置为空，准备getTask，worker的完成任数加1，释放独占锁。\n> 如果能执行到最后的finally（对线程池进行关闭）有两种可能 1 getTask 返回 null，也就是说，队列中已经没有任务需要执行了，执行关闭。2 任务执行过程中发生了异常。\n\n##### getTask \n\n```\nprivate Runnable getTask() {\n    boolean timedOut = false; // Did the last poll() time out?\n\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n        //检查状态\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            //减少工作线程的数量，返回null CAS操作\n            decrementWorkerCount();\n            return null;\n        }\n        int wc = workerCountOf(c);\n        //核心线程是否超时回收 | 线程数大于核心线程数\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n        // 线程数大于最大线程数，因为有可能开发者调用了 setMaximumPoolSize() 将线程池的 maximumPoolSize 调小了，那么多余的 Worker 就需要被关闭\n        // 并且 线程数 > 1 获取队列为King，\n        if ((wc > maximumPoolSize || (timed && timedOut))\n            && (wc > 1 || workQueue.isEmpty())) {\n            //减少线程数 返回空\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            //CAS\n            continue;\n        }\n        try {\n            // 到 workQueue 中获取任务\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                workQueue.take();\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n}\n```\n\n> 此方法有三种可能：\n> 1. 阻塞直到获取到任务返回。()默认 corePoolSize 之内的线程是不会被回收的，它们会一直等待任务)\n> 2. 超时退出。keepAliveTime 起作用的时候，也就是如果这么多时间内都没有任务，那么应该执行关闭\n> 3. 如果发生了以下条件，此方法必须返回 null:\n>    - 池中有大于 maximumPoolSize 个 workers 存在(通过调用 setMaximumPoolSize 进行设置)\n>    - 线程池处于 SHUTDOWN，而且 workQueue 是空的，前面说了，这种不再接受新的任务\n>    - 线程池处于 STOP，不仅不接受新的线程，连 workQueue 中的线程也不再执行\n\n#### execute 方法\n```\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    \n    int c = ctl.get();\n    //当前线程数少于核心线程数，那么直接添加一个 worker 来执行任务,创建一个新的线程，并把当前任务 command 作为这个线程的第一个任务(firstTask)\n    if (workerCountOf(c) < corePoolSize) {\n        //添加任务成功，那么就结束了,返回 false 代表线程池不允许提交任务\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    //如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        //如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        //线程池还是 RUNNING 的，并且线程数为 0，那么开启新的线程\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    //如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n> 执行的流程很简单，如果当前线程数少于核心线程数直接add一个worker执行，如果大于等于核心线程数会加进任务队列等待worker执行，如果任务队列满了之后，继续添加worker执行，如果此时线程数超过最大线程数就会执行拒绝策略。\n\n#### 拒绝策略\n\n##### CallerRunsPolicy\n\n```\npublic static class CallerRunsPolicy implements RejectedExecutionHandler {\n    public CallerRunsPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            r.run();\n        }\n    }\n}\n```\n\n> 如果线程池没有被关闭，那么由提交任务的线程自己来执行这个任务。\n\n```\npublic static class AbortPolicy implements RejectedExecutionHandler {\n    public AbortPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        throw new RejectedExecutionException(\"Task \" + r.toString() +\n                                             \" rejected from \" +\n                                             e.toString());\n    }\n}\n```\n\n> 线程池的默认策略，直接抛出异常。\n\n```\npublic static class DiscardPolicy implements RejectedExecutionHandler {\n    public DiscardPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n    }\n}\n```\n\n> 不处理直接忽略。\n\n```\npublic static class DiscardOldestPolicy implements RejectedExecutionHandler {\n    public DiscardOldestPolicy() { }\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {\n        if (!e.isShutdown()) {\n            e.getQueue().poll();\n            e.execute(r);\n        }\n    }\n}\n```\n\n> 把队列队头的任务干掉，然后提交这个任务。\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"javasource/util/2_ExecutorService","published":1,"updated":"2020-01-02T05:49:23.766Z","layout":"post","photos":[],"link":"","_id":"ck6lvszuu007sn0ztgun1wvse","content":"<h3 id=\"类继承的结构\"><a href=\"#类继承的结构\" class=\"headerlink\" title=\"类继承的结构\"></a>类继承的结构</h3><p><img src=\"../../../../uploads/javasource/util/executor.jpeg\" alt=\"结构图\"></p>\n<p>Executor是最顶层的接口，定义了execute(Runnable runnable)方法。ExecutorService继承了Executor，继承了execute方法，还定义很多接口方法，例如shutdown、isTerminated、submit等方法。</p>\n<p>在下面一层是AbstractExecutorService，这是一个抽象类，实现一些很有用的方法供子类使用。</p>\n<p>ThreadPoolExecutor是我们线程池的实现。</p>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><p>ThreadPoolExecutor实现了一个线程池需要的各个方法，它实现了任务提交、线程管理、监控等等方法。</p>\n<p>我们还可以在它的基础上进行扩展，比如实现定时任务的类 ScheduledThreadPoolExecutor（用来在给定延时后执行异步任务或者周期性执行任务） 就继承自 ThreadPoolExecutor。</p>\n<h4 id=\"构造函数参数\"><a href=\"#构造函数参数\" class=\"headerlink\" title=\"构造函数参数\"></a>构造函数参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ThreadPoolExecutor(int corePoolSize,</div><div class=\"line\">                          int maximumPoolSize,</div><div class=\"line\">                          long keepAliveTime,</div><div class=\"line\">                          TimeUnit unit,</div><div class=\"line\">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                          ThreadFactory threadFactory,</div><div class=\"line\">                          RejectedExecutionHandler handler) &#123;</div><div class=\"line\">    if (corePoolSize &lt; 0 ||</div><div class=\"line\">        maximumPoolSize &lt;= 0 ||</div><div class=\"line\">        maximumPoolSize &lt; corePoolSize ||</div><div class=\"line\">        keepAliveTime &lt; 0)</div><div class=\"line\">        throw new IllegalArgumentException();</div><div class=\"line\">    if (workQueue == null || threadFactory == null || handler == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    this.acc = System.getSecurityManager() == null ?</div><div class=\"line\">            null :</div><div class=\"line\">            AccessController.getContext();</div><div class=\"line\">    this.corePoolSize = corePoolSize;</div><div class=\"line\">    this.maximumPoolSize = maximumPoolSize;</div><div class=\"line\">    this.workQueue = workQueue;</div><div class=\"line\">    this.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class=\"line\">    this.threadFactory = threadFactory;</div><div class=\"line\">    this.handler = handler;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们创建一个线程池参数最全的构造方法如上，这些是我们最关心的参数。</p>\n<ul>\n<li>corePoolSize 核心线程数</li>\n<li>maximumPoolSize 最大线程数</li>\n<li>keepAliveTime 空闲线程的存活时间</li>\n<li>unit 存活时间的单位</li>\n<li>workQueue 任务队列，BlockingQueue 接口的某个实现（常使用 ArrayBlockingQueue 和 LinkedBlockingQueue）。</li>\n<li>threadFactory 用于创建线程，一般都使用默认的（Executors.defaultThreadFactory()），我们可以通过它将我们的线程的名字设置得比较可读一些，如 Message-Thread-1， Message-Thread-2 类似这样。</li>\n<li>handler 拒绝策略</li>\n</ul>\n<h4 id=\"状态流转\"><a href=\"#状态流转\" class=\"headerlink\" title=\"状态流转\"></a>状态流转</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));</div><div class=\"line\">private static final int COUNT_BITS = Integer.SIZE - 3;</div><div class=\"line\">private static final int CAPACITY   = (1 &lt;&lt; COUNT_BITS) - 1;</div><div class=\"line\"></div><div class=\"line\">private static final int RUNNING    = -1 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int SHUTDOWN   =  0 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int STOP       =  1 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int TIDYING    =  2 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int TERMINATED =  3 &lt;&lt; COUNT_BITS;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>COUNT_BITS 设置为 29(32-3)，前三位用于存放线程状态，后29位用于存放线程数<br>CAPACITY = 2^29-1=536870911  即线程池的最大数量<br>RUNNING  111 00000000000000000000000000000 接受新的任务，处理等待队列中的任务<br>SHUTDOWN  000 00000000000000000000000000000 不接受新的任务提交，但是会继续处理等待队列中的任务<br>STOP  001 00000000000000000000000000000 不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程<br>TIDYING  010 00000000000000000000000000000 所有的任务都销毁了,线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()<br>TERMINATED  011 00000000000000000000000000000 terminated() 方法结束后，线程池的状态就会变成这个</p>\n</blockquote>\n<ul>\n<li>RUNNING -&gt; SHUTDOWN：当调用了 shutdown() 后，会发生这个状态转换，这也是最重要的</li>\n<li>(RUNNING or SHUTDOWN) -&gt; STOP：当调用 shutdownNow() 后，会发生这个状态转换，这下要清楚 shutDown() 和 shutDownNow() 的区别了</li>\n<li>SHUTDOWN -&gt; TIDYING：当任务队列和线程池都清空后，会由 SHUTDOWN 转换为 TIDYING</li>\n<li>STOP -&gt; TIDYING：当任务队列清空后，发生这个转换</li>\n<li>TIDYING -&gt; TERMINATED：这个前面说了，当 terminated() 方法结束后</li>\n</ul>\n<h4 id=\"Worker\"><a href=\"#Worker\" class=\"headerlink\" title=\"Worker\"></a>Worker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final class Worker</div><div class=\"line\">        extends AbstractQueuedSynchronizer</div><div class=\"line\">        implements Runnable</div><div class=\"line\">&#123;</div><div class=\"line\">    private static final long serialVersionUID = 6138294804551838833L;</div><div class=\"line\"></div><div class=\"line\">    final Thread thread;</div><div class=\"line\">    Runnable firstTask;</div><div class=\"line\">    volatile long completedTasks;</div><div class=\"line\"></div><div class=\"line\">    Worker(Runnable firstTask) &#123;</div><div class=\"line\">        setState(-1); // inhibit interrupts until runWorker</div><div class=\"line\">        this.firstTask = firstTask;</div><div class=\"line\">        this.thread = getThreadFactory().newThread(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        runWorker(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean isHeldExclusively() &#123;</div><div class=\"line\">        return getState() != 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean tryAcquire(int unused) &#123;</div><div class=\"line\">        if (compareAndSetState(0, 1)) &#123;</div><div class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean tryRelease(int unused) &#123;</div><div class=\"line\">        setExclusiveOwnerThread(null);</div><div class=\"line\">        setState(0);</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void lock()        &#123; acquire(1); &#125;</div><div class=\"line\">    public boolean tryLock()  &#123; return tryAcquire(1); &#125;</div><div class=\"line\">    public void unlock()      &#123; release(1); &#125;</div><div class=\"line\">    public boolean isLocked() &#123; return isHeldExclusively(); &#125;</div><div class=\"line\"></div><div class=\"line\">    void interruptIfStarted() &#123;</div><div class=\"line\">        Thread t;</div><div class=\"line\">        if (getState() &gt;= 0 &amp;&amp; (t = thread) != null &amp;&amp; !t.isInterrupted()) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                t.interrupt();</div><div class=\"line\">            &#125; catch (SecurityException ignore) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Worker是线程池中的内部类，是线程池中真正执行任务的线程，Worker继承了AbstractQueuedSynchronizer（aqs）实现了Runable。<br>Worker中thread是真正的线程；firstTask是在创建线程的时候，如果同时指定了这个线程起来以后需要执行的第一个任务，那么第一个任务就是存放在这里的；completedTasks 存放了此线程完成的任务数<br>构造函数传入firstTask，也可以传 null。run方法调用了外部类的runWorker方法。其余的方法用 AQS 操作，来获取这个线程的执行权，用了独占锁。</p>\n</blockquote>\n<h5 id=\"runWorker\"><a href=\"#runWorker\" class=\"headerlink\" title=\"runWorker\"></a>runWorker</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">final void runWorker(Worker w) &#123;</div><div class=\"line\">    Thread wt = Thread.currentThread();</div><div class=\"line\">    Runnable task = w.firstTask;</div><div class=\"line\">    w.firstTask = null;</div><div class=\"line\">    w.unlock(); // allow interrupts</div><div class=\"line\">    boolean completedAbruptly = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        while (task != null || (task = getTask()) != null) &#123;</div><div class=\"line\">            w.lock();</div><div class=\"line\">            if ((runStateAtLeast(ctl.get(), STOP) ||</div><div class=\"line\">                 (Thread.interrupted() &amp;&amp;</div><div class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class=\"line\">                !wt.isInterrupted())</div><div class=\"line\">                wt.interrupt();</div><div class=\"line\">            try &#123;</div><div class=\"line\">                beforeExecute(wt, task);</div><div class=\"line\">                Throwable thrown = null;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    task.run();</div><div class=\"line\">                &#125; catch (RuntimeException x) &#123;</div><div class=\"line\">                    thrown = x; throw x;</div><div class=\"line\">                &#125; catch (Error x) &#123;</div><div class=\"line\">                    thrown = x; throw x;</div><div class=\"line\">                &#125; catch (Throwable x) &#123;</div><div class=\"line\">                    thrown = x; throw new Error(x);</div><div class=\"line\">                &#125; finally &#123;</div><div class=\"line\">                    afterExecute(task, thrown);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                task = null;</div><div class=\"line\">                w.completedTasks++;</div><div class=\"line\">                w.unlock();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        completedAbruptly = false;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        processWorkerExit(w, completedAbruptly);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这个方法由worker线程启动后调用，如果指定了该worker的firstTask，则先执行这个任务，之后通过while循环从队列中取任务。<br>首先lock，然后判断线程池状态大于等于 STOP，那么意味着该线程也要中断。<br>beforeExecute方法是一个钩子方法，留给需要的子类进行实现;然后执行任务;afterExecutey也是钩子方法，将task和异常作为参数，留给子类实现使用;最后将task置为空，准备getTask，worker的完成任数加1，释放独占锁。<br>如果能执行到最后的finally（对线程池进行关闭）有两种可能 1 getTask 返回 null，也就是说，队列中已经没有任务需要执行了，执行关闭。2 任务执行过程中发生了异常。</p>\n</blockquote>\n<h5 id=\"getTask\"><a href=\"#getTask\" class=\"headerlink\" title=\"getTask\"></a>getTask</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Runnable getTask() &#123;</div><div class=\"line\">    boolean timedOut = false; // Did the last poll() time out?</div><div class=\"line\"></div><div class=\"line\">    for (;;) &#123;</div><div class=\"line\">        int c = ctl.get();</div><div class=\"line\">        int rs = runStateOf(c);</div><div class=\"line\">        //检查状态</div><div class=\"line\">        if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</div><div class=\"line\">            //减少工作线程的数量，返回null CAS操作</div><div class=\"line\">            decrementWorkerCount();</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int wc = workerCountOf(c);</div><div class=\"line\">        //核心线程是否超时回收 | 线程数大于核心线程数</div><div class=\"line\">        boolean timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class=\"line\">        // 线程数大于最大线程数，因为有可能开发者调用了 setMaximumPoolSize() 将线程池的 maximumPoolSize 调小了，那么多余的 Worker 就需要被关闭</div><div class=\"line\">        // 并且 线程数 &gt; 1 获取队列为King，</div><div class=\"line\">        if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</div><div class=\"line\">            &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) &#123;</div><div class=\"line\">            //减少线程数 返回空</div><div class=\"line\">            if (compareAndDecrementWorkerCount(c))</div><div class=\"line\">                return null;</div><div class=\"line\">            //CAS</div><div class=\"line\">            continue;</div><div class=\"line\">        &#125;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            // 到 workQueue 中获取任务</div><div class=\"line\">            Runnable r = timed ?</div><div class=\"line\">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</div><div class=\"line\">                workQueue.take();</div><div class=\"line\">            if (r != null)</div><div class=\"line\">                return r;</div><div class=\"line\">            timedOut = true;</div><div class=\"line\">        &#125; catch (InterruptedException retry) &#123;</div><div class=\"line\">            timedOut = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>此方法有三种可能：</p>\n<ol>\n<li>阻塞直到获取到任务返回。()默认 corePoolSize 之内的线程是不会被回收的，它们会一直等待任务)</li>\n<li>超时退出。keepAliveTime 起作用的时候，也就是如果这么多时间内都没有任务，那么应该执行关闭</li>\n<li>如果发生了以下条件，此方法必须返回 null:<ul>\n<li>池中有大于 maximumPoolSize 个 workers 存在(通过调用 setMaximumPoolSize 进行设置)</li>\n<li>线程池处于 SHUTDOWN，而且 workQueue 是空的，前面说了，这种不再接受新的任务</li>\n<li>线程池处于 STOP，不仅不接受新的线程，连 workQueue 中的线程也不再执行</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"execute-方法\"><a href=\"#execute-方法\" class=\"headerlink\" title=\"execute 方法\"></a>execute 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void execute(Runnable command) &#123;</div><div class=\"line\">    if (command == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    </div><div class=\"line\">    int c = ctl.get();</div><div class=\"line\">    //当前线程数少于核心线程数，那么直接添加一个 worker 来执行任务,创建一个新的线程，并把当前任务 command 作为这个线程的第一个任务(firstTask)</div><div class=\"line\">    if (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class=\"line\">        //添加任务成功，那么就结束了,返回 false 代表线程池不允许提交任务</div><div class=\"line\">        if (addWorker(command, true))</div><div class=\"line\">            return;</div><div class=\"line\">        c = ctl.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中</div><div class=\"line\">    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class=\"line\">        int recheck = ctl.get();</div><div class=\"line\">        //如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略</div><div class=\"line\">        if (! isRunning(recheck) &amp;&amp; remove(command))</div><div class=\"line\">            reject(command);</div><div class=\"line\">        //线程池还是 RUNNING 的，并且线程数为 0，那么开启新的线程</div><div class=\"line\">        else if (workerCountOf(recheck) == 0)</div><div class=\"line\">            addWorker(null, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">    //如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略</div><div class=\"line\">    else if (!addWorker(command, false))</div><div class=\"line\">        reject(command);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>执行的流程很简单，如果当前线程数少于核心线程数直接add一个worker执行，如果大于等于核心线程数会加进任务队列等待worker执行，如果任务队列满了之后，继续添加worker执行，如果此时线程数超过最大线程数就会执行拒绝策略。</p>\n</blockquote>\n<h4 id=\"拒绝策略\"><a href=\"#拒绝策略\" class=\"headerlink\" title=\"拒绝策略\"></a>拒绝策略</h4><h5 id=\"CallerRunsPolicy\"><a href=\"#CallerRunsPolicy\" class=\"headerlink\" title=\"CallerRunsPolicy\"></a>CallerRunsPolicy</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class CallerRunsPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public CallerRunsPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">        if (!e.isShutdown()) &#123;</div><div class=\"line\">            r.run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果线程池没有被关闭，那么由提交任务的线程自己来执行这个任务。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class AbortPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public AbortPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">        throw new RejectedExecutionException(&quot;Task &quot; + r.toString() +</div><div class=\"line\">                                             &quot; rejected from &quot; +</div><div class=\"line\">                                             e.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>线程池的默认策略，直接抛出异常。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class DiscardPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public DiscardPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>不处理直接忽略。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class DiscardOldestPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public DiscardOldestPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">        if (!e.isShutdown()) &#123;</div><div class=\"line\">            e.getQueue().poll();</div><div class=\"line\">            e.execute(r);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把队列队头的任务干掉，然后提交这个任务。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"类继承的结构\"><a href=\"#类继承的结构\" class=\"headerlink\" title=\"类继承的结构\"></a>类继承的结构</h3><p><img src=\"../../../../uploads/javasource/util/executor.jpeg\" alt=\"结构图\"></p>\n<p>Executor是最顶层的接口，定义了execute(Runnable runnable)方法。ExecutorService继承了Executor，继承了execute方法，还定义很多接口方法，例如shutdown、isTerminated、submit等方法。</p>\n<p>在下面一层是AbstractExecutorService，这是一个抽象类，实现一些很有用的方法供子类使用。</p>\n<p>ThreadPoolExecutor是我们线程池的实现。</p>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><p>ThreadPoolExecutor实现了一个线程池需要的各个方法，它实现了任务提交、线程管理、监控等等方法。</p>\n<p>我们还可以在它的基础上进行扩展，比如实现定时任务的类 ScheduledThreadPoolExecutor（用来在给定延时后执行异步任务或者周期性执行任务） 就继承自 ThreadPoolExecutor。</p>\n<h4 id=\"构造函数参数\"><a href=\"#构造函数参数\" class=\"headerlink\" title=\"构造函数参数\"></a>构造函数参数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ThreadPoolExecutor(int corePoolSize,</div><div class=\"line\">                          int maximumPoolSize,</div><div class=\"line\">                          long keepAliveTime,</div><div class=\"line\">                          TimeUnit unit,</div><div class=\"line\">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class=\"line\">                          ThreadFactory threadFactory,</div><div class=\"line\">                          RejectedExecutionHandler handler) &#123;</div><div class=\"line\">    if (corePoolSize &lt; 0 ||</div><div class=\"line\">        maximumPoolSize &lt;= 0 ||</div><div class=\"line\">        maximumPoolSize &lt; corePoolSize ||</div><div class=\"line\">        keepAliveTime &lt; 0)</div><div class=\"line\">        throw new IllegalArgumentException();</div><div class=\"line\">    if (workQueue == null || threadFactory == null || handler == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    this.acc = System.getSecurityManager() == null ?</div><div class=\"line\">            null :</div><div class=\"line\">            AccessController.getContext();</div><div class=\"line\">    this.corePoolSize = corePoolSize;</div><div class=\"line\">    this.maximumPoolSize = maximumPoolSize;</div><div class=\"line\">    this.workQueue = workQueue;</div><div class=\"line\">    this.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class=\"line\">    this.threadFactory = threadFactory;</div><div class=\"line\">    this.handler = handler;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们创建一个线程池参数最全的构造方法如上，这些是我们最关心的参数。</p>\n<ul>\n<li>corePoolSize 核心线程数</li>\n<li>maximumPoolSize 最大线程数</li>\n<li>keepAliveTime 空闲线程的存活时间</li>\n<li>unit 存活时间的单位</li>\n<li>workQueue 任务队列，BlockingQueue 接口的某个实现（常使用 ArrayBlockingQueue 和 LinkedBlockingQueue）。</li>\n<li>threadFactory 用于创建线程，一般都使用默认的（Executors.defaultThreadFactory()），我们可以通过它将我们的线程的名字设置得比较可读一些，如 Message-Thread-1， Message-Thread-2 类似这样。</li>\n<li>handler 拒绝策略</li>\n</ul>\n<h4 id=\"状态流转\"><a href=\"#状态流转\" class=\"headerlink\" title=\"状态流转\"></a>状态流转</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));</div><div class=\"line\">private static final int COUNT_BITS = Integer.SIZE - 3;</div><div class=\"line\">private static final int CAPACITY   = (1 &lt;&lt; COUNT_BITS) - 1;</div><div class=\"line\"></div><div class=\"line\">private static final int RUNNING    = -1 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int SHUTDOWN   =  0 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int STOP       =  1 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int TIDYING    =  2 &lt;&lt; COUNT_BITS;</div><div class=\"line\">private static final int TERMINATED =  3 &lt;&lt; COUNT_BITS;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>COUNT_BITS 设置为 29(32-3)，前三位用于存放线程状态，后29位用于存放线程数<br>CAPACITY = 2^29-1=536870911  即线程池的最大数量<br>RUNNING  111 00000000000000000000000000000 接受新的任务，处理等待队列中的任务<br>SHUTDOWN  000 00000000000000000000000000000 不接受新的任务提交，但是会继续处理等待队列中的任务<br>STOP  001 00000000000000000000000000000 不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程<br>TIDYING  010 00000000000000000000000000000 所有的任务都销毁了,线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()<br>TERMINATED  011 00000000000000000000000000000 terminated() 方法结束后，线程池的状态就会变成这个</p>\n</blockquote>\n<ul>\n<li>RUNNING -&gt; SHUTDOWN：当调用了 shutdown() 后，会发生这个状态转换，这也是最重要的</li>\n<li>(RUNNING or SHUTDOWN) -&gt; STOP：当调用 shutdownNow() 后，会发生这个状态转换，这下要清楚 shutDown() 和 shutDownNow() 的区别了</li>\n<li>SHUTDOWN -&gt; TIDYING：当任务队列和线程池都清空后，会由 SHUTDOWN 转换为 TIDYING</li>\n<li>STOP -&gt; TIDYING：当任务队列清空后，发生这个转换</li>\n<li>TIDYING -&gt; TERMINATED：这个前面说了，当 terminated() 方法结束后</li>\n</ul>\n<h4 id=\"Worker\"><a href=\"#Worker\" class=\"headerlink\" title=\"Worker\"></a>Worker</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final class Worker</div><div class=\"line\">        extends AbstractQueuedSynchronizer</div><div class=\"line\">        implements Runnable</div><div class=\"line\">&#123;</div><div class=\"line\">    private static final long serialVersionUID = 6138294804551838833L;</div><div class=\"line\"></div><div class=\"line\">    final Thread thread;</div><div class=\"line\">    Runnable firstTask;</div><div class=\"line\">    volatile long completedTasks;</div><div class=\"line\"></div><div class=\"line\">    Worker(Runnable firstTask) &#123;</div><div class=\"line\">        setState(-1); // inhibit interrupts until runWorker</div><div class=\"line\">        this.firstTask = firstTask;</div><div class=\"line\">        this.thread = getThreadFactory().newThread(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        runWorker(this);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean isHeldExclusively() &#123;</div><div class=\"line\">        return getState() != 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean tryAcquire(int unused) &#123;</div><div class=\"line\">        if (compareAndSetState(0, 1)) &#123;</div><div class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean tryRelease(int unused) &#123;</div><div class=\"line\">        setExclusiveOwnerThread(null);</div><div class=\"line\">        setState(0);</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void lock()        &#123; acquire(1); &#125;</div><div class=\"line\">    public boolean tryLock()  &#123; return tryAcquire(1); &#125;</div><div class=\"line\">    public void unlock()      &#123; release(1); &#125;</div><div class=\"line\">    public boolean isLocked() &#123; return isHeldExclusively(); &#125;</div><div class=\"line\"></div><div class=\"line\">    void interruptIfStarted() &#123;</div><div class=\"line\">        Thread t;</div><div class=\"line\">        if (getState() &gt;= 0 &amp;&amp; (t = thread) != null &amp;&amp; !t.isInterrupted()) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                t.interrupt();</div><div class=\"line\">            &#125; catch (SecurityException ignore) &#123;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Worker是线程池中的内部类，是线程池中真正执行任务的线程，Worker继承了AbstractQueuedSynchronizer（aqs）实现了Runable。<br>Worker中thread是真正的线程；firstTask是在创建线程的时候，如果同时指定了这个线程起来以后需要执行的第一个任务，那么第一个任务就是存放在这里的；completedTasks 存放了此线程完成的任务数<br>构造函数传入firstTask，也可以传 null。run方法调用了外部类的runWorker方法。其余的方法用 AQS 操作，来获取这个线程的执行权，用了独占锁。</p>\n</blockquote>\n<h5 id=\"runWorker\"><a href=\"#runWorker\" class=\"headerlink\" title=\"runWorker\"></a>runWorker</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">final void runWorker(Worker w) &#123;</div><div class=\"line\">    Thread wt = Thread.currentThread();</div><div class=\"line\">    Runnable task = w.firstTask;</div><div class=\"line\">    w.firstTask = null;</div><div class=\"line\">    w.unlock(); // allow interrupts</div><div class=\"line\">    boolean completedAbruptly = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        while (task != null || (task = getTask()) != null) &#123;</div><div class=\"line\">            w.lock();</div><div class=\"line\">            if ((runStateAtLeast(ctl.get(), STOP) ||</div><div class=\"line\">                 (Thread.interrupted() &amp;&amp;</div><div class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class=\"line\">                !wt.isInterrupted())</div><div class=\"line\">                wt.interrupt();</div><div class=\"line\">            try &#123;</div><div class=\"line\">                beforeExecute(wt, task);</div><div class=\"line\">                Throwable thrown = null;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    task.run();</div><div class=\"line\">                &#125; catch (RuntimeException x) &#123;</div><div class=\"line\">                    thrown = x; throw x;</div><div class=\"line\">                &#125; catch (Error x) &#123;</div><div class=\"line\">                    thrown = x; throw x;</div><div class=\"line\">                &#125; catch (Throwable x) &#123;</div><div class=\"line\">                    thrown = x; throw new Error(x);</div><div class=\"line\">                &#125; finally &#123;</div><div class=\"line\">                    afterExecute(task, thrown);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                task = null;</div><div class=\"line\">                w.completedTasks++;</div><div class=\"line\">                w.unlock();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        completedAbruptly = false;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        processWorkerExit(w, completedAbruptly);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这个方法由worker线程启动后调用，如果指定了该worker的firstTask，则先执行这个任务，之后通过while循环从队列中取任务。<br>首先lock，然后判断线程池状态大于等于 STOP，那么意味着该线程也要中断。<br>beforeExecute方法是一个钩子方法，留给需要的子类进行实现;然后执行任务;afterExecutey也是钩子方法，将task和异常作为参数，留给子类实现使用;最后将task置为空，准备getTask，worker的完成任数加1，释放独占锁。<br>如果能执行到最后的finally（对线程池进行关闭）有两种可能 1 getTask 返回 null，也就是说，队列中已经没有任务需要执行了，执行关闭。2 任务执行过程中发生了异常。</p>\n</blockquote>\n<h5 id=\"getTask\"><a href=\"#getTask\" class=\"headerlink\" title=\"getTask\"></a>getTask</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Runnable getTask() &#123;</div><div class=\"line\">    boolean timedOut = false; // Did the last poll() time out?</div><div class=\"line\"></div><div class=\"line\">    for (;;) &#123;</div><div class=\"line\">        int c = ctl.get();</div><div class=\"line\">        int rs = runStateOf(c);</div><div class=\"line\">        //检查状态</div><div class=\"line\">        if (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</div><div class=\"line\">            //减少工作线程的数量，返回null CAS操作</div><div class=\"line\">            decrementWorkerCount();</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        int wc = workerCountOf(c);</div><div class=\"line\">        //核心线程是否超时回收 | 线程数大于核心线程数</div><div class=\"line\">        boolean timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class=\"line\">        // 线程数大于最大线程数，因为有可能开发者调用了 setMaximumPoolSize() 将线程池的 maximumPoolSize 调小了，那么多余的 Worker 就需要被关闭</div><div class=\"line\">        // 并且 线程数 &gt; 1 获取队列为King，</div><div class=\"line\">        if ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</div><div class=\"line\">            &amp;&amp; (wc &gt; 1 || workQueue.isEmpty())) &#123;</div><div class=\"line\">            //减少线程数 返回空</div><div class=\"line\">            if (compareAndDecrementWorkerCount(c))</div><div class=\"line\">                return null;</div><div class=\"line\">            //CAS</div><div class=\"line\">            continue;</div><div class=\"line\">        &#125;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            // 到 workQueue 中获取任务</div><div class=\"line\">            Runnable r = timed ?</div><div class=\"line\">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</div><div class=\"line\">                workQueue.take();</div><div class=\"line\">            if (r != null)</div><div class=\"line\">                return r;</div><div class=\"line\">            timedOut = true;</div><div class=\"line\">        &#125; catch (InterruptedException retry) &#123;</div><div class=\"line\">            timedOut = false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>此方法有三种可能：</p>\n<ol>\n<li>阻塞直到获取到任务返回。()默认 corePoolSize 之内的线程是不会被回收的，它们会一直等待任务)</li>\n<li>超时退出。keepAliveTime 起作用的时候，也就是如果这么多时间内都没有任务，那么应该执行关闭</li>\n<li>如果发生了以下条件，此方法必须返回 null:<ul>\n<li>池中有大于 maximumPoolSize 个 workers 存在(通过调用 setMaximumPoolSize 进行设置)</li>\n<li>线程池处于 SHUTDOWN，而且 workQueue 是空的，前面说了，这种不再接受新的任务</li>\n<li>线程池处于 STOP，不仅不接受新的线程，连 workQueue 中的线程也不再执行</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<h4 id=\"execute-方法\"><a href=\"#execute-方法\" class=\"headerlink\" title=\"execute 方法\"></a>execute 方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void execute(Runnable command) &#123;</div><div class=\"line\">    if (command == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    </div><div class=\"line\">    int c = ctl.get();</div><div class=\"line\">    //当前线程数少于核心线程数，那么直接添加一个 worker 来执行任务,创建一个新的线程，并把当前任务 command 作为这个线程的第一个任务(firstTask)</div><div class=\"line\">    if (workerCountOf(c) &lt; corePoolSize) &#123;</div><div class=\"line\">        //添加任务成功，那么就结束了,返回 false 代表线程池不允许提交任务</div><div class=\"line\">        if (addWorker(command, true))</div><div class=\"line\">            return;</div><div class=\"line\">        c = ctl.get();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //如果线程池处于 RUNNING 状态，把这个任务添加到任务队列 workQueue 中</div><div class=\"line\">    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</div><div class=\"line\">        int recheck = ctl.get();</div><div class=\"line\">        //如果线程池已不处于 RUNNING 状态，那么移除已经入队的这个任务，并且执行拒绝策略</div><div class=\"line\">        if (! isRunning(recheck) &amp;&amp; remove(command))</div><div class=\"line\">            reject(command);</div><div class=\"line\">        //线程池还是 RUNNING 的，并且线程数为 0，那么开启新的线程</div><div class=\"line\">        else if (workerCountOf(recheck) == 0)</div><div class=\"line\">            addWorker(null, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">    //如果失败，说明当前线程数已经达到 maximumPoolSize，执行拒绝策略</div><div class=\"line\">    else if (!addWorker(command, false))</div><div class=\"line\">        reject(command);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>执行的流程很简单，如果当前线程数少于核心线程数直接add一个worker执行，如果大于等于核心线程数会加进任务队列等待worker执行，如果任务队列满了之后，继续添加worker执行，如果此时线程数超过最大线程数就会执行拒绝策略。</p>\n</blockquote>\n<h4 id=\"拒绝策略\"><a href=\"#拒绝策略\" class=\"headerlink\" title=\"拒绝策略\"></a>拒绝策略</h4><h5 id=\"CallerRunsPolicy\"><a href=\"#CallerRunsPolicy\" class=\"headerlink\" title=\"CallerRunsPolicy\"></a>CallerRunsPolicy</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class CallerRunsPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public CallerRunsPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">        if (!e.isShutdown()) &#123;</div><div class=\"line\">            r.run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果线程池没有被关闭，那么由提交任务的线程自己来执行这个任务。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class AbortPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public AbortPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">        throw new RejectedExecutionException(&quot;Task &quot; + r.toString() +</div><div class=\"line\">                                             &quot; rejected from &quot; +</div><div class=\"line\">                                             e.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>线程池的默认策略，直接抛出异常。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class DiscardPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public DiscardPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>不处理直接忽略。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static class DiscardOldestPolicy implements RejectedExecutionHandler &#123;</div><div class=\"line\">    public DiscardOldestPolicy() &#123; &#125;</div><div class=\"line\">    public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</div><div class=\"line\">        if (!e.isShutdown()) &#123;</div><div class=\"line\">            e.getQueue().poll();</div><div class=\"line\">            e.execute(r);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把队列队头的任务干掉，然后提交这个任务。</p>\n</blockquote>\n"},{"title":"aqs源码","date":"2019-11-18T13:33:08.000Z","comments":0,"keywords":["java","aqs","AbstractQueuedSynchronizer","锁","同步"],"_content":"\n## aqs\n\nAQS（AbstractQueuedSynchronizer）是JAVA中众多锁以及并发工具的基础，其底层采用乐观锁，大量使用了CAS操作， 并且在冲突时，采用自旋方式重试，以实现轻量级和高效地获取锁。\n\nAQS虽然被定义为抽象类，但事实上它并不包含任何抽象方法。AQS是被设计为支持多种用途，如果定义抽象方法，子类在继承的时候就需要实现所有抽象方法，所以AQS将需要子类覆盖的方法都设计为protect方法，默认抛出UnsupportedOperationException异常。如果子类用到这些方法就必须重写，否则会抛出异常，如果没有用到则不需要做任何操作。\n\nAbstractQueuedSynchronizer只继承了AbstractOwnableSynchronizer，实现了java.io.Serializable接口。\n\n> AbstractOwnableSynchronizer类是一种同步器，这个类仅有set和get独占线程资源。\n> ```\n> public abstract class AbstractOwnableSynchronizer\n>      implements java.io.Serializable {\n>  \n>      private static final long serialVersionUID = 3737899427754241961L;\n>  \n>      protected AbstractOwnableSynchronizer() { }\n>\n>      private transient Thread exclusiveOwnerThread;\n> \n>      protected final void setExclusiveOwnerThread(Thread t) {\n>          exclusiveOwnerThread = t;\n>      }\n>\n>      protected final Thread getExclusiveOwnerThread() {\n>          return exclusiveOwnerThread;\n>      }\n>  }\n> ```\n> exclusiveOwnerThread 即独占资源的线程。\n\n### AQS原理\n\nAQS维护了一个state变量和node双向链表。\n\nstate是已获取资源占有许可的数量。例如线程调用acquire(1)获取资源的许可，acquire会调用一次tryAcquire(1)获取资源。如果获取成功，则state加1并且调用父类的设置独占线程将当前线程设置为独占线程。如果获取失败，则说明已经有线程占用了这个资源，需要等待占用释放。此时将该线程封装成node节点，加入双向链表，之后Locksupport.pack()堵塞当前线程。如果这个线程被唤醒则继续循环调用tryAcquire获取许可，如果获取到了将自己的node节点设置为链表的头结点并把之前的头结点去掉。如果线程释放资源，调用release方法，release方法会调用tryRelease方法尝试释放资源,如果释放成功，则state减1，再调用AQS的父类AbstractOwnableSynchronizer的设置独占线程为null，再locksupport.unpack()双向node链表的头node节点的线程，恢复其执行。\n\n### 源码\n\n#### 成员变量\n\n```\nprivate transient volatile Node head;\n\nprivate transient volatile Node tail;\n\nprivate volatile int state;\n\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();\n\nprivate static final long stateOffset;\nprivate static final long headOffset;\nprivate static final long tailOffset;\nprivate static final long waitStatusOffset;\nprivate static final long nextOffset;\n\nstatic {\n    try {\n        stateOffset = unsafe.objectFieldOffset\n            (AbstractQueuedSynchronizer.class.getDeclaredField(\"state\"));\n        headOffset = unsafe.objectFieldOffset\n            (AbstractQueuedSynchronizer.class.getDeclaredField(\"head\"));\n        tailOffset = unsafe.objectFieldOffset\n            (AbstractQueuedSynchronizer.class.getDeclaredField(\"tail\"));\n        waitStatusOffset = unsafe.objectFieldOffset\n            (Node.class.getDeclaredField(\"waitStatus\"));\n        nextOffset = unsafe.objectFieldOffset\n            (Node.class.getDeclaredField(\"next\"));\n\n    } catch (Exception ex) { throw new Error(ex); }\n}\n```\n\n有一个头尾节点和state变量，实现CAS的Unsafe的工具类，还有一些偏移量，都用于Unsafe的CAS操作，通过静态代码块进行初始化，通过objectFieldOffset获取对应字段相对于该对象的起始地址的偏移量。\n\n#### Node节点\n\n```\nstatic final class Node {\n    //共享模式\n    static final Node SHARED = new Node();\n    //独占模式\n    static final Node EXCLUSIVE = null;\n    //当线程等待超时或者被中断，则取消等待\n    static final int CANCELLED =  1;\n    //后继节点处于等待状态，当前节点（为-1）被取消或者中断时会通知后继节点，使后继节点的线程得以运行\n    static final int SIGNAL    = -1;\n    //当前节点处于等待队列，节点线程等待在Condition上，当其他线程对condition执行signall方法时，等待队列转移到同步队列，加入到对同步状态的获取。\n    static final int CONDITION = -2;\n    //与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。\n    static final int PROPAGATE = -3;\n    //状态\n    volatile int waitStatus;\n    //上一个节点\n    volatile Node prev;\n    //下一个节点\n    volatile Node next;\n    //节点所代表的线程\n    volatile Thread thread;\n    //Node既可以作为同步队列节点使用，也可以作为Condition的等待队列节点使用\n    Node nextWaiter;\n\n    final boolean isShared() {\n        return nextWaiter == SHARED;\n    }\n\n    final Node predecessor() throws NullPointerException {\n        Node p = prev;\n        if (p == null)\n            throw new NullPointerException();\n        else\n            return p;\n    }\n\n    Node() {    // Used to establish initial head or SHARED marker\n    }\n\n    Node(Thread thread, Node mode) {     // Used by addWaiter\n        this.nextWaiter = mode;\n        this.thread = thread;\n    }\n\n    Node(Thread thread, int waitStatus) { // Used by Condition\n        this.waitStatus = waitStatus;\n        this.thread = thread;\n    }\n}\n```\n\n#### enq方法\n\n```\nprivate Node enq(final Node node) {\n   for (;;) {\n       Node t = tail;\n       if (t == null) { // Must initialize\n           if (compareAndSetHead(new Node()))\n               tail = head;\n       } else {\n           node.prev = t;\n           if (compareAndSetTail(t, node)) {\n               t.next = node;\n               return t;\n           }\n       }\n   }\n}\n```\n\nenq方法是将node加入链表，如果tail尾节点为空则必须进行初始化，如果tail不为空，则将node的前指针指向tail，通过CAS将tail的指向改为node，然后设置t.next为node，完成node插入链表尾部。\n\n#### addWaiter方法\n\n```\nprivate Node addWaiter(Node mode) {\n    Node node = new Node(Thread.currentThread(), mode);\n    // Try the fast path of enq; backup to full enq on failure\n    Node pred = tail;\n    if (pred != null) {\n        node.prev = pred;\n        if (compareAndSetTail(pred, node)) {\n            pred.next = node;\n            return node;\n        }\n    }\n    enq(node);\n    return node;\n}\n```\naddWaiter方法包装node节点，放入node双向链表。如果tail不为空则说明初始化过了直接将node加入链表尾部，如果为空则进行初始化再将node加入链表尾部。\n\n#### 共享模式\n\n##### acquireShared（获取锁）\n\n```\npublic final void acquireShared(int arg) {\n    if (tryAcquireShared(arg) < 0)\n        doAcquireShared(arg);\n}\n```\n\n尝试去获取资源，如果没有获取资源返回负数，tryAcquireShared方法需要子类自己去实现，如果不实现会直接抛异常（在读写锁的Sync实现）；如果没有获取到资源加入等待队列等待获取资源。\n\n##### doAcquireShared\n\n```\nprivate void doAcquireShared(int arg) {\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            //找先驱结点\n            final Node p = node.predecessor();\n            if (p == head) {\n                //尝试获取资源\n                int r = tryAcquireShared(arg);\n                if (r >= 0) {\n                    //获取锁之后，设置当前节点为头节点，去唤醒\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    //如果是因为中断醒来则设置中断标记位\n                    if (interrupted)\n                        selfInterrupt();\n                    failed = false;\n                    return;\n                }\n            }\n            //挂起\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        // 获取锁失败\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\n先吧当前节点加入到队列尾部，然后进入自旋，自旋的目的是为了获取资源或者阻塞，如果此节点的前一个node是head节点，就去获取资源，如果获取失败就执行shouldParkAfterFailedAcquire，将前一个node设置为SIGNAL，获取成功就setHeadAndPropagate。\n\n###### setHeadAndPropagate\n\n```\n//两个入参，一个是当前成功获取共享锁的节点，一个就是tryAcquireShared方法的返回值，它可能大于0也可能等于0\nprivate void setHeadAndPropagate(Node node, int propagate) {\n    Node h = head; // Record old head for check below\n    //设置新的头节点\n    setHead(node);\n    //propagate > 0 代表还有资源，还可以继续唤醒  | h.waitStatus 是 -1 or -3\n    if (propagate > 0 || h == null || h.waitStatus < 0) {\n        Node s = node.next;\n        //如果当前节点的后继节点是共享类型获取没有后继节点，则进行唤醒\n        if (s == null || s.isShared())\n            doReleaseShared();\n    }\n}\n```\n\n> 会唤醒后面的所有节点\n\n###### doReleaseShared（唤醒）\n```\nprivate void doReleaseShared() {\n    for (;;) {\n        //从头结点开始 head已是上面设置的head节点\n        Node h = head;\n        if (h != null && h != tail) {\n            int ws = h.waitStatus;\n            //表示需要唤醒（-1）\n            if (ws == Node.SIGNAL) {\n                //CAS 将状态置为0\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                    continue;            // loop to recheck cases\n                //唤醒\n                unparkSuccessor(h);\n            }\n            //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去\n            else if (ws == 0 &&\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;                // loop on failed CAS\n        }\n        //如果头结点没有发生变化，表示设置完成，退出循环\n        //如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试\n        if (h == head)                   // loop if head changed\n            break;\n    }\n}\n```\n\n###### unparkSuccessor方法\n\n```\n private void unparkSuccessor(Node node) {\n    int ws = node.waitStatus;\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n\n    Node s = node.next;\n    //next 节点为空 或者状态为取消\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        //从后向前找\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        LockSupport.unpark(s.thread);\n}\n```\n\n用unpark()唤醒等待队列中最前边的那个未放弃线程，node的waitStatus为signal或condition，则可以唤醒，先重置node的waitStatus为0（允许失败），找到下一个需要唤醒的节点唤醒。\n\n> 从后往前找是因为下一个任务有可能被取消了，节点就有可能为null\n\n###### shouldParkAfterFailedAcquire\n\n```\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL)\n        return true;\n    if (ws > 0) {\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n\n> 主要是进行的状态的检查，如果前一个节点的状态是-1则返回true；如果前一个节点取消了，那就向前找到一个没有被取消的节点，将取消的节点舍弃，如果前一个节点没有被取消则将节点状态设置为-1.\n\n##### releaseShared（ 释放锁）\n\n```\npublic final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {\n            doReleaseShared();\n        return true;\n    }\n    return false;\n}\n```\n\n#### 独占模式\n\n##### acquire（获取锁）\n```\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        selfInterrupt();\n}\n```\n首先也是尝试获取资源，如果获取到资源则直接返回了，如果没有获取到资源则执行acquireQueued(addWaiter(Node.EXCLUSIVE), arg)，将该线程加入队列节点尾部。\n\n##### acquireQueued\n```\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            final Node p = node.predecessor();\n            if (p == head && tryAcquire(arg)) {\n                setHead(node);\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;\n            }\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\n和共享模式类似，先获取该节点的前一个节点，如果前一个节点是头结点就尝试获取资源。如果获取到资源则把这个接地点设为头节点 直接返回了；如果没有获取到资源则进入阻塞挂起。\n\n> 挂起逻辑同上。\n\n##### cancelAcquire\n\n```\nprivate void cancelAcquire(Node node) {\n    //如果节点不存在直接返回\n    if (node == null)\n        return;\n    node.thread = null;\n\n    Node pred = node.prev;\n    //跳过前面已经取消的前置节点\n    while (pred.waitStatus > 0)\n        node.prev = pred = pred.prev;\n    Node predNext = pred.next;\n    //将node的状态设置为1 其他节点在处理时就可以跳过\n    node.waitStatus = Node.CANCELLED;\n    //如果是尾节点直接删除返回\n    if (node == tail && compareAndSetTail(node, pred)) {\n        compareAndSetNext(pred, predNext, null);\n    } else {\n        int ws;\n        //否则当前节点的前置节点不是头节点且它后面的节点等待它唤醒\n        if (pred != head &&\n            ((ws = pred.waitStatus) == Node.SIGNAL ||\n             (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n            pred.thread != null) {\n            Node next = node.next;\n            if (next != null && next.waitStatus <= 0)\n                //删除该node\n                compareAndSetNext(pred, predNext, next);\n        } else {\n            //要么当前节点的前置节点是头结点,直接唤醒当前节点的后继节点\n            unparkSuccessor(node);\n        }\n        node.next = node; // help GC\n    }\n}\n```\n\n获取锁资源失败的处理，即自己实现的获取资源的逻辑出异常的时候会进入到这里。（共享模式同这里的）\n\n##### release（释放锁）\n\n```\npublic final boolean release(int arg) {\n    if (tryRelease(arg)) {\n        Node h = head;\n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n\nprivate void unparkSuccessor(Node node) {\n    int ws = node.waitStatus;\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n\n    Node s = node.next;\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        LockSupport.unpark(s.thread);\n}\n```\n\n#### 条件队列(ConditionObject)\n\n使用场景\n```\n//首先创建一个可重入锁，它本质是独占锁\nprivate final ReentrantLock takeLock = new ReentrantLock();\n//创建该锁上的条件队列\nprivate final Condition notEmpty = takeLock.newCondition();\n//使用过程\npublic E take() throws InterruptedException {\n    //首先进行加锁\n    takeLock.lockInterruptibly();\n    try {\n        //如果队列是空的，则进行等待\n        notEmpty.await();\n        //取元素的操作...\n        \n        //如果有剩余，则唤醒等待元素的线程\n        notEmpty.signal();\n    } finally {\n        //释放锁\n        takeLock.unlock();\n    }\n    //取完元素以后唤醒等待放入元素的线程\n}\n```\n\nCondition一般都是配合一个显式锁Lock一起使用，Lock接口的方法中有一个newCondition()方法用于生成Condition对象。\n通过ReentrantLock的lock方法，如果获取不到锁当前线程会进入AQS队列阻塞；被唤醒后继续获取锁，如果获取到锁，移出AQS队列，继续执行；遇到Condition的await方法，加入“条件队列”，阻塞线程；被其他线程的signal方法唤醒，从“条件队列”中删除，并加入到AQS队列，如果获取到锁就继续执行。可以看到上述操作，线程节点（Node）其实在两个队列之间切换，由于“条件队列”在被唤醒时 都是从头开始遍历，所以只需要使用单向链表实现即可。\n\n```\npublic interface Condition {\n\n    void await() throws InterruptedException;\n\n    void awaitUninterruptibly();\n\n    long awaitNanos(long nanosTimeout) throws InterruptedException;\n\n    boolean await(long time, TimeUnit unit) throws InterruptedException;\n\n    boolean awaitUntil(Date deadline) throws InterruptedException;\n\n    void signal();\n\n    void signalAll();\n}\n```\n\nConditionObject 实现了 Condition接口，Condition接口中一个有7个接口：\n\n- await : 使用这个锁必须放在一个显式锁的lock和unlock之间，调用该方法后当前线程会释放锁并被阻塞，直到其他线程通过调用同一个Condition对象的signal或者signalAll方法或被中断，再次被唤醒。（可被中断）\n- awaitUninterruptibly : 此方式是不可被中断的，只能通过其他线程调用同一个Condition对象的signal或者signalAll方法，才能被唤醒。（不响应中断）\n- awaitNanos : 等待纳秒时间\n- await(long time, TimeUnit unit) : 等待一个指定时间\n- awaitUntil : 等待直到一个截止时间\n- signal : 唤醒等待队列中的第一个节点\n- signalAll : 唤醒等待队列中的所有节点\n\n##### await \n\n```\npublic final void await() throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    //加入条件队列\n    Node node = addConditionWaiter();\n    //释放当前线程占用的排它锁  \n    int savedState = fullyRelease(node);\n    int interruptMode = 0;\n    //节点不在AQS的阻塞队列中\n    while (!isOnSyncQueue(node)) {\n        //阻塞该线程\n        LockSupport.park(this);\n        //判断中断标记在阻塞等待期间 是否改变  \n        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n            break;\n    }\n    //当被唤醒后，该线程会尝试去获取锁，只有获取到了才会从await()方法返回，否则的话，会挂起自己\n    if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n        interruptMode = REINTERRUPT;\n    if (node.nextWaiter != null) // clean up if cancelled\n        //清理取消节点对应的线程 \n        unlinkCancelledWaiters();\n    if (interruptMode != 0)\n        //抛出中断异常，或者重新进入中断  \n        reportInterruptAfterWait(interruptMode);\n}\n```\n\n先将该节点加入到条件队列，然后释放掉当前的锁，如果该节点不在AQS的阻塞队列中就阻塞该线程，等待signal；被唤醒后该线程会尝试去获取锁\n\n##### signal\n\n```\npublic final void signal() {\n    if (!isHeldExclusively())\n        throw new IllegalMonitorStateException();\n    //第一个节点\n    Node first = firstWaiter;\n    if (first != null)\n        doSignal(first);\n}\n\nprivate void doSignal(Node first) {\n    do {\n        //firstWaiter 下一个节点\n        if ( (firstWaiter = first.nextWaiter) == null)\n            lastWaiter = null;\n        first.nextWaiter = null;\n    } while (!transferForSignal(first) &&\n             (first = firstWaiter) != null);\n}\n\nfinal boolean transferForSignal(Node node) {\n    //改变线程状态\n    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))\n        return false;\n    //加入AQS阻塞队列\n    Node p = enq(node);\n    int ws = p.waitStatus;\n    //唤醒\n    if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))\n        LockSupport.unpark(node.thread);\n    return true;\n}\n```\n\n将条件队列的第一个节点移除，加入到AQS的阻塞队列中。\n\n##### signalAll\n\n```\npublic final void signalAll() {\n    if (!isHeldExclusively())\n        throw new IllegalMonitorStateException();\n    Node first = firstWaiter;\n    if (first != null)\n        doSignalAll(first);\n}\n\nprivate void doSignalAll(Node first) {\n    lastWaiter = firstWaiter = null;\n    do {\n        Node next = first.nextWaiter;\n        first.nextWaiter = null;\n        transferForSignal(first);\n        first = next;\n    } while (first != null);\n}\n```\n\nsignalAll 会遍历全部节点唤醒加入到AQS阻塞队列。\n\n#### 条件队列与同步队列\n\n1.同步队列依赖一个双向链表来完成同步状态的管理，当前线程获取同步状态失败 后，同步器会将线程构建成一个节点，并将其加入同步队列中。\n2.通过signal或signalAll将条件队列中的节点转移到同步队列。（由条件队列转化为同步队列）\n\n![condition](../../../../uploads/javasource/util/aqs1.png)\n\n条件队列节点来源：\n\n1. 调用await方法阻塞线程；\n2. 当前线程存在于同步队列的头结点，调用await方法进行阻塞（从同步队列转化到条件队列）\n\n例如：\n\n1. 假设初始状态如下，节点A、节点B在同步队列中。\n\n![condition](../../../../uploads/javasource/util/aqs2.png)\n\n2. 节点A的线程获取锁权限，此时调用await方法。节点A从同步队列移除， 并加入条件队列中。\n\n![condition](../../../../uploads/javasource/util/aqs3.png)\n\n3. 调用 signal方法，从条件队列中取出第一个节点，并加入同步队列中，等待获取资源\n\n![condition](../../../../uploads/javasource/util/aqs4.png)\n\n","source":"_posts/javasource/util/3_AbstractQueuedSynchronizer.md","raw":"---\ntitle: aqs源码 \ndate: 2019-11-18 21:33:08\ncomments: false\ntags: \n- java\n- aqs\n- AbstractQueuedSynchronizer\n- 锁\n- 同步\ncategories: \n- java\nkeywords: \n- java\n- aqs\n- AbstractQueuedSynchronizer\n- 锁\n- 同步\n---\n\n## aqs\n\nAQS（AbstractQueuedSynchronizer）是JAVA中众多锁以及并发工具的基础，其底层采用乐观锁，大量使用了CAS操作， 并且在冲突时，采用自旋方式重试，以实现轻量级和高效地获取锁。\n\nAQS虽然被定义为抽象类，但事实上它并不包含任何抽象方法。AQS是被设计为支持多种用途，如果定义抽象方法，子类在继承的时候就需要实现所有抽象方法，所以AQS将需要子类覆盖的方法都设计为protect方法，默认抛出UnsupportedOperationException异常。如果子类用到这些方法就必须重写，否则会抛出异常，如果没有用到则不需要做任何操作。\n\nAbstractQueuedSynchronizer只继承了AbstractOwnableSynchronizer，实现了java.io.Serializable接口。\n\n> AbstractOwnableSynchronizer类是一种同步器，这个类仅有set和get独占线程资源。\n> ```\n> public abstract class AbstractOwnableSynchronizer\n>      implements java.io.Serializable {\n>  \n>      private static final long serialVersionUID = 3737899427754241961L;\n>  \n>      protected AbstractOwnableSynchronizer() { }\n>\n>      private transient Thread exclusiveOwnerThread;\n> \n>      protected final void setExclusiveOwnerThread(Thread t) {\n>          exclusiveOwnerThread = t;\n>      }\n>\n>      protected final Thread getExclusiveOwnerThread() {\n>          return exclusiveOwnerThread;\n>      }\n>  }\n> ```\n> exclusiveOwnerThread 即独占资源的线程。\n\n### AQS原理\n\nAQS维护了一个state变量和node双向链表。\n\nstate是已获取资源占有许可的数量。例如线程调用acquire(1)获取资源的许可，acquire会调用一次tryAcquire(1)获取资源。如果获取成功，则state加1并且调用父类的设置独占线程将当前线程设置为独占线程。如果获取失败，则说明已经有线程占用了这个资源，需要等待占用释放。此时将该线程封装成node节点，加入双向链表，之后Locksupport.pack()堵塞当前线程。如果这个线程被唤醒则继续循环调用tryAcquire获取许可，如果获取到了将自己的node节点设置为链表的头结点并把之前的头结点去掉。如果线程释放资源，调用release方法，release方法会调用tryRelease方法尝试释放资源,如果释放成功，则state减1，再调用AQS的父类AbstractOwnableSynchronizer的设置独占线程为null，再locksupport.unpack()双向node链表的头node节点的线程，恢复其执行。\n\n### 源码\n\n#### 成员变量\n\n```\nprivate transient volatile Node head;\n\nprivate transient volatile Node tail;\n\nprivate volatile int state;\n\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();\n\nprivate static final long stateOffset;\nprivate static final long headOffset;\nprivate static final long tailOffset;\nprivate static final long waitStatusOffset;\nprivate static final long nextOffset;\n\nstatic {\n    try {\n        stateOffset = unsafe.objectFieldOffset\n            (AbstractQueuedSynchronizer.class.getDeclaredField(\"state\"));\n        headOffset = unsafe.objectFieldOffset\n            (AbstractQueuedSynchronizer.class.getDeclaredField(\"head\"));\n        tailOffset = unsafe.objectFieldOffset\n            (AbstractQueuedSynchronizer.class.getDeclaredField(\"tail\"));\n        waitStatusOffset = unsafe.objectFieldOffset\n            (Node.class.getDeclaredField(\"waitStatus\"));\n        nextOffset = unsafe.objectFieldOffset\n            (Node.class.getDeclaredField(\"next\"));\n\n    } catch (Exception ex) { throw new Error(ex); }\n}\n```\n\n有一个头尾节点和state变量，实现CAS的Unsafe的工具类，还有一些偏移量，都用于Unsafe的CAS操作，通过静态代码块进行初始化，通过objectFieldOffset获取对应字段相对于该对象的起始地址的偏移量。\n\n#### Node节点\n\n```\nstatic final class Node {\n    //共享模式\n    static final Node SHARED = new Node();\n    //独占模式\n    static final Node EXCLUSIVE = null;\n    //当线程等待超时或者被中断，则取消等待\n    static final int CANCELLED =  1;\n    //后继节点处于等待状态，当前节点（为-1）被取消或者中断时会通知后继节点，使后继节点的线程得以运行\n    static final int SIGNAL    = -1;\n    //当前节点处于等待队列，节点线程等待在Condition上，当其他线程对condition执行signall方法时，等待队列转移到同步队列，加入到对同步状态的获取。\n    static final int CONDITION = -2;\n    //与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。\n    static final int PROPAGATE = -3;\n    //状态\n    volatile int waitStatus;\n    //上一个节点\n    volatile Node prev;\n    //下一个节点\n    volatile Node next;\n    //节点所代表的线程\n    volatile Thread thread;\n    //Node既可以作为同步队列节点使用，也可以作为Condition的等待队列节点使用\n    Node nextWaiter;\n\n    final boolean isShared() {\n        return nextWaiter == SHARED;\n    }\n\n    final Node predecessor() throws NullPointerException {\n        Node p = prev;\n        if (p == null)\n            throw new NullPointerException();\n        else\n            return p;\n    }\n\n    Node() {    // Used to establish initial head or SHARED marker\n    }\n\n    Node(Thread thread, Node mode) {     // Used by addWaiter\n        this.nextWaiter = mode;\n        this.thread = thread;\n    }\n\n    Node(Thread thread, int waitStatus) { // Used by Condition\n        this.waitStatus = waitStatus;\n        this.thread = thread;\n    }\n}\n```\n\n#### enq方法\n\n```\nprivate Node enq(final Node node) {\n   for (;;) {\n       Node t = tail;\n       if (t == null) { // Must initialize\n           if (compareAndSetHead(new Node()))\n               tail = head;\n       } else {\n           node.prev = t;\n           if (compareAndSetTail(t, node)) {\n               t.next = node;\n               return t;\n           }\n       }\n   }\n}\n```\n\nenq方法是将node加入链表，如果tail尾节点为空则必须进行初始化，如果tail不为空，则将node的前指针指向tail，通过CAS将tail的指向改为node，然后设置t.next为node，完成node插入链表尾部。\n\n#### addWaiter方法\n\n```\nprivate Node addWaiter(Node mode) {\n    Node node = new Node(Thread.currentThread(), mode);\n    // Try the fast path of enq; backup to full enq on failure\n    Node pred = tail;\n    if (pred != null) {\n        node.prev = pred;\n        if (compareAndSetTail(pred, node)) {\n            pred.next = node;\n            return node;\n        }\n    }\n    enq(node);\n    return node;\n}\n```\naddWaiter方法包装node节点，放入node双向链表。如果tail不为空则说明初始化过了直接将node加入链表尾部，如果为空则进行初始化再将node加入链表尾部。\n\n#### 共享模式\n\n##### acquireShared（获取锁）\n\n```\npublic final void acquireShared(int arg) {\n    if (tryAcquireShared(arg) < 0)\n        doAcquireShared(arg);\n}\n```\n\n尝试去获取资源，如果没有获取资源返回负数，tryAcquireShared方法需要子类自己去实现，如果不实现会直接抛异常（在读写锁的Sync实现）；如果没有获取到资源加入等待队列等待获取资源。\n\n##### doAcquireShared\n\n```\nprivate void doAcquireShared(int arg) {\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            //找先驱结点\n            final Node p = node.predecessor();\n            if (p == head) {\n                //尝试获取资源\n                int r = tryAcquireShared(arg);\n                if (r >= 0) {\n                    //获取锁之后，设置当前节点为头节点，去唤醒\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    //如果是因为中断醒来则设置中断标记位\n                    if (interrupted)\n                        selfInterrupt();\n                    failed = false;\n                    return;\n                }\n            }\n            //挂起\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        // 获取锁失败\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\n先吧当前节点加入到队列尾部，然后进入自旋，自旋的目的是为了获取资源或者阻塞，如果此节点的前一个node是head节点，就去获取资源，如果获取失败就执行shouldParkAfterFailedAcquire，将前一个node设置为SIGNAL，获取成功就setHeadAndPropagate。\n\n###### setHeadAndPropagate\n\n```\n//两个入参，一个是当前成功获取共享锁的节点，一个就是tryAcquireShared方法的返回值，它可能大于0也可能等于0\nprivate void setHeadAndPropagate(Node node, int propagate) {\n    Node h = head; // Record old head for check below\n    //设置新的头节点\n    setHead(node);\n    //propagate > 0 代表还有资源，还可以继续唤醒  | h.waitStatus 是 -1 or -3\n    if (propagate > 0 || h == null || h.waitStatus < 0) {\n        Node s = node.next;\n        //如果当前节点的后继节点是共享类型获取没有后继节点，则进行唤醒\n        if (s == null || s.isShared())\n            doReleaseShared();\n    }\n}\n```\n\n> 会唤醒后面的所有节点\n\n###### doReleaseShared（唤醒）\n```\nprivate void doReleaseShared() {\n    for (;;) {\n        //从头结点开始 head已是上面设置的head节点\n        Node h = head;\n        if (h != null && h != tail) {\n            int ws = h.waitStatus;\n            //表示需要唤醒（-1）\n            if (ws == Node.SIGNAL) {\n                //CAS 将状态置为0\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))\n                    continue;            // loop to recheck cases\n                //唤醒\n                unparkSuccessor(h);\n            }\n            //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去\n            else if (ws == 0 &&\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;                // loop on failed CAS\n        }\n        //如果头结点没有发生变化，表示设置完成，退出循环\n        //如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试\n        if (h == head)                   // loop if head changed\n            break;\n    }\n}\n```\n\n###### unparkSuccessor方法\n\n```\n private void unparkSuccessor(Node node) {\n    int ws = node.waitStatus;\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n\n    Node s = node.next;\n    //next 节点为空 或者状态为取消\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        //从后向前找\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        LockSupport.unpark(s.thread);\n}\n```\n\n用unpark()唤醒等待队列中最前边的那个未放弃线程，node的waitStatus为signal或condition，则可以唤醒，先重置node的waitStatus为0（允许失败），找到下一个需要唤醒的节点唤醒。\n\n> 从后往前找是因为下一个任务有可能被取消了，节点就有可能为null\n\n###### shouldParkAfterFailedAcquire\n\n```\nprivate static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    int ws = pred.waitStatus;\n    if (ws == Node.SIGNAL)\n        return true;\n    if (ws > 0) {\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n```\n\n> 主要是进行的状态的检查，如果前一个节点的状态是-1则返回true；如果前一个节点取消了，那就向前找到一个没有被取消的节点，将取消的节点舍弃，如果前一个节点没有被取消则将节点状态设置为-1.\n\n##### releaseShared（ 释放锁）\n\n```\npublic final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {\n            doReleaseShared();\n        return true;\n    }\n    return false;\n}\n```\n\n#### 独占模式\n\n##### acquire（获取锁）\n```\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        selfInterrupt();\n}\n```\n首先也是尝试获取资源，如果获取到资源则直接返回了，如果没有获取到资源则执行acquireQueued(addWaiter(Node.EXCLUSIVE), arg)，将该线程加入队列节点尾部。\n\n##### acquireQueued\n```\nfinal boolean acquireQueued(final Node node, int arg) {\n    boolean failed = true;\n    try {\n        boolean interrupted = false;\n        for (;;) {\n            final Node p = node.predecessor();\n            if (p == head && tryAcquire(arg)) {\n                setHead(node);\n                p.next = null; // help GC\n                failed = false;\n                return interrupted;\n            }\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\n和共享模式类似，先获取该节点的前一个节点，如果前一个节点是头结点就尝试获取资源。如果获取到资源则把这个接地点设为头节点 直接返回了；如果没有获取到资源则进入阻塞挂起。\n\n> 挂起逻辑同上。\n\n##### cancelAcquire\n\n```\nprivate void cancelAcquire(Node node) {\n    //如果节点不存在直接返回\n    if (node == null)\n        return;\n    node.thread = null;\n\n    Node pred = node.prev;\n    //跳过前面已经取消的前置节点\n    while (pred.waitStatus > 0)\n        node.prev = pred = pred.prev;\n    Node predNext = pred.next;\n    //将node的状态设置为1 其他节点在处理时就可以跳过\n    node.waitStatus = Node.CANCELLED;\n    //如果是尾节点直接删除返回\n    if (node == tail && compareAndSetTail(node, pred)) {\n        compareAndSetNext(pred, predNext, null);\n    } else {\n        int ws;\n        //否则当前节点的前置节点不是头节点且它后面的节点等待它唤醒\n        if (pred != head &&\n            ((ws = pred.waitStatus) == Node.SIGNAL ||\n             (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n            pred.thread != null) {\n            Node next = node.next;\n            if (next != null && next.waitStatus <= 0)\n                //删除该node\n                compareAndSetNext(pred, predNext, next);\n        } else {\n            //要么当前节点的前置节点是头结点,直接唤醒当前节点的后继节点\n            unparkSuccessor(node);\n        }\n        node.next = node; // help GC\n    }\n}\n```\n\n获取锁资源失败的处理，即自己实现的获取资源的逻辑出异常的时候会进入到这里。（共享模式同这里的）\n\n##### release（释放锁）\n\n```\npublic final boolean release(int arg) {\n    if (tryRelease(arg)) {\n        Node h = head;\n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n\nprivate void unparkSuccessor(Node node) {\n    int ws = node.waitStatus;\n    if (ws < 0)\n        compareAndSetWaitStatus(node, ws, 0);\n\n    Node s = node.next;\n    if (s == null || s.waitStatus > 0) {\n        s = null;\n        for (Node t = tail; t != null && t != node; t = t.prev)\n            if (t.waitStatus <= 0)\n                s = t;\n    }\n    if (s != null)\n        LockSupport.unpark(s.thread);\n}\n```\n\n#### 条件队列(ConditionObject)\n\n使用场景\n```\n//首先创建一个可重入锁，它本质是独占锁\nprivate final ReentrantLock takeLock = new ReentrantLock();\n//创建该锁上的条件队列\nprivate final Condition notEmpty = takeLock.newCondition();\n//使用过程\npublic E take() throws InterruptedException {\n    //首先进行加锁\n    takeLock.lockInterruptibly();\n    try {\n        //如果队列是空的，则进行等待\n        notEmpty.await();\n        //取元素的操作...\n        \n        //如果有剩余，则唤醒等待元素的线程\n        notEmpty.signal();\n    } finally {\n        //释放锁\n        takeLock.unlock();\n    }\n    //取完元素以后唤醒等待放入元素的线程\n}\n```\n\nCondition一般都是配合一个显式锁Lock一起使用，Lock接口的方法中有一个newCondition()方法用于生成Condition对象。\n通过ReentrantLock的lock方法，如果获取不到锁当前线程会进入AQS队列阻塞；被唤醒后继续获取锁，如果获取到锁，移出AQS队列，继续执行；遇到Condition的await方法，加入“条件队列”，阻塞线程；被其他线程的signal方法唤醒，从“条件队列”中删除，并加入到AQS队列，如果获取到锁就继续执行。可以看到上述操作，线程节点（Node）其实在两个队列之间切换，由于“条件队列”在被唤醒时 都是从头开始遍历，所以只需要使用单向链表实现即可。\n\n```\npublic interface Condition {\n\n    void await() throws InterruptedException;\n\n    void awaitUninterruptibly();\n\n    long awaitNanos(long nanosTimeout) throws InterruptedException;\n\n    boolean await(long time, TimeUnit unit) throws InterruptedException;\n\n    boolean awaitUntil(Date deadline) throws InterruptedException;\n\n    void signal();\n\n    void signalAll();\n}\n```\n\nConditionObject 实现了 Condition接口，Condition接口中一个有7个接口：\n\n- await : 使用这个锁必须放在一个显式锁的lock和unlock之间，调用该方法后当前线程会释放锁并被阻塞，直到其他线程通过调用同一个Condition对象的signal或者signalAll方法或被中断，再次被唤醒。（可被中断）\n- awaitUninterruptibly : 此方式是不可被中断的，只能通过其他线程调用同一个Condition对象的signal或者signalAll方法，才能被唤醒。（不响应中断）\n- awaitNanos : 等待纳秒时间\n- await(long time, TimeUnit unit) : 等待一个指定时间\n- awaitUntil : 等待直到一个截止时间\n- signal : 唤醒等待队列中的第一个节点\n- signalAll : 唤醒等待队列中的所有节点\n\n##### await \n\n```\npublic final void await() throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    //加入条件队列\n    Node node = addConditionWaiter();\n    //释放当前线程占用的排它锁  \n    int savedState = fullyRelease(node);\n    int interruptMode = 0;\n    //节点不在AQS的阻塞队列中\n    while (!isOnSyncQueue(node)) {\n        //阻塞该线程\n        LockSupport.park(this);\n        //判断中断标记在阻塞等待期间 是否改变  \n        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n            break;\n    }\n    //当被唤醒后，该线程会尝试去获取锁，只有获取到了才会从await()方法返回，否则的话，会挂起自己\n    if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n        interruptMode = REINTERRUPT;\n    if (node.nextWaiter != null) // clean up if cancelled\n        //清理取消节点对应的线程 \n        unlinkCancelledWaiters();\n    if (interruptMode != 0)\n        //抛出中断异常，或者重新进入中断  \n        reportInterruptAfterWait(interruptMode);\n}\n```\n\n先将该节点加入到条件队列，然后释放掉当前的锁，如果该节点不在AQS的阻塞队列中就阻塞该线程，等待signal；被唤醒后该线程会尝试去获取锁\n\n##### signal\n\n```\npublic final void signal() {\n    if (!isHeldExclusively())\n        throw new IllegalMonitorStateException();\n    //第一个节点\n    Node first = firstWaiter;\n    if (first != null)\n        doSignal(first);\n}\n\nprivate void doSignal(Node first) {\n    do {\n        //firstWaiter 下一个节点\n        if ( (firstWaiter = first.nextWaiter) == null)\n            lastWaiter = null;\n        first.nextWaiter = null;\n    } while (!transferForSignal(first) &&\n             (first = firstWaiter) != null);\n}\n\nfinal boolean transferForSignal(Node node) {\n    //改变线程状态\n    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))\n        return false;\n    //加入AQS阻塞队列\n    Node p = enq(node);\n    int ws = p.waitStatus;\n    //唤醒\n    if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))\n        LockSupport.unpark(node.thread);\n    return true;\n}\n```\n\n将条件队列的第一个节点移除，加入到AQS的阻塞队列中。\n\n##### signalAll\n\n```\npublic final void signalAll() {\n    if (!isHeldExclusively())\n        throw new IllegalMonitorStateException();\n    Node first = firstWaiter;\n    if (first != null)\n        doSignalAll(first);\n}\n\nprivate void doSignalAll(Node first) {\n    lastWaiter = firstWaiter = null;\n    do {\n        Node next = first.nextWaiter;\n        first.nextWaiter = null;\n        transferForSignal(first);\n        first = next;\n    } while (first != null);\n}\n```\n\nsignalAll 会遍历全部节点唤醒加入到AQS阻塞队列。\n\n#### 条件队列与同步队列\n\n1.同步队列依赖一个双向链表来完成同步状态的管理，当前线程获取同步状态失败 后，同步器会将线程构建成一个节点，并将其加入同步队列中。\n2.通过signal或signalAll将条件队列中的节点转移到同步队列。（由条件队列转化为同步队列）\n\n![condition](../../../../uploads/javasource/util/aqs1.png)\n\n条件队列节点来源：\n\n1. 调用await方法阻塞线程；\n2. 当前线程存在于同步队列的头结点，调用await方法进行阻塞（从同步队列转化到条件队列）\n\n例如：\n\n1. 假设初始状态如下，节点A、节点B在同步队列中。\n\n![condition](../../../../uploads/javasource/util/aqs2.png)\n\n2. 节点A的线程获取锁权限，此时调用await方法。节点A从同步队列移除， 并加入条件队列中。\n\n![condition](../../../../uploads/javasource/util/aqs3.png)\n\n3. 调用 signal方法，从条件队列中取出第一个节点，并加入同步队列中，等待获取资源\n\n![condition](../../../../uploads/javasource/util/aqs4.png)\n\n","slug":"javasource/util/3_AbstractQueuedSynchronizer","published":1,"updated":"2020-01-02T05:49:23.767Z","layout":"post","photos":[],"link":"","_id":"ck6lvszuv007un0ztrmmwwyft","content":"<h2 id=\"aqs\"><a href=\"#aqs\" class=\"headerlink\" title=\"aqs\"></a>aqs</h2><p>AQS（AbstractQueuedSynchronizer）是JAVA中众多锁以及并发工具的基础，其底层采用乐观锁，大量使用了CAS操作， 并且在冲突时，采用自旋方式重试，以实现轻量级和高效地获取锁。</p>\n<p>AQS虽然被定义为抽象类，但事实上它并不包含任何抽象方法。AQS是被设计为支持多种用途，如果定义抽象方法，子类在继承的时候就需要实现所有抽象方法，所以AQS将需要子类覆盖的方法都设计为protect方法，默认抛出UnsupportedOperationException异常。如果子类用到这些方法就必须重写，否则会抛出异常，如果没有用到则不需要做任何操作。</p>\n<p>AbstractQueuedSynchronizer只继承了AbstractOwnableSynchronizer，实现了java.io.Serializable接口。</p>\n<blockquote>\n<p>AbstractOwnableSynchronizer类是一种同步器，这个类仅有set和get独占线程资源。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; public abstract class AbstractOwnableSynchronizer</div><div class=\"line\">&gt;      implements java.io.Serializable &#123;</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;      private static final long serialVersionUID = 3737899427754241961L;</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;      protected AbstractOwnableSynchronizer() &#123; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      private transient Thread exclusiveOwnerThread;</div><div class=\"line\">&gt; </div><div class=\"line\">&gt;      protected final void setExclusiveOwnerThread(Thread t) &#123;</div><div class=\"line\">&gt;          exclusiveOwnerThread = t;</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      protected final Thread getExclusiveOwnerThread() &#123;</div><div class=\"line\">&gt;          return exclusiveOwnerThread;</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;  &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>exclusiveOwnerThread 即独占资源的线程。</p>\n</blockquote>\n<h3 id=\"AQS原理\"><a href=\"#AQS原理\" class=\"headerlink\" title=\"AQS原理\"></a>AQS原理</h3><p>AQS维护了一个state变量和node双向链表。</p>\n<p>state是已获取资源占有许可的数量。例如线程调用acquire(1)获取资源的许可，acquire会调用一次tryAcquire(1)获取资源。如果获取成功，则state加1并且调用父类的设置独占线程将当前线程设置为独占线程。如果获取失败，则说明已经有线程占用了这个资源，需要等待占用释放。此时将该线程封装成node节点，加入双向链表，之后Locksupport.pack()堵塞当前线程。如果这个线程被唤醒则继续循环调用tryAcquire获取许可，如果获取到了将自己的node节点设置为链表的头结点并把之前的头结点去掉。如果线程释放资源，调用release方法，release方法会调用tryRelease方法尝试释放资源,如果释放成功，则state减1，再调用AQS的父类AbstractOwnableSynchronizer的设置独占线程为null，再locksupport.unpack()双向node链表的头node节点的线程，恢复其执行。</p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">private transient volatile Node head;</div><div class=\"line\"></div><div class=\"line\">private transient volatile Node tail;</div><div class=\"line\"></div><div class=\"line\">private volatile int state;</div><div class=\"line\"></div><div class=\"line\">private static final Unsafe unsafe = Unsafe.getUnsafe();</div><div class=\"line\"></div><div class=\"line\">private static final long stateOffset;</div><div class=\"line\">private static final long headOffset;</div><div class=\"line\">private static final long tailOffset;</div><div class=\"line\">private static final long waitStatusOffset;</div><div class=\"line\">private static final long nextOffset;</div><div class=\"line\"></div><div class=\"line\">static &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        stateOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;state&quot;));</div><div class=\"line\">        headOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;head&quot;));</div><div class=\"line\">        tailOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;tail&quot;));</div><div class=\"line\">        waitStatusOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (Node.class.getDeclaredField(&quot;waitStatus&quot;));</div><div class=\"line\">        nextOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (Node.class.getDeclaredField(&quot;next&quot;));</div><div class=\"line\"></div><div class=\"line\">    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有一个头尾节点和state变量，实现CAS的Unsafe的工具类，还有一些偏移量，都用于Unsafe的CAS操作，通过静态代码块进行初始化，通过objectFieldOffset获取对应字段相对于该对象的起始地址的偏移量。</p>\n<h4 id=\"Node节点\"><a href=\"#Node节点\" class=\"headerlink\" title=\"Node节点\"></a>Node节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Node &#123;</div><div class=\"line\">    //共享模式</div><div class=\"line\">    static final Node SHARED = new Node();</div><div class=\"line\">    //独占模式</div><div class=\"line\">    static final Node EXCLUSIVE = null;</div><div class=\"line\">    //当线程等待超时或者被中断，则取消等待</div><div class=\"line\">    static final int CANCELLED =  1;</div><div class=\"line\">    //后继节点处于等待状态，当前节点（为-1）被取消或者中断时会通知后继节点，使后继节点的线程得以运行</div><div class=\"line\">    static final int SIGNAL    = -1;</div><div class=\"line\">    //当前节点处于等待队列，节点线程等待在Condition上，当其他线程对condition执行signall方法时，等待队列转移到同步队列，加入到对同步状态的获取。</div><div class=\"line\">    static final int CONDITION = -2;</div><div class=\"line\">    //与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。</div><div class=\"line\">    static final int PROPAGATE = -3;</div><div class=\"line\">    //状态</div><div class=\"line\">    volatile int waitStatus;</div><div class=\"line\">    //上一个节点</div><div class=\"line\">    volatile Node prev;</div><div class=\"line\">    //下一个节点</div><div class=\"line\">    volatile Node next;</div><div class=\"line\">    //节点所代表的线程</div><div class=\"line\">    volatile Thread thread;</div><div class=\"line\">    //Node既可以作为同步队列节点使用，也可以作为Condition的等待队列节点使用</div><div class=\"line\">    Node nextWaiter;</div><div class=\"line\"></div><div class=\"line\">    final boolean isShared() &#123;</div><div class=\"line\">        return nextWaiter == SHARED;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final Node predecessor() throws NullPointerException &#123;</div><div class=\"line\">        Node p = prev;</div><div class=\"line\">        if (p == null)</div><div class=\"line\">            throw new NullPointerException();</div><div class=\"line\">        else</div><div class=\"line\">            return p;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Node() &#123;    // Used to establish initial head or SHARED marker</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Node(Thread thread, Node mode) &#123;     // Used by addWaiter</div><div class=\"line\">        this.nextWaiter = mode;</div><div class=\"line\">        this.thread = thread;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Node(Thread thread, int waitStatus) &#123; // Used by Condition</div><div class=\"line\">        this.waitStatus = waitStatus;</div><div class=\"line\">        this.thread = thread;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"enq方法\"><a href=\"#enq方法\" class=\"headerlink\" title=\"enq方法\"></a>enq方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node enq(final Node node) &#123;</div><div class=\"line\">   for (;;) &#123;</div><div class=\"line\">       Node t = tail;</div><div class=\"line\">       if (t == null) &#123; // Must initialize</div><div class=\"line\">           if (compareAndSetHead(new Node()))</div><div class=\"line\">               tail = head;</div><div class=\"line\">       &#125; else &#123;</div><div class=\"line\">           node.prev = t;</div><div class=\"line\">           if (compareAndSetTail(t, node)) &#123;</div><div class=\"line\">               t.next = node;</div><div class=\"line\">               return t;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>enq方法是将node加入链表，如果tail尾节点为空则必须进行初始化，如果tail不为空，则将node的前指针指向tail，通过CAS将tail的指向改为node，然后设置t.next为node，完成node插入链表尾部。</p>\n<h4 id=\"addWaiter方法\"><a href=\"#addWaiter方法\" class=\"headerlink\" title=\"addWaiter方法\"></a>addWaiter方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node addWaiter(Node mode) &#123;</div><div class=\"line\">    Node node = new Node(Thread.currentThread(), mode);</div><div class=\"line\">    // Try the fast path of enq; backup to full enq on failure</div><div class=\"line\">    Node pred = tail;</div><div class=\"line\">    if (pred != null) &#123;</div><div class=\"line\">        node.prev = pred;</div><div class=\"line\">        if (compareAndSetTail(pred, node)) &#123;</div><div class=\"line\">            pred.next = node;</div><div class=\"line\">            return node;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    enq(node);</div><div class=\"line\">    return node;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>addWaiter方法包装node节点，放入node双向链表。如果tail不为空则说明初始化过了直接将node加入链表尾部，如果为空则进行初始化再将node加入链表尾部。</p>\n<h4 id=\"共享模式\"><a href=\"#共享模式\" class=\"headerlink\" title=\"共享模式\"></a>共享模式</h4><h5 id=\"acquireShared（获取锁）\"><a href=\"#acquireShared（获取锁）\" class=\"headerlink\" title=\"acquireShared（获取锁）\"></a>acquireShared（获取锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireShared(int arg) &#123;</div><div class=\"line\">    if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">        doAcquireShared(arg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>尝试去获取资源，如果没有获取资源返回负数，tryAcquireShared方法需要子类自己去实现，如果不实现会直接抛异常（在读写锁的Sync实现）；如果没有获取到资源加入等待队列等待获取资源。</p>\n<h5 id=\"doAcquireShared\"><a href=\"#doAcquireShared\" class=\"headerlink\" title=\"doAcquireShared\"></a>doAcquireShared</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireShared(int arg) &#123;</div><div class=\"line\">    final Node node = addWaiter(Node.SHARED);</div><div class=\"line\">    boolean failed = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        boolean interrupted = false;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            //找先驱结点</div><div class=\"line\">            final Node p = node.predecessor();</div><div class=\"line\">            if (p == head) &#123;</div><div class=\"line\">                //尝试获取资源</div><div class=\"line\">                int r = tryAcquireShared(arg);</div><div class=\"line\">                if (r &gt;= 0) &#123;</div><div class=\"line\">                    //获取锁之后，设置当前节点为头节点，去唤醒</div><div class=\"line\">                    setHeadAndPropagate(node, r);</div><div class=\"line\">                    p.next = null; // help GC</div><div class=\"line\">                    //如果是因为中断醒来则设置中断标记位</div><div class=\"line\">                    if (interrupted)</div><div class=\"line\">                        selfInterrupt();</div><div class=\"line\">                    failed = false;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //挂起</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                parkAndCheckInterrupt())</div><div class=\"line\">                interrupted = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        // 获取锁失败</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先吧当前节点加入到队列尾部，然后进入自旋，自旋的目的是为了获取资源或者阻塞，如果此节点的前一个node是head节点，就去获取资源，如果获取失败就执行shouldParkAfterFailedAcquire，将前一个node设置为SIGNAL，获取成功就setHeadAndPropagate。</p>\n<h6 id=\"setHeadAndPropagate\"><a href=\"#setHeadAndPropagate\" class=\"headerlink\" title=\"setHeadAndPropagate\"></a>setHeadAndPropagate</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//两个入参，一个是当前成功获取共享锁的节点，一个就是tryAcquireShared方法的返回值，它可能大于0也可能等于0</div><div class=\"line\">private void setHeadAndPropagate(Node node, int propagate) &#123;</div><div class=\"line\">    Node h = head; // Record old head for check below</div><div class=\"line\">    //设置新的头节点</div><div class=\"line\">    setHead(node);</div><div class=\"line\">    //propagate &gt; 0 代表还有资源，还可以继续唤醒  | h.waitStatus 是 -1 or -3</div><div class=\"line\">    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0) &#123;</div><div class=\"line\">        Node s = node.next;</div><div class=\"line\">        //如果当前节点的后继节点是共享类型获取没有后继节点，则进行唤醒</div><div class=\"line\">        if (s == null || s.isShared())</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>会唤醒后面的所有节点</p>\n</blockquote>\n<h6 id=\"doReleaseShared（唤醒）\"><a href=\"#doReleaseShared（唤醒）\" class=\"headerlink\" title=\"doReleaseShared（唤醒）\"></a>doReleaseShared（唤醒）</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doReleaseShared() &#123;</div><div class=\"line\">    for (;;) &#123;</div><div class=\"line\">        //从头结点开始 head已是上面设置的head节点</div><div class=\"line\">        Node h = head;</div><div class=\"line\">        if (h != null &amp;&amp; h != tail) &#123;</div><div class=\"line\">            int ws = h.waitStatus;</div><div class=\"line\">            //表示需要唤醒（-1）</div><div class=\"line\">            if (ws == Node.SIGNAL) &#123;</div><div class=\"line\">                //CAS 将状态置为0</div><div class=\"line\">                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))</div><div class=\"line\">                    continue;            // loop to recheck cases</div><div class=\"line\">                //唤醒</div><div class=\"line\">                unparkSuccessor(h);</div><div class=\"line\">            &#125;</div><div class=\"line\">            //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去</div><div class=\"line\">            else if (ws == 0 &amp;&amp;</div><div class=\"line\">                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))</div><div class=\"line\">                continue;                // loop on failed CAS</div><div class=\"line\">        &#125;</div><div class=\"line\">        //如果头结点没有发生变化，表示设置完成，退出循环</div><div class=\"line\">        //如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试</div><div class=\"line\">        if (h == head)                   // loop if head changed</div><div class=\"line\">            break;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"unparkSuccessor方法\"><a href=\"#unparkSuccessor方法\" class=\"headerlink\" title=\"unparkSuccessor方法\"></a>unparkSuccessor方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> private void unparkSuccessor(Node node) &#123;</div><div class=\"line\">    int ws = node.waitStatus;</div><div class=\"line\">    if (ws &lt; 0)</div><div class=\"line\">        compareAndSetWaitStatus(node, ws, 0);</div><div class=\"line\"></div><div class=\"line\">    Node s = node.next;</div><div class=\"line\">    //next 节点为空 或者状态为取消</div><div class=\"line\">    if (s == null || s.waitStatus &gt; 0) &#123;</div><div class=\"line\">        s = null;</div><div class=\"line\">        //从后向前找</div><div class=\"line\">        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class=\"line\">            if (t.waitStatus &lt;= 0)</div><div class=\"line\">                s = t;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (s != null)</div><div class=\"line\">        LockSupport.unpark(s.thread);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用unpark()唤醒等待队列中最前边的那个未放弃线程，node的waitStatus为signal或condition，则可以唤醒，先重置node的waitStatus为0（允许失败），找到下一个需要唤醒的节点唤醒。</p>\n<blockquote>\n<p>从后往前找是因为下一个任务有可能被取消了，节点就有可能为null</p>\n</blockquote>\n<h6 id=\"shouldParkAfterFailedAcquire\"><a href=\"#shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"shouldParkAfterFailedAcquire\"></a>shouldParkAfterFailedAcquire</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</div><div class=\"line\">    int ws = pred.waitStatus;</div><div class=\"line\">    if (ws == Node.SIGNAL)</div><div class=\"line\">        return true;</div><div class=\"line\">    if (ws &gt; 0) &#123;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            node.prev = pred = pred.prev;</div><div class=\"line\">        &#125; while (pred.waitStatus &gt; 0);</div><div class=\"line\">        pred.next = node;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>主要是进行的状态的检查，如果前一个节点的状态是-1则返回true；如果前一个节点取消了，那就向前找到一个没有被取消的节点，将取消的节点舍弃，如果前一个节点没有被取消则将节点状态设置为-1.</p>\n</blockquote>\n<h5 id=\"releaseShared（-释放锁）\"><a href=\"#releaseShared（-释放锁）\" class=\"headerlink\" title=\"releaseShared（ 释放锁）\"></a>releaseShared（ 释放锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">    if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"独占模式\"><a href=\"#独占模式\" class=\"headerlink\" title=\"独占模式\"></a>独占模式</h4><h5 id=\"acquire（获取锁）\"><a href=\"#acquire（获取锁）\" class=\"headerlink\" title=\"acquire（获取锁）\"></a>acquire（获取锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquire(int arg) &#123;</div><div class=\"line\">    if (!tryAcquire(arg) &amp;&amp;</div><div class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">        selfInterrupt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先也是尝试获取资源，如果获取到资源则直接返回了，如果没有获取到资源则执行acquireQueued(addWaiter(Node.EXCLUSIVE), arg)，将该线程加入队列节点尾部。</p>\n<h5 id=\"acquireQueued\"><a href=\"#acquireQueued\" class=\"headerlink\" title=\"acquireQueued\"></a>acquireQueued</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</div><div class=\"line\">    boolean failed = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        boolean interrupted = false;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            final Node p = node.predecessor();</div><div class=\"line\">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class=\"line\">                setHead(node);</div><div class=\"line\">                p.next = null; // help GC</div><div class=\"line\">                failed = false;</div><div class=\"line\">                return interrupted;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                parkAndCheckInterrupt())</div><div class=\"line\">                interrupted = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>和共享模式类似，先获取该节点的前一个节点，如果前一个节点是头结点就尝试获取资源。如果获取到资源则把这个接地点设为头节点 直接返回了；如果没有获取到资源则进入阻塞挂起。</p>\n<blockquote>\n<p>挂起逻辑同上。</p>\n</blockquote>\n<h5 id=\"cancelAcquire\"><a href=\"#cancelAcquire\" class=\"headerlink\" title=\"cancelAcquire\"></a>cancelAcquire</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void cancelAcquire(Node node) &#123;</div><div class=\"line\">    //如果节点不存在直接返回</div><div class=\"line\">    if (node == null)</div><div class=\"line\">        return;</div><div class=\"line\">    node.thread = null;</div><div class=\"line\"></div><div class=\"line\">    Node pred = node.prev;</div><div class=\"line\">    //跳过前面已经取消的前置节点</div><div class=\"line\">    while (pred.waitStatus &gt; 0)</div><div class=\"line\">        node.prev = pred = pred.prev;</div><div class=\"line\">    Node predNext = pred.next;</div><div class=\"line\">    //将node的状态设置为1 其他节点在处理时就可以跳过</div><div class=\"line\">    node.waitStatus = Node.CANCELLED;</div><div class=\"line\">    //如果是尾节点直接删除返回</div><div class=\"line\">    if (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</div><div class=\"line\">        compareAndSetNext(pred, predNext, null);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        int ws;</div><div class=\"line\">        //否则当前节点的前置节点不是头节点且它后面的节点等待它唤醒</div><div class=\"line\">        if (pred != head &amp;&amp;</div><div class=\"line\">            ((ws = pred.waitStatus) == Node.SIGNAL ||</div><div class=\"line\">             (ws &lt;= 0 &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</div><div class=\"line\">            pred.thread != null) &#123;</div><div class=\"line\">            Node next = node.next;</div><div class=\"line\">            if (next != null &amp;&amp; next.waitStatus &lt;= 0)</div><div class=\"line\">                //删除该node</div><div class=\"line\">                compareAndSetNext(pred, predNext, next);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            //要么当前节点的前置节点是头结点,直接唤醒当前节点的后继节点</div><div class=\"line\">            unparkSuccessor(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">        node.next = node; // help GC</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取锁资源失败的处理，即自己实现的获取资源的逻辑出异常的时候会进入到这里。（共享模式同这里的）</p>\n<h5 id=\"release（释放锁）\"><a href=\"#release（释放锁）\" class=\"headerlink\" title=\"release（释放锁）\"></a>release（释放锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean release(int arg) &#123;</div><div class=\"line\">    if (tryRelease(arg)) &#123;</div><div class=\"line\">        Node h = head;</div><div class=\"line\">        if (h != null &amp;&amp; h.waitStatus != 0)</div><div class=\"line\">            unparkSuccessor(h);</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void unparkSuccessor(Node node) &#123;</div><div class=\"line\">    int ws = node.waitStatus;</div><div class=\"line\">    if (ws &lt; 0)</div><div class=\"line\">        compareAndSetWaitStatus(node, ws, 0);</div><div class=\"line\"></div><div class=\"line\">    Node s = node.next;</div><div class=\"line\">    if (s == null || s.waitStatus &gt; 0) &#123;</div><div class=\"line\">        s = null;</div><div class=\"line\">        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class=\"line\">            if (t.waitStatus &lt;= 0)</div><div class=\"line\">                s = t;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (s != null)</div><div class=\"line\">        LockSupport.unpark(s.thread);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"条件队列-ConditionObject\"><a href=\"#条件队列-ConditionObject\" class=\"headerlink\" title=\"条件队列(ConditionObject)\"></a>条件队列(ConditionObject)</h4><p>使用场景<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//首先创建一个可重入锁，它本质是独占锁</div><div class=\"line\">private final ReentrantLock takeLock = new ReentrantLock();</div><div class=\"line\">//创建该锁上的条件队列</div><div class=\"line\">private final Condition notEmpty = takeLock.newCondition();</div><div class=\"line\">//使用过程</div><div class=\"line\">public E take() throws InterruptedException &#123;</div><div class=\"line\">    //首先进行加锁</div><div class=\"line\">    takeLock.lockInterruptibly();</div><div class=\"line\">    try &#123;</div><div class=\"line\">        //如果队列是空的，则进行等待</div><div class=\"line\">        notEmpty.await();</div><div class=\"line\">        //取元素的操作...</div><div class=\"line\">        </div><div class=\"line\">        //如果有剩余，则唤醒等待元素的线程</div><div class=\"line\">        notEmpty.signal();</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        //释放锁</div><div class=\"line\">        takeLock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //取完元素以后唤醒等待放入元素的线程</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Condition一般都是配合一个显式锁Lock一起使用，Lock接口的方法中有一个newCondition()方法用于生成Condition对象。<br>通过ReentrantLock的lock方法，如果获取不到锁当前线程会进入AQS队列阻塞；被唤醒后继续获取锁，如果获取到锁，移出AQS队列，继续执行；遇到Condition的await方法，加入“条件队列”，阻塞线程；被其他线程的signal方法唤醒，从“条件队列”中删除，并加入到AQS队列，如果获取到锁就继续执行。可以看到上述操作，线程节点（Node）其实在两个队列之间切换，由于“条件队列”在被唤醒时 都是从头开始遍历，所以只需要使用单向链表实现即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Condition &#123;</div><div class=\"line\"></div><div class=\"line\">    void await() throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    void awaitUninterruptibly();</div><div class=\"line\"></div><div class=\"line\">    long awaitNanos(long nanosTimeout) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    boolean await(long time, TimeUnit unit) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    boolean awaitUntil(Date deadline) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    void signal();</div><div class=\"line\"></div><div class=\"line\">    void signalAll();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConditionObject 实现了 Condition接口，Condition接口中一个有7个接口：</p>\n<ul>\n<li>await : 使用这个锁必须放在一个显式锁的lock和unlock之间，调用该方法后当前线程会释放锁并被阻塞，直到其他线程通过调用同一个Condition对象的signal或者signalAll方法或被中断，再次被唤醒。（可被中断）</li>\n<li>awaitUninterruptibly : 此方式是不可被中断的，只能通过其他线程调用同一个Condition对象的signal或者signalAll方法，才能被唤醒。（不响应中断）</li>\n<li>awaitNanos : 等待纳秒时间</li>\n<li>await(long time, TimeUnit unit) : 等待一个指定时间</li>\n<li>awaitUntil : 等待直到一个截止时间</li>\n<li>signal : 唤醒等待队列中的第一个节点</li>\n<li>signalAll : 唤醒等待队列中的所有节点</li>\n</ul>\n<h5 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void await() throws InterruptedException &#123;</div><div class=\"line\">    if (Thread.interrupted())</div><div class=\"line\">        throw new InterruptedException();</div><div class=\"line\">    //加入条件队列</div><div class=\"line\">    Node node = addConditionWaiter();</div><div class=\"line\">    //释放当前线程占用的排它锁  </div><div class=\"line\">    int savedState = fullyRelease(node);</div><div class=\"line\">    int interruptMode = 0;</div><div class=\"line\">    //节点不在AQS的阻塞队列中</div><div class=\"line\">    while (!isOnSyncQueue(node)) &#123;</div><div class=\"line\">        //阻塞该线程</div><div class=\"line\">        LockSupport.park(this);</div><div class=\"line\">        //判断中断标记在阻塞等待期间 是否改变  </div><div class=\"line\">        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)</div><div class=\"line\">            break;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //当被唤醒后，该线程会尝试去获取锁，只有获取到了才会从await()方法返回，否则的话，会挂起自己</div><div class=\"line\">    if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</div><div class=\"line\">        interruptMode = REINTERRUPT;</div><div class=\"line\">    if (node.nextWaiter != null) // clean up if cancelled</div><div class=\"line\">        //清理取消节点对应的线程 </div><div class=\"line\">        unlinkCancelledWaiters();</div><div class=\"line\">    if (interruptMode != 0)</div><div class=\"line\">        //抛出中断异常，或者重新进入中断  </div><div class=\"line\">        reportInterruptAfterWait(interruptMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先将该节点加入到条件队列，然后释放掉当前的锁，如果该节点不在AQS的阻塞队列中就阻塞该线程，等待signal；被唤醒后该线程会尝试去获取锁</p>\n<h5 id=\"signal\"><a href=\"#signal\" class=\"headerlink\" title=\"signal\"></a>signal</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signal() &#123;</div><div class=\"line\">    if (!isHeldExclusively())</div><div class=\"line\">        throw new IllegalMonitorStateException();</div><div class=\"line\">    //第一个节点</div><div class=\"line\">    Node first = firstWaiter;</div><div class=\"line\">    if (first != null)</div><div class=\"line\">        doSignal(first);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void doSignal(Node first) &#123;</div><div class=\"line\">    do &#123;</div><div class=\"line\">        //firstWaiter 下一个节点</div><div class=\"line\">        if ( (firstWaiter = first.nextWaiter) == null)</div><div class=\"line\">            lastWaiter = null;</div><div class=\"line\">        first.nextWaiter = null;</div><div class=\"line\">    &#125; while (!transferForSignal(first) &amp;&amp;</div><div class=\"line\">             (first = firstWaiter) != null);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">final boolean transferForSignal(Node node) &#123;</div><div class=\"line\">    //改变线程状态</div><div class=\"line\">    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))</div><div class=\"line\">        return false;</div><div class=\"line\">    //加入AQS阻塞队列</div><div class=\"line\">    Node p = enq(node);</div><div class=\"line\">    int ws = p.waitStatus;</div><div class=\"line\">    //唤醒</div><div class=\"line\">    if (ws &gt; 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</div><div class=\"line\">        LockSupport.unpark(node.thread);</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将条件队列的第一个节点移除，加入到AQS的阻塞队列中。</p>\n<h5 id=\"signalAll\"><a href=\"#signalAll\" class=\"headerlink\" title=\"signalAll\"></a>signalAll</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signalAll() &#123;</div><div class=\"line\">    if (!isHeldExclusively())</div><div class=\"line\">        throw new IllegalMonitorStateException();</div><div class=\"line\">    Node first = firstWaiter;</div><div class=\"line\">    if (first != null)</div><div class=\"line\">        doSignalAll(first);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void doSignalAll(Node first) &#123;</div><div class=\"line\">    lastWaiter = firstWaiter = null;</div><div class=\"line\">    do &#123;</div><div class=\"line\">        Node next = first.nextWaiter;</div><div class=\"line\">        first.nextWaiter = null;</div><div class=\"line\">        transferForSignal(first);</div><div class=\"line\">        first = next;</div><div class=\"line\">    &#125; while (first != null);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>signalAll 会遍历全部节点唤醒加入到AQS阻塞队列。</p>\n<h4 id=\"条件队列与同步队列\"><a href=\"#条件队列与同步队列\" class=\"headerlink\" title=\"条件队列与同步队列\"></a>条件队列与同步队列</h4><p>1.同步队列依赖一个双向链表来完成同步状态的管理，当前线程获取同步状态失败 后，同步器会将线程构建成一个节点，并将其加入同步队列中。<br>2.通过signal或signalAll将条件队列中的节点转移到同步队列。（由条件队列转化为同步队列）</p>\n<p><img src=\"../../../../uploads/javasource/util/aqs1.png\" alt=\"condition\"></p>\n<p>条件队列节点来源：</p>\n<ol>\n<li>调用await方法阻塞线程；</li>\n<li>当前线程存在于同步队列的头结点，调用await方法进行阻塞（从同步队列转化到条件队列）</li>\n</ol>\n<p>例如：</p>\n<ol>\n<li>假设初始状态如下，节点A、节点B在同步队列中。</li>\n</ol>\n<p><img src=\"../../../../uploads/javasource/util/aqs2.png\" alt=\"condition\"></p>\n<ol>\n<li>节点A的线程获取锁权限，此时调用await方法。节点A从同步队列移除， 并加入条件队列中。</li>\n</ol>\n<p><img src=\"../../../../uploads/javasource/util/aqs3.png\" alt=\"condition\"></p>\n<ol>\n<li>调用 signal方法，从条件队列中取出第一个节点，并加入同步队列中，等待获取资源</li>\n</ol>\n<p><img src=\"../../../../uploads/javasource/util/aqs4.png\" alt=\"condition\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"aqs\"><a href=\"#aqs\" class=\"headerlink\" title=\"aqs\"></a>aqs</h2><p>AQS（AbstractQueuedSynchronizer）是JAVA中众多锁以及并发工具的基础，其底层采用乐观锁，大量使用了CAS操作， 并且在冲突时，采用自旋方式重试，以实现轻量级和高效地获取锁。</p>\n<p>AQS虽然被定义为抽象类，但事实上它并不包含任何抽象方法。AQS是被设计为支持多种用途，如果定义抽象方法，子类在继承的时候就需要实现所有抽象方法，所以AQS将需要子类覆盖的方法都设计为protect方法，默认抛出UnsupportedOperationException异常。如果子类用到这些方法就必须重写，否则会抛出异常，如果没有用到则不需要做任何操作。</p>\n<p>AbstractQueuedSynchronizer只继承了AbstractOwnableSynchronizer，实现了java.io.Serializable接口。</p>\n<blockquote>\n<p>AbstractOwnableSynchronizer类是一种同步器，这个类仅有set和get独占线程资源。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; public abstract class AbstractOwnableSynchronizer</div><div class=\"line\">&gt;      implements java.io.Serializable &#123;</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;      private static final long serialVersionUID = 3737899427754241961L;</div><div class=\"line\">&gt;  </div><div class=\"line\">&gt;      protected AbstractOwnableSynchronizer() &#123; &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      private transient Thread exclusiveOwnerThread;</div><div class=\"line\">&gt; </div><div class=\"line\">&gt;      protected final void setExclusiveOwnerThread(Thread t) &#123;</div><div class=\"line\">&gt;          exclusiveOwnerThread = t;</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;      protected final Thread getExclusiveOwnerThread() &#123;</div><div class=\"line\">&gt;          return exclusiveOwnerThread;</div><div class=\"line\">&gt;      &#125;</div><div class=\"line\">&gt;  &#125;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>exclusiveOwnerThread 即独占资源的线程。</p>\n</blockquote>\n<h3 id=\"AQS原理\"><a href=\"#AQS原理\" class=\"headerlink\" title=\"AQS原理\"></a>AQS原理</h3><p>AQS维护了一个state变量和node双向链表。</p>\n<p>state是已获取资源占有许可的数量。例如线程调用acquire(1)获取资源的许可，acquire会调用一次tryAcquire(1)获取资源。如果获取成功，则state加1并且调用父类的设置独占线程将当前线程设置为独占线程。如果获取失败，则说明已经有线程占用了这个资源，需要等待占用释放。此时将该线程封装成node节点，加入双向链表，之后Locksupport.pack()堵塞当前线程。如果这个线程被唤醒则继续循环调用tryAcquire获取许可，如果获取到了将自己的node节点设置为链表的头结点并把之前的头结点去掉。如果线程释放资源，调用release方法，release方法会调用tryRelease方法尝试释放资源,如果释放成功，则state减1，再调用AQS的父类AbstractOwnableSynchronizer的设置独占线程为null，再locksupport.unpack()双向node链表的头node节点的线程，恢复其执行。</p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><h4 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">private transient volatile Node head;</div><div class=\"line\"></div><div class=\"line\">private transient volatile Node tail;</div><div class=\"line\"></div><div class=\"line\">private volatile int state;</div><div class=\"line\"></div><div class=\"line\">private static final Unsafe unsafe = Unsafe.getUnsafe();</div><div class=\"line\"></div><div class=\"line\">private static final long stateOffset;</div><div class=\"line\">private static final long headOffset;</div><div class=\"line\">private static final long tailOffset;</div><div class=\"line\">private static final long waitStatusOffset;</div><div class=\"line\">private static final long nextOffset;</div><div class=\"line\"></div><div class=\"line\">static &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        stateOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;state&quot;));</div><div class=\"line\">        headOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;head&quot;));</div><div class=\"line\">        tailOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;tail&quot;));</div><div class=\"line\">        waitStatusOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (Node.class.getDeclaredField(&quot;waitStatus&quot;));</div><div class=\"line\">        nextOffset = unsafe.objectFieldOffset</div><div class=\"line\">            (Node.class.getDeclaredField(&quot;next&quot;));</div><div class=\"line\"></div><div class=\"line\">    &#125; catch (Exception ex) &#123; throw new Error(ex); &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有一个头尾节点和state变量，实现CAS的Unsafe的工具类，还有一些偏移量，都用于Unsafe的CAS操作，通过静态代码块进行初始化，通过objectFieldOffset获取对应字段相对于该对象的起始地址的偏移量。</p>\n<h4 id=\"Node节点\"><a href=\"#Node节点\" class=\"headerlink\" title=\"Node节点\"></a>Node节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Node &#123;</div><div class=\"line\">    //共享模式</div><div class=\"line\">    static final Node SHARED = new Node();</div><div class=\"line\">    //独占模式</div><div class=\"line\">    static final Node EXCLUSIVE = null;</div><div class=\"line\">    //当线程等待超时或者被中断，则取消等待</div><div class=\"line\">    static final int CANCELLED =  1;</div><div class=\"line\">    //后继节点处于等待状态，当前节点（为-1）被取消或者中断时会通知后继节点，使后继节点的线程得以运行</div><div class=\"line\">    static final int SIGNAL    = -1;</div><div class=\"line\">    //当前节点处于等待队列，节点线程等待在Condition上，当其他线程对condition执行signall方法时，等待队列转移到同步队列，加入到对同步状态的获取。</div><div class=\"line\">    static final int CONDITION = -2;</div><div class=\"line\">    //与共享模式相关，在共享模式中，该状态标识结点的线程处于可运行状态。</div><div class=\"line\">    static final int PROPAGATE = -3;</div><div class=\"line\">    //状态</div><div class=\"line\">    volatile int waitStatus;</div><div class=\"line\">    //上一个节点</div><div class=\"line\">    volatile Node prev;</div><div class=\"line\">    //下一个节点</div><div class=\"line\">    volatile Node next;</div><div class=\"line\">    //节点所代表的线程</div><div class=\"line\">    volatile Thread thread;</div><div class=\"line\">    //Node既可以作为同步队列节点使用，也可以作为Condition的等待队列节点使用</div><div class=\"line\">    Node nextWaiter;</div><div class=\"line\"></div><div class=\"line\">    final boolean isShared() &#123;</div><div class=\"line\">        return nextWaiter == SHARED;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final Node predecessor() throws NullPointerException &#123;</div><div class=\"line\">        Node p = prev;</div><div class=\"line\">        if (p == null)</div><div class=\"line\">            throw new NullPointerException();</div><div class=\"line\">        else</div><div class=\"line\">            return p;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Node() &#123;    // Used to establish initial head or SHARED marker</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Node(Thread thread, Node mode) &#123;     // Used by addWaiter</div><div class=\"line\">        this.nextWaiter = mode;</div><div class=\"line\">        this.thread = thread;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Node(Thread thread, int waitStatus) &#123; // Used by Condition</div><div class=\"line\">        this.waitStatus = waitStatus;</div><div class=\"line\">        this.thread = thread;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"enq方法\"><a href=\"#enq方法\" class=\"headerlink\" title=\"enq方法\"></a>enq方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node enq(final Node node) &#123;</div><div class=\"line\">   for (;;) &#123;</div><div class=\"line\">       Node t = tail;</div><div class=\"line\">       if (t == null) &#123; // Must initialize</div><div class=\"line\">           if (compareAndSetHead(new Node()))</div><div class=\"line\">               tail = head;</div><div class=\"line\">       &#125; else &#123;</div><div class=\"line\">           node.prev = t;</div><div class=\"line\">           if (compareAndSetTail(t, node)) &#123;</div><div class=\"line\">               t.next = node;</div><div class=\"line\">               return t;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>enq方法是将node加入链表，如果tail尾节点为空则必须进行初始化，如果tail不为空，则将node的前指针指向tail，通过CAS将tail的指向改为node，然后设置t.next为node，完成node插入链表尾部。</p>\n<h4 id=\"addWaiter方法\"><a href=\"#addWaiter方法\" class=\"headerlink\" title=\"addWaiter方法\"></a>addWaiter方法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private Node addWaiter(Node mode) &#123;</div><div class=\"line\">    Node node = new Node(Thread.currentThread(), mode);</div><div class=\"line\">    // Try the fast path of enq; backup to full enq on failure</div><div class=\"line\">    Node pred = tail;</div><div class=\"line\">    if (pred != null) &#123;</div><div class=\"line\">        node.prev = pred;</div><div class=\"line\">        if (compareAndSetTail(pred, node)) &#123;</div><div class=\"line\">            pred.next = node;</div><div class=\"line\">            return node;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    enq(node);</div><div class=\"line\">    return node;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>addWaiter方法包装node节点，放入node双向链表。如果tail不为空则说明初始化过了直接将node加入链表尾部，如果为空则进行初始化再将node加入链表尾部。</p>\n<h4 id=\"共享模式\"><a href=\"#共享模式\" class=\"headerlink\" title=\"共享模式\"></a>共享模式</h4><h5 id=\"acquireShared（获取锁）\"><a href=\"#acquireShared（获取锁）\" class=\"headerlink\" title=\"acquireShared（获取锁）\"></a>acquireShared（获取锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquireShared(int arg) &#123;</div><div class=\"line\">    if (tryAcquireShared(arg) &lt; 0)</div><div class=\"line\">        doAcquireShared(arg);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>尝试去获取资源，如果没有获取资源返回负数，tryAcquireShared方法需要子类自己去实现，如果不实现会直接抛异常（在读写锁的Sync实现）；如果没有获取到资源加入等待队列等待获取资源。</p>\n<h5 id=\"doAcquireShared\"><a href=\"#doAcquireShared\" class=\"headerlink\" title=\"doAcquireShared\"></a>doAcquireShared</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireShared(int arg) &#123;</div><div class=\"line\">    final Node node = addWaiter(Node.SHARED);</div><div class=\"line\">    boolean failed = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        boolean interrupted = false;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            //找先驱结点</div><div class=\"line\">            final Node p = node.predecessor();</div><div class=\"line\">            if (p == head) &#123;</div><div class=\"line\">                //尝试获取资源</div><div class=\"line\">                int r = tryAcquireShared(arg);</div><div class=\"line\">                if (r &gt;= 0) &#123;</div><div class=\"line\">                    //获取锁之后，设置当前节点为头节点，去唤醒</div><div class=\"line\">                    setHeadAndPropagate(node, r);</div><div class=\"line\">                    p.next = null; // help GC</div><div class=\"line\">                    //如果是因为中断醒来则设置中断标记位</div><div class=\"line\">                    if (interrupted)</div><div class=\"line\">                        selfInterrupt();</div><div class=\"line\">                    failed = false;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //挂起</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                parkAndCheckInterrupt())</div><div class=\"line\">                interrupted = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        // 获取锁失败</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先吧当前节点加入到队列尾部，然后进入自旋，自旋的目的是为了获取资源或者阻塞，如果此节点的前一个node是head节点，就去获取资源，如果获取失败就执行shouldParkAfterFailedAcquire，将前一个node设置为SIGNAL，获取成功就setHeadAndPropagate。</p>\n<h6 id=\"setHeadAndPropagate\"><a href=\"#setHeadAndPropagate\" class=\"headerlink\" title=\"setHeadAndPropagate\"></a>setHeadAndPropagate</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//两个入参，一个是当前成功获取共享锁的节点，一个就是tryAcquireShared方法的返回值，它可能大于0也可能等于0</div><div class=\"line\">private void setHeadAndPropagate(Node node, int propagate) &#123;</div><div class=\"line\">    Node h = head; // Record old head for check below</div><div class=\"line\">    //设置新的头节点</div><div class=\"line\">    setHead(node);</div><div class=\"line\">    //propagate &gt; 0 代表还有资源，还可以继续唤醒  | h.waitStatus 是 -1 or -3</div><div class=\"line\">    if (propagate &gt; 0 || h == null || h.waitStatus &lt; 0) &#123;</div><div class=\"line\">        Node s = node.next;</div><div class=\"line\">        //如果当前节点的后继节点是共享类型获取没有后继节点，则进行唤醒</div><div class=\"line\">        if (s == null || s.isShared())</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>会唤醒后面的所有节点</p>\n</blockquote>\n<h6 id=\"doReleaseShared（唤醒）\"><a href=\"#doReleaseShared（唤醒）\" class=\"headerlink\" title=\"doReleaseShared（唤醒）\"></a>doReleaseShared（唤醒）</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doReleaseShared() &#123;</div><div class=\"line\">    for (;;) &#123;</div><div class=\"line\">        //从头结点开始 head已是上面设置的head节点</div><div class=\"line\">        Node h = head;</div><div class=\"line\">        if (h != null &amp;&amp; h != tail) &#123;</div><div class=\"line\">            int ws = h.waitStatus;</div><div class=\"line\">            //表示需要唤醒（-1）</div><div class=\"line\">            if (ws == Node.SIGNAL) &#123;</div><div class=\"line\">                //CAS 将状态置为0</div><div class=\"line\">                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))</div><div class=\"line\">                    continue;            // loop to recheck cases</div><div class=\"line\">                //唤醒</div><div class=\"line\">                unparkSuccessor(h);</div><div class=\"line\">            &#125;</div><div class=\"line\">            //如果后继节点暂时不需要唤醒，则把当前节点状态设置为PROPAGATE确保以后可以传递下去</div><div class=\"line\">            else if (ws == 0 &amp;&amp;</div><div class=\"line\">                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))</div><div class=\"line\">                continue;                // loop on failed CAS</div><div class=\"line\">        &#125;</div><div class=\"line\">        //如果头结点没有发生变化，表示设置完成，退出循环</div><div class=\"line\">        //如果头结点发生变化，比如说其他线程获取到了锁，为了使自己的唤醒动作可以传递，必须进行重试</div><div class=\"line\">        if (h == head)                   // loop if head changed</div><div class=\"line\">            break;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h6 id=\"unparkSuccessor方法\"><a href=\"#unparkSuccessor方法\" class=\"headerlink\" title=\"unparkSuccessor方法\"></a>unparkSuccessor方法</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"> private void unparkSuccessor(Node node) &#123;</div><div class=\"line\">    int ws = node.waitStatus;</div><div class=\"line\">    if (ws &lt; 0)</div><div class=\"line\">        compareAndSetWaitStatus(node, ws, 0);</div><div class=\"line\"></div><div class=\"line\">    Node s = node.next;</div><div class=\"line\">    //next 节点为空 或者状态为取消</div><div class=\"line\">    if (s == null || s.waitStatus &gt; 0) &#123;</div><div class=\"line\">        s = null;</div><div class=\"line\">        //从后向前找</div><div class=\"line\">        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class=\"line\">            if (t.waitStatus &lt;= 0)</div><div class=\"line\">                s = t;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (s != null)</div><div class=\"line\">        LockSupport.unpark(s.thread);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用unpark()唤醒等待队列中最前边的那个未放弃线程，node的waitStatus为signal或condition，则可以唤醒，先重置node的waitStatus为0（允许失败），找到下一个需要唤醒的节点唤醒。</p>\n<blockquote>\n<p>从后往前找是因为下一个任务有可能被取消了，节点就有可能为null</p>\n</blockquote>\n<h6 id=\"shouldParkAfterFailedAcquire\"><a href=\"#shouldParkAfterFailedAcquire\" class=\"headerlink\" title=\"shouldParkAfterFailedAcquire\"></a>shouldParkAfterFailedAcquire</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) &#123;</div><div class=\"line\">    int ws = pred.waitStatus;</div><div class=\"line\">    if (ws == Node.SIGNAL)</div><div class=\"line\">        return true;</div><div class=\"line\">    if (ws &gt; 0) &#123;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            node.prev = pred = pred.prev;</div><div class=\"line\">        &#125; while (pred.waitStatus &gt; 0);</div><div class=\"line\">        pred.next = node;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>主要是进行的状态的检查，如果前一个节点的状态是-1则返回true；如果前一个节点取消了，那就向前找到一个没有被取消的节点，将取消的节点舍弃，如果前一个节点没有被取消则将节点状态设置为-1.</p>\n</blockquote>\n<h5 id=\"releaseShared（-释放锁）\"><a href=\"#releaseShared（-释放锁）\" class=\"headerlink\" title=\"releaseShared（ 释放锁）\"></a>releaseShared（ 释放锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean releaseShared(int arg) &#123;</div><div class=\"line\">    if (tryReleaseShared(arg)) &#123;</div><div class=\"line\">            doReleaseShared();</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"独占模式\"><a href=\"#独占模式\" class=\"headerlink\" title=\"独占模式\"></a>独占模式</h4><h5 id=\"acquire（获取锁）\"><a href=\"#acquire（获取锁）\" class=\"headerlink\" title=\"acquire（获取锁）\"></a>acquire（获取锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void acquire(int arg) &#123;</div><div class=\"line\">    if (!tryAcquire(arg) &amp;&amp;</div><div class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class=\"line\">        selfInterrupt();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>首先也是尝试获取资源，如果获取到资源则直接返回了，如果没有获取到资源则执行acquireQueued(addWaiter(Node.EXCLUSIVE), arg)，将该线程加入队列节点尾部。</p>\n<h5 id=\"acquireQueued\"><a href=\"#acquireQueued\" class=\"headerlink\" title=\"acquireQueued\"></a>acquireQueued</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">final boolean acquireQueued(final Node node, int arg) &#123;</div><div class=\"line\">    boolean failed = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        boolean interrupted = false;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            final Node p = node.predecessor();</div><div class=\"line\">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class=\"line\">                setHead(node);</div><div class=\"line\">                p.next = null; // help GC</div><div class=\"line\">                failed = false;</div><div class=\"line\">                return interrupted;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                parkAndCheckInterrupt())</div><div class=\"line\">                interrupted = true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>和共享模式类似，先获取该节点的前一个节点，如果前一个节点是头结点就尝试获取资源。如果获取到资源则把这个接地点设为头节点 直接返回了；如果没有获取到资源则进入阻塞挂起。</p>\n<blockquote>\n<p>挂起逻辑同上。</p>\n</blockquote>\n<h5 id=\"cancelAcquire\"><a href=\"#cancelAcquire\" class=\"headerlink\" title=\"cancelAcquire\"></a>cancelAcquire</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void cancelAcquire(Node node) &#123;</div><div class=\"line\">    //如果节点不存在直接返回</div><div class=\"line\">    if (node == null)</div><div class=\"line\">        return;</div><div class=\"line\">    node.thread = null;</div><div class=\"line\"></div><div class=\"line\">    Node pred = node.prev;</div><div class=\"line\">    //跳过前面已经取消的前置节点</div><div class=\"line\">    while (pred.waitStatus &gt; 0)</div><div class=\"line\">        node.prev = pred = pred.prev;</div><div class=\"line\">    Node predNext = pred.next;</div><div class=\"line\">    //将node的状态设置为1 其他节点在处理时就可以跳过</div><div class=\"line\">    node.waitStatus = Node.CANCELLED;</div><div class=\"line\">    //如果是尾节点直接删除返回</div><div class=\"line\">    if (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</div><div class=\"line\">        compareAndSetNext(pred, predNext, null);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        int ws;</div><div class=\"line\">        //否则当前节点的前置节点不是头节点且它后面的节点等待它唤醒</div><div class=\"line\">        if (pred != head &amp;&amp;</div><div class=\"line\">            ((ws = pred.waitStatus) == Node.SIGNAL ||</div><div class=\"line\">             (ws &lt;= 0 &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</div><div class=\"line\">            pred.thread != null) &#123;</div><div class=\"line\">            Node next = node.next;</div><div class=\"line\">            if (next != null &amp;&amp; next.waitStatus &lt;= 0)</div><div class=\"line\">                //删除该node</div><div class=\"line\">                compareAndSetNext(pred, predNext, next);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            //要么当前节点的前置节点是头结点,直接唤醒当前节点的后继节点</div><div class=\"line\">            unparkSuccessor(node);</div><div class=\"line\">        &#125;</div><div class=\"line\">        node.next = node; // help GC</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>获取锁资源失败的处理，即自己实现的获取资源的逻辑出异常的时候会进入到这里。（共享模式同这里的）</p>\n<h5 id=\"release（释放锁）\"><a href=\"#release（释放锁）\" class=\"headerlink\" title=\"release（释放锁）\"></a>release（释放锁）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final boolean release(int arg) &#123;</div><div class=\"line\">    if (tryRelease(arg)) &#123;</div><div class=\"line\">        Node h = head;</div><div class=\"line\">        if (h != null &amp;&amp; h.waitStatus != 0)</div><div class=\"line\">            unparkSuccessor(h);</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void unparkSuccessor(Node node) &#123;</div><div class=\"line\">    int ws = node.waitStatus;</div><div class=\"line\">    if (ws &lt; 0)</div><div class=\"line\">        compareAndSetWaitStatus(node, ws, 0);</div><div class=\"line\"></div><div class=\"line\">    Node s = node.next;</div><div class=\"line\">    if (s == null || s.waitStatus &gt; 0) &#123;</div><div class=\"line\">        s = null;</div><div class=\"line\">        for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev)</div><div class=\"line\">            if (t.waitStatus &lt;= 0)</div><div class=\"line\">                s = t;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (s != null)</div><div class=\"line\">        LockSupport.unpark(s.thread);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"条件队列-ConditionObject\"><a href=\"#条件队列-ConditionObject\" class=\"headerlink\" title=\"条件队列(ConditionObject)\"></a>条件队列(ConditionObject)</h4><p>使用场景<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//首先创建一个可重入锁，它本质是独占锁</div><div class=\"line\">private final ReentrantLock takeLock = new ReentrantLock();</div><div class=\"line\">//创建该锁上的条件队列</div><div class=\"line\">private final Condition notEmpty = takeLock.newCondition();</div><div class=\"line\">//使用过程</div><div class=\"line\">public E take() throws InterruptedException &#123;</div><div class=\"line\">    //首先进行加锁</div><div class=\"line\">    takeLock.lockInterruptibly();</div><div class=\"line\">    try &#123;</div><div class=\"line\">        //如果队列是空的，则进行等待</div><div class=\"line\">        notEmpty.await();</div><div class=\"line\">        //取元素的操作...</div><div class=\"line\">        </div><div class=\"line\">        //如果有剩余，则唤醒等待元素的线程</div><div class=\"line\">        notEmpty.signal();</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        //释放锁</div><div class=\"line\">        takeLock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //取完元素以后唤醒等待放入元素的线程</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Condition一般都是配合一个显式锁Lock一起使用，Lock接口的方法中有一个newCondition()方法用于生成Condition对象。<br>通过ReentrantLock的lock方法，如果获取不到锁当前线程会进入AQS队列阻塞；被唤醒后继续获取锁，如果获取到锁，移出AQS队列，继续执行；遇到Condition的await方法，加入“条件队列”，阻塞线程；被其他线程的signal方法唤醒，从“条件队列”中删除，并加入到AQS队列，如果获取到锁就继续执行。可以看到上述操作，线程节点（Node）其实在两个队列之间切换，由于“条件队列”在被唤醒时 都是从头开始遍历，所以只需要使用单向链表实现即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">public interface Condition &#123;</div><div class=\"line\"></div><div class=\"line\">    void await() throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    void awaitUninterruptibly();</div><div class=\"line\"></div><div class=\"line\">    long awaitNanos(long nanosTimeout) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    boolean await(long time, TimeUnit unit) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    boolean awaitUntil(Date deadline) throws InterruptedException;</div><div class=\"line\"></div><div class=\"line\">    void signal();</div><div class=\"line\"></div><div class=\"line\">    void signalAll();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConditionObject 实现了 Condition接口，Condition接口中一个有7个接口：</p>\n<ul>\n<li>await : 使用这个锁必须放在一个显式锁的lock和unlock之间，调用该方法后当前线程会释放锁并被阻塞，直到其他线程通过调用同一个Condition对象的signal或者signalAll方法或被中断，再次被唤醒。（可被中断）</li>\n<li>awaitUninterruptibly : 此方式是不可被中断的，只能通过其他线程调用同一个Condition对象的signal或者signalAll方法，才能被唤醒。（不响应中断）</li>\n<li>awaitNanos : 等待纳秒时间</li>\n<li>await(long time, TimeUnit unit) : 等待一个指定时间</li>\n<li>awaitUntil : 等待直到一个截止时间</li>\n<li>signal : 唤醒等待队列中的第一个节点</li>\n<li>signalAll : 唤醒等待队列中的所有节点</li>\n</ul>\n<h5 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void await() throws InterruptedException &#123;</div><div class=\"line\">    if (Thread.interrupted())</div><div class=\"line\">        throw new InterruptedException();</div><div class=\"line\">    //加入条件队列</div><div class=\"line\">    Node node = addConditionWaiter();</div><div class=\"line\">    //释放当前线程占用的排它锁  </div><div class=\"line\">    int savedState = fullyRelease(node);</div><div class=\"line\">    int interruptMode = 0;</div><div class=\"line\">    //节点不在AQS的阻塞队列中</div><div class=\"line\">    while (!isOnSyncQueue(node)) &#123;</div><div class=\"line\">        //阻塞该线程</div><div class=\"line\">        LockSupport.park(this);</div><div class=\"line\">        //判断中断标记在阻塞等待期间 是否改变  </div><div class=\"line\">        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)</div><div class=\"line\">            break;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //当被唤醒后，该线程会尝试去获取锁，只有获取到了才会从await()方法返回，否则的话，会挂起自己</div><div class=\"line\">    if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</div><div class=\"line\">        interruptMode = REINTERRUPT;</div><div class=\"line\">    if (node.nextWaiter != null) // clean up if cancelled</div><div class=\"line\">        //清理取消节点对应的线程 </div><div class=\"line\">        unlinkCancelledWaiters();</div><div class=\"line\">    if (interruptMode != 0)</div><div class=\"line\">        //抛出中断异常，或者重新进入中断  </div><div class=\"line\">        reportInterruptAfterWait(interruptMode);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>先将该节点加入到条件队列，然后释放掉当前的锁，如果该节点不在AQS的阻塞队列中就阻塞该线程，等待signal；被唤醒后该线程会尝试去获取锁</p>\n<h5 id=\"signal\"><a href=\"#signal\" class=\"headerlink\" title=\"signal\"></a>signal</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signal() &#123;</div><div class=\"line\">    if (!isHeldExclusively())</div><div class=\"line\">        throw new IllegalMonitorStateException();</div><div class=\"line\">    //第一个节点</div><div class=\"line\">    Node first = firstWaiter;</div><div class=\"line\">    if (first != null)</div><div class=\"line\">        doSignal(first);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void doSignal(Node first) &#123;</div><div class=\"line\">    do &#123;</div><div class=\"line\">        //firstWaiter 下一个节点</div><div class=\"line\">        if ( (firstWaiter = first.nextWaiter) == null)</div><div class=\"line\">            lastWaiter = null;</div><div class=\"line\">        first.nextWaiter = null;</div><div class=\"line\">    &#125; while (!transferForSignal(first) &amp;&amp;</div><div class=\"line\">             (first = firstWaiter) != null);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">final boolean transferForSignal(Node node) &#123;</div><div class=\"line\">    //改变线程状态</div><div class=\"line\">    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))</div><div class=\"line\">        return false;</div><div class=\"line\">    //加入AQS阻塞队列</div><div class=\"line\">    Node p = enq(node);</div><div class=\"line\">    int ws = p.waitStatus;</div><div class=\"line\">    //唤醒</div><div class=\"line\">    if (ws &gt; 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))</div><div class=\"line\">        LockSupport.unpark(node.thread);</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>将条件队列的第一个节点移除，加入到AQS的阻塞队列中。</p>\n<h5 id=\"signalAll\"><a href=\"#signalAll\" class=\"headerlink\" title=\"signalAll\"></a>signalAll</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public final void signalAll() &#123;</div><div class=\"line\">    if (!isHeldExclusively())</div><div class=\"line\">        throw new IllegalMonitorStateException();</div><div class=\"line\">    Node first = firstWaiter;</div><div class=\"line\">    if (first != null)</div><div class=\"line\">        doSignalAll(first);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">private void doSignalAll(Node first) &#123;</div><div class=\"line\">    lastWaiter = firstWaiter = null;</div><div class=\"line\">    do &#123;</div><div class=\"line\">        Node next = first.nextWaiter;</div><div class=\"line\">        first.nextWaiter = null;</div><div class=\"line\">        transferForSignal(first);</div><div class=\"line\">        first = next;</div><div class=\"line\">    &#125; while (first != null);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>signalAll 会遍历全部节点唤醒加入到AQS阻塞队列。</p>\n<h4 id=\"条件队列与同步队列\"><a href=\"#条件队列与同步队列\" class=\"headerlink\" title=\"条件队列与同步队列\"></a>条件队列与同步队列</h4><p>1.同步队列依赖一个双向链表来完成同步状态的管理，当前线程获取同步状态失败 后，同步器会将线程构建成一个节点，并将其加入同步队列中。<br>2.通过signal或signalAll将条件队列中的节点转移到同步队列。（由条件队列转化为同步队列）</p>\n<p><img src=\"../../../../uploads/javasource/util/aqs1.png\" alt=\"condition\"></p>\n<p>条件队列节点来源：</p>\n<ol>\n<li>调用await方法阻塞线程；</li>\n<li>当前线程存在于同步队列的头结点，调用await方法进行阻塞（从同步队列转化到条件队列）</li>\n</ol>\n<p>例如：</p>\n<ol>\n<li>假设初始状态如下，节点A、节点B在同步队列中。</li>\n</ol>\n<p><img src=\"../../../../uploads/javasource/util/aqs2.png\" alt=\"condition\"></p>\n<ol>\n<li>节点A的线程获取锁权限，此时调用await方法。节点A从同步队列移除， 并加入条件队列中。</li>\n</ol>\n<p><img src=\"../../../../uploads/javasource/util/aqs3.png\" alt=\"condition\"></p>\n<ol>\n<li>调用 signal方法，从条件队列中取出第一个节点，并加入同步队列中，等待获取资源</li>\n</ol>\n<p><img src=\"../../../../uploads/javasource/util/aqs4.png\" alt=\"condition\"></p>\n"},{"title":"ConcurrentHashMap(1.7|1.8)阅读","date":"2019-11-21T14:20:28.000Z","comments":0,"keywords":["java","ConcurrentHashMap"],"_content":"\n### ConcurrentHashMap \n\n#### jdk1.7\n\nConcurrentHashMap 和 HashMap非常类似，ConcurrentHashMap在实现上采取了分段锁的思想来实现的。\n\nConcurrentHashMap在内部采用了一个叫做 Segment 的结构，一个Segment就类似HashMap中的table，这样在定位一个元素的时候，需要进行两次hash操作，一次定位到Segment，第二次定位到Segment中的table的index。这样带来的好处的是写操作只需要针对对应的Segment的进行写，因此Segment的数量就是理论最大的并发数。\n\nConcurrentHashMap的结构类似如下： \n\n![结构图](../../../../uploads/javasource/util/ConcurrentHashMap.png)\n\n##### Segment \n```\nstatic final class Segment<K,V> extends ReentrantLock implements Serializable {\n    private static final long serialVersionUID = 2249069246763182397L;\n    //重试次数 单核 1 多核64\n    static final int MAX_SCAN_RETRIES =\n        Runtime.getRuntime().availableProcessors() > 1 ? 64 : 1;\n    //Segment中的table\n    transient volatile HashEntry<K,V>[] table;\n    //元素的数量\n    transient int count;\n    //对table的大小造成影响的操作的数量\n    transient int modCount;\n    //阈值\n    transient int threshold;\n     //负载因子\n    final float loadFactor;\n    //构造函数\n    Segment(float lf, int threshold, HashEntry<K,V>[] tab) {\n        this.loadFactor = lf;\n        this.threshold = threshold;\n        this.table = tab;\n    }\n\n    final V put(K key, int hash, V value, boolean onlyIfAbsent) {\n        //获取锁（针对Segment），获取到node为null，否则调用scanAndLockForPut方法\n        HashEntry<K,V> node = tryLock() ? null :\n            scanAndLockForPut(key, hash, value);\n        V oldValue;\n        try {\n            //Segment中的table\n            HashEntry<K,V>[] tab = table;\n            int index = (tab.length - 1) & hash;\n            HashEntry<K,V> first = entryAt(tab, index);\n            for (HashEntry<K,V> e = first;;) {\n                //对应index上的链表节点不为空，看看是不是有相等的key，有相等的key就替换； \n                if (e != null) {\n                    K k;\n                    if ((k = e.key) == key ||\n                        (e.hash == hash && key.equals(k))) {\n                        oldValue = e.value;\n                        if (!onlyIfAbsent) {\n                            e.value = value;\n                            ++modCount;\n                        }\n                        break;\n                    }\n                    e = e.next;//遍历下一个\n                }\n                else { //链表节点为空\n                    if (node != null)\n                        node.setNext(first);//加到链表的头部\n                    else //node为空就得新建\n                        node = new HashEntry<K,V>(hash, key, value, first);\n                    int c = count + 1;\n                    if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                        rehash(node); //需不需要rehash\n                    else\n                        setEntryAt(tab, index, node);//直接插入node到指定index位置\n                    ++modCount;\n                    count = c;\n                    oldValue = null;\n                    break;\n                }\n            }\n        } finally {\n            unlock();\n        }\n        return oldValue;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void rehash(HashEntry<K,V> node) {\n        HashEntry<K,V>[] oldTable = table;//旧的table\n        int oldCapacity = oldTable.length;\n        int newCapacity = oldCapacity << 1;\n        threshold = (int)(newCapacity * loadFactor);\n        HashEntry<K,V>[] newTable =\n            (HashEntry<K,V>[]) new HashEntry[newCapacity];//新的table\n        int sizeMask = newCapacity - 1;\n        for (int i = 0; i < oldCapacity ; i++) {//遍历旧的table\n            HashEntry<K,V> e = oldTable[i]; //每个table的第一个entry\n            if (e != null) {\n                HashEntry<K,V> next = e.next;\n                int idx = e.hash & sizeMask; //重新计算新的index\n                if (next == null)   //  Single node on list 只有一个元素\n                    newTable[idx] = e;//直接在新的table新index上赋值该节点\n                else { // Reuse consecutive sequence at same slot\n                    HashEntry<K,V> lastRun = e;\n                    int lastIdx = idx;\n                    for (HashEntry<K,V> last = next;\n                         last != null;\n                         last = last.next) {//遍历链表\n                        int k = last.hash & sizeMask; //在新table的位置\n                        if (k != lastIdx) {//头结点和头结点的next元素的节点发生了变化\n                            lastIdx = k;\n                            lastRun = last;\n                        }\n                    }\n                    // 1. lastRun 和 lastIdx 没有发生变化,也就是整个链表的每个元素位置和一样,都没有发生变化\n                    // 2.    lastRun 和 lastIdx 发生了变化,记录变化位置和变化节点,然后把变化的这个节点设置到新table\n                    newTable[lastIdx] = lastRun;\n                    // Clone remaining nodes\n                    for (HashEntry<K,V> p = e; p != lastRun; p = p.next) {\n                        V v = p.value;\n                        int h = p.hash;\n                        int k = h & sizeMask;\n                        HashEntry<K,V> n = newTable[k];\n                        newTable[k] = new HashEntry<K,V>(h, p.key, v, n);\n                    }\n                }\n            }\n        }\n        // 处理扩容时那个添加的节点\n        int nodeIndex = node.hash & sizeMask; // add the new node\n        node.setNext(newTable[nodeIndex]);\n        newTable[nodeIndex] = node;\n        table = newTable;\n    }\n    //自选获取锁\n    private HashEntry<K,V> scanAndLockForPut(K key, int hash, V value) {\n        HashEntry<K,V> first = entryForHash(this, hash);//获取头节点 \n        HashEntry<K,V> e = first;\n        HashEntry<K,V> node = null;\n        int retries = -1; // negative while locating node 是为了找到对应hash桶,遍历链表时找到就停止\n        while (!tryLock()) { //自旋获取锁\n            HashEntry<K,V> f; // to recheck first below\n            if (retries < 0) {\n                if (e == null) {//结束遍历节点\n                    if (node == null) // speculatively create node\n                        node = new HashEntry<K,V>(hash, key, value, null);\n                    retries = 0;\n                }\n                else if (key.equals(e.key))// 找到节点 停止遍历\n                    retries = 0;\n                else\n                    e = e.next;\n            }\n            else if (++retries > MAX_SCAN_RETRIES) {// 达到自旋的最大次数\n                lock();//阻塞\n                break;\n            }\n            else if ((retries & 1) == 0 &&\n                     (f = entryForHash(this, hash)) != first) {//// 头结点变化,需要重新遍历,说明有新的节点加入或者移除\n                e = first = f; // re-traverse if entry changed\n                retries = -1;\n            }\n        }\n        return node;\n    }\n    //自旋获取锁\n    private void scanAndLock(Object key, int hash) {\n        // similar to but simpler than scanAndLockForPut\n        HashEntry<K,V> first = entryForHash(this, hash);\n        HashEntry<K,V> e = first;\n        int retries = -1;\n        while (!tryLock()) {\n            HashEntry<K,V> f;\n            if (retries < 0) {\n                if (e == null || key.equals(e.key))\n                    retries = 0;\n                else\n                    e = e.next;\n            }\n            else if (++retries > MAX_SCAN_RETRIES) {\n                lock();\n                break;\n            }\n            else if ((retries & 1) == 0 &&\n                     (f = entryForHash(this, hash)) != first) {\n                e = first = f;\n                retries = -1;\n            }\n        }\n    }\n}\n```\n\nSegment中主要的方法就是put添加元素，rehash 对table进行扩容，scanAndLockForPut，scanAndLock自旋获取锁。\n\n##### 成员变量\n```\nstatic final int DEFAULT_INITIAL_CAPACITY = 16;\n\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\nstatic final int DEFAULT_CONCURRENCY_LEVEL = 16;\n\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\nstatic final int MIN_SEGMENT_TABLE_CAPACITY = 2;\n\nstatic final int MAX_SEGMENTS = 1 << 16; // slightly conservative\n\nstatic final int RETRIES_BEFORE_LOCK = 2;\n```\n\nConcurrentHashMap 主要的默认参数和HashMap差不多。\n\n> - DEFAULT_CONCURRENCY_LEVEL 是默认的并发数（Segment数组的数量）\n> - MIN_SEGMENT_TABLE_CAPACITY 每个Segment最小的容量 \n> - MAX_SEGMENTS 每个Segment最大的容量   \n> - RETRIES_BEFORE_LOCK默认的自旋次数\n\n##### put\n```\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);//对应key的hash值\n    int j = (hash >>> segmentShift) & segmentMask;//获取对应hash值在segments数组的index\n    if ((s = (Segment<K,V>)UNSAFE.getObject          // nonvolatile; recheck\n         (segments, (j << SSHIFT) + SBASE)) == null) //  in ensureSegment\n        s = ensureSegment(j); //如果对应内存偏移量中没有，则创建ensureSegment\n    return s.put(key, hash, value, false);\n}\nprivate Segment<K,V> ensureSegment(int k) {\n    final Segment<K,V>[] ss = this.segments;\n    long u = (k << SSHIFT) + SBASE; // raw offset\n    Segment<K,V> seg;\n    if ((seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u)) == null) {\n        Segment<K,V> proto = ss[0]; // use segment 0 as prototype  以初始化创建的第一个index下标的值为模板\n        int cap = proto.table.length;\n        float lf = proto.loadFactor;\n        int threshold = (int)(cap * lf);\n        HashEntry<K,V>[] tab = (HashEntry<K,V>[])new HashEntry[cap];\n        if ((seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u))\n            == null) { // recheck 再次检查有没有其他线程已经创建了\n            Segment<K,V> s = new Segment<K,V>(lf, threshold, tab);\n            while ((seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u))\n                   == null) {\n                if (UNSAFE.compareAndSwapObject(ss, u, null, seg = s)) // 通过cas自旋的方式来创建\n                    break;\n            }\n        }\n    }\n    return seg;\n}\n```\n\nConcurrentHashMap中value不能为null，否则会抛出空指针异常，然后获取到对应key的hash值对应的Segment。\n如果对应的Segment不存在，则通过CAS的方式去创建Segment，这是不加锁方式下又可能保证线程安全的方法。\n\n##### get\n```\npublic V get(Object key) {\n    Segment<K,V> s; // manually integrate access methods to reduce overhead\n    HashEntry<K,V>[] tab;\n    int h = hash(key);//对应key的hash值\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;//获取对应hash值存储所在segments数组中内存偏移量\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&\n        (tab = s.table) != null) { //获取到对应Segment中的table\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\nConcurrentHashMap 的get方法就是先获取到对应的Segment，在获取到Segment中的table对应的HashEntry的头节点，但是通过UNSAFE.getObjectVolatile 获取到的是内存中最新的数据，在遍历的过程中，有可能数据被其他线程修改，导致最终返回的数据可能是过时的数据，因此此方法是弱一致性的。\n\n##### size\n\n```\npublic int size() {\n    final Segment<K,V>[] segments = this.segments;\n    int size;\n    boolean overflow; // 是否溢出\n    long sum;         // 存储本次循环过程中计算得到的modCount的值\n    long last = 0L;   // 存储上一次遍历过程中计算得到的modCount的和\n    int retries = -1; // first iteration isn't retry\n    try {\n        //无限for循环，结束条件就是任意前后两次遍历过程中modcount值的和是一样的，说明第二次遍历没有做任何变化\n        for (;;) {//\n            //\n            //为了防止由于有线程不断在更新map而导致每次遍历过程一直发现modCount和上一次不一样导致线程一直进行遍历验证前后两次modCoun,加了一个最多重复的次数限制,超过这个次数则直接强制对所有的segment进行加锁(会导致可以延迟创建的Segment在这个过程中被创建）\n            if (retries++ == RETRIES_BEFORE_LOCK) {\n                for (int j = 0; j < segments.length; ++j)\n                    ensureSegment(j).lock(); // force creation\n            }\n            sum = 0L;\n            size = 0;\n            overflow = false;\n            for (int j = 0; j < segments.length; ++j) {\n                Segment<K,V> seg = segmentAt(segments, j);\n                if (seg != null) {\n                    sum += seg.modCount;\n                    int c = seg.count;\n                    if (c < 0 || (size += c) < 0)\n                        overflow = true;\n                }\n            }\n            if (sum == last)\n                break;\n            last = sum;\n        }\n    } finally {\n        //由于只有在retries等于RETRIES_BEFORE_LOCK时才会执行强制加锁，并且由于是用的retries++，所以强制加锁完毕后，retries的值是一定会大于RETRIES_BEFORE_LOCK的，\n        if (retries > RETRIES_BEFORE_LOCK) {\n            for (int j = 0; j < segments.length; ++j)\n                segmentAt(segments, j).unlock();\n        }\n    }\n    return overflow ? Integer.MAX_VALUE : size;\n}\n```\n\n#### jdk1.8\n\n在jdk1.8中没有采用分段锁的方式保证在多线程下的安全，采用的是CAS+synchronized来保证在多线程的安全。\n底层的数据存储也变成了数组+链表+红黑树的方式。\n\n##### Node\n\nNode 和HashMap中的Node结构大致类似，只不过value和next通过volatile进行了修饰，保证了内存的可见性。还增加了一个find方法，通过这个node遍历之后的全部node找对对应key的节点。\n\n```\nfinal int hash;\nfinal K key;\nvolatile V val;\nvolatile Node<K,V> next;\n\nNode<K,V> find(int h, Object k) {\n    Node<K,V> e = this;\n    if (k != null) {\n        do {\n            K ek;\n            if (e.hash == h &&\n                ((ek = e.key) == k || (ek != null && k.equals(ek))))\n                return e;\n        } while ((e = e.next) != null);\n    }\n    return null;\n}\n```\n\n##### ConcurrentHashMap的初始化\n\n```\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    while ((tab = table) == null || tab.length == 0) {\n        //如果sizeCtl < 0 说明已经有其他线程进行了初始化，此时只需要将CPU的时间片让出即可\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); // lost initialization race; just spin\n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            //进行初始化\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    sc = n - (n >>> 2);//0.75*capacity\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n初始化的操作会在第一次put操作的时候进行，初始化的时候会调整table的大小。\n\n##### put方法\n\n```\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    //value不能为空\n    if (key == null || value == null) throw new NullPointerException();\n    int hash = spread(key.hashCode());//获取key的hash值 （(h ^ (h >>> 16)) & HASH_BITS;）\n    int binCount = 0;\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)//第一次put的时候对table进行初始化\n            tab = initTable();\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) { //如果table对应的index上的Node为空 进行初始化\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                   // no lock when adding to empty bin\n        }\n        else if ((fh = f.hash) == MOVED)// 当前Map在扩容，先协助扩容，在更新值。\n            tab = helpTransfer(tab, f);\n        else { //hash冲突\n            V oldVal = null;\n            synchronized (f) {//通过synchronized 进行加锁\n                if (tabAt(tab, i) == f) {//链表头结点\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {//如果key存在的情况\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {//节点不存在的情况，直接加在链表的尾部\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    else if (f instanceof TreeBin) { //如果节点是红黑树节点，插入到红黑树节点中\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)//如果链表长度大于等于8\n                    treeifyBin(tab, i); //转变为红黑树\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);// 统计节点个数，检查是否需要resize\n    return null;\n}\n```\n\n1.8的ConcurrentHashMap进行put操作的时候，如果第一次进行put会先初始化table数组，如果对应的bucket为空，通过CAS将node放入对应的bucket，如果当前Map正在进行扩容，则先协助扩容；最后对这个节点加锁，如果节点存在进行更新值，如果不存在加在链表的尾部，如果是红黑树节点插入红黑树，最后会判断如果链表长度超过8会将当前链表转换为红黑树。\n\n###### helpTransfer\n\n```\nfinal Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) {\n    Node<K,V>[] nextTab; int sc;\n    //tab不为空 && f 属于ForwardingNode类型（Node的hash值为-1）\n    //如果nextTable为null,则表示迁移完成了\n    if (tab != null && (f instanceof ForwardingNode) &&\n        (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {\n        int rs = resizeStamp(tab.length);//要调整的大小\n        while (nextTab == nextTable && table == tab &&\n               (sc = sizeCtl) < 0) {\n            if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                sc == rs + MAX_RESIZERS || transferIndex <= 0)\n                break;\n            //每有一个线程来帮助迁移，sizeCtl就+1\n            if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) {\n                transfer(tab, nextTab);\n                break;\n            }\n        }\n        return nextTab;\n    }\n    return table;\n}\n```\n\n此方法是帮助Map进行扩容\n\n###### addCount \n\n```\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //更新baseCount\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {//是不是需要检查\n        Node<K,V>[] tab, nt; int n, sc;\n        //符合扩容条件，map.size 大于阈值 table不为空，链表长度超过8\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);//根据长度得到一标识\n            if (sc < 0) {//正在扩容\n                // 如果 sc 的低 16 位不等于 标识符（校验异常 sizeCtl 变化了）\n                // 如果 sc == 标识符 + 1 （扩容结束了，不再有线程进行扩容）（默认第一个线程设置 sc ==rs 左移 16 位 + 2，当第一个线程结束扩容了，就会将 sc 减一。这个时候，sc 就等于 rs + 1）\n                // 如果 sc == 标识符 + 65535（帮助线程数已经达到最大）\n                // 如果 nextTable == null（结束扩容了）\n                // 如果 transferIndex <= 0 (转移状态变化了)\n                // 结束循环 \n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                // 如果可以帮助扩容，那么将 sc 加 1. 表示多了一个线程在帮助扩容\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            // 如果不在扩容，将 sc 更新：标识符左移 16 位 然后 + 2. 也就是变成一个负数。高 16 位是标识符，低 16 位初始是 2.\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                // 更新 sc 为负数后，开始扩容。\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n\naddCount 方法主要进行了两个操作 1 更新baseCount 2 检查是不是需要扩容\n主要说下 检查扩容的部分，首先如果满足扩容条件的话，如果sc是负数则代表正在扩容，此时如果 sizeCtl变化|扩容结束|帮助线程达到最大|等结束循环。如果可以帮助扩容的话就在增加一个线程帮助扩容；如果还没开始扩容就把sc设为负数开始扩容。\n\n###### transfer 扩容\n\n```\nprivate final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n    int n = tab.length, stride;\n    //stride最小为16\n    if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n        stride = MIN_TRANSFER_STRIDE; // subdivide range\n    if (nextTab == null) {            // initiating\n        try {\n            @SuppressWarnings(\"unchecked\")\n            Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];//扩容两倍\n            nextTab = nt;\n        } catch (Throwable ex) {      // try to cope with OOME\n            sizeCtl = Integer.MAX_VALUE;\n            return;\n        }\n        nextTable = nextTab;\n        transferIndex = n;\n    }\n    int nextn = nextTab.length;\n    //正在被迁移的node，ForwardingNode的hash 是MOVED，key value next 都是null，其中的nextTable指向新的tab\n    ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n    boolean advance = true;//advance为true，可以继续迁移下一个节点，false则停止迁移\n    boolean finishing = false; // to ensure sweep before committing nextTab\n    for (int i = 0, bound = 0;;) { //i迁移位置的索引，bound迁移的边界\n        Node<K,V> f; int fh;\n        while (advance) {\n            int nextIndex, nextBound;\n            if (--i >= bound || finishing) //finishing 为true停止while循环\n                advance = false;\n            else if ((nextIndex = transferIndex) <= 0) {//transferIndex（上一次迁移的边界）赋值给nextInde，transferIndex小于等于0，说明原数组的所有位置的迁移都有相应的线程去处理了，该线程可以不用迁移了\n                i = -1;\n                advance = false;\n            }\n            //将nextBound赋值给bound，nextBound = nextIndex - stride（上一个边界减去步长）\n            else if (U.compareAndSwapInt\n                     (this, TRANSFERINDEX, nextIndex,\n                      nextBound = (nextIndex > stride ?\n                                   nextIndex - stride : 0))) {\n                bound = nextBound;\n                i = nextIndex - 1;\n                advance = false;\n            }\n        }\n        //i < 0 所有迁移任务完成\n        if (i < 0 || i >= n || i + n >= nextn) {\n            int sc;\n             //所有迁移完成，将nextTable设为空，sizeCtl为新tab.length * 0.75\n            if (finishing) {\n                nextTable = null;\n                table = nextTab;\n                sizeCtl = (n << 1) - (n >>> 1);\n                return;\n            }\n            //该线程完成迁移，sizeCtl - 1，对应之前helpTransfer()中+1\n            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {\n                //不相等说明还有其他线程没完成迁移，该线程结束任务\n                if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)\n                    return;\n                finishing = advance = true;//如果相等，则说明说有线程都完成任务了，设置finish为true\n                i = n; // recheck before commit\n            }\n        }\n        else if ((f = tabAt(tab, i)) == null)//如果旧tab[i]为null，则放入ForwardingNode\n            advance = casTabAt(tab, i, null, fwd);\n        else if ((fh = f.hash) == MOVED)//该节点为ForwardingNode，则说明已经被迁移过了，就可以开始迁移下一个节点了\n            advance = true; // already processed\n        else {\n            synchronized (f) {//迁移开始加锁\n                if (tabAt(tab, i) == f) {\n                    Node<K,V> ln, hn;\n                    if (fh >= 0) {//fh >= 0,说明是链表结构\n                        int runBit = fh & n;\n                        Node<K,V> lastRun = f;\n                        for (Node<K,V> p = f.next; p != null; p = p.next) {\n                            int b = p.hash & n;\n                            if (b != runBit) {\n                                runBit = b;\n                                lastRun = p;\n                            }\n                        }\n                        if (runBit == 0) {\n                            ln = lastRun;\n                            hn = null;\n                        }\n                        else {\n                            hn = lastRun;\n                            ln = null;\n                        }\n                        for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                            int ph = p.hash; K pk = p.key; V pv = p.val;\n                            if ((ph & n) == 0)\n                                ln = new Node<K,V>(ph, pk, pv, ln);\n                            else\n                                hn = new Node<K,V>(ph, pk, pv, hn);\n                        }\n                        setTabAt(nextTab, i, ln);\n                        setTabAt(nextTab, i + n, hn);\n                        setTabAt(tab, i, fwd);\n                        advance = true;\n                    }\n                    else if (f instanceof TreeBin) { //红黑树结构\n                        TreeBin<K,V> t = (TreeBin<K,V>)f;\n                        TreeNode<K,V> lo = null, loTail = null;\n                        TreeNode<K,V> hi = null, hiTail = null;\n                        int lc = 0, hc = 0;\n                        for (Node<K,V> e = t.first; e != null; e = e.next) {\n                            int h = e.hash;\n                            TreeNode<K,V> p = new TreeNode<K,V>\n                                (h, e.key, e.val, null, null);\n                            if ((h & n) == 0) {\n                                if ((p.prev = loTail) == null)\n                                    lo = p;\n                                else\n                                    loTail.next = p;\n                                loTail = p;\n                                ++lc;\n                            }\n                            else {\n                                if ((p.prev = hiTail) == null)\n                                    hi = p;\n                                else\n                                    hiTail.next = p;\n                                hiTail = p;\n                                ++hc;\n                            }\n                        }\n                        ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :\n                            (hc != 0) ? new TreeBin<K,V>(lo) : t;\n                        hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n                            (lc != 0) ? new TreeBin<K,V>(hi) : t;\n                        setTabAt(nextTab, i, ln);\n                        setTabAt(nextTab, i + n, hn);\n                        setTabAt(tab, i, fwd);\n                        advance = true;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n1. 遍历整个table，当前节点为空，则采用CAS的方式在当前位置放入fwd\n2. 当前节点已经为fwd(with hash field “MOVED”)，则已经有有线程处理完了了，直接跳过 ，这里是控制并发扩容的核心\n3. 当前节点为链表节点或红黑树，重新计算链表节点的hash值，移动到nextTable相应的位置（构建了一个反序链表和顺序链表，分别放置在i和i+n的位置上）。移动完成后，用Unsafe.putObjectVolatile在tab的原位置赋为为fwd, 表示当前节点已经完成扩容。\n\n\n##### get\n\n```\npublic V get(Object key) {\n    Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek;\n    int h = spread(key.hashCode());\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (e = tabAt(tab, (n - 1) & h)) != null) {\n        if ((eh = e.hash) == h) {\n            if ((ek = e.key) == key || (ek != null && key.equals(ek)))\n                return e.val;\n        }\n        else if (eh < 0)\n            return (p = e.find(h, key)) != null ? p.val : null;\n        while ((e = e.next) != null) {\n            if (e.hash == h &&\n                ((ek = e.key) == key || (ek != null && key.equals(ek))))\n                return e.val;\n        }\n    }\n    return null;\n}\n```\n\n读取元素的操作就很简单，获取到对应的hash值，如果 table为空或对应的头节点为空直接返回null，不然就找到对应的bucket找到对应的node返回。\n\n","source":"_posts/javasource/util/4_ConcurrentHashMap.md","raw":"---\ntitle: ConcurrentHashMap(1.7|1.8)阅读 \ndate: 2019-11-21 22:20:28\ncomments: false\ntags: \n- java\n- ConcurrentHashMap\ncategories: \n- java\nkeywords: \n- java\n- ConcurrentHashMap \n---\n\n### ConcurrentHashMap \n\n#### jdk1.7\n\nConcurrentHashMap 和 HashMap非常类似，ConcurrentHashMap在实现上采取了分段锁的思想来实现的。\n\nConcurrentHashMap在内部采用了一个叫做 Segment 的结构，一个Segment就类似HashMap中的table，这样在定位一个元素的时候，需要进行两次hash操作，一次定位到Segment，第二次定位到Segment中的table的index。这样带来的好处的是写操作只需要针对对应的Segment的进行写，因此Segment的数量就是理论最大的并发数。\n\nConcurrentHashMap的结构类似如下： \n\n![结构图](../../../../uploads/javasource/util/ConcurrentHashMap.png)\n\n##### Segment \n```\nstatic final class Segment<K,V> extends ReentrantLock implements Serializable {\n    private static final long serialVersionUID = 2249069246763182397L;\n    //重试次数 单核 1 多核64\n    static final int MAX_SCAN_RETRIES =\n        Runtime.getRuntime().availableProcessors() > 1 ? 64 : 1;\n    //Segment中的table\n    transient volatile HashEntry<K,V>[] table;\n    //元素的数量\n    transient int count;\n    //对table的大小造成影响的操作的数量\n    transient int modCount;\n    //阈值\n    transient int threshold;\n     //负载因子\n    final float loadFactor;\n    //构造函数\n    Segment(float lf, int threshold, HashEntry<K,V>[] tab) {\n        this.loadFactor = lf;\n        this.threshold = threshold;\n        this.table = tab;\n    }\n\n    final V put(K key, int hash, V value, boolean onlyIfAbsent) {\n        //获取锁（针对Segment），获取到node为null，否则调用scanAndLockForPut方法\n        HashEntry<K,V> node = tryLock() ? null :\n            scanAndLockForPut(key, hash, value);\n        V oldValue;\n        try {\n            //Segment中的table\n            HashEntry<K,V>[] tab = table;\n            int index = (tab.length - 1) & hash;\n            HashEntry<K,V> first = entryAt(tab, index);\n            for (HashEntry<K,V> e = first;;) {\n                //对应index上的链表节点不为空，看看是不是有相等的key，有相等的key就替换； \n                if (e != null) {\n                    K k;\n                    if ((k = e.key) == key ||\n                        (e.hash == hash && key.equals(k))) {\n                        oldValue = e.value;\n                        if (!onlyIfAbsent) {\n                            e.value = value;\n                            ++modCount;\n                        }\n                        break;\n                    }\n                    e = e.next;//遍历下一个\n                }\n                else { //链表节点为空\n                    if (node != null)\n                        node.setNext(first);//加到链表的头部\n                    else //node为空就得新建\n                        node = new HashEntry<K,V>(hash, key, value, first);\n                    int c = count + 1;\n                    if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                        rehash(node); //需不需要rehash\n                    else\n                        setEntryAt(tab, index, node);//直接插入node到指定index位置\n                    ++modCount;\n                    count = c;\n                    oldValue = null;\n                    break;\n                }\n            }\n        } finally {\n            unlock();\n        }\n        return oldValue;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void rehash(HashEntry<K,V> node) {\n        HashEntry<K,V>[] oldTable = table;//旧的table\n        int oldCapacity = oldTable.length;\n        int newCapacity = oldCapacity << 1;\n        threshold = (int)(newCapacity * loadFactor);\n        HashEntry<K,V>[] newTable =\n            (HashEntry<K,V>[]) new HashEntry[newCapacity];//新的table\n        int sizeMask = newCapacity - 1;\n        for (int i = 0; i < oldCapacity ; i++) {//遍历旧的table\n            HashEntry<K,V> e = oldTable[i]; //每个table的第一个entry\n            if (e != null) {\n                HashEntry<K,V> next = e.next;\n                int idx = e.hash & sizeMask; //重新计算新的index\n                if (next == null)   //  Single node on list 只有一个元素\n                    newTable[idx] = e;//直接在新的table新index上赋值该节点\n                else { // Reuse consecutive sequence at same slot\n                    HashEntry<K,V> lastRun = e;\n                    int lastIdx = idx;\n                    for (HashEntry<K,V> last = next;\n                         last != null;\n                         last = last.next) {//遍历链表\n                        int k = last.hash & sizeMask; //在新table的位置\n                        if (k != lastIdx) {//头结点和头结点的next元素的节点发生了变化\n                            lastIdx = k;\n                            lastRun = last;\n                        }\n                    }\n                    // 1. lastRun 和 lastIdx 没有发生变化,也就是整个链表的每个元素位置和一样,都没有发生变化\n                    // 2.    lastRun 和 lastIdx 发生了变化,记录变化位置和变化节点,然后把变化的这个节点设置到新table\n                    newTable[lastIdx] = lastRun;\n                    // Clone remaining nodes\n                    for (HashEntry<K,V> p = e; p != lastRun; p = p.next) {\n                        V v = p.value;\n                        int h = p.hash;\n                        int k = h & sizeMask;\n                        HashEntry<K,V> n = newTable[k];\n                        newTable[k] = new HashEntry<K,V>(h, p.key, v, n);\n                    }\n                }\n            }\n        }\n        // 处理扩容时那个添加的节点\n        int nodeIndex = node.hash & sizeMask; // add the new node\n        node.setNext(newTable[nodeIndex]);\n        newTable[nodeIndex] = node;\n        table = newTable;\n    }\n    //自选获取锁\n    private HashEntry<K,V> scanAndLockForPut(K key, int hash, V value) {\n        HashEntry<K,V> first = entryForHash(this, hash);//获取头节点 \n        HashEntry<K,V> e = first;\n        HashEntry<K,V> node = null;\n        int retries = -1; // negative while locating node 是为了找到对应hash桶,遍历链表时找到就停止\n        while (!tryLock()) { //自旋获取锁\n            HashEntry<K,V> f; // to recheck first below\n            if (retries < 0) {\n                if (e == null) {//结束遍历节点\n                    if (node == null) // speculatively create node\n                        node = new HashEntry<K,V>(hash, key, value, null);\n                    retries = 0;\n                }\n                else if (key.equals(e.key))// 找到节点 停止遍历\n                    retries = 0;\n                else\n                    e = e.next;\n            }\n            else if (++retries > MAX_SCAN_RETRIES) {// 达到自旋的最大次数\n                lock();//阻塞\n                break;\n            }\n            else if ((retries & 1) == 0 &&\n                     (f = entryForHash(this, hash)) != first) {//// 头结点变化,需要重新遍历,说明有新的节点加入或者移除\n                e = first = f; // re-traverse if entry changed\n                retries = -1;\n            }\n        }\n        return node;\n    }\n    //自旋获取锁\n    private void scanAndLock(Object key, int hash) {\n        // similar to but simpler than scanAndLockForPut\n        HashEntry<K,V> first = entryForHash(this, hash);\n        HashEntry<K,V> e = first;\n        int retries = -1;\n        while (!tryLock()) {\n            HashEntry<K,V> f;\n            if (retries < 0) {\n                if (e == null || key.equals(e.key))\n                    retries = 0;\n                else\n                    e = e.next;\n            }\n            else if (++retries > MAX_SCAN_RETRIES) {\n                lock();\n                break;\n            }\n            else if ((retries & 1) == 0 &&\n                     (f = entryForHash(this, hash)) != first) {\n                e = first = f;\n                retries = -1;\n            }\n        }\n    }\n}\n```\n\nSegment中主要的方法就是put添加元素，rehash 对table进行扩容，scanAndLockForPut，scanAndLock自旋获取锁。\n\n##### 成员变量\n```\nstatic final int DEFAULT_INITIAL_CAPACITY = 16;\n\nstatic final float DEFAULT_LOAD_FACTOR = 0.75f;\n\nstatic final int DEFAULT_CONCURRENCY_LEVEL = 16;\n\nstatic final int MAXIMUM_CAPACITY = 1 << 30;\n\nstatic final int MIN_SEGMENT_TABLE_CAPACITY = 2;\n\nstatic final int MAX_SEGMENTS = 1 << 16; // slightly conservative\n\nstatic final int RETRIES_BEFORE_LOCK = 2;\n```\n\nConcurrentHashMap 主要的默认参数和HashMap差不多。\n\n> - DEFAULT_CONCURRENCY_LEVEL 是默认的并发数（Segment数组的数量）\n> - MIN_SEGMENT_TABLE_CAPACITY 每个Segment最小的容量 \n> - MAX_SEGMENTS 每个Segment最大的容量   \n> - RETRIES_BEFORE_LOCK默认的自旋次数\n\n##### put\n```\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);//对应key的hash值\n    int j = (hash >>> segmentShift) & segmentMask;//获取对应hash值在segments数组的index\n    if ((s = (Segment<K,V>)UNSAFE.getObject          // nonvolatile; recheck\n         (segments, (j << SSHIFT) + SBASE)) == null) //  in ensureSegment\n        s = ensureSegment(j); //如果对应内存偏移量中没有，则创建ensureSegment\n    return s.put(key, hash, value, false);\n}\nprivate Segment<K,V> ensureSegment(int k) {\n    final Segment<K,V>[] ss = this.segments;\n    long u = (k << SSHIFT) + SBASE; // raw offset\n    Segment<K,V> seg;\n    if ((seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u)) == null) {\n        Segment<K,V> proto = ss[0]; // use segment 0 as prototype  以初始化创建的第一个index下标的值为模板\n        int cap = proto.table.length;\n        float lf = proto.loadFactor;\n        int threshold = (int)(cap * lf);\n        HashEntry<K,V>[] tab = (HashEntry<K,V>[])new HashEntry[cap];\n        if ((seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u))\n            == null) { // recheck 再次检查有没有其他线程已经创建了\n            Segment<K,V> s = new Segment<K,V>(lf, threshold, tab);\n            while ((seg = (Segment<K,V>)UNSAFE.getObjectVolatile(ss, u))\n                   == null) {\n                if (UNSAFE.compareAndSwapObject(ss, u, null, seg = s)) // 通过cas自旋的方式来创建\n                    break;\n            }\n        }\n    }\n    return seg;\n}\n```\n\nConcurrentHashMap中value不能为null，否则会抛出空指针异常，然后获取到对应key的hash值对应的Segment。\n如果对应的Segment不存在，则通过CAS的方式去创建Segment，这是不加锁方式下又可能保证线程安全的方法。\n\n##### get\n```\npublic V get(Object key) {\n    Segment<K,V> s; // manually integrate access methods to reduce overhead\n    HashEntry<K,V>[] tab;\n    int h = hash(key);//对应key的hash值\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;//获取对应hash值存储所在segments数组中内存偏移量\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&\n        (tab = s.table) != null) { //获取到对应Segment中的table\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\nConcurrentHashMap 的get方法就是先获取到对应的Segment，在获取到Segment中的table对应的HashEntry的头节点，但是通过UNSAFE.getObjectVolatile 获取到的是内存中最新的数据，在遍历的过程中，有可能数据被其他线程修改，导致最终返回的数据可能是过时的数据，因此此方法是弱一致性的。\n\n##### size\n\n```\npublic int size() {\n    final Segment<K,V>[] segments = this.segments;\n    int size;\n    boolean overflow; // 是否溢出\n    long sum;         // 存储本次循环过程中计算得到的modCount的值\n    long last = 0L;   // 存储上一次遍历过程中计算得到的modCount的和\n    int retries = -1; // first iteration isn't retry\n    try {\n        //无限for循环，结束条件就是任意前后两次遍历过程中modcount值的和是一样的，说明第二次遍历没有做任何变化\n        for (;;) {//\n            //\n            //为了防止由于有线程不断在更新map而导致每次遍历过程一直发现modCount和上一次不一样导致线程一直进行遍历验证前后两次modCoun,加了一个最多重复的次数限制,超过这个次数则直接强制对所有的segment进行加锁(会导致可以延迟创建的Segment在这个过程中被创建）\n            if (retries++ == RETRIES_BEFORE_LOCK) {\n                for (int j = 0; j < segments.length; ++j)\n                    ensureSegment(j).lock(); // force creation\n            }\n            sum = 0L;\n            size = 0;\n            overflow = false;\n            for (int j = 0; j < segments.length; ++j) {\n                Segment<K,V> seg = segmentAt(segments, j);\n                if (seg != null) {\n                    sum += seg.modCount;\n                    int c = seg.count;\n                    if (c < 0 || (size += c) < 0)\n                        overflow = true;\n                }\n            }\n            if (sum == last)\n                break;\n            last = sum;\n        }\n    } finally {\n        //由于只有在retries等于RETRIES_BEFORE_LOCK时才会执行强制加锁，并且由于是用的retries++，所以强制加锁完毕后，retries的值是一定会大于RETRIES_BEFORE_LOCK的，\n        if (retries > RETRIES_BEFORE_LOCK) {\n            for (int j = 0; j < segments.length; ++j)\n                segmentAt(segments, j).unlock();\n        }\n    }\n    return overflow ? Integer.MAX_VALUE : size;\n}\n```\n\n#### jdk1.8\n\n在jdk1.8中没有采用分段锁的方式保证在多线程下的安全，采用的是CAS+synchronized来保证在多线程的安全。\n底层的数据存储也变成了数组+链表+红黑树的方式。\n\n##### Node\n\nNode 和HashMap中的Node结构大致类似，只不过value和next通过volatile进行了修饰，保证了内存的可见性。还增加了一个find方法，通过这个node遍历之后的全部node找对对应key的节点。\n\n```\nfinal int hash;\nfinal K key;\nvolatile V val;\nvolatile Node<K,V> next;\n\nNode<K,V> find(int h, Object k) {\n    Node<K,V> e = this;\n    if (k != null) {\n        do {\n            K ek;\n            if (e.hash == h &&\n                ((ek = e.key) == k || (ek != null && k.equals(ek))))\n                return e;\n        } while ((e = e.next) != null);\n    }\n    return null;\n}\n```\n\n##### ConcurrentHashMap的初始化\n\n```\nprivate final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    while ((tab = table) == null || tab.length == 0) {\n        //如果sizeCtl < 0 说明已经有其他线程进行了初始化，此时只需要将CPU的时间片让出即可\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); // lost initialization race; just spin\n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            //进行初始化\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    sc = n - (n >>> 2);//0.75*capacity\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n```\n\n初始化的操作会在第一次put操作的时候进行，初始化的时候会调整table的大小。\n\n##### put方法\n\n```\npublic V put(K key, V value) {\n    return putVal(key, value, false);\n}\n\nfinal V putVal(K key, V value, boolean onlyIfAbsent) {\n    //value不能为空\n    if (key == null || value == null) throw new NullPointerException();\n    int hash = spread(key.hashCode());//获取key的hash值 （(h ^ (h >>> 16)) & HASH_BITS;）\n    int binCount = 0;\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)//第一次put的时候对table进行初始化\n            tab = initTable();\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) { //如果table对应的index上的Node为空 进行初始化\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                   // no lock when adding to empty bin\n        }\n        else if ((fh = f.hash) == MOVED)// 当前Map在扩容，先协助扩容，在更新值。\n            tab = helpTransfer(tab, f);\n        else { //hash冲突\n            V oldVal = null;\n            synchronized (f) {//通过synchronized 进行加锁\n                if (tabAt(tab, i) == f) {//链表头结点\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {//如果key存在的情况\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {//节点不存在的情况，直接加在链表的尾部\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    else if (f instanceof TreeBin) { //如果节点是红黑树节点，插入到红黑树节点中\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)//如果链表长度大于等于8\n                    treeifyBin(tab, i); //转变为红黑树\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);// 统计节点个数，检查是否需要resize\n    return null;\n}\n```\n\n1.8的ConcurrentHashMap进行put操作的时候，如果第一次进行put会先初始化table数组，如果对应的bucket为空，通过CAS将node放入对应的bucket，如果当前Map正在进行扩容，则先协助扩容；最后对这个节点加锁，如果节点存在进行更新值，如果不存在加在链表的尾部，如果是红黑树节点插入红黑树，最后会判断如果链表长度超过8会将当前链表转换为红黑树。\n\n###### helpTransfer\n\n```\nfinal Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) {\n    Node<K,V>[] nextTab; int sc;\n    //tab不为空 && f 属于ForwardingNode类型（Node的hash值为-1）\n    //如果nextTable为null,则表示迁移完成了\n    if (tab != null && (f instanceof ForwardingNode) &&\n        (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {\n        int rs = resizeStamp(tab.length);//要调整的大小\n        while (nextTab == nextTable && table == tab &&\n               (sc = sizeCtl) < 0) {\n            if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                sc == rs + MAX_RESIZERS || transferIndex <= 0)\n                break;\n            //每有一个线程来帮助迁移，sizeCtl就+1\n            if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) {\n                transfer(tab, nextTab);\n                break;\n            }\n        }\n        return nextTab;\n    }\n    return table;\n}\n```\n\n此方法是帮助Map进行扩容\n\n###### addCount \n\n```\nprivate final void addCount(long x, int check) {\n    CounterCell[] as; long b, s;\n    //更新baseCount\n    if ((as = counterCells) != null ||\n        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) {\n        CounterCell a; long v; int m;\n        boolean uncontended = true;\n        if (as == null || (m = as.length - 1) < 0 ||\n            (a = as[ThreadLocalRandom.getProbe() & m]) == null ||\n            !(uncontended =\n              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) {\n            fullAddCount(x, uncontended);\n            return;\n        }\n        if (check <= 1)\n            return;\n        s = sumCount();\n    }\n    if (check >= 0) {//是不是需要检查\n        Node<K,V>[] tab, nt; int n, sc;\n        //符合扩容条件，map.size 大于阈值 table不为空，链表长度超过8\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) {\n            int rs = resizeStamp(n);//根据长度得到一标识\n            if (sc < 0) {//正在扩容\n                // 如果 sc 的低 16 位不等于 标识符（校验异常 sizeCtl 变化了）\n                // 如果 sc == 标识符 + 1 （扩容结束了，不再有线程进行扩容）（默认第一个线程设置 sc ==rs 左移 16 位 + 2，当第一个线程结束扩容了，就会将 sc 减一。这个时候，sc 就等于 rs + 1）\n                // 如果 sc == 标识符 + 65535（帮助线程数已经达到最大）\n                // 如果 nextTable == null（结束扩容了）\n                // 如果 transferIndex <= 0 (转移状态变化了)\n                // 结束循环 \n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break;\n                // 如果可以帮助扩容，那么将 sc 加 1. 表示多了一个线程在帮助扩容\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))\n                    transfer(tab, nt);\n            }\n            // 如果不在扩容，将 sc 更新：标识符左移 16 位 然后 + 2. 也就是变成一个负数。高 16 位是标识符，低 16 位初始是 2.\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2))\n                // 更新 sc 为负数后，开始扩容。\n                transfer(tab, null);\n            s = sumCount();\n        }\n    }\n}\n```\n\naddCount 方法主要进行了两个操作 1 更新baseCount 2 检查是不是需要扩容\n主要说下 检查扩容的部分，首先如果满足扩容条件的话，如果sc是负数则代表正在扩容，此时如果 sizeCtl变化|扩容结束|帮助线程达到最大|等结束循环。如果可以帮助扩容的话就在增加一个线程帮助扩容；如果还没开始扩容就把sc设为负数开始扩容。\n\n###### transfer 扩容\n\n```\nprivate final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n    int n = tab.length, stride;\n    //stride最小为16\n    if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n        stride = MIN_TRANSFER_STRIDE; // subdivide range\n    if (nextTab == null) {            // initiating\n        try {\n            @SuppressWarnings(\"unchecked\")\n            Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];//扩容两倍\n            nextTab = nt;\n        } catch (Throwable ex) {      // try to cope with OOME\n            sizeCtl = Integer.MAX_VALUE;\n            return;\n        }\n        nextTable = nextTab;\n        transferIndex = n;\n    }\n    int nextn = nextTab.length;\n    //正在被迁移的node，ForwardingNode的hash 是MOVED，key value next 都是null，其中的nextTable指向新的tab\n    ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n    boolean advance = true;//advance为true，可以继续迁移下一个节点，false则停止迁移\n    boolean finishing = false; // to ensure sweep before committing nextTab\n    for (int i = 0, bound = 0;;) { //i迁移位置的索引，bound迁移的边界\n        Node<K,V> f; int fh;\n        while (advance) {\n            int nextIndex, nextBound;\n            if (--i >= bound || finishing) //finishing 为true停止while循环\n                advance = false;\n            else if ((nextIndex = transferIndex) <= 0) {//transferIndex（上一次迁移的边界）赋值给nextInde，transferIndex小于等于0，说明原数组的所有位置的迁移都有相应的线程去处理了，该线程可以不用迁移了\n                i = -1;\n                advance = false;\n            }\n            //将nextBound赋值给bound，nextBound = nextIndex - stride（上一个边界减去步长）\n            else if (U.compareAndSwapInt\n                     (this, TRANSFERINDEX, nextIndex,\n                      nextBound = (nextIndex > stride ?\n                                   nextIndex - stride : 0))) {\n                bound = nextBound;\n                i = nextIndex - 1;\n                advance = false;\n            }\n        }\n        //i < 0 所有迁移任务完成\n        if (i < 0 || i >= n || i + n >= nextn) {\n            int sc;\n             //所有迁移完成，将nextTable设为空，sizeCtl为新tab.length * 0.75\n            if (finishing) {\n                nextTable = null;\n                table = nextTab;\n                sizeCtl = (n << 1) - (n >>> 1);\n                return;\n            }\n            //该线程完成迁移，sizeCtl - 1，对应之前helpTransfer()中+1\n            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {\n                //不相等说明还有其他线程没完成迁移，该线程结束任务\n                if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)\n                    return;\n                finishing = advance = true;//如果相等，则说明说有线程都完成任务了，设置finish为true\n                i = n; // recheck before commit\n            }\n        }\n        else if ((f = tabAt(tab, i)) == null)//如果旧tab[i]为null，则放入ForwardingNode\n            advance = casTabAt(tab, i, null, fwd);\n        else if ((fh = f.hash) == MOVED)//该节点为ForwardingNode，则说明已经被迁移过了，就可以开始迁移下一个节点了\n            advance = true; // already processed\n        else {\n            synchronized (f) {//迁移开始加锁\n                if (tabAt(tab, i) == f) {\n                    Node<K,V> ln, hn;\n                    if (fh >= 0) {//fh >= 0,说明是链表结构\n                        int runBit = fh & n;\n                        Node<K,V> lastRun = f;\n                        for (Node<K,V> p = f.next; p != null; p = p.next) {\n                            int b = p.hash & n;\n                            if (b != runBit) {\n                                runBit = b;\n                                lastRun = p;\n                            }\n                        }\n                        if (runBit == 0) {\n                            ln = lastRun;\n                            hn = null;\n                        }\n                        else {\n                            hn = lastRun;\n                            ln = null;\n                        }\n                        for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                            int ph = p.hash; K pk = p.key; V pv = p.val;\n                            if ((ph & n) == 0)\n                                ln = new Node<K,V>(ph, pk, pv, ln);\n                            else\n                                hn = new Node<K,V>(ph, pk, pv, hn);\n                        }\n                        setTabAt(nextTab, i, ln);\n                        setTabAt(nextTab, i + n, hn);\n                        setTabAt(tab, i, fwd);\n                        advance = true;\n                    }\n                    else if (f instanceof TreeBin) { //红黑树结构\n                        TreeBin<K,V> t = (TreeBin<K,V>)f;\n                        TreeNode<K,V> lo = null, loTail = null;\n                        TreeNode<K,V> hi = null, hiTail = null;\n                        int lc = 0, hc = 0;\n                        for (Node<K,V> e = t.first; e != null; e = e.next) {\n                            int h = e.hash;\n                            TreeNode<K,V> p = new TreeNode<K,V>\n                                (h, e.key, e.val, null, null);\n                            if ((h & n) == 0) {\n                                if ((p.prev = loTail) == null)\n                                    lo = p;\n                                else\n                                    loTail.next = p;\n                                loTail = p;\n                                ++lc;\n                            }\n                            else {\n                                if ((p.prev = hiTail) == null)\n                                    hi = p;\n                                else\n                                    hiTail.next = p;\n                                hiTail = p;\n                                ++hc;\n                            }\n                        }\n                        ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :\n                            (hc != 0) ? new TreeBin<K,V>(lo) : t;\n                        hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n                            (lc != 0) ? new TreeBin<K,V>(hi) : t;\n                        setTabAt(nextTab, i, ln);\n                        setTabAt(nextTab, i + n, hn);\n                        setTabAt(tab, i, fwd);\n                        advance = true;\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n1. 遍历整个table，当前节点为空，则采用CAS的方式在当前位置放入fwd\n2. 当前节点已经为fwd(with hash field “MOVED”)，则已经有有线程处理完了了，直接跳过 ，这里是控制并发扩容的核心\n3. 当前节点为链表节点或红黑树，重新计算链表节点的hash值，移动到nextTable相应的位置（构建了一个反序链表和顺序链表，分别放置在i和i+n的位置上）。移动完成后，用Unsafe.putObjectVolatile在tab的原位置赋为为fwd, 表示当前节点已经完成扩容。\n\n\n##### get\n\n```\npublic V get(Object key) {\n    Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek;\n    int h = spread(key.hashCode());\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (e = tabAt(tab, (n - 1) & h)) != null) {\n        if ((eh = e.hash) == h) {\n            if ((ek = e.key) == key || (ek != null && key.equals(ek)))\n                return e.val;\n        }\n        else if (eh < 0)\n            return (p = e.find(h, key)) != null ? p.val : null;\n        while ((e = e.next) != null) {\n            if (e.hash == h &&\n                ((ek = e.key) == key || (ek != null && key.equals(ek))))\n                return e.val;\n        }\n    }\n    return null;\n}\n```\n\n读取元素的操作就很简单，获取到对应的hash值，如果 table为空或对应的头节点为空直接返回null，不然就找到对应的bucket找到对应的node返回。\n\n","slug":"javasource/util/4_ConcurrentHashMap","published":1,"updated":"2020-01-02T05:49:23.768Z","layout":"post","photos":[],"link":"","_id":"ck6lvszuw007wn0ztgr43r52e","content":"<h3 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h3><h4 id=\"jdk1-7\"><a href=\"#jdk1-7\" class=\"headerlink\" title=\"jdk1.7\"></a>jdk1.7</h4><p>ConcurrentHashMap 和 HashMap非常类似，ConcurrentHashMap在实现上采取了分段锁的思想来实现的。</p>\n<p>ConcurrentHashMap在内部采用了一个叫做 Segment 的结构，一个Segment就类似HashMap中的table，这样在定位一个元素的时候，需要进行两次hash操作，一次定位到Segment，第二次定位到Segment中的table的index。这样带来的好处的是写操作只需要针对对应的Segment的进行写，因此Segment的数量就是理论最大的并发数。</p>\n<p>ConcurrentHashMap的结构类似如下： </p>\n<p><img src=\"../../../../uploads/javasource/util/ConcurrentHashMap.png\" alt=\"结构图\"></p>\n<h5 id=\"Segment\"><a href=\"#Segment\" class=\"headerlink\" title=\"Segment\"></a>Segment</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;</div><div class=\"line\">    private static final long serialVersionUID = 2249069246763182397L;</div><div class=\"line\">    //重试次数 单核 1 多核64</div><div class=\"line\">    static final int MAX_SCAN_RETRIES =</div><div class=\"line\">        Runtime.getRuntime().availableProcessors() &gt; 1 ? 64 : 1;</div><div class=\"line\">    //Segment中的table</div><div class=\"line\">    transient volatile HashEntry&lt;K,V&gt;[] table;</div><div class=\"line\">    //元素的数量</div><div class=\"line\">    transient int count;</div><div class=\"line\">    //对table的大小造成影响的操作的数量</div><div class=\"line\">    transient int modCount;</div><div class=\"line\">    //阈值</div><div class=\"line\">    transient int threshold;</div><div class=\"line\">     //负载因子</div><div class=\"line\">    final float loadFactor;</div><div class=\"line\">    //构造函数</div><div class=\"line\">    Segment(float lf, int threshold, HashEntry&lt;K,V&gt;[] tab) &#123;</div><div class=\"line\">        this.loadFactor = lf;</div><div class=\"line\">        this.threshold = threshold;</div><div class=\"line\">        this.table = tab;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">        //获取锁（针对Segment），获取到node为null，否则调用scanAndLockForPut方法</div><div class=\"line\">        HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">            scanAndLockForPut(key, hash, value);</div><div class=\"line\">        V oldValue;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //Segment中的table</div><div class=\"line\">            HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">            int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">            HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div><div class=\"line\">            for (HashEntry&lt;K,V&gt; e = first;;) &#123;</div><div class=\"line\">                //对应index上的链表节点不为空，看看是不是有相等的key，有相等的key就替换； </div><div class=\"line\">                if (e != null) &#123;</div><div class=\"line\">                    K k;</div><div class=\"line\">                    if ((k = e.key) == key ||</div><div class=\"line\">                        (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                        oldValue = e.value;</div><div class=\"line\">                        if (!onlyIfAbsent) &#123;</div><div class=\"line\">                            e.value = value;</div><div class=\"line\">                            ++modCount;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    e = e.next;//遍历下一个</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123; //链表节点为空</div><div class=\"line\">                    if (node != null)</div><div class=\"line\">                        node.setNext(first);//加到链表的头部</div><div class=\"line\">                    else //node为空就得新建</div><div class=\"line\">                        node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                    int c = count + 1;</div><div class=\"line\">                    if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                        rehash(node); //需不需要rehash</div><div class=\"line\">                    else</div><div class=\"line\">                        setEntryAt(tab, index, node);//直接插入node到指定index位置</div><div class=\"line\">                    ++modCount;</div><div class=\"line\">                    count = c;</div><div class=\"line\">                    oldValue = null;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return oldValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">    private void rehash(HashEntry&lt;K,V&gt; node) &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] oldTable = table;//旧的table</div><div class=\"line\">        int oldCapacity = oldTable.length;</div><div class=\"line\">        int newCapacity = oldCapacity &lt;&lt; 1;</div><div class=\"line\">        threshold = (int)(newCapacity * loadFactor);</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] newTable =</div><div class=\"line\">            (HashEntry&lt;K,V&gt;[]) new HashEntry[newCapacity];//新的table</div><div class=\"line\">        int sizeMask = newCapacity - 1;</div><div class=\"line\">        for (int i = 0; i &lt; oldCapacity ; i++) &#123;//遍历旧的table</div><div class=\"line\">            HashEntry&lt;K,V&gt; e = oldTable[i]; //每个table的第一个entry</div><div class=\"line\">            if (e != null) &#123;</div><div class=\"line\">                HashEntry&lt;K,V&gt; next = e.next;</div><div class=\"line\">                int idx = e.hash &amp; sizeMask; //重新计算新的index</div><div class=\"line\">                if (next == null)   //  Single node on list 只有一个元素</div><div class=\"line\">                    newTable[idx] = e;//直接在新的table新index上赋值该节点</div><div class=\"line\">                else &#123; // Reuse consecutive sequence at same slot</div><div class=\"line\">                    HashEntry&lt;K,V&gt; lastRun = e;</div><div class=\"line\">                    int lastIdx = idx;</div><div class=\"line\">                    for (HashEntry&lt;K,V&gt; last = next;</div><div class=\"line\">                         last != null;</div><div class=\"line\">                         last = last.next) &#123;//遍历链表</div><div class=\"line\">                        int k = last.hash &amp; sizeMask; //在新table的位置</div><div class=\"line\">                        if (k != lastIdx) &#123;//头结点和头结点的next元素的节点发生了变化</div><div class=\"line\">                            lastIdx = k;</div><div class=\"line\">                            lastRun = last;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    // 1. lastRun 和 lastIdx 没有发生变化,也就是整个链表的每个元素位置和一样,都没有发生变化</div><div class=\"line\">                    // 2.    lastRun 和 lastIdx 发生了变化,记录变化位置和变化节点,然后把变化的这个节点设置到新table</div><div class=\"line\">                    newTable[lastIdx] = lastRun;</div><div class=\"line\">                    // Clone remaining nodes</div><div class=\"line\">                    for (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</div><div class=\"line\">                        V v = p.value;</div><div class=\"line\">                        int h = p.hash;</div><div class=\"line\">                        int k = h &amp; sizeMask;</div><div class=\"line\">                        HashEntry&lt;K,V&gt; n = newTable[k];</div><div class=\"line\">                        newTable[k] = new HashEntry&lt;K,V&gt;(h, p.key, v, n);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 处理扩容时那个添加的节点</div><div class=\"line\">        int nodeIndex = node.hash &amp; sizeMask; // add the new node</div><div class=\"line\">        node.setNext(newTable[nodeIndex]);</div><div class=\"line\">        newTable[nodeIndex] = node;</div><div class=\"line\">        table = newTable;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //自选获取锁</div><div class=\"line\">    private HashEntry&lt;K,V&gt; scanAndLockForPut(K key, int hash, V value) &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryForHash(this, hash);//获取头节点 </div><div class=\"line\">        HashEntry&lt;K,V&gt; e = first;</div><div class=\"line\">        HashEntry&lt;K,V&gt; node = null;</div><div class=\"line\">        int retries = -1; // negative while locating node 是为了找到对应hash桶,遍历链表时找到就停止</div><div class=\"line\">        while (!tryLock()) &#123; //自旋获取锁</div><div class=\"line\">            HashEntry&lt;K,V&gt; f; // to recheck first below</div><div class=\"line\">            if (retries &lt; 0) &#123;</div><div class=\"line\">                if (e == null) &#123;//结束遍历节点</div><div class=\"line\">                    if (node == null) // speculatively create node</div><div class=\"line\">                        node = new HashEntry&lt;K,V&gt;(hash, key, value, null);</div><div class=\"line\">                    retries = 0;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else if (key.equals(e.key))// 找到节点 停止遍历</div><div class=\"line\">                    retries = 0;</div><div class=\"line\">                else</div><div class=\"line\">                    e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (++retries &gt; MAX_SCAN_RETRIES) &#123;// 达到自旋的最大次数</div><div class=\"line\">                lock();//阻塞</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if ((retries &amp; 1) == 0 &amp;&amp;</div><div class=\"line\">                     (f = entryForHash(this, hash)) != first) &#123;//// 头结点变化,需要重新遍历,说明有新的节点加入或者移除</div><div class=\"line\">                e = first = f; // re-traverse if entry changed</div><div class=\"line\">                retries = -1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return node;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //自旋获取锁</div><div class=\"line\">    private void scanAndLock(Object key, int hash) &#123;</div><div class=\"line\">        // similar to but simpler than scanAndLockForPut</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryForHash(this, hash);</div><div class=\"line\">        HashEntry&lt;K,V&gt; e = first;</div><div class=\"line\">        int retries = -1;</div><div class=\"line\">        while (!tryLock()) &#123;</div><div class=\"line\">            HashEntry&lt;K,V&gt; f;</div><div class=\"line\">            if (retries &lt; 0) &#123;</div><div class=\"line\">                if (e == null || key.equals(e.key))</div><div class=\"line\">                    retries = 0;</div><div class=\"line\">                else</div><div class=\"line\">                    e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (++retries &gt; MAX_SCAN_RETRIES) &#123;</div><div class=\"line\">                lock();</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if ((retries &amp; 1) == 0 &amp;&amp;</div><div class=\"line\">                     (f = entryForHash(this, hash)) != first) &#123;</div><div class=\"line\">                e = first = f;</div><div class=\"line\">                retries = -1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Segment中主要的方法就是put添加元素，rehash 对table进行扩容，scanAndLockForPut，scanAndLock自旋获取锁。</p>\n<h5 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 16;</div><div class=\"line\"></div><div class=\"line\">static final float DEFAULT_LOAD_FACTOR = 0.75f;</div><div class=\"line\"></div><div class=\"line\">static final int DEFAULT_CONCURRENCY_LEVEL = 16;</div><div class=\"line\"></div><div class=\"line\">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</div><div class=\"line\"></div><div class=\"line\">static final int MIN_SEGMENT_TABLE_CAPACITY = 2;</div><div class=\"line\"></div><div class=\"line\">static final int MAX_SEGMENTS = 1 &lt;&lt; 16; // slightly conservative</div><div class=\"line\"></div><div class=\"line\">static final int RETRIES_BEFORE_LOCK = 2;</div></pre></td></tr></table></figure>\n<p>ConcurrentHashMap 主要的默认参数和HashMap差不多。</p>\n<blockquote>\n<ul>\n<li>DEFAULT_CONCURRENCY_LEVEL 是默认的并发数（Segment数组的数量）</li>\n<li>MIN_SEGMENT_TABLE_CAPACITY 每个Segment最小的容量 </li>\n<li>MAX_SEGMENTS 每个Segment最大的容量   </li>\n<li>RETRIES_BEFORE_LOCK默认的自旋次数</li>\n</ul>\n</blockquote>\n<h5 id=\"put\"><a href=\"#put\" class=\"headerlink\" title=\"put\"></a>put</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s;</div><div class=\"line\">    if (value == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    int hash = hash(key);//对应key的hash值</div><div class=\"line\">    int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;//获取对应hash值在segments数组的index</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          // nonvolatile; recheck</div><div class=\"line\">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) //  in ensureSegment</div><div class=\"line\">        s = ensureSegment(j); //如果对应内存偏移量中没有，则创建ensureSegment</div><div class=\"line\">    return s.put(key, hash, value, false);</div><div class=\"line\">&#125;</div><div class=\"line\">private Segment&lt;K,V&gt; ensureSegment(int k) &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] ss = this.segments;</div><div class=\"line\">    long u = (k &lt;&lt; SSHIFT) + SBASE; // raw offset</div><div class=\"line\">    Segment&lt;K,V&gt; seg;</div><div class=\"line\">    if ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == null) &#123;</div><div class=\"line\">        Segment&lt;K,V&gt; proto = ss[0]; // use segment 0 as prototype  以初始化创建的第一个index下标的值为模板</div><div class=\"line\">        int cap = proto.table.length;</div><div class=\"line\">        float lf = proto.loadFactor;</div><div class=\"line\">        int threshold = (int)(cap * lf);</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])new HashEntry[cap];</div><div class=\"line\">        if ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</div><div class=\"line\">            == null) &#123; // recheck 再次检查有没有其他线程已经创建了</div><div class=\"line\">            Segment&lt;K,V&gt; s = new Segment&lt;K,V&gt;(lf, threshold, tab);</div><div class=\"line\">            while ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</div><div class=\"line\">                   == null) &#123;</div><div class=\"line\">                if (UNSAFE.compareAndSwapObject(ss, u, null, seg = s)) // 通过cas自旋的方式来创建</div><div class=\"line\">                    break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return seg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcurrentHashMap中value不能为null，否则会抛出空指针异常，然后获取到对应key的hash值对应的Segment。<br>如果对应的Segment不存在，则通过CAS的方式去创建Segment，这是不加锁方式下又可能保证线程安全的方法。</p>\n<h5 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s; // manually integrate access methods to reduce overhead</div><div class=\"line\">    HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">    int h = hash(key);//对应key的hash值</div><div class=\"line\">    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;//获取对应hash值存储所在segments数组中内存偏移量</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;</div><div class=\"line\">        (tab = s.table) != null) &#123; //获取到对应Segment中的table</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                 (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">             e != null; e = e.next) &#123;</div><div class=\"line\">            K k;</div><div class=\"line\">            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                return e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcurrentHashMap 的get方法就是先获取到对应的Segment，在获取到Segment中的table对应的HashEntry的头节点，但是通过UNSAFE.getObjectVolatile 获取到的是内存中最新的数据，在遍历的过程中，有可能数据被其他线程修改，导致最终返回的数据可能是过时的数据，因此此方法是弱一致性的。</p>\n<h5 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int size() &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] segments = this.segments;</div><div class=\"line\">    int size;</div><div class=\"line\">    boolean overflow; // 是否溢出</div><div class=\"line\">    long sum;         // 存储本次循环过程中计算得到的modCount的值</div><div class=\"line\">    long last = 0L;   // 存储上一次遍历过程中计算得到的modCount的和</div><div class=\"line\">    int retries = -1; // first iteration isn&apos;t retry</div><div class=\"line\">    try &#123;</div><div class=\"line\">        //无限for循环，结束条件就是任意前后两次遍历过程中modcount值的和是一样的，说明第二次遍历没有做任何变化</div><div class=\"line\">        for (;;) &#123;//</div><div class=\"line\">            //</div><div class=\"line\">            //为了防止由于有线程不断在更新map而导致每次遍历过程一直发现modCount和上一次不一样导致线程一直进行遍历验证前后两次modCoun,加了一个最多重复的次数限制,超过这个次数则直接强制对所有的segment进行加锁(会导致可以延迟创建的Segment在这个过程中被创建）</div><div class=\"line\">            if (retries++ == RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                    ensureSegment(j).lock(); // force creation</div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = 0L;</div><div class=\"line\">            size = 0;</div><div class=\"line\">            overflow = false;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j) &#123;</div><div class=\"line\">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class=\"line\">                if (seg != null) &#123;</div><div class=\"line\">                    sum += seg.modCount;</div><div class=\"line\">                    int c = seg.count;</div><div class=\"line\">                    if (c &lt; 0 || (size += c) &lt; 0)</div><div class=\"line\">                        overflow = true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum == last)</div><div class=\"line\">                break;</div><div class=\"line\">            last = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        //由于只有在retries等于RETRIES_BEFORE_LOCK时才会执行强制加锁，并且由于是用的retries++，所以强制加锁完毕后，retries的值是一定会大于RETRIES_BEFORE_LOCK的，</div><div class=\"line\">        if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                segmentAt(segments, j).unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return overflow ? Integer.MAX_VALUE : size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"jdk1-8\"><a href=\"#jdk1-8\" class=\"headerlink\" title=\"jdk1.8\"></a>jdk1.8</h4><p>在jdk1.8中没有采用分段锁的方式保证在多线程下的安全，采用的是CAS+synchronized来保证在多线程的安全。<br>底层的数据存储也变成了数组+链表+红黑树的方式。</p>\n<h5 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h5><p>Node 和HashMap中的Node结构大致类似，只不过value和next通过volatile进行了修饰，保证了内存的可见性。还增加了一个find方法，通过这个node遍历之后的全部node找对对应key的节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int hash;</div><div class=\"line\">final K key;</div><div class=\"line\">volatile V val;</div><div class=\"line\">volatile Node&lt;K,V&gt; next;</div><div class=\"line\"></div><div class=\"line\">Node&lt;K,V&gt; find(int h, Object k) &#123;</div><div class=\"line\">    Node&lt;K,V&gt; e = this;</div><div class=\"line\">    if (k != null) &#123;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            K ek;</div><div class=\"line\">            if (e.hash == h &amp;&amp;</div><div class=\"line\">                ((ek = e.key) == k || (ek != null &amp;&amp; k.equals(ek))))</div><div class=\"line\">                return e;</div><div class=\"line\">        &#125; while ((e = e.next) != null);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"ConcurrentHashMap的初始化\"><a href=\"#ConcurrentHashMap的初始化\" class=\"headerlink\" title=\"ConcurrentHashMap的初始化\"></a>ConcurrentHashMap的初始化</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final Node&lt;K,V&gt;[] initTable() &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; int sc;</div><div class=\"line\">    while ((tab = table) == null || tab.length == 0) &#123;</div><div class=\"line\">        //如果sizeCtl &lt; 0 说明已经有其他线程进行了初始化，此时只需要将CPU的时间片让出即可</div><div class=\"line\">        if ((sc = sizeCtl) &lt; 0)</div><div class=\"line\">            Thread.yield(); // lost initialization race; just spin</div><div class=\"line\">        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) &#123;</div><div class=\"line\">            //进行初始化</div><div class=\"line\">            try &#123;</div><div class=\"line\">                if ((tab = table) == null || tab.length == 0) &#123;</div><div class=\"line\">                    int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;</div><div class=\"line\">                    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];</div><div class=\"line\">                    table = tab = nt;</div><div class=\"line\">                    sc = n - (n &gt;&gt;&gt; 2);//0.75*capacity</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                sizeCtl = sc;</div><div class=\"line\">            &#125;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return tab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的操作会在第一次put操作的时候进行，初始化的时候会调整table的大小。</p>\n<h5 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    return putVal(key, value, false);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">    //value不能为空</div><div class=\"line\">    if (key == null || value == null) throw new NullPointerException();</div><div class=\"line\">    int hash = spread(key.hashCode());//获取key的hash值 （(h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;）</div><div class=\"line\">    int binCount = 0;</div><div class=\"line\">    for (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class=\"line\">        Node&lt;K,V&gt; f; int n, i, fh;</div><div class=\"line\">        if (tab == null || (n = tab.length) == 0)//第一次put的时候对table进行初始化</div><div class=\"line\">            tab = initTable();</div><div class=\"line\">        else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123; //如果table对应的index上的Node为空 进行初始化</div><div class=\"line\">            if (casTabAt(tab, i, null,</div><div class=\"line\">                         new Node&lt;K,V&gt;(hash, key, value, null)))</div><div class=\"line\">                break;                   // no lock when adding to empty bin</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if ((fh = f.hash) == MOVED)// 当前Map在扩容，先协助扩容，在更新值。</div><div class=\"line\">            tab = helpTransfer(tab, f);</div><div class=\"line\">        else &#123; //hash冲突</div><div class=\"line\">            V oldVal = null;</div><div class=\"line\">            synchronized (f) &#123;//通过synchronized 进行加锁</div><div class=\"line\">                if (tabAt(tab, i) == f) &#123;//链表头结点</div><div class=\"line\">                    if (fh &gt;= 0) &#123;</div><div class=\"line\">                        binCount = 1;</div><div class=\"line\">                        for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class=\"line\">                            K ek;</div><div class=\"line\">                            if (e.hash == hash &amp;&amp;</div><div class=\"line\">                                ((ek = e.key) == key ||</div><div class=\"line\">                                 (ek != null &amp;&amp; key.equals(ek)))) &#123;//如果key存在的情况</div><div class=\"line\">                                oldVal = e.val;</div><div class=\"line\">                                if (!onlyIfAbsent)</div><div class=\"line\">                                    e.val = value;</div><div class=\"line\">                                break;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            Node&lt;K,V&gt; pred = e;</div><div class=\"line\">                            if ((e = e.next) == null) &#123;//节点不存在的情况，直接加在链表的尾部</div><div class=\"line\">                                pred.next = new Node&lt;K,V&gt;(hash, key,</div><div class=\"line\">                                                          value, null);</div><div class=\"line\">                                break;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (f instanceof TreeBin) &#123; //如果节点是红黑树节点，插入到红黑树节点中</div><div class=\"line\">                        Node&lt;K,V&gt; p;</div><div class=\"line\">                        binCount = 2;</div><div class=\"line\">                        if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class=\"line\">                                                       value)) != null) &#123;</div><div class=\"line\">                            oldVal = p.val;</div><div class=\"line\">                            if (!onlyIfAbsent)</div><div class=\"line\">                                p.val = value;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (binCount != 0) &#123;</div><div class=\"line\">                if (binCount &gt;= TREEIFY_THRESHOLD)//如果链表长度大于等于8</div><div class=\"line\">                    treeifyBin(tab, i); //转变为红黑树</div><div class=\"line\">                if (oldVal != null)</div><div class=\"line\">                    return oldVal;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    addCount(1L, binCount);// 统计节点个数，检查是否需要resize</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.8的ConcurrentHashMap进行put操作的时候，如果第一次进行put会先初始化table数组，如果对应的bucket为空，通过CAS将node放入对应的bucket，如果当前Map正在进行扩容，则先协助扩容；最后对这个节点加锁，如果节点存在进行更新值，如果不存在加在链表的尾部，如果是红黑树节点插入红黑树，最后会判断如果链表长度超过8会将当前链表转换为红黑树。</p>\n<h6 id=\"helpTransfer\"><a href=\"#helpTransfer\" class=\"headerlink\" title=\"helpTransfer\"></a>helpTransfer</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] nextTab; int sc;</div><div class=\"line\">    //tab不为空 &amp;&amp; f 属于ForwardingNode类型（Node的hash值为-1）</div><div class=\"line\">    //如果nextTable为null,则表示迁移完成了</div><div class=\"line\">    if (tab != null &amp;&amp; (f instanceof ForwardingNode) &amp;&amp;</div><div class=\"line\">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != null) &#123;</div><div class=\"line\">        int rs = resizeStamp(tab.length);//要调整的大小</div><div class=\"line\">        while (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</div><div class=\"line\">               (sc = sizeCtl) &lt; 0) &#123;</div><div class=\"line\">            if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||</div><div class=\"line\">                sc == rs + MAX_RESIZERS || transferIndex &lt;= 0)</div><div class=\"line\">                break;</div><div class=\"line\">            //每有一个线程来帮助迁移，sizeCtl就+1</div><div class=\"line\">            if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) &#123;</div><div class=\"line\">                transfer(tab, nextTab);</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return nextTab;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return table;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此方法是帮助Map进行扩容</p>\n<h6 id=\"addCount\"><a href=\"#addCount\" class=\"headerlink\" title=\"addCount\"></a>addCount</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final void addCount(long x, int check) &#123;</div><div class=\"line\">    CounterCell[] as; long b, s;</div><div class=\"line\">    //更新baseCount</div><div class=\"line\">    if ((as = counterCells) != null ||</div><div class=\"line\">        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) &#123;</div><div class=\"line\">        CounterCell a; long v; int m;</div><div class=\"line\">        boolean uncontended = true;</div><div class=\"line\">        if (as == null || (m = as.length - 1) &lt; 0 ||</div><div class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == null ||</div><div class=\"line\">            !(uncontended =</div><div class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</div><div class=\"line\">            fullAddCount(x, uncontended);</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (check &lt;= 1)</div><div class=\"line\">            return;</div><div class=\"line\">        s = sumCount();</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (check &gt;= 0) &#123;//是不是需要检查</div><div class=\"line\">        Node&lt;K,V&gt;[] tab, nt; int n, sc;</div><div class=\"line\">        //符合扩容条件，map.size 大于阈值 table不为空，链表长度超过8</div><div class=\"line\">        while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp;</div><div class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">            int rs = resizeStamp(n);//根据长度得到一标识</div><div class=\"line\">            if (sc &lt; 0) &#123;//正在扩容</div><div class=\"line\">                // 如果 sc 的低 16 位不等于 标识符（校验异常 sizeCtl 变化了）</div><div class=\"line\">                // 如果 sc == 标识符 + 1 （扩容结束了，不再有线程进行扩容）（默认第一个线程设置 sc ==rs 左移 16 位 + 2，当第一个线程结束扩容了，就会将 sc 减一。这个时候，sc 就等于 rs + 1）</div><div class=\"line\">                // 如果 sc == 标识符 + 65535（帮助线程数已经达到最大）</div><div class=\"line\">                // 如果 nextTable == null（结束扩容了）</div><div class=\"line\">                // 如果 transferIndex &lt;= 0 (转移状态变化了)</div><div class=\"line\">                // 结束循环 </div><div class=\"line\">                if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||</div><div class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||</div><div class=\"line\">                    transferIndex &lt;= 0)</div><div class=\"line\">                    break;</div><div class=\"line\">                // 如果可以帮助扩容，那么将 sc 加 1. 表示多了一个线程在帮助扩容</div><div class=\"line\">                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))</div><div class=\"line\">                    transfer(tab, nt);</div><div class=\"line\">            &#125;</div><div class=\"line\">            // 如果不在扩容，将 sc 更新：标识符左移 16 位 然后 + 2. 也就是变成一个负数。高 16 位是标识符，低 16 位初始是 2.</div><div class=\"line\">            else if (U.compareAndSwapInt(this, SIZECTL, sc,</div><div class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2))</div><div class=\"line\">                // 更新 sc 为负数后，开始扩容。</div><div class=\"line\">                transfer(tab, null);</div><div class=\"line\">            s = sumCount();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>addCount 方法主要进行了两个操作 1 更新baseCount 2 检查是不是需要扩容<br>主要说下 检查扩容的部分，首先如果满足扩容条件的话，如果sc是负数则代表正在扩容，此时如果 sizeCtl变化|扩容结束|帮助线程达到最大|等结束循环。如果可以帮助扩容的话就在增加一个线程帮助扩容；如果还没开始扩容就把sc设为负数开始扩容。</p>\n<h6 id=\"transfer-扩容\"><a href=\"#transfer-扩容\" class=\"headerlink\" title=\"transfer 扩容\"></a>transfer 扩容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final void transfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab) &#123;</div><div class=\"line\">    int n = tab.length, stride;</div><div class=\"line\">    //stride最小为16</div><div class=\"line\">    if ((stride = (NCPU &gt; 1) ? (n &gt;&gt;&gt; 3) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class=\"line\">        stride = MIN_TRANSFER_STRIDE; // subdivide range</div><div class=\"line\">    if (nextTab == null) &#123;            // initiating</div><div class=\"line\">        try &#123;</div><div class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n &lt;&lt; 1];//扩容两倍</div><div class=\"line\">            nextTab = nt;</div><div class=\"line\">        &#125; catch (Throwable ex) &#123;      // try to cope with OOME</div><div class=\"line\">            sizeCtl = Integer.MAX_VALUE;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        nextTable = nextTab;</div><div class=\"line\">        transferIndex = n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int nextn = nextTab.length;</div><div class=\"line\">    //正在被迁移的node，ForwardingNode的hash 是MOVED，key value next 都是null，其中的nextTable指向新的tab</div><div class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = new ForwardingNode&lt;K,V&gt;(nextTab);</div><div class=\"line\">    boolean advance = true;//advance为true，可以继续迁移下一个节点，false则停止迁移</div><div class=\"line\">    boolean finishing = false; // to ensure sweep before committing nextTab</div><div class=\"line\">    for (int i = 0, bound = 0;;) &#123; //i迁移位置的索引，bound迁移的边界</div><div class=\"line\">        Node&lt;K,V&gt; f; int fh;</div><div class=\"line\">        while (advance) &#123;</div><div class=\"line\">            int nextIndex, nextBound;</div><div class=\"line\">            if (--i &gt;= bound || finishing) //finishing 为true停止while循环</div><div class=\"line\">                advance = false;</div><div class=\"line\">            else if ((nextIndex = transferIndex) &lt;= 0) &#123;//transferIndex（上一次迁移的边界）赋值给nextInde，transferIndex小于等于0，说明原数组的所有位置的迁移都有相应的线程去处理了，该线程可以不用迁移了</div><div class=\"line\">                i = -1;</div><div class=\"line\">                advance = false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //将nextBound赋值给bound，nextBound = nextIndex - stride（上一个边界减去步长）</div><div class=\"line\">            else if (U.compareAndSwapInt</div><div class=\"line\">                     (this, TRANSFERINDEX, nextIndex,</div><div class=\"line\">                      nextBound = (nextIndex &gt; stride ?</div><div class=\"line\">                                   nextIndex - stride : 0))) &#123;</div><div class=\"line\">                bound = nextBound;</div><div class=\"line\">                i = nextIndex - 1;</div><div class=\"line\">                advance = false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //i &lt; 0 所有迁移任务完成</div><div class=\"line\">        if (i &lt; 0 || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class=\"line\">            int sc;</div><div class=\"line\">             //所有迁移完成，将nextTable设为空，sizeCtl为新tab.length * 0.75</div><div class=\"line\">            if (finishing) &#123;</div><div class=\"line\">                nextTable = null;</div><div class=\"line\">                table = nextTab;</div><div class=\"line\">                sizeCtl = (n &lt;&lt; 1) - (n &gt;&gt;&gt; 1);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //该线程完成迁移，sizeCtl - 1，对应之前helpTransfer()中+1</div><div class=\"line\">            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) &#123;</div><div class=\"line\">                //不相等说明还有其他线程没完成迁移，该线程结束任务</div><div class=\"line\">                if ((sc - 2) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class=\"line\">                    return;</div><div class=\"line\">                finishing = advance = true;//如果相等，则说明说有线程都完成任务了，设置finish为true</div><div class=\"line\">                i = n; // recheck before commit</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if ((f = tabAt(tab, i)) == null)//如果旧tab[i]为null，则放入ForwardingNode</div><div class=\"line\">            advance = casTabAt(tab, i, null, fwd);</div><div class=\"line\">        else if ((fh = f.hash) == MOVED)//该节点为ForwardingNode，则说明已经被迁移过了，就可以开始迁移下一个节点了</div><div class=\"line\">            advance = true; // already processed</div><div class=\"line\">        else &#123;</div><div class=\"line\">            synchronized (f) &#123;//迁移开始加锁</div><div class=\"line\">                if (tabAt(tab, i) == f) &#123;</div><div class=\"line\">                    Node&lt;K,V&gt; ln, hn;</div><div class=\"line\">                    if (fh &gt;= 0) &#123;//fh &gt;= 0,说明是链表结构</div><div class=\"line\">                        int runBit = fh &amp; n;</div><div class=\"line\">                        Node&lt;K,V&gt; lastRun = f;</div><div class=\"line\">                        for (Node&lt;K,V&gt; p = f.next; p != null; p = p.next) &#123;</div><div class=\"line\">                            int b = p.hash &amp; n;</div><div class=\"line\">                            if (b != runBit) &#123;</div><div class=\"line\">                                runBit = b;</div><div class=\"line\">                                lastRun = p;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (runBit == 0) &#123;</div><div class=\"line\">                            ln = lastRun;</div><div class=\"line\">                            hn = null;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        else &#123;</div><div class=\"line\">                            hn = lastRun;</div><div class=\"line\">                            ln = null;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        for (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class=\"line\">                            int ph = p.hash; K pk = p.key; V pv = p.val;</div><div class=\"line\">                            if ((ph &amp; n) == 0)</div><div class=\"line\">                                ln = new Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class=\"line\">                            else</div><div class=\"line\">                                hn = new Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        setTabAt(nextTab, i, ln);</div><div class=\"line\">                        setTabAt(nextTab, i + n, hn);</div><div class=\"line\">                        setTabAt(tab, i, fwd);</div><div class=\"line\">                        advance = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (f instanceof TreeBin) &#123; //红黑树结构</div><div class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class=\"line\">                        TreeNode&lt;K,V&gt; lo = null, loTail = null;</div><div class=\"line\">                        TreeNode&lt;K,V&gt; hi = null, hiTail = null;</div><div class=\"line\">                        int lc = 0, hc = 0;</div><div class=\"line\">                        for (Node&lt;K,V&gt; e = t.first; e != null; e = e.next) &#123;</div><div class=\"line\">                            int h = e.hash;</div><div class=\"line\">                            TreeNode&lt;K,V&gt; p = new TreeNode&lt;K,V&gt;</div><div class=\"line\">                                (h, e.key, e.val, null, null);</div><div class=\"line\">                            if ((h &amp; n) == 0) &#123;</div><div class=\"line\">                                if ((p.prev = loTail) == null)</div><div class=\"line\">                                    lo = p;</div><div class=\"line\">                                else</div><div class=\"line\">                                    loTail.next = p;</div><div class=\"line\">                                loTail = p;</div><div class=\"line\">                                ++lc;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            else &#123;</div><div class=\"line\">                                if ((p.prev = hiTail) == null)</div><div class=\"line\">                                    hi = p;</div><div class=\"line\">                                else</div><div class=\"line\">                                    hiTail.next = p;</div><div class=\"line\">                                hiTail = p;</div><div class=\"line\">                                ++hc;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class=\"line\">                            (hc != 0) ? new TreeBin&lt;K,V&gt;(lo) : t;</div><div class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class=\"line\">                            (lc != 0) ? new TreeBin&lt;K,V&gt;(hi) : t;</div><div class=\"line\">                        setTabAt(nextTab, i, ln);</div><div class=\"line\">                        setTabAt(nextTab, i + n, hn);</div><div class=\"line\">                        setTabAt(tab, i, fwd);</div><div class=\"line\">                        advance = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>遍历整个table，当前节点为空，则采用CAS的方式在当前位置放入fwd</li>\n<li>当前节点已经为fwd(with hash field “MOVED”)，则已经有有线程处理完了了，直接跳过 ，这里是控制并发扩容的核心</li>\n<li>当前节点为链表节点或红黑树，重新计算链表节点的hash值，移动到nextTable相应的位置（构建了一个反序链表和顺序链表，分别放置在i和i+n的位置上）。移动完成后，用Unsafe.putObjectVolatile在tab的原位置赋为为fwd, 表示当前节点已经完成扩容。</li>\n</ol>\n<h5 id=\"get-1\"><a href=\"#get-1\" class=\"headerlink\" title=\"get\"></a>get</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;</div><div class=\"line\">    int h = spread(key.hashCode());</div><div class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">        (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123;</div><div class=\"line\">        if ((eh = e.hash) == h) &#123;</div><div class=\"line\">            if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))</div><div class=\"line\">                return e.val;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (eh &lt; 0)</div><div class=\"line\">            return (p = e.find(h, key)) != null ? p.val : null;</div><div class=\"line\">        while ((e = e.next) != null) &#123;</div><div class=\"line\">            if (e.hash == h &amp;&amp;</div><div class=\"line\">                ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))</div><div class=\"line\">                return e.val;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>读取元素的操作就很简单，获取到对应的hash值，如果 table为空或对应的头节点为空直接返回null，不然就找到对应的bucket找到对应的node返回。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h3><h4 id=\"jdk1-7\"><a href=\"#jdk1-7\" class=\"headerlink\" title=\"jdk1.7\"></a>jdk1.7</h4><p>ConcurrentHashMap 和 HashMap非常类似，ConcurrentHashMap在实现上采取了分段锁的思想来实现的。</p>\n<p>ConcurrentHashMap在内部采用了一个叫做 Segment 的结构，一个Segment就类似HashMap中的table，这样在定位一个元素的时候，需要进行两次hash操作，一次定位到Segment，第二次定位到Segment中的table的index。这样带来的好处的是写操作只需要针对对应的Segment的进行写，因此Segment的数量就是理论最大的并发数。</p>\n<p>ConcurrentHashMap的结构类似如下： </p>\n<p><img src=\"../../../../uploads/javasource/util/ConcurrentHashMap.png\" alt=\"结构图\"></p>\n<h5 id=\"Segment\"><a href=\"#Segment\" class=\"headerlink\" title=\"Segment\"></a>Segment</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable &#123;</div><div class=\"line\">    private static final long serialVersionUID = 2249069246763182397L;</div><div class=\"line\">    //重试次数 单核 1 多核64</div><div class=\"line\">    static final int MAX_SCAN_RETRIES =</div><div class=\"line\">        Runtime.getRuntime().availableProcessors() &gt; 1 ? 64 : 1;</div><div class=\"line\">    //Segment中的table</div><div class=\"line\">    transient volatile HashEntry&lt;K,V&gt;[] table;</div><div class=\"line\">    //元素的数量</div><div class=\"line\">    transient int count;</div><div class=\"line\">    //对table的大小造成影响的操作的数量</div><div class=\"line\">    transient int modCount;</div><div class=\"line\">    //阈值</div><div class=\"line\">    transient int threshold;</div><div class=\"line\">     //负载因子</div><div class=\"line\">    final float loadFactor;</div><div class=\"line\">    //构造函数</div><div class=\"line\">    Segment(float lf, int threshold, HashEntry&lt;K,V&gt;[] tab) &#123;</div><div class=\"line\">        this.loadFactor = lf;</div><div class=\"line\">        this.threshold = threshold;</div><div class=\"line\">        this.table = tab;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">        //获取锁（针对Segment），获取到node为null，否则调用scanAndLockForPut方法</div><div class=\"line\">        HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">            scanAndLockForPut(key, hash, value);</div><div class=\"line\">        V oldValue;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //Segment中的table</div><div class=\"line\">            HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">            int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">            HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div><div class=\"line\">            for (HashEntry&lt;K,V&gt; e = first;;) &#123;</div><div class=\"line\">                //对应index上的链表节点不为空，看看是不是有相等的key，有相等的key就替换； </div><div class=\"line\">                if (e != null) &#123;</div><div class=\"line\">                    K k;</div><div class=\"line\">                    if ((k = e.key) == key ||</div><div class=\"line\">                        (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                        oldValue = e.value;</div><div class=\"line\">                        if (!onlyIfAbsent) &#123;</div><div class=\"line\">                            e.value = value;</div><div class=\"line\">                            ++modCount;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        break;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    e = e.next;//遍历下一个</div><div class=\"line\">                &#125;</div><div class=\"line\">                else &#123; //链表节点为空</div><div class=\"line\">                    if (node != null)</div><div class=\"line\">                        node.setNext(first);//加到链表的头部</div><div class=\"line\">                    else //node为空就得新建</div><div class=\"line\">                        node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                    int c = count + 1;</div><div class=\"line\">                    if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                        rehash(node); //需不需要rehash</div><div class=\"line\">                    else</div><div class=\"line\">                        setEntryAt(tab, index, node);//直接插入node到指定index位置</div><div class=\"line\">                    ++modCount;</div><div class=\"line\">                    count = c;</div><div class=\"line\">                    oldValue = null;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; finally &#123;</div><div class=\"line\">            unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return oldValue;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">    private void rehash(HashEntry&lt;K,V&gt; node) &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] oldTable = table;//旧的table</div><div class=\"line\">        int oldCapacity = oldTable.length;</div><div class=\"line\">        int newCapacity = oldCapacity &lt;&lt; 1;</div><div class=\"line\">        threshold = (int)(newCapacity * loadFactor);</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] newTable =</div><div class=\"line\">            (HashEntry&lt;K,V&gt;[]) new HashEntry[newCapacity];//新的table</div><div class=\"line\">        int sizeMask = newCapacity - 1;</div><div class=\"line\">        for (int i = 0; i &lt; oldCapacity ; i++) &#123;//遍历旧的table</div><div class=\"line\">            HashEntry&lt;K,V&gt; e = oldTable[i]; //每个table的第一个entry</div><div class=\"line\">            if (e != null) &#123;</div><div class=\"line\">                HashEntry&lt;K,V&gt; next = e.next;</div><div class=\"line\">                int idx = e.hash &amp; sizeMask; //重新计算新的index</div><div class=\"line\">                if (next == null)   //  Single node on list 只有一个元素</div><div class=\"line\">                    newTable[idx] = e;//直接在新的table新index上赋值该节点</div><div class=\"line\">                else &#123; // Reuse consecutive sequence at same slot</div><div class=\"line\">                    HashEntry&lt;K,V&gt; lastRun = e;</div><div class=\"line\">                    int lastIdx = idx;</div><div class=\"line\">                    for (HashEntry&lt;K,V&gt; last = next;</div><div class=\"line\">                         last != null;</div><div class=\"line\">                         last = last.next) &#123;//遍历链表</div><div class=\"line\">                        int k = last.hash &amp; sizeMask; //在新table的位置</div><div class=\"line\">                        if (k != lastIdx) &#123;//头结点和头结点的next元素的节点发生了变化</div><div class=\"line\">                            lastIdx = k;</div><div class=\"line\">                            lastRun = last;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    // 1. lastRun 和 lastIdx 没有发生变化,也就是整个链表的每个元素位置和一样,都没有发生变化</div><div class=\"line\">                    // 2.    lastRun 和 lastIdx 发生了变化,记录变化位置和变化节点,然后把变化的这个节点设置到新table</div><div class=\"line\">                    newTable[lastIdx] = lastRun;</div><div class=\"line\">                    // Clone remaining nodes</div><div class=\"line\">                    for (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</div><div class=\"line\">                        V v = p.value;</div><div class=\"line\">                        int h = p.hash;</div><div class=\"line\">                        int k = h &amp; sizeMask;</div><div class=\"line\">                        HashEntry&lt;K,V&gt; n = newTable[k];</div><div class=\"line\">                        newTable[k] = new HashEntry&lt;K,V&gt;(h, p.key, v, n);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 处理扩容时那个添加的节点</div><div class=\"line\">        int nodeIndex = node.hash &amp; sizeMask; // add the new node</div><div class=\"line\">        node.setNext(newTable[nodeIndex]);</div><div class=\"line\">        newTable[nodeIndex] = node;</div><div class=\"line\">        table = newTable;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //自选获取锁</div><div class=\"line\">    private HashEntry&lt;K,V&gt; scanAndLockForPut(K key, int hash, V value) &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryForHash(this, hash);//获取头节点 </div><div class=\"line\">        HashEntry&lt;K,V&gt; e = first;</div><div class=\"line\">        HashEntry&lt;K,V&gt; node = null;</div><div class=\"line\">        int retries = -1; // negative while locating node 是为了找到对应hash桶,遍历链表时找到就停止</div><div class=\"line\">        while (!tryLock()) &#123; //自旋获取锁</div><div class=\"line\">            HashEntry&lt;K,V&gt; f; // to recheck first below</div><div class=\"line\">            if (retries &lt; 0) &#123;</div><div class=\"line\">                if (e == null) &#123;//结束遍历节点</div><div class=\"line\">                    if (node == null) // speculatively create node</div><div class=\"line\">                        node = new HashEntry&lt;K,V&gt;(hash, key, value, null);</div><div class=\"line\">                    retries = 0;</div><div class=\"line\">                &#125;</div><div class=\"line\">                else if (key.equals(e.key))// 找到节点 停止遍历</div><div class=\"line\">                    retries = 0;</div><div class=\"line\">                else</div><div class=\"line\">                    e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (++retries &gt; MAX_SCAN_RETRIES) &#123;// 达到自旋的最大次数</div><div class=\"line\">                lock();//阻塞</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if ((retries &amp; 1) == 0 &amp;&amp;</div><div class=\"line\">                     (f = entryForHash(this, hash)) != first) &#123;//// 头结点变化,需要重新遍历,说明有新的节点加入或者移除</div><div class=\"line\">                e = first = f; // re-traverse if entry changed</div><div class=\"line\">                retries = -1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return node;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //自旋获取锁</div><div class=\"line\">    private void scanAndLock(Object key, int hash) &#123;</div><div class=\"line\">        // similar to but simpler than scanAndLockForPut</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryForHash(this, hash);</div><div class=\"line\">        HashEntry&lt;K,V&gt; e = first;</div><div class=\"line\">        int retries = -1;</div><div class=\"line\">        while (!tryLock()) &#123;</div><div class=\"line\">            HashEntry&lt;K,V&gt; f;</div><div class=\"line\">            if (retries &lt; 0) &#123;</div><div class=\"line\">                if (e == null || key.equals(e.key))</div><div class=\"line\">                    retries = 0;</div><div class=\"line\">                else</div><div class=\"line\">                    e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if (++retries &gt; MAX_SCAN_RETRIES) &#123;</div><div class=\"line\">                lock();</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else if ((retries &amp; 1) == 0 &amp;&amp;</div><div class=\"line\">                     (f = entryForHash(this, hash)) != first) &#123;</div><div class=\"line\">                e = first = f;</div><div class=\"line\">                retries = -1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Segment中主要的方法就是put添加元素，rehash 对table进行扩容，scanAndLockForPut，scanAndLock自旋获取锁。</p>\n<h5 id=\"成员变量\"><a href=\"#成员变量\" class=\"headerlink\" title=\"成员变量\"></a>成员变量</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final int DEFAULT_INITIAL_CAPACITY = 16;</div><div class=\"line\"></div><div class=\"line\">static final float DEFAULT_LOAD_FACTOR = 0.75f;</div><div class=\"line\"></div><div class=\"line\">static final int DEFAULT_CONCURRENCY_LEVEL = 16;</div><div class=\"line\"></div><div class=\"line\">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</div><div class=\"line\"></div><div class=\"line\">static final int MIN_SEGMENT_TABLE_CAPACITY = 2;</div><div class=\"line\"></div><div class=\"line\">static final int MAX_SEGMENTS = 1 &lt;&lt; 16; // slightly conservative</div><div class=\"line\"></div><div class=\"line\">static final int RETRIES_BEFORE_LOCK = 2;</div></pre></td></tr></table></figure>\n<p>ConcurrentHashMap 主要的默认参数和HashMap差不多。</p>\n<blockquote>\n<ul>\n<li>DEFAULT_CONCURRENCY_LEVEL 是默认的并发数（Segment数组的数量）</li>\n<li>MIN_SEGMENT_TABLE_CAPACITY 每个Segment最小的容量 </li>\n<li>MAX_SEGMENTS 每个Segment最大的容量   </li>\n<li>RETRIES_BEFORE_LOCK默认的自旋次数</li>\n</ul>\n</blockquote>\n<h5 id=\"put\"><a href=\"#put\" class=\"headerlink\" title=\"put\"></a>put</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s;</div><div class=\"line\">    if (value == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    int hash = hash(key);//对应key的hash值</div><div class=\"line\">    int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;//获取对应hash值在segments数组的index</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          // nonvolatile; recheck</div><div class=\"line\">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) //  in ensureSegment</div><div class=\"line\">        s = ensureSegment(j); //如果对应内存偏移量中没有，则创建ensureSegment</div><div class=\"line\">    return s.put(key, hash, value, false);</div><div class=\"line\">&#125;</div><div class=\"line\">private Segment&lt;K,V&gt; ensureSegment(int k) &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] ss = this.segments;</div><div class=\"line\">    long u = (k &lt;&lt; SSHIFT) + SBASE; // raw offset</div><div class=\"line\">    Segment&lt;K,V&gt; seg;</div><div class=\"line\">    if ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == null) &#123;</div><div class=\"line\">        Segment&lt;K,V&gt; proto = ss[0]; // use segment 0 as prototype  以初始化创建的第一个index下标的值为模板</div><div class=\"line\">        int cap = proto.table.length;</div><div class=\"line\">        float lf = proto.loadFactor;</div><div class=\"line\">        int threshold = (int)(cap * lf);</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])new HashEntry[cap];</div><div class=\"line\">        if ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</div><div class=\"line\">            == null) &#123; // recheck 再次检查有没有其他线程已经创建了</div><div class=\"line\">            Segment&lt;K,V&gt; s = new Segment&lt;K,V&gt;(lf, threshold, tab);</div><div class=\"line\">            while ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</div><div class=\"line\">                   == null) &#123;</div><div class=\"line\">                if (UNSAFE.compareAndSwapObject(ss, u, null, seg = s)) // 通过cas自旋的方式来创建</div><div class=\"line\">                    break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return seg;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcurrentHashMap中value不能为null，否则会抛出空指针异常，然后获取到对应key的hash值对应的Segment。<br>如果对应的Segment不存在，则通过CAS的方式去创建Segment，这是不加锁方式下又可能保证线程安全的方法。</p>\n<h5 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get\"></a>get</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s; // manually integrate access methods to reduce overhead</div><div class=\"line\">    HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">    int h = hash(key);//对应key的hash值</div><div class=\"line\">    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;//获取对应hash值存储所在segments数组中内存偏移量</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;</div><div class=\"line\">        (tab = s.table) != null) &#123; //获取到对应Segment中的table</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                 (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">             e != null; e = e.next) &#123;</div><div class=\"line\">            K k;</div><div class=\"line\">            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                return e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>ConcurrentHashMap 的get方法就是先获取到对应的Segment，在获取到Segment中的table对应的HashEntry的头节点，但是通过UNSAFE.getObjectVolatile 获取到的是内存中最新的数据，在遍历的过程中，有可能数据被其他线程修改，导致最终返回的数据可能是过时的数据，因此此方法是弱一致性的。</p>\n<h5 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a>size</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int size() &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] segments = this.segments;</div><div class=\"line\">    int size;</div><div class=\"line\">    boolean overflow; // 是否溢出</div><div class=\"line\">    long sum;         // 存储本次循环过程中计算得到的modCount的值</div><div class=\"line\">    long last = 0L;   // 存储上一次遍历过程中计算得到的modCount的和</div><div class=\"line\">    int retries = -1; // first iteration isn&apos;t retry</div><div class=\"line\">    try &#123;</div><div class=\"line\">        //无限for循环，结束条件就是任意前后两次遍历过程中modcount值的和是一样的，说明第二次遍历没有做任何变化</div><div class=\"line\">        for (;;) &#123;//</div><div class=\"line\">            //</div><div class=\"line\">            //为了防止由于有线程不断在更新map而导致每次遍历过程一直发现modCount和上一次不一样导致线程一直进行遍历验证前后两次modCoun,加了一个最多重复的次数限制,超过这个次数则直接强制对所有的segment进行加锁(会导致可以延迟创建的Segment在这个过程中被创建）</div><div class=\"line\">            if (retries++ == RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                    ensureSegment(j).lock(); // force creation</div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = 0L;</div><div class=\"line\">            size = 0;</div><div class=\"line\">            overflow = false;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j) &#123;</div><div class=\"line\">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class=\"line\">                if (seg != null) &#123;</div><div class=\"line\">                    sum += seg.modCount;</div><div class=\"line\">                    int c = seg.count;</div><div class=\"line\">                    if (c &lt; 0 || (size += c) &lt; 0)</div><div class=\"line\">                        overflow = true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum == last)</div><div class=\"line\">                break;</div><div class=\"line\">            last = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        //由于只有在retries等于RETRIES_BEFORE_LOCK时才会执行强制加锁，并且由于是用的retries++，所以强制加锁完毕后，retries的值是一定会大于RETRIES_BEFORE_LOCK的，</div><div class=\"line\">        if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                segmentAt(segments, j).unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return overflow ? Integer.MAX_VALUE : size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"jdk1-8\"><a href=\"#jdk1-8\" class=\"headerlink\" title=\"jdk1.8\"></a>jdk1.8</h4><p>在jdk1.8中没有采用分段锁的方式保证在多线程下的安全，采用的是CAS+synchronized来保证在多线程的安全。<br>底层的数据存储也变成了数组+链表+红黑树的方式。</p>\n<h5 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h5><p>Node 和HashMap中的Node结构大致类似，只不过value和next通过volatile进行了修饰，保证了内存的可见性。还增加了一个find方法，通过这个node遍历之后的全部node找对对应key的节点。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int hash;</div><div class=\"line\">final K key;</div><div class=\"line\">volatile V val;</div><div class=\"line\">volatile Node&lt;K,V&gt; next;</div><div class=\"line\"></div><div class=\"line\">Node&lt;K,V&gt; find(int h, Object k) &#123;</div><div class=\"line\">    Node&lt;K,V&gt; e = this;</div><div class=\"line\">    if (k != null) &#123;</div><div class=\"line\">        do &#123;</div><div class=\"line\">            K ek;</div><div class=\"line\">            if (e.hash == h &amp;&amp;</div><div class=\"line\">                ((ek = e.key) == k || (ek != null &amp;&amp; k.equals(ek))))</div><div class=\"line\">                return e;</div><div class=\"line\">        &#125; while ((e = e.next) != null);</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"ConcurrentHashMap的初始化\"><a href=\"#ConcurrentHashMap的初始化\" class=\"headerlink\" title=\"ConcurrentHashMap的初始化\"></a>ConcurrentHashMap的初始化</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final Node&lt;K,V&gt;[] initTable() &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; int sc;</div><div class=\"line\">    while ((tab = table) == null || tab.length == 0) &#123;</div><div class=\"line\">        //如果sizeCtl &lt; 0 说明已经有其他线程进行了初始化，此时只需要将CPU的时间片让出即可</div><div class=\"line\">        if ((sc = sizeCtl) &lt; 0)</div><div class=\"line\">            Thread.yield(); // lost initialization race; just spin</div><div class=\"line\">        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) &#123;</div><div class=\"line\">            //进行初始化</div><div class=\"line\">            try &#123;</div><div class=\"line\">                if ((tab = table) == null || tab.length == 0) &#123;</div><div class=\"line\">                    int n = (sc &gt; 0) ? sc : DEFAULT_CAPACITY;</div><div class=\"line\">                    @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n];</div><div class=\"line\">                    table = tab = nt;</div><div class=\"line\">                    sc = n - (n &gt;&gt;&gt; 2);//0.75*capacity</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                sizeCtl = sc;</div><div class=\"line\">            &#125;</div><div class=\"line\">            break;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return tab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化的操作会在第一次put操作的时候进行，初始化的时候会调整table的大小。</p>\n<h5 id=\"put方法\"><a href=\"#put方法\" class=\"headerlink\" title=\"put方法\"></a>put方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    return putVal(key, value, false);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">final V putVal(K key, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">    //value不能为空</div><div class=\"line\">    if (key == null || value == null) throw new NullPointerException();</div><div class=\"line\">    int hash = spread(key.hashCode());//获取key的hash值 （(h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;）</div><div class=\"line\">    int binCount = 0;</div><div class=\"line\">    for (Node&lt;K,V&gt;[] tab = table;;) &#123;</div><div class=\"line\">        Node&lt;K,V&gt; f; int n, i, fh;</div><div class=\"line\">        if (tab == null || (n = tab.length) == 0)//第一次put的时候对table进行初始化</div><div class=\"line\">            tab = initTable();</div><div class=\"line\">        else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) &#123; //如果table对应的index上的Node为空 进行初始化</div><div class=\"line\">            if (casTabAt(tab, i, null,</div><div class=\"line\">                         new Node&lt;K,V&gt;(hash, key, value, null)))</div><div class=\"line\">                break;                   // no lock when adding to empty bin</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if ((fh = f.hash) == MOVED)// 当前Map在扩容，先协助扩容，在更新值。</div><div class=\"line\">            tab = helpTransfer(tab, f);</div><div class=\"line\">        else &#123; //hash冲突</div><div class=\"line\">            V oldVal = null;</div><div class=\"line\">            synchronized (f) &#123;//通过synchronized 进行加锁</div><div class=\"line\">                if (tabAt(tab, i) == f) &#123;//链表头结点</div><div class=\"line\">                    if (fh &gt;= 0) &#123;</div><div class=\"line\">                        binCount = 1;</div><div class=\"line\">                        for (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</div><div class=\"line\">                            K ek;</div><div class=\"line\">                            if (e.hash == hash &amp;&amp;</div><div class=\"line\">                                ((ek = e.key) == key ||</div><div class=\"line\">                                 (ek != null &amp;&amp; key.equals(ek)))) &#123;//如果key存在的情况</div><div class=\"line\">                                oldVal = e.val;</div><div class=\"line\">                                if (!onlyIfAbsent)</div><div class=\"line\">                                    e.val = value;</div><div class=\"line\">                                break;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            Node&lt;K,V&gt; pred = e;</div><div class=\"line\">                            if ((e = e.next) == null) &#123;//节点不存在的情况，直接加在链表的尾部</div><div class=\"line\">                                pred.next = new Node&lt;K,V&gt;(hash, key,</div><div class=\"line\">                                                          value, null);</div><div class=\"line\">                                break;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (f instanceof TreeBin) &#123; //如果节点是红黑树节点，插入到红黑树节点中</div><div class=\"line\">                        Node&lt;K,V&gt; p;</div><div class=\"line\">                        binCount = 2;</div><div class=\"line\">                        if ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</div><div class=\"line\">                                                       value)) != null) &#123;</div><div class=\"line\">                            oldVal = p.val;</div><div class=\"line\">                            if (!onlyIfAbsent)</div><div class=\"line\">                                p.val = value;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (binCount != 0) &#123;</div><div class=\"line\">                if (binCount &gt;= TREEIFY_THRESHOLD)//如果链表长度大于等于8</div><div class=\"line\">                    treeifyBin(tab, i); //转变为红黑树</div><div class=\"line\">                if (oldVal != null)</div><div class=\"line\">                    return oldVal;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    addCount(1L, binCount);// 统计节点个数，检查是否需要resize</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>1.8的ConcurrentHashMap进行put操作的时候，如果第一次进行put会先初始化table数组，如果对应的bucket为空，通过CAS将node放入对应的bucket，如果当前Map正在进行扩容，则先协助扩容；最后对这个节点加锁，如果节点存在进行更新值，如果不存在加在链表的尾部，如果是红黑树节点插入红黑树，最后会判断如果链表长度超过8会将当前链表转换为红黑树。</p>\n<h6 id=\"helpTransfer\"><a href=\"#helpTransfer\" class=\"headerlink\" title=\"helpTransfer\"></a>helpTransfer</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] nextTab; int sc;</div><div class=\"line\">    //tab不为空 &amp;&amp; f 属于ForwardingNode类型（Node的hash值为-1）</div><div class=\"line\">    //如果nextTable为null,则表示迁移完成了</div><div class=\"line\">    if (tab != null &amp;&amp; (f instanceof ForwardingNode) &amp;&amp;</div><div class=\"line\">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != null) &#123;</div><div class=\"line\">        int rs = resizeStamp(tab.length);//要调整的大小</div><div class=\"line\">        while (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</div><div class=\"line\">               (sc = sizeCtl) &lt; 0) &#123;</div><div class=\"line\">            if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||</div><div class=\"line\">                sc == rs + MAX_RESIZERS || transferIndex &lt;= 0)</div><div class=\"line\">                break;</div><div class=\"line\">            //每有一个线程来帮助迁移，sizeCtl就+1</div><div class=\"line\">            if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) &#123;</div><div class=\"line\">                transfer(tab, nextTab);</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return nextTab;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return table;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此方法是帮助Map进行扩容</p>\n<h6 id=\"addCount\"><a href=\"#addCount\" class=\"headerlink\" title=\"addCount\"></a>addCount</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final void addCount(long x, int check) &#123;</div><div class=\"line\">    CounterCell[] as; long b, s;</div><div class=\"line\">    //更新baseCount</div><div class=\"line\">    if ((as = counterCells) != null ||</div><div class=\"line\">        !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) &#123;</div><div class=\"line\">        CounterCell a; long v; int m;</div><div class=\"line\">        boolean uncontended = true;</div><div class=\"line\">        if (as == null || (m = as.length - 1) &lt; 0 ||</div><div class=\"line\">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == null ||</div><div class=\"line\">            !(uncontended =</div><div class=\"line\">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</div><div class=\"line\">            fullAddCount(x, uncontended);</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (check &lt;= 1)</div><div class=\"line\">            return;</div><div class=\"line\">        s = sumCount();</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (check &gt;= 0) &#123;//是不是需要检查</div><div class=\"line\">        Node&lt;K,V&gt;[] tab, nt; int n, sc;</div><div class=\"line\">        //符合扩容条件，map.size 大于阈值 table不为空，链表长度超过8</div><div class=\"line\">        while (s &gt;= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp;</div><div class=\"line\">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">            int rs = resizeStamp(n);//根据长度得到一标识</div><div class=\"line\">            if (sc &lt; 0) &#123;//正在扩容</div><div class=\"line\">                // 如果 sc 的低 16 位不等于 标识符（校验异常 sizeCtl 变化了）</div><div class=\"line\">                // 如果 sc == 标识符 + 1 （扩容结束了，不再有线程进行扩容）（默认第一个线程设置 sc ==rs 左移 16 位 + 2，当第一个线程结束扩容了，就会将 sc 减一。这个时候，sc 就等于 rs + 1）</div><div class=\"line\">                // 如果 sc == 标识符 + 65535（帮助线程数已经达到最大）</div><div class=\"line\">                // 如果 nextTable == null（结束扩容了）</div><div class=\"line\">                // 如果 transferIndex &lt;= 0 (转移状态变化了)</div><div class=\"line\">                // 结束循环 </div><div class=\"line\">                if ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||</div><div class=\"line\">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||</div><div class=\"line\">                    transferIndex &lt;= 0)</div><div class=\"line\">                    break;</div><div class=\"line\">                // 如果可以帮助扩容，那么将 sc 加 1. 表示多了一个线程在帮助扩容</div><div class=\"line\">                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1))</div><div class=\"line\">                    transfer(tab, nt);</div><div class=\"line\">            &#125;</div><div class=\"line\">            // 如果不在扩容，将 sc 更新：标识符左移 16 位 然后 + 2. 也就是变成一个负数。高 16 位是标识符，低 16 位初始是 2.</div><div class=\"line\">            else if (U.compareAndSwapInt(this, SIZECTL, sc,</div><div class=\"line\">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2))</div><div class=\"line\">                // 更新 sc 为负数后，开始扩容。</div><div class=\"line\">                transfer(tab, null);</div><div class=\"line\">            s = sumCount();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>addCount 方法主要进行了两个操作 1 更新baseCount 2 检查是不是需要扩容<br>主要说下 检查扩容的部分，首先如果满足扩容条件的话，如果sc是负数则代表正在扩容，此时如果 sizeCtl变化|扩容结束|帮助线程达到最大|等结束循环。如果可以帮助扩容的话就在增加一个线程帮助扩容；如果还没开始扩容就把sc设为负数开始扩容。</p>\n<h6 id=\"transfer-扩容\"><a href=\"#transfer-扩容\" class=\"headerlink\" title=\"transfer 扩容\"></a>transfer 扩容</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div></pre></td><td class=\"code\"><pre><div class=\"line\">private final void transfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab) &#123;</div><div class=\"line\">    int n = tab.length, stride;</div><div class=\"line\">    //stride最小为16</div><div class=\"line\">    if ((stride = (NCPU &gt; 1) ? (n &gt;&gt;&gt; 3) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class=\"line\">        stride = MIN_TRANSFER_STRIDE; // subdivide range</div><div class=\"line\">    if (nextTab == null) &#123;            // initiating</div><div class=\"line\">        try &#123;</div><div class=\"line\">            @SuppressWarnings(&quot;unchecked&quot;)</div><div class=\"line\">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])new Node&lt;?,?&gt;[n &lt;&lt; 1];//扩容两倍</div><div class=\"line\">            nextTab = nt;</div><div class=\"line\">        &#125; catch (Throwable ex) &#123;      // try to cope with OOME</div><div class=\"line\">            sizeCtl = Integer.MAX_VALUE;</div><div class=\"line\">            return;</div><div class=\"line\">        &#125;</div><div class=\"line\">        nextTable = nextTab;</div><div class=\"line\">        transferIndex = n;</div><div class=\"line\">    &#125;</div><div class=\"line\">    int nextn = nextTab.length;</div><div class=\"line\">    //正在被迁移的node，ForwardingNode的hash 是MOVED，key value next 都是null，其中的nextTable指向新的tab</div><div class=\"line\">    ForwardingNode&lt;K,V&gt; fwd = new ForwardingNode&lt;K,V&gt;(nextTab);</div><div class=\"line\">    boolean advance = true;//advance为true，可以继续迁移下一个节点，false则停止迁移</div><div class=\"line\">    boolean finishing = false; // to ensure sweep before committing nextTab</div><div class=\"line\">    for (int i = 0, bound = 0;;) &#123; //i迁移位置的索引，bound迁移的边界</div><div class=\"line\">        Node&lt;K,V&gt; f; int fh;</div><div class=\"line\">        while (advance) &#123;</div><div class=\"line\">            int nextIndex, nextBound;</div><div class=\"line\">            if (--i &gt;= bound || finishing) //finishing 为true停止while循环</div><div class=\"line\">                advance = false;</div><div class=\"line\">            else if ((nextIndex = transferIndex) &lt;= 0) &#123;//transferIndex（上一次迁移的边界）赋值给nextInde，transferIndex小于等于0，说明原数组的所有位置的迁移都有相应的线程去处理了，该线程可以不用迁移了</div><div class=\"line\">                i = -1;</div><div class=\"line\">                advance = false;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //将nextBound赋值给bound，nextBound = nextIndex - stride（上一个边界减去步长）</div><div class=\"line\">            else if (U.compareAndSwapInt</div><div class=\"line\">                     (this, TRANSFERINDEX, nextIndex,</div><div class=\"line\">                      nextBound = (nextIndex &gt; stride ?</div><div class=\"line\">                                   nextIndex - stride : 0))) &#123;</div><div class=\"line\">                bound = nextBound;</div><div class=\"line\">                i = nextIndex - 1;</div><div class=\"line\">                advance = false;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //i &lt; 0 所有迁移任务完成</div><div class=\"line\">        if (i &lt; 0 || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class=\"line\">            int sc;</div><div class=\"line\">             //所有迁移完成，将nextTable设为空，sizeCtl为新tab.length * 0.75</div><div class=\"line\">            if (finishing) &#123;</div><div class=\"line\">                nextTable = null;</div><div class=\"line\">                table = nextTab;</div><div class=\"line\">                sizeCtl = (n &lt;&lt; 1) - (n &gt;&gt;&gt; 1);</div><div class=\"line\">                return;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //该线程完成迁移，sizeCtl - 1，对应之前helpTransfer()中+1</div><div class=\"line\">            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) &#123;</div><div class=\"line\">                //不相等说明还有其他线程没完成迁移，该线程结束任务</div><div class=\"line\">                if ((sc - 2) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class=\"line\">                    return;</div><div class=\"line\">                finishing = advance = true;//如果相等，则说明说有线程都完成任务了，设置finish为true</div><div class=\"line\">                i = n; // recheck before commit</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if ((f = tabAt(tab, i)) == null)//如果旧tab[i]为null，则放入ForwardingNode</div><div class=\"line\">            advance = casTabAt(tab, i, null, fwd);</div><div class=\"line\">        else if ((fh = f.hash) == MOVED)//该节点为ForwardingNode，则说明已经被迁移过了，就可以开始迁移下一个节点了</div><div class=\"line\">            advance = true; // already processed</div><div class=\"line\">        else &#123;</div><div class=\"line\">            synchronized (f) &#123;//迁移开始加锁</div><div class=\"line\">                if (tabAt(tab, i) == f) &#123;</div><div class=\"line\">                    Node&lt;K,V&gt; ln, hn;</div><div class=\"line\">                    if (fh &gt;= 0) &#123;//fh &gt;= 0,说明是链表结构</div><div class=\"line\">                        int runBit = fh &amp; n;</div><div class=\"line\">                        Node&lt;K,V&gt; lastRun = f;</div><div class=\"line\">                        for (Node&lt;K,V&gt; p = f.next; p != null; p = p.next) &#123;</div><div class=\"line\">                            int b = p.hash &amp; n;</div><div class=\"line\">                            if (b != runBit) &#123;</div><div class=\"line\">                                runBit = b;</div><div class=\"line\">                                lastRun = p;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        if (runBit == 0) &#123;</div><div class=\"line\">                            ln = lastRun;</div><div class=\"line\">                            hn = null;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        else &#123;</div><div class=\"line\">                            hn = lastRun;</div><div class=\"line\">                            ln = null;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        for (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class=\"line\">                            int ph = p.hash; K pk = p.key; V pv = p.val;</div><div class=\"line\">                            if ((ph &amp; n) == 0)</div><div class=\"line\">                                ln = new Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class=\"line\">                            else</div><div class=\"line\">                                hn = new Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        setTabAt(nextTab, i, ln);</div><div class=\"line\">                        setTabAt(nextTab, i + n, hn);</div><div class=\"line\">                        setTabAt(tab, i, fwd);</div><div class=\"line\">                        advance = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    else if (f instanceof TreeBin) &#123; //红黑树结构</div><div class=\"line\">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class=\"line\">                        TreeNode&lt;K,V&gt; lo = null, loTail = null;</div><div class=\"line\">                        TreeNode&lt;K,V&gt; hi = null, hiTail = null;</div><div class=\"line\">                        int lc = 0, hc = 0;</div><div class=\"line\">                        for (Node&lt;K,V&gt; e = t.first; e != null; e = e.next) &#123;</div><div class=\"line\">                            int h = e.hash;</div><div class=\"line\">                            TreeNode&lt;K,V&gt; p = new TreeNode&lt;K,V&gt;</div><div class=\"line\">                                (h, e.key, e.val, null, null);</div><div class=\"line\">                            if ((h &amp; n) == 0) &#123;</div><div class=\"line\">                                if ((p.prev = loTail) == null)</div><div class=\"line\">                                    lo = p;</div><div class=\"line\">                                else</div><div class=\"line\">                                    loTail.next = p;</div><div class=\"line\">                                loTail = p;</div><div class=\"line\">                                ++lc;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                            else &#123;</div><div class=\"line\">                                if ((p.prev = hiTail) == null)</div><div class=\"line\">                                    hi = p;</div><div class=\"line\">                                else</div><div class=\"line\">                                    hiTail.next = p;</div><div class=\"line\">                                hiTail = p;</div><div class=\"line\">                                ++hc;</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class=\"line\">                            (hc != 0) ? new TreeBin&lt;K,V&gt;(lo) : t;</div><div class=\"line\">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class=\"line\">                            (lc != 0) ? new TreeBin&lt;K,V&gt;(hi) : t;</div><div class=\"line\">                        setTabAt(nextTab, i, ln);</div><div class=\"line\">                        setTabAt(nextTab, i + n, hn);</div><div class=\"line\">                        setTabAt(tab, i, fwd);</div><div class=\"line\">                        advance = true;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>遍历整个table，当前节点为空，则采用CAS的方式在当前位置放入fwd</li>\n<li>当前节点已经为fwd(with hash field “MOVED”)，则已经有有线程处理完了了，直接跳过 ，这里是控制并发扩容的核心</li>\n<li>当前节点为链表节点或红黑树，重新计算链表节点的hash值，移动到nextTable相应的位置（构建了一个反序链表和顺序链表，分别放置在i和i+n的位置上）。移动完成后，用Unsafe.putObjectVolatile在tab的原位置赋为为fwd, 表示当前节点已经完成扩容。</li>\n</ol>\n<h5 id=\"get-1\"><a href=\"#get-1\" class=\"headerlink\" title=\"get\"></a>get</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; int n, eh; K ek;</div><div class=\"line\">    int h = spread(key.hashCode());</div><div class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">        (e = tabAt(tab, (n - 1) &amp; h)) != null) &#123;</div><div class=\"line\">        if ((eh = e.hash) == h) &#123;</div><div class=\"line\">            if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))</div><div class=\"line\">                return e.val;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (eh &lt; 0)</div><div class=\"line\">            return (p = e.find(h, key)) != null ? p.val : null;</div><div class=\"line\">        while ((e = e.next) != null) &#123;</div><div class=\"line\">            if (e.hash == h &amp;&amp;</div><div class=\"line\">                ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))))</div><div class=\"line\">                return e.val;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>读取元素的操作就很简单，获取到对应的hash值，如果 table为空或对应的头节点为空直接返回null，不然就找到对应的bucket找到对应的node返回。</p>\n"},{"title":"HashMap阅读 （1.8|1.7）","date":"2019-11-14T07:24:25.000Z","comments":0,"keywords":["java","HashMap"],"_content":"\n### HashMap 内部默认的参数\n\n> | 变量 | 值 |  含义 |\n> | ---- | ---- | ---- |\n> |DEFAULT_INITIAL_CAPACITY| 16 | 默认容量|\n> | MAXIMUM_CAPACITY | 1 << 30 | 最大容量 | \n> | DEFAULT_LOAD_FACTOR | 0.75 | 负载因子 |\n> | TREEIFY_THRESHOLD | 8 | 链表超过8转为红黑树 |\n> | UNTREEIFY_THRESHOLD | 6 | 红黑树转为链表的阈值 |\n> | MIN_TREEIFY_CAPACITY | 6 | 当table的长度小于64时，只是进行扩容 |\n\n### HashMap 内 Node(1.8)\n\n```\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n\n        Node(int hash, K key, V value, Node<K,V> next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public final K getKey()        { return key; }\n        public final V getValue()      { return value; }\n        public final String toString() { return key + \"=\" + value; }\n\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                if (Objects.equals(key, e.getKey()) &&\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n    }\n```\n\n内部存储key value的结构，本质是一个链表，其中包括key，value，key value的hash值异或的hash和下一个节点。\n\n### HashMap的扰动函数 \n\n1.8JDK\n```\nstatic final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\n\n1.7JDK\n```\nfinal int hash(Object k) {\n        int h = hashSeed;\n        if (0 != h && k instanceof String) {\n            return sun.misc.Hashing.stringHash32((String) k);\n        }\n \n        h ^= k.hashCode();\n        h ^= (h >>> 20) ^ (h >>> 12);\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n```\n\n自己的高半区和低半区做异或，为了混合原始哈希码的高位和低位，以此来加大低位的随机性。JDK 1.7做了四次右位移异或混合，目的都一致。\n\n### HashMap get 方法\n\n#### 1.7JDK\n```\npublic V get(Object key) {\n    if (key == null)\n        return getForNullKey();\n    Entry<K,V> entry = getEntry(key);\n\n    return null == entry ? null : entry.getValue();\n}\n```\n\n> 如果key是空值，单独获取\n\n```\nprivate V getForNullKey() {\n    if (size == 0) {\n        return null;\n    }\n    for (Entry<K,V> e = table[0]; e != null; e = e.next) {\n        if (e.key == null)\n            return e.value;\n    }\n    return null;\n}\n```\n\n> null的key总是存储在table的0index中。\n\n```\nfinal Entry<K,V> getEntry(Object key) {\n    if (size == 0) {\n        return null;\n    }\n\n    int hash = (key == null) ? 0 : hash(key);\n    for (Entry<K,V> e = table[indexFor(hash, table.length)];\n         e != null;\n         e = e.next) {\n        Object k;\n        if (e.hash == hash &&\n            ((k = e.key) == key || (key != null && key.equals(k))))\n            return e;\n    }\n    return null;\n}\n```\n\n> 获取非空的key，先根据key的hash值和table的长度得到下标索引，在对应的index上的链表遍历查询。\n> indexFor 即hash值与table.length 相与。\n\n\n#### 1.8JDK\n\n```\npublic V get(Object key) {\n    Node<K,V> e;\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n```\n\n```\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n> 首先进行校验 table不为空 && table长度大于0 && table索引位置(使用table.length - 1和hash值进行位与运算)的节点不为空。\n> 其次看first节点（索引位节点）是不是目标节点，如果是目标节点则返回。\n> 如果是红黑树节点，则调用红黑树的查找节点方法进行查找，如果是链表节点遍历查询。\n\n### HashMap put 方法\n\n#### 1.7JDK\n\n```\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n\n> 第一步，如果table为空的话进行初始化。第二步，如果key是空，将value存储table[0]中，先遍历如果有更新新值返回旧值，如果没有addEntry。\n> 第三步，根据key计算hash值与table.length相与找到index，先遍历如果有更新新值返回旧值，如果没有addEntry。\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n```\n\n> addEntry方法中判断了这个bucketIndex的链表没有冲突且元素size超过负载因子*容量的大小就进行resize的操作，然后重新计算key 的hash值和在table的index，最后进行createEntry。\n> createEntry 在链表头部中增加了一个节点。\n\n```\nvoid resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n\n    Entry[] newTable = new Entry[newCapacity];\n    transfer(newTable, initHashSeedAsNeeded(newCapacity));\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    for (Entry<K,V> e : table) {\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n\n> resize 方法中调用了transfer，将原数组的中的元素转移到新数组中，这个过程中将链表反转到新数组中，此时多线程进行操作可能会导致链表出现环状，此时get这个key的index是这个环list会导致CPU100%。\n\n\n#### 1.8jDK \n\n```\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n> 如果table为空或者长度为0的时候会先进行初始化，其次索引位置上的节点为null的时候会创建新的节点。\n> 其次判断p节点的key和hash值是否跟传入的相等，如果相等此节点即为要查询的节点；如果p节点是红黑树节点，调用红黑树的putTreeVal查找目标节点；如果p是链表节点，找不到目标节点则创建一个新的节点，如果节点数超过8则转换为红黑树。\n> 最后如果e节点不为空，则代表目标节点存在，使用传入的value覆盖该节点的value，并返回oldValue;如果没找到目标节点，超过阈值会执行resize扩容，\n\n```\nfinal Node<K,V>[] resize() {\n     Node<K,V>[] oldTab = table;\n     int oldCap = (oldTab == null) ? 0 : oldTab.length;\n     int oldThr = threshold;\n     int newCap, newThr = 0;\n     // 1.老表的容量不为0，即老表不为空\n     if (oldCap > 0) {\n         // 1.1 判断老表的容量是否超过最大容量值：如果超过则将阈值设置为Integer.MAX_VALUE，并直接返回老表,\n         // 此时oldCap * 2比Integer.MAX_VALUE大，因此无法进行重新分布，只是单纯的将阈值扩容到最大\n         if (oldCap >= MAXIMUM_CAPACITY) {\n             threshold = Integer.MAX_VALUE;\n             return oldTab;\n         }\n         // 1.2 将newCap赋值为oldCap的2倍，如果newCap<最大容量并且oldCap>=16, 则将新阈值设置为原来的两倍\n         else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                  oldCap >= DEFAULT_INITIAL_CAPACITY)\n             newThr = oldThr << 1; // double threshold\n     }\n     // 2.如果老表的容量为0, 老表的阈值大于0, 是因为初始容量被放入阈值，则将新表的容量设置为老表的阈值\n     else if (oldThr > 0)\n         newCap = oldThr;\n     else {\n         // 3.老表的容量为0, 老表的阈值为0，这种情况是没有传初始容量的new方法创建的空表，将阈值和容量设置为默认值\n         newCap = DEFAULT_INITIAL_CAPACITY;\n         newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n     }\n     // 4.如果新表的阈值为空, 则通过新的容量*负载因子获得阈值\n     if (newThr == 0) {\n         float ft = (float)newCap * loadFactor;\n         newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                   (int)ft : Integer.MAX_VALUE);\n     }\n     // 5.将当前阈值设置为刚计算出来的新的阈值，定义新表，容量为刚计算出来的新容量，将table设置为新定义的表。\n     threshold = newThr;\n     @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n     Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n     table = newTab;\n     // 6.如果老表不为空，则需遍历所有节点，将节点赋值给新表\n     if (oldTab != null) {\n         for (int j = 0; j < oldCap; ++j) {\n             Node<K,V> e;\n             if ((e = oldTab[j]) != null) {  // 将索引值为j的老表头节点赋值给e\n                 oldTab[j] = null; // 将老表的节点设置为空, 以便垃圾收集器回收空间\n                 // 7.如果e.next为空, 则代表老表的该位置只有1个节点，计算新表的索引位置, 直接将该节点放在该位置\n                 if (e.next == null)\n                     newTab[e.hash & (newCap - 1)] = e;\n                 // 8.如果是红黑树节点，则进行红黑树的重hash分布(跟链表的hash分布基本相同)\n                 else if (e instanceof TreeNode)\n                     ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                 else { // preserve order\n                     // 9.如果是普通的链表节点，则进行普通的重hash分布\n                     Node<K,V> loHead = null, loTail = null; // 存储索引位置为:“原索引位置”的节点\n                     Node<K,V> hiHead = null, hiTail = null; // 存储索引位置为:“原索引位置+oldCap”的节点\n                     Node<K,V> next;\n                     do {\n                         next = e.next;\n                         // 9.1 如果e的hash值与老表的容量进行与运算为0,则扩容后的索引位置跟老表的索引位置一样\n                         if ((e.hash & oldCap) == 0) {\n                             if (loTail == null) // 如果loTail为空, 代表该节点为第一个节点\n                                 loHead = e; // 则将loHead赋值为第一个节点\n                             else\n                                 loTail.next = e;    // 否则将节点添加在loTail后面\n                             loTail = e; // 并将loTail赋值为新增的节点\n                         }\n                         // 9.2 如果e的hash值与老表的容量进行与运算为1,则扩容后的索引位置为:老表的索引位置＋oldCap\n                         else {\n                             if (hiTail == null) // 如果hiTail为空, 代表该节点为第一个节点\n                                 hiHead = e; // 则将hiHead赋值为第一个节点\n                             else\n                                 hiTail.next = e;    // 否则将节点添加在hiTail后面\n                             hiTail = e; // 并将hiTail赋值为新增的节点\n                         }\n                     } while ((e = next) != null);\n                     // 10.如果loTail不为空（说明老表的数据有分布到新表上“原索引位置”的节点），则将最后一个节点\n                     // 的next设为空，并将新表上索引位置为“原索引位置”的节点设置为对应的头节点\n                     if (loTail != null) {\n                         loTail.next = null;\n                         newTab[j] = loHead;\n                     }\n                     // 11.如果hiTail不为空（说明老表的数据有分布到新表上“原索引+oldCap位置”的节点），则将最后\n                     // 一个节点的next设为空，并将新表上索引位置为“原索引+oldCap”的节点设置为对应的头节点\n                     if (hiTail != null) {\n                         hiTail.next = null;\n                         newTab[j + oldCap] = hiHead;\n                     }\n                 }\n             }\n         }\n     }\n     // 12.返回新表\n     return newTab;\n}\n```\n\n> 在JDK1.8中，resize操作不需要重新计算索引，且迁移新表后数据不会倒置。不需要重新计算hash，只需要用原来的hash值，加上高一位做为索引。","source":"_posts/javasource/util/1_HashMap.md","raw":"---\ntitle: HashMap阅读 （1.8|1.7）\ndate: 2019-11-14 15:24:25\ncomments: false\ntags: \n- java\n- HashMap\ncategories: \n- java\nkeywords: \n- java\n- HashMap\n---\n\n### HashMap 内部默认的参数\n\n> | 变量 | 值 |  含义 |\n> | ---- | ---- | ---- |\n> |DEFAULT_INITIAL_CAPACITY| 16 | 默认容量|\n> | MAXIMUM_CAPACITY | 1 << 30 | 最大容量 | \n> | DEFAULT_LOAD_FACTOR | 0.75 | 负载因子 |\n> | TREEIFY_THRESHOLD | 8 | 链表超过8转为红黑树 |\n> | UNTREEIFY_THRESHOLD | 6 | 红黑树转为链表的阈值 |\n> | MIN_TREEIFY_CAPACITY | 6 | 当table的长度小于64时，只是进行扩容 |\n\n### HashMap 内 Node(1.8)\n\n```\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n\n        Node(int hash, K key, V value, Node<K,V> next) {\n            this.hash = hash;\n            this.key = key;\n            this.value = value;\n            this.next = next;\n        }\n\n        public final K getKey()        { return key; }\n        public final V getValue()      { return value; }\n        public final String toString() { return key + \"=\" + value; }\n\n        public final int hashCode() {\n            return Objects.hashCode(key) ^ Objects.hashCode(value);\n        }\n\n        public final V setValue(V newValue) {\n            V oldValue = value;\n            value = newValue;\n            return oldValue;\n        }\n\n        public final boolean equals(Object o) {\n            if (o == this)\n                return true;\n            if (o instanceof Map.Entry) {\n                Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                if (Objects.equals(key, e.getKey()) &&\n                    Objects.equals(value, e.getValue()))\n                    return true;\n            }\n            return false;\n        }\n    }\n```\n\n内部存储key value的结构，本质是一个链表，其中包括key，value，key value的hash值异或的hash和下一个节点。\n\n### HashMap的扰动函数 \n\n1.8JDK\n```\nstatic final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\n\n1.7JDK\n```\nfinal int hash(Object k) {\n        int h = hashSeed;\n        if (0 != h && k instanceof String) {\n            return sun.misc.Hashing.stringHash32((String) k);\n        }\n \n        h ^= k.hashCode();\n        h ^= (h >>> 20) ^ (h >>> 12);\n        return h ^ (h >>> 7) ^ (h >>> 4);\n    }\n```\n\n自己的高半区和低半区做异或，为了混合原始哈希码的高位和低位，以此来加大低位的随机性。JDK 1.7做了四次右位移异或混合，目的都一致。\n\n### HashMap get 方法\n\n#### 1.7JDK\n```\npublic V get(Object key) {\n    if (key == null)\n        return getForNullKey();\n    Entry<K,V> entry = getEntry(key);\n\n    return null == entry ? null : entry.getValue();\n}\n```\n\n> 如果key是空值，单独获取\n\n```\nprivate V getForNullKey() {\n    if (size == 0) {\n        return null;\n    }\n    for (Entry<K,V> e = table[0]; e != null; e = e.next) {\n        if (e.key == null)\n            return e.value;\n    }\n    return null;\n}\n```\n\n> null的key总是存储在table的0index中。\n\n```\nfinal Entry<K,V> getEntry(Object key) {\n    if (size == 0) {\n        return null;\n    }\n\n    int hash = (key == null) ? 0 : hash(key);\n    for (Entry<K,V> e = table[indexFor(hash, table.length)];\n         e != null;\n         e = e.next) {\n        Object k;\n        if (e.hash == hash &&\n            ((k = e.key) == key || (key != null && key.equals(k))))\n            return e;\n    }\n    return null;\n}\n```\n\n> 获取非空的key，先根据key的hash值和table的长度得到下标索引，在对应的index上的链表遍历查询。\n> indexFor 即hash值与table.length 相与。\n\n\n#### 1.8JDK\n\n```\npublic V get(Object key) {\n    Node<K,V> e;\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n```\n\n```\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\n> 首先进行校验 table不为空 && table长度大于0 && table索引位置(使用table.length - 1和hash值进行位与运算)的节点不为空。\n> 其次看first节点（索引位节点）是不是目标节点，如果是目标节点则返回。\n> 如果是红黑树节点，则调用红黑树的查找节点方法进行查找，如果是链表节点遍历查询。\n\n### HashMap put 方法\n\n#### 1.7JDK\n\n```\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n\n> 第一步，如果table为空的话进行初始化。第二步，如果key是空，将value存储table[0]中，先遍历如果有更新新值返回旧值，如果没有addEntry。\n> 第三步，根据key计算hash值与table.length相与找到index，先遍历如果有更新新值返回旧值，如果没有addEntry。\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n```\n\n> addEntry方法中判断了这个bucketIndex的链表没有冲突且元素size超过负载因子*容量的大小就进行resize的操作，然后重新计算key 的hash值和在table的index，最后进行createEntry。\n> createEntry 在链表头部中增加了一个节点。\n\n```\nvoid resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n\n    Entry[] newTable = new Entry[newCapacity];\n    transfer(newTable, initHashSeedAsNeeded(newCapacity));\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    for (Entry<K,V> e : table) {\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n\n> resize 方法中调用了transfer，将原数组的中的元素转移到新数组中，这个过程中将链表反转到新数组中，此时多线程进行操作可能会导致链表出现环状，此时get这个key的index是这个环list会导致CPU100%。\n\n\n#### 1.8jDK \n\n```\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n    Node<K,V>[] tab; Node<K,V> p; int n, i;\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    if ((p = tab[i = (n - 1) & hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n    else {\n        Node<K,V> e; K k;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            e = p;\n        else if (p instanceof TreeNode)\n            e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n        else {\n            for (int binCount = 0; ; ++binCount) {\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    break;\n                p = e;\n            }\n        }\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n    ++modCount;\n    if (++size > threshold)\n        resize();\n    afterNodeInsertion(evict);\n    return null;\n}\n```\n\n> 如果table为空或者长度为0的时候会先进行初始化，其次索引位置上的节点为null的时候会创建新的节点。\n> 其次判断p节点的key和hash值是否跟传入的相等，如果相等此节点即为要查询的节点；如果p节点是红黑树节点，调用红黑树的putTreeVal查找目标节点；如果p是链表节点，找不到目标节点则创建一个新的节点，如果节点数超过8则转换为红黑树。\n> 最后如果e节点不为空，则代表目标节点存在，使用传入的value覆盖该节点的value，并返回oldValue;如果没找到目标节点，超过阈值会执行resize扩容，\n\n```\nfinal Node<K,V>[] resize() {\n     Node<K,V>[] oldTab = table;\n     int oldCap = (oldTab == null) ? 0 : oldTab.length;\n     int oldThr = threshold;\n     int newCap, newThr = 0;\n     // 1.老表的容量不为0，即老表不为空\n     if (oldCap > 0) {\n         // 1.1 判断老表的容量是否超过最大容量值：如果超过则将阈值设置为Integer.MAX_VALUE，并直接返回老表,\n         // 此时oldCap * 2比Integer.MAX_VALUE大，因此无法进行重新分布，只是单纯的将阈值扩容到最大\n         if (oldCap >= MAXIMUM_CAPACITY) {\n             threshold = Integer.MAX_VALUE;\n             return oldTab;\n         }\n         // 1.2 将newCap赋值为oldCap的2倍，如果newCap<最大容量并且oldCap>=16, 则将新阈值设置为原来的两倍\n         else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                  oldCap >= DEFAULT_INITIAL_CAPACITY)\n             newThr = oldThr << 1; // double threshold\n     }\n     // 2.如果老表的容量为0, 老表的阈值大于0, 是因为初始容量被放入阈值，则将新表的容量设置为老表的阈值\n     else if (oldThr > 0)\n         newCap = oldThr;\n     else {\n         // 3.老表的容量为0, 老表的阈值为0，这种情况是没有传初始容量的new方法创建的空表，将阈值和容量设置为默认值\n         newCap = DEFAULT_INITIAL_CAPACITY;\n         newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n     }\n     // 4.如果新表的阈值为空, 则通过新的容量*负载因子获得阈值\n     if (newThr == 0) {\n         float ft = (float)newCap * loadFactor;\n         newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                   (int)ft : Integer.MAX_VALUE);\n     }\n     // 5.将当前阈值设置为刚计算出来的新的阈值，定义新表，容量为刚计算出来的新容量，将table设置为新定义的表。\n     threshold = newThr;\n     @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n     Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n     table = newTab;\n     // 6.如果老表不为空，则需遍历所有节点，将节点赋值给新表\n     if (oldTab != null) {\n         for (int j = 0; j < oldCap; ++j) {\n             Node<K,V> e;\n             if ((e = oldTab[j]) != null) {  // 将索引值为j的老表头节点赋值给e\n                 oldTab[j] = null; // 将老表的节点设置为空, 以便垃圾收集器回收空间\n                 // 7.如果e.next为空, 则代表老表的该位置只有1个节点，计算新表的索引位置, 直接将该节点放在该位置\n                 if (e.next == null)\n                     newTab[e.hash & (newCap - 1)] = e;\n                 // 8.如果是红黑树节点，则进行红黑树的重hash分布(跟链表的hash分布基本相同)\n                 else if (e instanceof TreeNode)\n                     ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                 else { // preserve order\n                     // 9.如果是普通的链表节点，则进行普通的重hash分布\n                     Node<K,V> loHead = null, loTail = null; // 存储索引位置为:“原索引位置”的节点\n                     Node<K,V> hiHead = null, hiTail = null; // 存储索引位置为:“原索引位置+oldCap”的节点\n                     Node<K,V> next;\n                     do {\n                         next = e.next;\n                         // 9.1 如果e的hash值与老表的容量进行与运算为0,则扩容后的索引位置跟老表的索引位置一样\n                         if ((e.hash & oldCap) == 0) {\n                             if (loTail == null) // 如果loTail为空, 代表该节点为第一个节点\n                                 loHead = e; // 则将loHead赋值为第一个节点\n                             else\n                                 loTail.next = e;    // 否则将节点添加在loTail后面\n                             loTail = e; // 并将loTail赋值为新增的节点\n                         }\n                         // 9.2 如果e的hash值与老表的容量进行与运算为1,则扩容后的索引位置为:老表的索引位置＋oldCap\n                         else {\n                             if (hiTail == null) // 如果hiTail为空, 代表该节点为第一个节点\n                                 hiHead = e; // 则将hiHead赋值为第一个节点\n                             else\n                                 hiTail.next = e;    // 否则将节点添加在hiTail后面\n                             hiTail = e; // 并将hiTail赋值为新增的节点\n                         }\n                     } while ((e = next) != null);\n                     // 10.如果loTail不为空（说明老表的数据有分布到新表上“原索引位置”的节点），则将最后一个节点\n                     // 的next设为空，并将新表上索引位置为“原索引位置”的节点设置为对应的头节点\n                     if (loTail != null) {\n                         loTail.next = null;\n                         newTab[j] = loHead;\n                     }\n                     // 11.如果hiTail不为空（说明老表的数据有分布到新表上“原索引+oldCap位置”的节点），则将最后\n                     // 一个节点的next设为空，并将新表上索引位置为“原索引+oldCap”的节点设置为对应的头节点\n                     if (hiTail != null) {\n                         hiTail.next = null;\n                         newTab[j + oldCap] = hiHead;\n                     }\n                 }\n             }\n         }\n     }\n     // 12.返回新表\n     return newTab;\n}\n```\n\n> 在JDK1.8中，resize操作不需要重新计算索引，且迁移新表后数据不会倒置。不需要重新计算hash，只需要用原来的hash值，加上高一位做为索引。","slug":"javasource/util/1_HashMap","published":1,"updated":"2020-02-13T15:07:39.574Z","layout":"post","photos":[],"link":"","_id":"ck6lvszux007yn0ztj5dxin6a","content":"<h3 id=\"HashMap-内部默认的参数\"><a href=\"#HashMap-内部默认的参数\" class=\"headerlink\" title=\"HashMap 内部默认的参数\"></a>HashMap 内部默认的参数</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEFAULT_INITIAL_CAPACITY</td>\n<td>16</td>\n<td>默认容量</td>\n</tr>\n<tr>\n<td>MAXIMUM_CAPACITY</td>\n<td>1 &lt;&lt; 30</td>\n<td>最大容量</td>\n</tr>\n<tr>\n<td>DEFAULT_LOAD_FACTOR</td>\n<td>0.75</td>\n<td>负载因子</td>\n</tr>\n<tr>\n<td>TREEIFY_THRESHOLD</td>\n<td>8</td>\n<td>链表超过8转为红黑树</td>\n</tr>\n<tr>\n<td>UNTREEIFY_THRESHOLD</td>\n<td>6</td>\n<td>红黑树转为链表的阈值</td>\n</tr>\n<tr>\n<td>MIN_TREEIFY_CAPACITY</td>\n<td>6</td>\n<td>当table的长度小于64时，只是进行扩容</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"HashMap-内-Node-1-8\"><a href=\"#HashMap-内-Node-1-8\" class=\"headerlink\" title=\"HashMap 内 Node(1.8)\"></a>HashMap 内 Node(1.8)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        V value;</div><div class=\"line\">        Node&lt;K,V&gt; next;</div><div class=\"line\"></div><div class=\"line\">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class=\"line\">            this.hash = hash;</div><div class=\"line\">            this.key = key;</div><div class=\"line\">            this.value = value;</div><div class=\"line\">            this.next = next;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public final K getKey()        &#123; return key; &#125;</div><div class=\"line\">        public final V getValue()      &#123; return value; &#125;</div><div class=\"line\">        public final String toString() &#123; return key + &quot;=&quot; + value; &#125;</div><div class=\"line\"></div><div class=\"line\">        public final int hashCode() &#123;</div><div class=\"line\">            return Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public final V setValue(V newValue) &#123;</div><div class=\"line\">            V oldValue = value;</div><div class=\"line\">            value = newValue;</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public final boolean equals(Object o) &#123;</div><div class=\"line\">            if (o == this)</div><div class=\"line\">                return true;</div><div class=\"line\">            if (o instanceof Map.Entry) &#123;</div><div class=\"line\">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class=\"line\">                if (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class=\"line\">                    Objects.equals(value, e.getValue()))</div><div class=\"line\">                    return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>内部存储key value的结构，本质是一个链表，其中包括key，value，key value的hash值异或的hash和下一个节点。</p>\n<h3 id=\"HashMap的扰动函数\"><a href=\"#HashMap的扰动函数\" class=\"headerlink\" title=\"HashMap的扰动函数\"></a>HashMap的扰动函数</h3><p>1.8JDK<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final int hash(Object key) &#123;</div><div class=\"line\">        int h;</div><div class=\"line\">        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>1.7JDK<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int hash(Object k) &#123;</div><div class=\"line\">        int h = hashSeed;</div><div class=\"line\">        if (0 != h &amp;&amp; k instanceof String) &#123;</div><div class=\"line\">            return sun.misc.Hashing.stringHash32((String) k);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        h ^= k.hashCode();</div><div class=\"line\">        h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);</div><div class=\"line\">        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>自己的高半区和低半区做异或，为了混合原始哈希码的高位和低位，以此来加大低位的随机性。JDK 1.7做了四次右位移异或混合，目的都一致。</p>\n<h3 id=\"HashMap-get-方法\"><a href=\"#HashMap-get-方法\" class=\"headerlink\" title=\"HashMap get 方法\"></a>HashMap get 方法</h3><h4 id=\"1-7JDK\"><a href=\"#1-7JDK\" class=\"headerlink\" title=\"1.7JDK\"></a>1.7JDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return getForNullKey();</div><div class=\"line\">    Entry&lt;K,V&gt; entry = getEntry(key);</div><div class=\"line\"></div><div class=\"line\">    return null == entry ? null : entry.getValue();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果key是空值，单独获取</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private V getForNullKey() &#123;</div><div class=\"line\">    if (size == 0) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[0]; e != null; e = e.next) &#123;</div><div class=\"line\">        if (e.key == null)</div><div class=\"line\">            return e.value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>null的key总是存储在table的0index中。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Entry&lt;K,V&gt; getEntry(Object key) &#123;</div><div class=\"line\">    if (size == 0) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int hash = (key == null) ? 0 : hash(key);</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class=\"line\">         e != null;</div><div class=\"line\">         e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp;</div><div class=\"line\">            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">            return e;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>获取非空的key，先根据key的hash值和table的长度得到下标索引，在对应的index上的链表遍历查询。<br>indexFor 即hash值与table.length 相与。</p>\n</blockquote>\n<h4 id=\"1-8JDK\"><a href=\"#1-8JDK\" class=\"headerlink\" title=\"1.8JDK\"></a>1.8JDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Node&lt;K,V&gt; e;</div><div class=\"line\">    return (e = getNode(hash(key), key)) == null ? null : e.value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</div><div class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</div><div class=\"line\">        if (first.hash == hash &amp;&amp; // always check first node</div><div class=\"line\">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">            return first;</div><div class=\"line\">        if ((e = first.next) != null) &#123;</div><div class=\"line\">            if (first instanceof TreeNode)</div><div class=\"line\">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">            do &#123;</div><div class=\"line\">                if (e.hash == hash &amp;&amp;</div><div class=\"line\">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                    return e;</div><div class=\"line\">            &#125; while ((e = e.next) != null);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>首先进行校验 table不为空 &amp;&amp; table长度大于0 &amp;&amp; table索引位置(使用table.length - 1和hash值进行位与运算)的节点不为空。<br>其次看first节点（索引位节点）是不是目标节点，如果是目标节点则返回。<br>如果是红黑树节点，则调用红黑树的查找节点方法进行查找，如果是链表节点遍历查询。</p>\n</blockquote>\n<h3 id=\"HashMap-put-方法\"><a href=\"#HashMap-put-方法\" class=\"headerlink\" title=\"HashMap put 方法\"></a>HashMap put 方法</h3><h4 id=\"1-7JDK-1\"><a href=\"#1-7JDK-1\" class=\"headerlink\" title=\"1.7JDK\"></a>1.7JDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    if (table == EMPTY_TABLE) &#123;</div><div class=\"line\">        inflateTable(threshold);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return putForNullKey(value);</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int i = indexFor(hash, table.length);</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            e.recordAccess(this);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    modCount++;</div><div class=\"line\">    addEntry(hash, key, value, i);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>第一步，如果table为空的话进行初始化。第二步，如果key是空，将value存储table[0]中，先遍历如果有更新新值返回旧值，如果没有addEntry。<br>第三步，根据key计算hash值与table.length相与找到index，先遍历如果有更新新值返回旧值，如果没有addEntry。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class=\"line\">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class=\"line\">        resize(2 * table.length);</div><div class=\"line\">        hash = (null != key) ? hash(key) : 0;</div><div class=\"line\">        bucketIndex = indexFor(hash, table.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createEntry(hash, key, value, bucketIndex);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>addEntry方法中判断了这个bucketIndex的链表没有冲突且元素size超过负载因子*容量的大小就进行resize的操作，然后重新计算key 的hash值和在table的index，最后进行createEntry。<br>createEntry 在链表头部中增加了一个节点。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">void resize(int newCapacity) &#123;</div><div class=\"line\">    Entry[] oldTable = table;</div><div class=\"line\">    int oldCapacity = oldTable.length;</div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">        threshold = Integer.MAX_VALUE;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];</div><div class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class=\"line\">    table = newTable;</div><div class=\"line\">    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</div><div class=\"line\">&#125;</div><div class=\"line\">void transfer(Entry[] newTable, boolean rehash) &#123;</div><div class=\"line\">    int newCapacity = newTable.length;</div><div class=\"line\">    for (Entry&lt;K,V&gt; e : table) &#123;</div><div class=\"line\">        while(null != e) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; next = e.next;</div><div class=\"line\">            if (rehash) &#123;</div><div class=\"line\">                e.hash = null == e.key ? 0 : hash(e.key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            int i = indexFor(e.hash, newCapacity);</div><div class=\"line\">            e.next = newTable[i];</div><div class=\"line\">            newTable[i] = e;</div><div class=\"line\">            e = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>resize 方法中调用了transfer，将原数组的中的元素转移到新数组中，这个过程中将链表反转到新数组中，此时多线程进行操作可能会导致链表出现环状，此时get这个key的index是这个环list会导致CPU100%。</p>\n</blockquote>\n<h4 id=\"1-8jDK\"><a href=\"#1-8jDK\" class=\"headerlink\" title=\"1.8jDK\"></a>1.8jDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</div><div class=\"line\">                   boolean evict) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</div><div class=\"line\">    if ((tab = table) == null || (n = tab.length) == 0)</div><div class=\"line\">        n = (tab = resize()).length;</div><div class=\"line\">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</div><div class=\"line\">        tab[i] = newNode(hash, key, value, null);</div><div class=\"line\">    else &#123;</div><div class=\"line\">        Node&lt;K,V&gt; e; K k;</div><div class=\"line\">        if (p.hash == hash &amp;&amp;</div><div class=\"line\">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">            e = p;</div><div class=\"line\">        else if (p instanceof TreeNode)</div><div class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</div><div class=\"line\">        else &#123;</div><div class=\"line\">            for (int binCount = 0; ; ++binCount) &#123;</div><div class=\"line\">                if ((e = p.next) == null) &#123;</div><div class=\"line\">                    p.next = newNode(hash, key, value, null);</div><div class=\"line\">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</div><div class=\"line\">                        treeifyBin(tab, hash);</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (e.hash == hash &amp;&amp;</div><div class=\"line\">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                    break;</div><div class=\"line\">                p = e;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (e != null) &#123; // existing mapping for key</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            if (!onlyIfAbsent || oldValue == null)</div><div class=\"line\">                e.value = value;</div><div class=\"line\">            afterNodeAccess(e);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ++modCount;</div><div class=\"line\">    if (++size &gt; threshold)</div><div class=\"line\">        resize();</div><div class=\"line\">    afterNodeInsertion(evict);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果table为空或者长度为0的时候会先进行初始化，其次索引位置上的节点为null的时候会创建新的节点。<br>其次判断p节点的key和hash值是否跟传入的相等，如果相等此节点即为要查询的节点；如果p节点是红黑树节点，调用红黑树的putTreeVal查找目标节点；如果p是链表节点，找不到目标节点则创建一个新的节点，如果节点数超过8则转换为红黑树。<br>最后如果e节点不为空，则代表目标节点存在，使用传入的value覆盖该节点的value，并返回oldValue;如果没找到目标节点，超过阈值会执行resize扩容，</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt;[] resize() &#123;</div><div class=\"line\">     Node&lt;K,V&gt;[] oldTab = table;</div><div class=\"line\">     int oldCap = (oldTab == null) ? 0 : oldTab.length;</div><div class=\"line\">     int oldThr = threshold;</div><div class=\"line\">     int newCap, newThr = 0;</div><div class=\"line\">     // 1.老表的容量不为0，即老表不为空</div><div class=\"line\">     if (oldCap &gt; 0) &#123;</div><div class=\"line\">         // 1.1 判断老表的容量是否超过最大容量值：如果超过则将阈值设置为Integer.MAX_VALUE，并直接返回老表,</div><div class=\"line\">         // 此时oldCap * 2比Integer.MAX_VALUE大，因此无法进行重新分布，只是单纯的将阈值扩容到最大</div><div class=\"line\">         if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">             threshold = Integer.MAX_VALUE;</div><div class=\"line\">             return oldTab;</div><div class=\"line\">         &#125;</div><div class=\"line\">         // 1.2 将newCap赋值为oldCap的2倍，如果newCap&lt;最大容量并且oldCap&gt;=16, 则将新阈值设置为原来的两倍</div><div class=\"line\">         else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class=\"line\">                  oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class=\"line\">             newThr = oldThr &lt;&lt; 1; // double threshold</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 2.如果老表的容量为0, 老表的阈值大于0, 是因为初始容量被放入阈值，则将新表的容量设置为老表的阈值</div><div class=\"line\">     else if (oldThr &gt; 0)</div><div class=\"line\">         newCap = oldThr;</div><div class=\"line\">     else &#123;</div><div class=\"line\">         // 3.老表的容量为0, 老表的阈值为0，这种情况是没有传初始容量的new方法创建的空表，将阈值和容量设置为默认值</div><div class=\"line\">         newCap = DEFAULT_INITIAL_CAPACITY;</div><div class=\"line\">         newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 4.如果新表的阈值为空, 则通过新的容量*负载因子获得阈值</div><div class=\"line\">     if (newThr == 0) &#123;</div><div class=\"line\">         float ft = (float)newCap * loadFactor;</div><div class=\"line\">         newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</div><div class=\"line\">                   (int)ft : Integer.MAX_VALUE);</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 5.将当前阈值设置为刚计算出来的新的阈值，定义新表，容量为刚计算出来的新容量，将table设置为新定义的表。</div><div class=\"line\">     threshold = newThr;</div><div class=\"line\">     @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</div><div class=\"line\">     Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</div><div class=\"line\">     table = newTab;</div><div class=\"line\">     // 6.如果老表不为空，则需遍历所有节点，将节点赋值给新表</div><div class=\"line\">     if (oldTab != null) &#123;</div><div class=\"line\">         for (int j = 0; j &lt; oldCap; ++j) &#123;</div><div class=\"line\">             Node&lt;K,V&gt; e;</div><div class=\"line\">             if ((e = oldTab[j]) != null) &#123;  // 将索引值为j的老表头节点赋值给e</div><div class=\"line\">                 oldTab[j] = null; // 将老表的节点设置为空, 以便垃圾收集器回收空间</div><div class=\"line\">                 // 7.如果e.next为空, 则代表老表的该位置只有1个节点，计算新表的索引位置, 直接将该节点放在该位置</div><div class=\"line\">                 if (e.next == null)</div><div class=\"line\">                     newTab[e.hash &amp; (newCap - 1)] = e;</div><div class=\"line\">                 // 8.如果是红黑树节点，则进行红黑树的重hash分布(跟链表的hash分布基本相同)</div><div class=\"line\">                 else if (e instanceof TreeNode)</div><div class=\"line\">                     ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</div><div class=\"line\">                 else &#123; // preserve order</div><div class=\"line\">                     // 9.如果是普通的链表节点，则进行普通的重hash分布</div><div class=\"line\">                     Node&lt;K,V&gt; loHead = null, loTail = null; // 存储索引位置为:“原索引位置”的节点</div><div class=\"line\">                     Node&lt;K,V&gt; hiHead = null, hiTail = null; // 存储索引位置为:“原索引位置+oldCap”的节点</div><div class=\"line\">                     Node&lt;K,V&gt; next;</div><div class=\"line\">                     do &#123;</div><div class=\"line\">                         next = e.next;</div><div class=\"line\">                         // 9.1 如果e的hash值与老表的容量进行与运算为0,则扩容后的索引位置跟老表的索引位置一样</div><div class=\"line\">                         if ((e.hash &amp; oldCap) == 0) &#123;</div><div class=\"line\">                             if (loTail == null) // 如果loTail为空, 代表该节点为第一个节点</div><div class=\"line\">                                 loHead = e; // 则将loHead赋值为第一个节点</div><div class=\"line\">                             else</div><div class=\"line\">                                 loTail.next = e;    // 否则将节点添加在loTail后面</div><div class=\"line\">                             loTail = e; // 并将loTail赋值为新增的节点</div><div class=\"line\">                         &#125;</div><div class=\"line\">                         // 9.2 如果e的hash值与老表的容量进行与运算为1,则扩容后的索引位置为:老表的索引位置＋oldCap</div><div class=\"line\">                         else &#123;</div><div class=\"line\">                             if (hiTail == null) // 如果hiTail为空, 代表该节点为第一个节点</div><div class=\"line\">                                 hiHead = e; // 则将hiHead赋值为第一个节点</div><div class=\"line\">                             else</div><div class=\"line\">                                 hiTail.next = e;    // 否则将节点添加在hiTail后面</div><div class=\"line\">                             hiTail = e; // 并将hiTail赋值为新增的节点</div><div class=\"line\">                         &#125;</div><div class=\"line\">                     &#125; while ((e = next) != null);</div><div class=\"line\">                     // 10.如果loTail不为空（说明老表的数据有分布到新表上“原索引位置”的节点），则将最后一个节点</div><div class=\"line\">                     // 的next设为空，并将新表上索引位置为“原索引位置”的节点设置为对应的头节点</div><div class=\"line\">                     if (loTail != null) &#123;</div><div class=\"line\">                         loTail.next = null;</div><div class=\"line\">                         newTab[j] = loHead;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                     // 11.如果hiTail不为空（说明老表的数据有分布到新表上“原索引+oldCap位置”的节点），则将最后</div><div class=\"line\">                     // 一个节点的next设为空，并将新表上索引位置为“原索引+oldCap”的节点设置为对应的头节点</div><div class=\"line\">                     if (hiTail != null) &#123;</div><div class=\"line\">                         hiTail.next = null;</div><div class=\"line\">                         newTab[j + oldCap] = hiHead;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 12.返回新表</div><div class=\"line\">     return newTab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在JDK1.8中，resize操作不需要重新计算索引，且迁移新表后数据不会倒置。不需要重新计算hash，只需要用原来的hash值，加上高一位做为索引。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HashMap-内部默认的参数\"><a href=\"#HashMap-内部默认的参数\" class=\"headerlink\" title=\"HashMap 内部默认的参数\"></a>HashMap 内部默认的参数</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DEFAULT_INITIAL_CAPACITY</td>\n<td>16</td>\n<td>默认容量</td>\n</tr>\n<tr>\n<td>MAXIMUM_CAPACITY</td>\n<td>1 &lt;&lt; 30</td>\n<td>最大容量</td>\n</tr>\n<tr>\n<td>DEFAULT_LOAD_FACTOR</td>\n<td>0.75</td>\n<td>负载因子</td>\n</tr>\n<tr>\n<td>TREEIFY_THRESHOLD</td>\n<td>8</td>\n<td>链表超过8转为红黑树</td>\n</tr>\n<tr>\n<td>UNTREEIFY_THRESHOLD</td>\n<td>6</td>\n<td>红黑树转为链表的阈值</td>\n</tr>\n<tr>\n<td>MIN_TREEIFY_CAPACITY</td>\n<td>6</td>\n<td>当table的长度小于64时，只是进行扩容</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"HashMap-内-Node-1-8\"><a href=\"#HashMap-内-Node-1-8\" class=\"headerlink\" title=\"HashMap 内 Node(1.8)\"></a>HashMap 内 Node(1.8)</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        V value;</div><div class=\"line\">        Node&lt;K,V&gt; next;</div><div class=\"line\"></div><div class=\"line\">        Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class=\"line\">            this.hash = hash;</div><div class=\"line\">            this.key = key;</div><div class=\"line\">            this.value = value;</div><div class=\"line\">            this.next = next;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public final K getKey()        &#123; return key; &#125;</div><div class=\"line\">        public final V getValue()      &#123; return value; &#125;</div><div class=\"line\">        public final String toString() &#123; return key + &quot;=&quot; + value; &#125;</div><div class=\"line\"></div><div class=\"line\">        public final int hashCode() &#123;</div><div class=\"line\">            return Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public final V setValue(V newValue) &#123;</div><div class=\"line\">            V oldValue = value;</div><div class=\"line\">            value = newValue;</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public final boolean equals(Object o) &#123;</div><div class=\"line\">            if (o == this)</div><div class=\"line\">                return true;</div><div class=\"line\">            if (o instanceof Map.Entry) &#123;</div><div class=\"line\">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class=\"line\">                if (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class=\"line\">                    Objects.equals(value, e.getValue()))</div><div class=\"line\">                    return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">            return false;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>内部存储key value的结构，本质是一个链表，其中包括key，value，key value的hash值异或的hash和下一个节点。</p>\n<h3 id=\"HashMap的扰动函数\"><a href=\"#HashMap的扰动函数\" class=\"headerlink\" title=\"HashMap的扰动函数\"></a>HashMap的扰动函数</h3><p>1.8JDK<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final int hash(Object key) &#123;</div><div class=\"line\">        int h;</div><div class=\"line\">        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>1.7JDK<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int hash(Object k) &#123;</div><div class=\"line\">        int h = hashSeed;</div><div class=\"line\">        if (0 != h &amp;&amp; k instanceof String) &#123;</div><div class=\"line\">            return sun.misc.Hashing.stringHash32((String) k);</div><div class=\"line\">        &#125;</div><div class=\"line\"> </div><div class=\"line\">        h ^= k.hashCode();</div><div class=\"line\">        h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);</div><div class=\"line\">        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>自己的高半区和低半区做异或，为了混合原始哈希码的高位和低位，以此来加大低位的随机性。JDK 1.7做了四次右位移异或混合，目的都一致。</p>\n<h3 id=\"HashMap-get-方法\"><a href=\"#HashMap-get-方法\" class=\"headerlink\" title=\"HashMap get 方法\"></a>HashMap get 方法</h3><h4 id=\"1-7JDK\"><a href=\"#1-7JDK\" class=\"headerlink\" title=\"1.7JDK\"></a>1.7JDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return getForNullKey();</div><div class=\"line\">    Entry&lt;K,V&gt; entry = getEntry(key);</div><div class=\"line\"></div><div class=\"line\">    return null == entry ? null : entry.getValue();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果key是空值，单独获取</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private V getForNullKey() &#123;</div><div class=\"line\">    if (size == 0) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[0]; e != null; e = e.next) &#123;</div><div class=\"line\">        if (e.key == null)</div><div class=\"line\">            return e.value;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>null的key总是存储在table的0index中。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Entry&lt;K,V&gt; getEntry(Object key) &#123;</div><div class=\"line\">    if (size == 0) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int hash = (key == null) ? 0 : hash(key);</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class=\"line\">         e != null;</div><div class=\"line\">         e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp;</div><div class=\"line\">            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">            return e;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>获取非空的key，先根据key的hash值和table的长度得到下标索引，在对应的index上的链表遍历查询。<br>indexFor 即hash值与table.length 相与。</p>\n</blockquote>\n<h4 id=\"1-8JDK\"><a href=\"#1-8JDK\" class=\"headerlink\" title=\"1.8JDK\"></a>1.8JDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Node&lt;K,V&gt; e;</div><div class=\"line\">    return (e = getNode(hash(key), key)) == null ? null : e.value;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt; getNode(int hash, Object key) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;</div><div class=\"line\">    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;</div><div class=\"line\">        (first = tab[(n - 1) &amp; hash]) != null) &#123;</div><div class=\"line\">        if (first.hash == hash &amp;&amp; // always check first node</div><div class=\"line\">            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">            return first;</div><div class=\"line\">        if ((e = first.next) != null) &#123;</div><div class=\"line\">            if (first instanceof TreeNode)</div><div class=\"line\">                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class=\"line\">            do &#123;</div><div class=\"line\">                if (e.hash == hash &amp;&amp;</div><div class=\"line\">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                    return e;</div><div class=\"line\">            &#125; while ((e = e.next) != null);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>首先进行校验 table不为空 &amp;&amp; table长度大于0 &amp;&amp; table索引位置(使用table.length - 1和hash值进行位与运算)的节点不为空。<br>其次看first节点（索引位节点）是不是目标节点，如果是目标节点则返回。<br>如果是红黑树节点，则调用红黑树的查找节点方法进行查找，如果是链表节点遍历查询。</p>\n</blockquote>\n<h3 id=\"HashMap-put-方法\"><a href=\"#HashMap-put-方法\" class=\"headerlink\" title=\"HashMap put 方法\"></a>HashMap put 方法</h3><h4 id=\"1-7JDK-1\"><a href=\"#1-7JDK-1\" class=\"headerlink\" title=\"1.7JDK\"></a>1.7JDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    if (table == EMPTY_TABLE) &#123;</div><div class=\"line\">        inflateTable(threshold);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return putForNullKey(value);</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int i = indexFor(hash, table.length);</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            e.recordAccess(this);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    modCount++;</div><div class=\"line\">    addEntry(hash, key, value, i);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>第一步，如果table为空的话进行初始化。第二步，如果key是空，将value存储table[0]中，先遍历如果有更新新值返回旧值，如果没有addEntry。<br>第三步，根据key计算hash值与table.length相与找到index，先遍历如果有更新新值返回旧值，如果没有addEntry。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class=\"line\">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class=\"line\">        resize(2 * table.length);</div><div class=\"line\">        hash = (null != key) ? hash(key) : 0;</div><div class=\"line\">        bucketIndex = indexFor(hash, table.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createEntry(hash, key, value, bucketIndex);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>addEntry方法中判断了这个bucketIndex的链表没有冲突且元素size超过负载因子*容量的大小就进行resize的操作，然后重新计算key 的hash值和在table的index，最后进行createEntry。<br>createEntry 在链表头部中增加了一个节点。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">void resize(int newCapacity) &#123;</div><div class=\"line\">    Entry[] oldTable = table;</div><div class=\"line\">    int oldCapacity = oldTable.length;</div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">        threshold = Integer.MAX_VALUE;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];</div><div class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class=\"line\">    table = newTable;</div><div class=\"line\">    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</div><div class=\"line\">&#125;</div><div class=\"line\">void transfer(Entry[] newTable, boolean rehash) &#123;</div><div class=\"line\">    int newCapacity = newTable.length;</div><div class=\"line\">    for (Entry&lt;K,V&gt; e : table) &#123;</div><div class=\"line\">        while(null != e) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; next = e.next;</div><div class=\"line\">            if (rehash) &#123;</div><div class=\"line\">                e.hash = null == e.key ? 0 : hash(e.key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            int i = indexFor(e.hash, newCapacity);</div><div class=\"line\">            e.next = newTable[i];</div><div class=\"line\">            newTable[i] = e;</div><div class=\"line\">            e = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>resize 方法中调用了transfer，将原数组的中的元素转移到新数组中，这个过程中将链表反转到新数组中，此时多线程进行操作可能会导致链表出现环状，此时get这个key的index是这个环list会导致CPU100%。</p>\n</blockquote>\n<h4 id=\"1-8jDK\"><a href=\"#1-8jDK\" class=\"headerlink\" title=\"1.8jDK\"></a>1.8jDK</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</div><div class=\"line\">                   boolean evict) &#123;</div><div class=\"line\">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</div><div class=\"line\">    if ((tab = table) == null || (n = tab.length) == 0)</div><div class=\"line\">        n = (tab = resize()).length;</div><div class=\"line\">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</div><div class=\"line\">        tab[i] = newNode(hash, key, value, null);</div><div class=\"line\">    else &#123;</div><div class=\"line\">        Node&lt;K,V&gt; e; K k;</div><div class=\"line\">        if (p.hash == hash &amp;&amp;</div><div class=\"line\">            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">            e = p;</div><div class=\"line\">        else if (p instanceof TreeNode)</div><div class=\"line\">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</div><div class=\"line\">        else &#123;</div><div class=\"line\">            for (int binCount = 0; ; ++binCount) &#123;</div><div class=\"line\">                if ((e = p.next) == null) &#123;</div><div class=\"line\">                    p.next = newNode(hash, key, value, null);</div><div class=\"line\">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</div><div class=\"line\">                        treeifyBin(tab, hash);</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (e.hash == hash &amp;&amp;</div><div class=\"line\">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))</div><div class=\"line\">                    break;</div><div class=\"line\">                p = e;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (e != null) &#123; // existing mapping for key</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            if (!onlyIfAbsent || oldValue == null)</div><div class=\"line\">                e.value = value;</div><div class=\"line\">            afterNodeAccess(e);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    ++modCount;</div><div class=\"line\">    if (++size &gt; threshold)</div><div class=\"line\">        resize();</div><div class=\"line\">    afterNodeInsertion(evict);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果table为空或者长度为0的时候会先进行初始化，其次索引位置上的节点为null的时候会创建新的节点。<br>其次判断p节点的key和hash值是否跟传入的相等，如果相等此节点即为要查询的节点；如果p节点是红黑树节点，调用红黑树的putTreeVal查找目标节点；如果p是链表节点，找不到目标节点则创建一个新的节点，如果节点数超过8则转换为红黑树。<br>最后如果e节点不为空，则代表目标节点存在，使用传入的value覆盖该节点的value，并返回oldValue;如果没找到目标节点，超过阈值会执行resize扩容，</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\">final Node&lt;K,V&gt;[] resize() &#123;</div><div class=\"line\">     Node&lt;K,V&gt;[] oldTab = table;</div><div class=\"line\">     int oldCap = (oldTab == null) ? 0 : oldTab.length;</div><div class=\"line\">     int oldThr = threshold;</div><div class=\"line\">     int newCap, newThr = 0;</div><div class=\"line\">     // 1.老表的容量不为0，即老表不为空</div><div class=\"line\">     if (oldCap &gt; 0) &#123;</div><div class=\"line\">         // 1.1 判断老表的容量是否超过最大容量值：如果超过则将阈值设置为Integer.MAX_VALUE，并直接返回老表,</div><div class=\"line\">         // 此时oldCap * 2比Integer.MAX_VALUE大，因此无法进行重新分布，只是单纯的将阈值扩容到最大</div><div class=\"line\">         if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">             threshold = Integer.MAX_VALUE;</div><div class=\"line\">             return oldTab;</div><div class=\"line\">         &#125;</div><div class=\"line\">         // 1.2 将newCap赋值为oldCap的2倍，如果newCap&lt;最大容量并且oldCap&gt;=16, 则将新阈值设置为原来的两倍</div><div class=\"line\">         else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class=\"line\">                  oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class=\"line\">             newThr = oldThr &lt;&lt; 1; // double threshold</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 2.如果老表的容量为0, 老表的阈值大于0, 是因为初始容量被放入阈值，则将新表的容量设置为老表的阈值</div><div class=\"line\">     else if (oldThr &gt; 0)</div><div class=\"line\">         newCap = oldThr;</div><div class=\"line\">     else &#123;</div><div class=\"line\">         // 3.老表的容量为0, 老表的阈值为0，这种情况是没有传初始容量的new方法创建的空表，将阈值和容量设置为默认值</div><div class=\"line\">         newCap = DEFAULT_INITIAL_CAPACITY;</div><div class=\"line\">         newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 4.如果新表的阈值为空, 则通过新的容量*负载因子获得阈值</div><div class=\"line\">     if (newThr == 0) &#123;</div><div class=\"line\">         float ft = (float)newCap * loadFactor;</div><div class=\"line\">         newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</div><div class=\"line\">                   (int)ft : Integer.MAX_VALUE);</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 5.将当前阈值设置为刚计算出来的新的阈值，定义新表，容量为刚计算出来的新容量，将table设置为新定义的表。</div><div class=\"line\">     threshold = newThr;</div><div class=\"line\">     @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</div><div class=\"line\">     Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</div><div class=\"line\">     table = newTab;</div><div class=\"line\">     // 6.如果老表不为空，则需遍历所有节点，将节点赋值给新表</div><div class=\"line\">     if (oldTab != null) &#123;</div><div class=\"line\">         for (int j = 0; j &lt; oldCap; ++j) &#123;</div><div class=\"line\">             Node&lt;K,V&gt; e;</div><div class=\"line\">             if ((e = oldTab[j]) != null) &#123;  // 将索引值为j的老表头节点赋值给e</div><div class=\"line\">                 oldTab[j] = null; // 将老表的节点设置为空, 以便垃圾收集器回收空间</div><div class=\"line\">                 // 7.如果e.next为空, 则代表老表的该位置只有1个节点，计算新表的索引位置, 直接将该节点放在该位置</div><div class=\"line\">                 if (e.next == null)</div><div class=\"line\">                     newTab[e.hash &amp; (newCap - 1)] = e;</div><div class=\"line\">                 // 8.如果是红黑树节点，则进行红黑树的重hash分布(跟链表的hash分布基本相同)</div><div class=\"line\">                 else if (e instanceof TreeNode)</div><div class=\"line\">                     ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</div><div class=\"line\">                 else &#123; // preserve order</div><div class=\"line\">                     // 9.如果是普通的链表节点，则进行普通的重hash分布</div><div class=\"line\">                     Node&lt;K,V&gt; loHead = null, loTail = null; // 存储索引位置为:“原索引位置”的节点</div><div class=\"line\">                     Node&lt;K,V&gt; hiHead = null, hiTail = null; // 存储索引位置为:“原索引位置+oldCap”的节点</div><div class=\"line\">                     Node&lt;K,V&gt; next;</div><div class=\"line\">                     do &#123;</div><div class=\"line\">                         next = e.next;</div><div class=\"line\">                         // 9.1 如果e的hash值与老表的容量进行与运算为0,则扩容后的索引位置跟老表的索引位置一样</div><div class=\"line\">                         if ((e.hash &amp; oldCap) == 0) &#123;</div><div class=\"line\">                             if (loTail == null) // 如果loTail为空, 代表该节点为第一个节点</div><div class=\"line\">                                 loHead = e; // 则将loHead赋值为第一个节点</div><div class=\"line\">                             else</div><div class=\"line\">                                 loTail.next = e;    // 否则将节点添加在loTail后面</div><div class=\"line\">                             loTail = e; // 并将loTail赋值为新增的节点</div><div class=\"line\">                         &#125;</div><div class=\"line\">                         // 9.2 如果e的hash值与老表的容量进行与运算为1,则扩容后的索引位置为:老表的索引位置＋oldCap</div><div class=\"line\">                         else &#123;</div><div class=\"line\">                             if (hiTail == null) // 如果hiTail为空, 代表该节点为第一个节点</div><div class=\"line\">                                 hiHead = e; // 则将hiHead赋值为第一个节点</div><div class=\"line\">                             else</div><div class=\"line\">                                 hiTail.next = e;    // 否则将节点添加在hiTail后面</div><div class=\"line\">                             hiTail = e; // 并将hiTail赋值为新增的节点</div><div class=\"line\">                         &#125;</div><div class=\"line\">                     &#125; while ((e = next) != null);</div><div class=\"line\">                     // 10.如果loTail不为空（说明老表的数据有分布到新表上“原索引位置”的节点），则将最后一个节点</div><div class=\"line\">                     // 的next设为空，并将新表上索引位置为“原索引位置”的节点设置为对应的头节点</div><div class=\"line\">                     if (loTail != null) &#123;</div><div class=\"line\">                         loTail.next = null;</div><div class=\"line\">                         newTab[j] = loHead;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                     // 11.如果hiTail不为空（说明老表的数据有分布到新表上“原索引+oldCap位置”的节点），则将最后</div><div class=\"line\">                     // 一个节点的next设为空，并将新表上索引位置为“原索引+oldCap”的节点设置为对应的头节点</div><div class=\"line\">                     if (hiTail != null) &#123;</div><div class=\"line\">                         hiTail.next = null;</div><div class=\"line\">                         newTab[j + oldCap] = hiHead;</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">     // 12.返回新表</div><div class=\"line\">     return newTab;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在JDK1.8中，resize操作不需要重新计算索引，且迁移新表后数据不会倒置。不需要重新计算hash，只需要用原来的hash值，加上高一位做为索引。</p>\n</blockquote>\n"},{"title":"ReentrantLock阅读","date":"2019-12-01T12:15:48.000Z","comments":0,"keywords":["java","ReentrantLock","锁","同步","公平锁","非公平锁"],"_content":"\n### ReentrantLock\n\nReentrantLock是一个互斥锁，也是一个可重入锁。ReentrantLock锁在同一时刻只能被一个线程持有，但是它可被单个线程多次获取，每获取一次AQS的state就加1。\nReentrantLock内部的实现（公平锁和非公平锁）都是基于内部Sync的实现。\n\n### 内部结构\n\nReentrantLock内部定义了三个重要的内部类，Sync、FairSync、NonfairSync。\n\nSync继承自抽象类AbstractQueuedSynchronizer，FairSync（公平锁）和 NonfairSync（非公平锁）继承于Sync。\n\n#### Sync\n\n```\nabstract static class Sync extends AbstractQueuedSynchronizer {\n    private static final long serialVersionUID = -5179523762034025860L;\n\n    abstract void lock();\n    //非公平锁的TryAcquire\n    final boolean nonfairTryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {//没有被任何线程持有\n            if (compareAndSetState(0, acquires)) {//CAS 获取\n                setExclusiveOwnerThread(current);//获取成功，将当前线程设置为Owner\n                return true;\n            }\n        }\n        else if (current == getExclusiveOwnerThread()) {//如果当前线程已获取锁，将state+1返回\n            int nextc = c + acquires;\n            if (nextc < 0) // overflow\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        return false;\n    }\n\n    protected final boolean tryRelease(int releases) {\n        int c = getState() - releases;\n        if (Thread.currentThread() != getExclusiveOwnerThread())//如果当前线程不是持有锁的线程抛异常\n            throw new IllegalMonitorStateException();\n        boolean free = false;//标明释放释放锁\n        if (c == 0) {\n            free = true;\n            setExclusiveOwnerThread(null);\n        }\n        setState(c);\n        return free;\n    }\n    //持有锁的线程是否是当前线程\n    protected final boolean isHeldExclusively() {\n        return getExclusiveOwnerThread() == Thread.currentThread();\n    }\n    //newCondition\n    final ConditionObject newCondition() {\n        return new ConditionObject();\n    }\n    //持有锁的线程\n    final Thread getOwner() {\n        return getState() == 0 ? null : getExclusiveOwnerThread();\n    }\n\n    final int getHoldCount() {\n        return isHeldExclusively() ? getState() : 0;\n    }\n\n    final boolean isLocked() {\n        return getState() != 0;\n    }\n\n    private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        s.defaultReadObject();\n        setState(0); // reset to unlocked state\n    }\n}\n```\n\nSync是ReentrantLock实现同步控制的基础。Sync内部定义了一些方法：lock（获取锁的方法，在子类实现）、nonfairTryAcquire（非公平锁的尝试获取资源）、tryRelease（释放资源）。\n\n#### NonfairSync\n\n```\nstatic final class NonfairSync extends Sync {\n    private static final long serialVersionUID = 7316153563782823691L;\n    \n    final void lock() {\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);\n    }\n    \n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);\n    }\n}\n```\n\nNonfairSync是内部非公平锁的定义，非公平锁获取锁的流程：\n\n1. 调用lock方法,lock方法首先会进行CAS操作,将state属性尝试设置为1,如果成功,则代表获取到锁,将exclusiveOwnerThread属性设置为当前获取锁的线程。\n2. 如果线程CAS失败,则调用AQS的acquire方法,去获取锁,tryAcquire(1)是子类自己的实现,调用了nonfairTryAcquire方法。如果调用了nonfairTryAcquire方法获取锁失败，那就会吧当前线程包装为Node加入同步队列。\n   \n#### FairSync \n\n```\nstatic final class FairSync extends Sync {\n    private static final long serialVersionUID = -3000897897090466540L;\n\n    final void lock() {\n        acquire(1);\n    }\n    //tryAcquire方法的公平锁版本,虽然是公平的,但是不保证一定会获取锁,除非是递归调用或者是第一个节点或者是前面无等待线程\n    protected final boolean tryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {\n            //hasQueuedPredecessors方法判断当先线程前面是否还有等待线程，如果有等待线程,则不去竞争获取锁\n            if (!hasQueuedPredecessors() &&\n                compareAndSetState(0, acquires)) {\n                setExclusiveOwnerThread(current);\n                return true;\n            }\n        }\n        else if (current == getExclusiveOwnerThread()) {\n            int nextc = c + acquires;\n            if (nextc < 0)\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        return false;\n    }\n}\n```\n公平锁在加锁的时候不会先尝试去加锁，直接去调用AQS的acquire方法去获取锁，在自己定义的尝试获取资源中，如果state为0，也会先去判断当前线程前面是否还有线程等待，如果没有等待的线程才会自己获取锁，否则加入等待队列；如果是当前线程获取到了锁则state+1.\n\n### 公平锁和非公平锁的不同\n\n1. 公平锁能保证：老的线程排队使用锁，新线程仍然排队使用锁。 \n2. 非公平锁保证：老的线程排队使用锁；但是无法保证新线程抢占已经在排队的线程的锁。","source":"_posts/javasource/util/5_ReentrantLock.md","raw":"---\ntitle: ReentrantLock阅读 \ndate: 2019-12-01 20:15:48\ncomments: false\ntags: \n- java\n- ReentrantLock\n- 锁\n- 同步\n- 公平锁\n- 非公平锁\ncategories: \n- java\nkeywords: \n- java\n- ReentrantLock\n- 锁\n- 同步\n- 公平锁\n- 非公平锁\n---\n\n### ReentrantLock\n\nReentrantLock是一个互斥锁，也是一个可重入锁。ReentrantLock锁在同一时刻只能被一个线程持有，但是它可被单个线程多次获取，每获取一次AQS的state就加1。\nReentrantLock内部的实现（公平锁和非公平锁）都是基于内部Sync的实现。\n\n### 内部结构\n\nReentrantLock内部定义了三个重要的内部类，Sync、FairSync、NonfairSync。\n\nSync继承自抽象类AbstractQueuedSynchronizer，FairSync（公平锁）和 NonfairSync（非公平锁）继承于Sync。\n\n#### Sync\n\n```\nabstract static class Sync extends AbstractQueuedSynchronizer {\n    private static final long serialVersionUID = -5179523762034025860L;\n\n    abstract void lock();\n    //非公平锁的TryAcquire\n    final boolean nonfairTryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {//没有被任何线程持有\n            if (compareAndSetState(0, acquires)) {//CAS 获取\n                setExclusiveOwnerThread(current);//获取成功，将当前线程设置为Owner\n                return true;\n            }\n        }\n        else if (current == getExclusiveOwnerThread()) {//如果当前线程已获取锁，将state+1返回\n            int nextc = c + acquires;\n            if (nextc < 0) // overflow\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        return false;\n    }\n\n    protected final boolean tryRelease(int releases) {\n        int c = getState() - releases;\n        if (Thread.currentThread() != getExclusiveOwnerThread())//如果当前线程不是持有锁的线程抛异常\n            throw new IllegalMonitorStateException();\n        boolean free = false;//标明释放释放锁\n        if (c == 0) {\n            free = true;\n            setExclusiveOwnerThread(null);\n        }\n        setState(c);\n        return free;\n    }\n    //持有锁的线程是否是当前线程\n    protected final boolean isHeldExclusively() {\n        return getExclusiveOwnerThread() == Thread.currentThread();\n    }\n    //newCondition\n    final ConditionObject newCondition() {\n        return new ConditionObject();\n    }\n    //持有锁的线程\n    final Thread getOwner() {\n        return getState() == 0 ? null : getExclusiveOwnerThread();\n    }\n\n    final int getHoldCount() {\n        return isHeldExclusively() ? getState() : 0;\n    }\n\n    final boolean isLocked() {\n        return getState() != 0;\n    }\n\n    private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        s.defaultReadObject();\n        setState(0); // reset to unlocked state\n    }\n}\n```\n\nSync是ReentrantLock实现同步控制的基础。Sync内部定义了一些方法：lock（获取锁的方法，在子类实现）、nonfairTryAcquire（非公平锁的尝试获取资源）、tryRelease（释放资源）。\n\n#### NonfairSync\n\n```\nstatic final class NonfairSync extends Sync {\n    private static final long serialVersionUID = 7316153563782823691L;\n    \n    final void lock() {\n        if (compareAndSetState(0, 1))\n            setExclusiveOwnerThread(Thread.currentThread());\n        else\n            acquire(1);\n    }\n    \n    protected final boolean tryAcquire(int acquires) {\n        return nonfairTryAcquire(acquires);\n    }\n}\n```\n\nNonfairSync是内部非公平锁的定义，非公平锁获取锁的流程：\n\n1. 调用lock方法,lock方法首先会进行CAS操作,将state属性尝试设置为1,如果成功,则代表获取到锁,将exclusiveOwnerThread属性设置为当前获取锁的线程。\n2. 如果线程CAS失败,则调用AQS的acquire方法,去获取锁,tryAcquire(1)是子类自己的实现,调用了nonfairTryAcquire方法。如果调用了nonfairTryAcquire方法获取锁失败，那就会吧当前线程包装为Node加入同步队列。\n   \n#### FairSync \n\n```\nstatic final class FairSync extends Sync {\n    private static final long serialVersionUID = -3000897897090466540L;\n\n    final void lock() {\n        acquire(1);\n    }\n    //tryAcquire方法的公平锁版本,虽然是公平的,但是不保证一定会获取锁,除非是递归调用或者是第一个节点或者是前面无等待线程\n    protected final boolean tryAcquire(int acquires) {\n        final Thread current = Thread.currentThread();\n        int c = getState();\n        if (c == 0) {\n            //hasQueuedPredecessors方法判断当先线程前面是否还有等待线程，如果有等待线程,则不去竞争获取锁\n            if (!hasQueuedPredecessors() &&\n                compareAndSetState(0, acquires)) {\n                setExclusiveOwnerThread(current);\n                return true;\n            }\n        }\n        else if (current == getExclusiveOwnerThread()) {\n            int nextc = c + acquires;\n            if (nextc < 0)\n                throw new Error(\"Maximum lock count exceeded\");\n            setState(nextc);\n            return true;\n        }\n        return false;\n    }\n}\n```\n公平锁在加锁的时候不会先尝试去加锁，直接去调用AQS的acquire方法去获取锁，在自己定义的尝试获取资源中，如果state为0，也会先去判断当前线程前面是否还有线程等待，如果没有等待的线程才会自己获取锁，否则加入等待队列；如果是当前线程获取到了锁则state+1.\n\n### 公平锁和非公平锁的不同\n\n1. 公平锁能保证：老的线程排队使用锁，新线程仍然排队使用锁。 \n2. 非公平锁保证：老的线程排队使用锁；但是无法保证新线程抢占已经在排队的线程的锁。","slug":"javasource/util/5_ReentrantLock","published":1,"updated":"2020-01-02T05:49:23.768Z","layout":"post","photos":[],"link":"","_id":"ck6lvszuy0082n0ztmw4n7lto","content":"<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock是一个互斥锁，也是一个可重入锁。ReentrantLock锁在同一时刻只能被一个线程持有，但是它可被单个线程多次获取，每获取一次AQS的state就加1。<br>ReentrantLock内部的实现（公平锁和非公平锁）都是基于内部Sync的实现。</p>\n<h3 id=\"内部结构\"><a href=\"#内部结构\" class=\"headerlink\" title=\"内部结构\"></a>内部结构</h3><p>ReentrantLock内部定义了三个重要的内部类，Sync、FairSync、NonfairSync。</p>\n<p>Sync继承自抽象类AbstractQueuedSynchronizer，FairSync（公平锁）和 NonfairSync（非公平锁）继承于Sync。</p>\n<h4 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">abstract static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">    private static final long serialVersionUID = -5179523762034025860L;</div><div class=\"line\"></div><div class=\"line\">    abstract void lock();</div><div class=\"line\">    //非公平锁的TryAcquire</div><div class=\"line\">    final boolean nonfairTryAcquire(int acquires) &#123;</div><div class=\"line\">        final Thread current = Thread.currentThread();</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        if (c == 0) &#123;//没有被任何线程持有</div><div class=\"line\">            if (compareAndSetState(0, acquires)) &#123;//CAS 获取</div><div class=\"line\">                setExclusiveOwnerThread(current);//获取成功，将当前线程设置为Owner</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (current == getExclusiveOwnerThread()) &#123;//如果当前线程已获取锁，将state+1返回</div><div class=\"line\">            int nextc = c + acquires;</div><div class=\"line\">            if (nextc &lt; 0) // overflow</div><div class=\"line\">                throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">            setState(nextc);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">        int c = getState() - releases;</div><div class=\"line\">        if (Thread.currentThread() != getExclusiveOwnerThread())//如果当前线程不是持有锁的线程抛异常</div><div class=\"line\">            throw new IllegalMonitorStateException();</div><div class=\"line\">        boolean free = false;//标明释放释放锁</div><div class=\"line\">        if (c == 0) &#123;</div><div class=\"line\">            free = true;</div><div class=\"line\">            setExclusiveOwnerThread(null);</div><div class=\"line\">        &#125;</div><div class=\"line\">        setState(c);</div><div class=\"line\">        return free;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //持有锁的线程是否是当前线程</div><div class=\"line\">    protected final boolean isHeldExclusively() &#123;</div><div class=\"line\">        return getExclusiveOwnerThread() == Thread.currentThread();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //newCondition</div><div class=\"line\">    final ConditionObject newCondition() &#123;</div><div class=\"line\">        return new ConditionObject();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //持有锁的线程</div><div class=\"line\">    final Thread getOwner() &#123;</div><div class=\"line\">        return getState() == 0 ? null : getExclusiveOwnerThread();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final int getHoldCount() &#123;</div><div class=\"line\">        return isHeldExclusively() ? getState() : 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final boolean isLocked() &#123;</div><div class=\"line\">        return getState() != 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void readObject(java.io.ObjectInputStream s)</div><div class=\"line\">        throws java.io.IOException, ClassNotFoundException &#123;</div><div class=\"line\">        s.defaultReadObject();</div><div class=\"line\">        setState(0); // reset to unlocked state</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sync是ReentrantLock实现同步控制的基础。Sync内部定义了一些方法：lock（获取锁的方法，在子类实现）、nonfairTryAcquire（非公平锁的尝试获取资源）、tryRelease（释放资源）。</p>\n<h4 id=\"NonfairSync\"><a href=\"#NonfairSync\" class=\"headerlink\" title=\"NonfairSync\"></a>NonfairSync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class NonfairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = 7316153563782823691L;</div><div class=\"line\">    </div><div class=\"line\">    final void lock() &#123;</div><div class=\"line\">        if (compareAndSetState(0, 1))</div><div class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">        else</div><div class=\"line\">            acquire(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">        return nonfairTryAcquire(acquires);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>NonfairSync是内部非公平锁的定义，非公平锁获取锁的流程：</p>\n<ol>\n<li>调用lock方法,lock方法首先会进行CAS操作,将state属性尝试设置为1,如果成功,则代表获取到锁,将exclusiveOwnerThread属性设置为当前获取锁的线程。</li>\n<li>如果线程CAS失败,则调用AQS的acquire方法,去获取锁,tryAcquire(1)是子类自己的实现,调用了nonfairTryAcquire方法。如果调用了nonfairTryAcquire方法获取锁失败，那就会吧当前线程包装为Node加入同步队列。</li>\n</ol>\n<h4 id=\"FairSync\"><a href=\"#FairSync\" class=\"headerlink\" title=\"FairSync\"></a>FairSync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class FairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -3000897897090466540L;</div><div class=\"line\"></div><div class=\"line\">    final void lock() &#123;</div><div class=\"line\">        acquire(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    //tryAcquire方法的公平锁版本,虽然是公平的,但是不保证一定会获取锁,除非是递归调用或者是第一个节点或者是前面无等待线程</div><div class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">        final Thread current = Thread.currentThread();</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        if (c == 0) &#123;</div><div class=\"line\">            //hasQueuedPredecessors方法判断当先线程前面是否还有等待线程，如果有等待线程,则不去竞争获取锁</div><div class=\"line\">            if (!hasQueuedPredecessors() &amp;&amp;</div><div class=\"line\">                compareAndSetState(0, acquires)) &#123;</div><div class=\"line\">                setExclusiveOwnerThread(current);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (current == getExclusiveOwnerThread()) &#123;</div><div class=\"line\">            int nextc = c + acquires;</div><div class=\"line\">            if (nextc &lt; 0)</div><div class=\"line\">                throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">            setState(nextc);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>公平锁在加锁的时候不会先尝试去加锁，直接去调用AQS的acquire方法去获取锁，在自己定义的尝试获取资源中，如果state为0，也会先去判断当前线程前面是否还有线程等待，如果没有等待的线程才会自己获取锁，否则加入等待队列；如果是当前线程获取到了锁则state+1.</p>\n<h3 id=\"公平锁和非公平锁的不同\"><a href=\"#公平锁和非公平锁的不同\" class=\"headerlink\" title=\"公平锁和非公平锁的不同\"></a>公平锁和非公平锁的不同</h3><ol>\n<li>公平锁能保证：老的线程排队使用锁，新线程仍然排队使用锁。 </li>\n<li>非公平锁保证：老的线程排队使用锁；但是无法保证新线程抢占已经在排队的线程的锁。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ReentrantLock\"><a href=\"#ReentrantLock\" class=\"headerlink\" title=\"ReentrantLock\"></a>ReentrantLock</h3><p>ReentrantLock是一个互斥锁，也是一个可重入锁。ReentrantLock锁在同一时刻只能被一个线程持有，但是它可被单个线程多次获取，每获取一次AQS的state就加1。<br>ReentrantLock内部的实现（公平锁和非公平锁）都是基于内部Sync的实现。</p>\n<h3 id=\"内部结构\"><a href=\"#内部结构\" class=\"headerlink\" title=\"内部结构\"></a>内部结构</h3><p>ReentrantLock内部定义了三个重要的内部类，Sync、FairSync、NonfairSync。</p>\n<p>Sync继承自抽象类AbstractQueuedSynchronizer，FairSync（公平锁）和 NonfairSync（非公平锁）继承于Sync。</p>\n<h4 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div></pre></td><td class=\"code\"><pre><div class=\"line\">abstract static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">    private static final long serialVersionUID = -5179523762034025860L;</div><div class=\"line\"></div><div class=\"line\">    abstract void lock();</div><div class=\"line\">    //非公平锁的TryAcquire</div><div class=\"line\">    final boolean nonfairTryAcquire(int acquires) &#123;</div><div class=\"line\">        final Thread current = Thread.currentThread();</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        if (c == 0) &#123;//没有被任何线程持有</div><div class=\"line\">            if (compareAndSetState(0, acquires)) &#123;//CAS 获取</div><div class=\"line\">                setExclusiveOwnerThread(current);//获取成功，将当前线程设置为Owner</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (current == getExclusiveOwnerThread()) &#123;//如果当前线程已获取锁，将state+1返回</div><div class=\"line\">            int nextc = c + acquires;</div><div class=\"line\">            if (nextc &lt; 0) // overflow</div><div class=\"line\">                throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">            setState(nextc);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">        int c = getState() - releases;</div><div class=\"line\">        if (Thread.currentThread() != getExclusiveOwnerThread())//如果当前线程不是持有锁的线程抛异常</div><div class=\"line\">            throw new IllegalMonitorStateException();</div><div class=\"line\">        boolean free = false;//标明释放释放锁</div><div class=\"line\">        if (c == 0) &#123;</div><div class=\"line\">            free = true;</div><div class=\"line\">            setExclusiveOwnerThread(null);</div><div class=\"line\">        &#125;</div><div class=\"line\">        setState(c);</div><div class=\"line\">        return free;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //持有锁的线程是否是当前线程</div><div class=\"line\">    protected final boolean isHeldExclusively() &#123;</div><div class=\"line\">        return getExclusiveOwnerThread() == Thread.currentThread();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //newCondition</div><div class=\"line\">    final ConditionObject newCondition() &#123;</div><div class=\"line\">        return new ConditionObject();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //持有锁的线程</div><div class=\"line\">    final Thread getOwner() &#123;</div><div class=\"line\">        return getState() == 0 ? null : getExclusiveOwnerThread();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final int getHoldCount() &#123;</div><div class=\"line\">        return isHeldExclusively() ? getState() : 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    final boolean isLocked() &#123;</div><div class=\"line\">        return getState() != 0;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void readObject(java.io.ObjectInputStream s)</div><div class=\"line\">        throws java.io.IOException, ClassNotFoundException &#123;</div><div class=\"line\">        s.defaultReadObject();</div><div class=\"line\">        setState(0); // reset to unlocked state</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sync是ReentrantLock实现同步控制的基础。Sync内部定义了一些方法：lock（获取锁的方法，在子类实现）、nonfairTryAcquire（非公平锁的尝试获取资源）、tryRelease（释放资源）。</p>\n<h4 id=\"NonfairSync\"><a href=\"#NonfairSync\" class=\"headerlink\" title=\"NonfairSync\"></a>NonfairSync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class NonfairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = 7316153563782823691L;</div><div class=\"line\">    </div><div class=\"line\">    final void lock() &#123;</div><div class=\"line\">        if (compareAndSetState(0, 1))</div><div class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</div><div class=\"line\">        else</div><div class=\"line\">            acquire(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">        return nonfairTryAcquire(acquires);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>NonfairSync是内部非公平锁的定义，非公平锁获取锁的流程：</p>\n<ol>\n<li>调用lock方法,lock方法首先会进行CAS操作,将state属性尝试设置为1,如果成功,则代表获取到锁,将exclusiveOwnerThread属性设置为当前获取锁的线程。</li>\n<li>如果线程CAS失败,则调用AQS的acquire方法,去获取锁,tryAcquire(1)是子类自己的实现,调用了nonfairTryAcquire方法。如果调用了nonfairTryAcquire方法获取锁失败，那就会吧当前线程包装为Node加入同步队列。</li>\n</ol>\n<h4 id=\"FairSync\"><a href=\"#FairSync\" class=\"headerlink\" title=\"FairSync\"></a>FairSync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class FairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -3000897897090466540L;</div><div class=\"line\"></div><div class=\"line\">    final void lock() &#123;</div><div class=\"line\">        acquire(1);</div><div class=\"line\">    &#125;</div><div class=\"line\">    //tryAcquire方法的公平锁版本,虽然是公平的,但是不保证一定会获取锁,除非是递归调用或者是第一个节点或者是前面无等待线程</div><div class=\"line\">    protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">        final Thread current = Thread.currentThread();</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        if (c == 0) &#123;</div><div class=\"line\">            //hasQueuedPredecessors方法判断当先线程前面是否还有等待线程，如果有等待线程,则不去竞争获取锁</div><div class=\"line\">            if (!hasQueuedPredecessors() &amp;&amp;</div><div class=\"line\">                compareAndSetState(0, acquires)) &#123;</div><div class=\"line\">                setExclusiveOwnerThread(current);</div><div class=\"line\">                return true;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        else if (current == getExclusiveOwnerThread()) &#123;</div><div class=\"line\">            int nextc = c + acquires;</div><div class=\"line\">            if (nextc &lt; 0)</div><div class=\"line\">                throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">            setState(nextc);</div><div class=\"line\">            return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return false;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>公平锁在加锁的时候不会先尝试去加锁，直接去调用AQS的acquire方法去获取锁，在自己定义的尝试获取资源中，如果state为0，也会先去判断当前线程前面是否还有线程等待，如果没有等待的线程才会自己获取锁，否则加入等待队列；如果是当前线程获取到了锁则state+1.</p>\n<h3 id=\"公平锁和非公平锁的不同\"><a href=\"#公平锁和非公平锁的不同\" class=\"headerlink\" title=\"公平锁和非公平锁的不同\"></a>公平锁和非公平锁的不同</h3><ol>\n<li>公平锁能保证：老的线程排队使用锁，新线程仍然排队使用锁。 </li>\n<li>非公平锁保证：老的线程排队使用锁；但是无法保证新线程抢占已经在排队的线程的锁。</li>\n</ol>\n"},{"title":"CountDownLatch阅读","date":"2019-12-02T13:48:17.000Z","comments":0,"keywords":["java","CountDownLatch","锁","同步"],"_content":"\n### CountDownLatch\n\ncountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。\n\ncountDownLatch的实现也很简单，也是通过内部Sync实现了AQS就完成了功能。\n\n#### Sync\n\n```\nprivate static final class Sync extends AbstractQueuedSynchronizer {\n    private static final long serialVersionUID = 4982264981922014374L;\n\n    Sync(int count) {\n        setState(count);\n    }\n\n    int getCount() {\n        return getState();\n    }\n\n    protected int tryAcquireShared(int acquires) {\n        return (getState() == 0) ? 1 : -1;\n    }\n\n    protected boolean tryReleaseShared(int releases) {\n        // Decrement count; signal when transition to zero\n        for (;;) {\n            int c = getState();\n            if (c == 0)\n                return false;\n            int nextc = c-1;\n            if (compareAndSetState(c, nextc))\n                return nextc == 0;\n        }\n    }\n}\n```\n\nSync的构造方法就会给AQS的state设置一个数，释放资源（tryReleaseShared）的时候通过CAS操作去将state-1。\n\n#### CountDownLatch的实现\n\n一般我们会定义CountDownLatch的时候，new的时候会设置一个count，也就是等待count个线程完成之后，在执行的当前的线程。\n\n```\npublic CountDownLatch(int count) {\n    if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n    this.sync = new Sync(count);\n}\n```\n\n> 如果count小于当然就是报错，然后就创建了一个内部的Sync。\n\n调用await的时候，就是将当前线程进行阻塞：\n```\npublic void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n```\nawait方式直接调用的AQS的acquireSharedInterruptibly方法，AQS中acquireSharedInterruptibly调用了doAcquireSharedInterruptibly：\n```\nprivate void doAcquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        for (;;) {\n            final Node p = node.predecessor();\n            if (p == head) {\n                int r = tryAcquireShared(arg);\n                if (r >= 0) {\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    failed = false;\n                    return;\n                }\n            }\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                throw new InterruptedException();\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\ndoAcquireSharedInterruptibly和其他同步阻塞方法一样，先将node包装为共享模式然后加入Waiter队列，如果node的前一个节点是头结点就尝试去获取资源，如果获取到将本节点设置为头结点然后唤醒剩余共享节点返回，否则就将此线程阻塞。\n\n\n如果我们等待其他线程每完成一个就会调用countDown方法：\n```\npublic void countDown() {\n    sync.releaseShared(1);\n}\n```\nreleaseShared就相当于先执行了tryReleaseShared（先以CAS的方式将state-1），然后执行AQS的doReleaseShared方法。\ndoReleaseShared方法可以参考![aqs](http://fk5431.com/20191118/javasource/util/3_AbstractQueuedSynchronizer/)，就是对共享模式的node进行唤醒，如果state为0的时候，就会唤醒，此时此线程已等待其他线程执行完毕，就可以开始执行了。\n","source":"_posts/javasource/util/8_CountDownLatch.md","raw":"---\ntitle: CountDownLatch阅读 \ndate: 2019-12-02 21:48:17\ncomments: false\ntags: \n- java\n- CountDownLatch\n- 锁\n- 同步\ncategories: \n- java\nkeywords:  \n- java\n- CountDownLatch\n- 锁\n- 同步\n---\n\n### CountDownLatch\n\ncountDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。\n\ncountDownLatch的实现也很简单，也是通过内部Sync实现了AQS就完成了功能。\n\n#### Sync\n\n```\nprivate static final class Sync extends AbstractQueuedSynchronizer {\n    private static final long serialVersionUID = 4982264981922014374L;\n\n    Sync(int count) {\n        setState(count);\n    }\n\n    int getCount() {\n        return getState();\n    }\n\n    protected int tryAcquireShared(int acquires) {\n        return (getState() == 0) ? 1 : -1;\n    }\n\n    protected boolean tryReleaseShared(int releases) {\n        // Decrement count; signal when transition to zero\n        for (;;) {\n            int c = getState();\n            if (c == 0)\n                return false;\n            int nextc = c-1;\n            if (compareAndSetState(c, nextc))\n                return nextc == 0;\n        }\n    }\n}\n```\n\nSync的构造方法就会给AQS的state设置一个数，释放资源（tryReleaseShared）的时候通过CAS操作去将state-1。\n\n#### CountDownLatch的实现\n\n一般我们会定义CountDownLatch的时候，new的时候会设置一个count，也就是等待count个线程完成之后，在执行的当前的线程。\n\n```\npublic CountDownLatch(int count) {\n    if (count < 0) throw new IllegalArgumentException(\"count < 0\");\n    this.sync = new Sync(count);\n}\n```\n\n> 如果count小于当然就是报错，然后就创建了一个内部的Sync。\n\n调用await的时候，就是将当前线程进行阻塞：\n```\npublic void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n```\nawait方式直接调用的AQS的acquireSharedInterruptibly方法，AQS中acquireSharedInterruptibly调用了doAcquireSharedInterruptibly：\n```\nprivate void doAcquireSharedInterruptibly(int arg)\n        throws InterruptedException {\n    final Node node = addWaiter(Node.SHARED);\n    boolean failed = true;\n    try {\n        for (;;) {\n            final Node p = node.predecessor();\n            if (p == head) {\n                int r = tryAcquireShared(arg);\n                if (r >= 0) {\n                    setHeadAndPropagate(node, r);\n                    p.next = null; // help GC\n                    failed = false;\n                    return;\n                }\n            }\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                throw new InterruptedException();\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n```\n\ndoAcquireSharedInterruptibly和其他同步阻塞方法一样，先将node包装为共享模式然后加入Waiter队列，如果node的前一个节点是头结点就尝试去获取资源，如果获取到将本节点设置为头结点然后唤醒剩余共享节点返回，否则就将此线程阻塞。\n\n\n如果我们等待其他线程每完成一个就会调用countDown方法：\n```\npublic void countDown() {\n    sync.releaseShared(1);\n}\n```\nreleaseShared就相当于先执行了tryReleaseShared（先以CAS的方式将state-1），然后执行AQS的doReleaseShared方法。\ndoReleaseShared方法可以参考![aqs](http://fk5431.com/20191118/javasource/util/3_AbstractQueuedSynchronizer/)，就是对共享模式的node进行唤醒，如果state为0的时候，就会唤醒，此时此线程已等待其他线程执行完毕，就可以开始执行了。\n","slug":"javasource/util/8_CountDownLatch","published":1,"updated":"2020-01-02T05:49:23.769Z","layout":"post","photos":[],"link":"","_id":"ck6lvszuy0085n0ztji9t3b9p","content":"<h3 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h3><p>countDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。</p>\n<p>countDownLatch的实现也很简单，也是通过内部Sync实现了AQS就完成了功能。</p>\n<h4 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static final class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">    private static final long serialVersionUID = 4982264981922014374L;</div><div class=\"line\"></div><div class=\"line\">    Sync(int count) &#123;</div><div class=\"line\">        setState(count);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int getCount() &#123;</div><div class=\"line\">        return getState();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">        return (getState() == 0) ? 1 : -1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">        // Decrement count; signal when transition to zero</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            if (c == 0)</div><div class=\"line\">                return false;</div><div class=\"line\">            int nextc = c-1;</div><div class=\"line\">            if (compareAndSetState(c, nextc))</div><div class=\"line\">                return nextc == 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sync的构造方法就会给AQS的state设置一个数，释放资源（tryReleaseShared）的时候通过CAS操作去将state-1。</p>\n<h4 id=\"CountDownLatch的实现\"><a href=\"#CountDownLatch的实现\" class=\"headerlink\" title=\"CountDownLatch的实现\"></a>CountDownLatch的实现</h4><p>一般我们会定义CountDownLatch的时候，new的时候会设置一个count，也就是等待count个线程完成之后，在执行的当前的线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CountDownLatch(int count) &#123;</div><div class=\"line\">    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</div><div class=\"line\">    this.sync = new Sync(count);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果count小于当然就是报错，然后就创建了一个内部的Sync。</p>\n</blockquote>\n<p>调用await的时候，就是将当前线程进行阻塞：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void await() throws InterruptedException &#123;</div><div class=\"line\">    sync.acquireSharedInterruptibly(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>await方式直接调用的AQS的acquireSharedInterruptibly方法，AQS中acquireSharedInterruptibly调用了doAcquireSharedInterruptibly：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireSharedInterruptibly(int arg)</div><div class=\"line\">        throws InterruptedException &#123;</div><div class=\"line\">    final Node node = addWaiter(Node.SHARED);</div><div class=\"line\">    boolean failed = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            final Node p = node.predecessor();</div><div class=\"line\">            if (p == head) &#123;</div><div class=\"line\">                int r = tryAcquireShared(arg);</div><div class=\"line\">                if (r &gt;= 0) &#123;</div><div class=\"line\">                    setHeadAndPropagate(node, r);</div><div class=\"line\">                    p.next = null; // help GC</div><div class=\"line\">                    failed = false;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                parkAndCheckInterrupt())</div><div class=\"line\">                throw new InterruptedException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>doAcquireSharedInterruptibly和其他同步阻塞方法一样，先将node包装为共享模式然后加入Waiter队列，如果node的前一个节点是头结点就尝试去获取资源，如果获取到将本节点设置为头结点然后唤醒剩余共享节点返回，否则就将此线程阻塞。</p>\n<p>如果我们等待其他线程每完成一个就会调用countDown方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void countDown() &#123;</div><div class=\"line\">    sync.releaseShared(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>releaseShared就相当于先执行了tryReleaseShared（先以CAS的方式将state-1），然后执行AQS的doReleaseShared方法。<br>doReleaseShared方法可以参考<img src=\"http://fk5431.com/20191118/javasource/util/3_AbstractQueuedSynchronizer/\" alt=\"aqs\">，就是对共享模式的node进行唤醒，如果state为0的时候，就会唤醒，此时此线程已等待其他线程执行完毕，就可以开始执行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a>CountDownLatch</h3><p>countDownLatch这个类使一个线程等待其他线程各自执行完毕后再执行。是通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。</p>\n<p>countDownLatch的实现也很简单，也是通过内部Sync实现了AQS就完成了功能。</p>\n<h4 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static final class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">    private static final long serialVersionUID = 4982264981922014374L;</div><div class=\"line\"></div><div class=\"line\">    Sync(int count) &#123;</div><div class=\"line\">        setState(count);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    int getCount() &#123;</div><div class=\"line\">        return getState();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">        return (getState() == 0) ? 1 : -1;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">        // Decrement count; signal when transition to zero</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int c = getState();</div><div class=\"line\">            if (c == 0)</div><div class=\"line\">                return false;</div><div class=\"line\">            int nextc = c-1;</div><div class=\"line\">            if (compareAndSetState(c, nextc))</div><div class=\"line\">                return nextc == 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sync的构造方法就会给AQS的state设置一个数，释放资源（tryReleaseShared）的时候通过CAS操作去将state-1。</p>\n<h4 id=\"CountDownLatch的实现\"><a href=\"#CountDownLatch的实现\" class=\"headerlink\" title=\"CountDownLatch的实现\"></a>CountDownLatch的实现</h4><p>一般我们会定义CountDownLatch的时候，new的时候会设置一个count，也就是等待count个线程完成之后，在执行的当前的线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CountDownLatch(int count) &#123;</div><div class=\"line\">    if (count &lt; 0) throw new IllegalArgumentException(&quot;count &lt; 0&quot;);</div><div class=\"line\">    this.sync = new Sync(count);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>如果count小于当然就是报错，然后就创建了一个内部的Sync。</p>\n</blockquote>\n<p>调用await的时候，就是将当前线程进行阻塞：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void await() throws InterruptedException &#123;</div><div class=\"line\">    sync.acquireSharedInterruptibly(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>await方式直接调用的AQS的acquireSharedInterruptibly方法，AQS中acquireSharedInterruptibly调用了doAcquireSharedInterruptibly：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">private void doAcquireSharedInterruptibly(int arg)</div><div class=\"line\">        throws InterruptedException &#123;</div><div class=\"line\">    final Node node = addWaiter(Node.SHARED);</div><div class=\"line\">    boolean failed = true;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            final Node p = node.predecessor();</div><div class=\"line\">            if (p == head) &#123;</div><div class=\"line\">                int r = tryAcquireShared(arg);</div><div class=\"line\">                if (r &gt;= 0) &#123;</div><div class=\"line\">                    setHeadAndPropagate(node, r);</div><div class=\"line\">                    p.next = null; // help GC</div><div class=\"line\">                    failed = false;</div><div class=\"line\">                    return;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class=\"line\">                parkAndCheckInterrupt())</div><div class=\"line\">                throw new InterruptedException();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (failed)</div><div class=\"line\">            cancelAcquire(node);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>doAcquireSharedInterruptibly和其他同步阻塞方法一样，先将node包装为共享模式然后加入Waiter队列，如果node的前一个节点是头结点就尝试去获取资源，如果获取到将本节点设置为头结点然后唤醒剩余共享节点返回，否则就将此线程阻塞。</p>\n<p>如果我们等待其他线程每完成一个就会调用countDown方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void countDown() &#123;</div><div class=\"line\">    sync.releaseShared(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>releaseShared就相当于先执行了tryReleaseShared（先以CAS的方式将state-1），然后执行AQS的doReleaseShared方法。<br>doReleaseShared方法可以参考<img src=\"http://fk5431.com/20191118/javasource/util/3_AbstractQueuedSynchronizer/\" alt=\"aqs\">，就是对共享模式的node进行唤醒，如果state为0的时候，就会唤醒，此时此线程已等待其他线程执行完毕，就可以开始执行了。</p>\n"},{"title":"Semaphore阅读","date":"2019-12-03T08:59:00.000Z","comments":0,"keywords":["java","Semaphore","锁","同步"],"_content":"\n### Semaphore\n\nSemaphore是一个计数信号量，必须由获取它的线程释放。常用于限制可以访问某些资源的线程数量，利用Semaphore限流。\n\nSemaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取许可证的顺序，遵循FIFO;而非公平锁是抢占式的，有可能一个新的线程获取许可证的时候刚刚有释放的许可，但是还有正在等待许可的线程还在等待。\n\nSemaphore内部主要是通过Sync继承了AQS来实现信号量的功能，内部工作流程还是基于AQS。\n\n### 构造函数\n\n```\npublic Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n```\n\nSemaphore的构造函数有两个：\n- Semaphore(int permits) ：提供了一个许可数量的入参，默认给内部Sync的是非公平方式。\n- Semaphore(int permits, boolean fair) ：也需要提供提个许可数量的入参，fair来指定是公平模式还是非公平模式。\n\n### Sync\n\n```\nabstract static class Sync extends AbstractQueuedSynchronizer {\n    private static final long serialVersionUID = 1192457210091910933L;\n    //设置状态数\n    Sync(int permits) {\n        setState(permits);\n    }\n    //获取许可数\n    final int getPermits() {\n        return getState();\n    }\n    //非公平模式下的获取\n    final int nonfairTryAcquireShared(int acquires) {\n        for (;;) {\n            int available = getState();\n            int remaining = available - acquires;\n            if (remaining < 0 ||\n                compareAndSetState(available, remaining))//如果许可小于0 或者 设置成功\n                return remaining;\n        }\n    }\n    //共享模式下释放\n    protected final boolean tryReleaseShared(int releases) {\n        for (;;) {\n            int current = getState();\n            int next = current + releases;//可用的许可\n            if (next < current) // overflow\n                throw new Error(\"Maximum permit count exceeded\");\n            if (compareAndSetState(current, next))//设置成功返回true\n                return true;\n        }\n    }\n    //减少许可的数据\n    final void reducePermits(int reductions) {\n        for (;;) {\n            int current = getState();\n            int next = current - reductions;\n            if (next > current) // underflow  不能大于当前许可的数量\n                throw new Error(\"Permit count underflow\");\n            if (compareAndSetState(current, next))\n                return;\n        }\n    }\n    //获取返回所有可用的许可\n    final int drainPermits() {\n        for (;;) {\n            int current = getState();\n            if (current == 0 || compareAndSetState(current, 0))\n                return current;\n        }\n    }\n}\n```\n\nSync定义了非公平模式的获取 和 释放许可的方法，还定义了减少许可】获取所有许可的方法。内部NonfairSync和FairSync都继承于Sync。\n\n### NonfairSync和FairSync\n\n```\nstatic final class NonfairSync extends Sync {\n    private static final long serialVersionUID = -2694183684443567898L;\n\n    NonfairSync(int permits) {\n        super(permits);\n    }\n\n    protected int tryAcquireShared(int acquires) {\n        return nonfairTryAcquireShared(acquires);//直接调用Sync的nonfairTryAcquireShared\n    }\n}\n```\n\n> NonfairSync类继承了Sync类，表示采用非公平策略获取资源，其只有一个tryAcquireShared方法，重写了AQS的该方法，直接调用了父类的nonfairTryAcquireShared。　\n\n```\nstatic final class FairSync extends Sync {\n    private static final long serialVersionUID = 2014338818796000944L;\n\n    FairSync(int permits) {\n        super(permits);\n    }\n\n    protected int tryAcquireShared(int acquires) {\n        for (;;) {\n            if (hasQueuedPredecessors())//如果前面有其他节点在等待，返回-1\n                return -1;\n            int available = getState();\n            int remaining = available - acquires;//剩余的许可\n            if (remaining < 0 ||\n                compareAndSetState(available, remaining))//剩余的许可小于0或者比较设置成功\n                return remaining;\n        }\n    }\n}\n```\n\n> FairSync类继承了Sync类，表示采用公平策略获取资源，使用公平策略来获取资源，会判断同步队列中是否存在其他的等待节点。\n\n### Semaphore的核心方法\n\n#### acquire\n\n此方法从信号量获取一个（多个）许可，在提供一个许可前一直将线程阻塞，或者线程被中断。\n\n```\npublic void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n```\n\n该方法调用了AQS的acquireSharedInterruptibly，这个方法会先去执行tryAcquireShared去获取资源，如果返回的小于0，就是执行AQS的doAcquireSharedInterruptibly，直接加入阻塞队列，如果前面没有节点（pre是head），会尝试去获取，否则就进入阻塞。\n\n#### release\n\nrelease方法释放指定数量的许可。\n\n```\npublic void release() {\n    sync.releaseShared(1);\n}\n```\n\nrelease方法也是直接调用了AQS的releaseShared，在释放许可成功后，会唤醒其他节点。\n\n\n","source":"_posts/javasource/util/9_Semaphore.md","raw":"---\ntitle: Semaphore阅读 \ndate: 2019-12-03 16:59\ncomments: false\ntags: \n- java\n- Semaphore\n- 锁\n- 同步\ncategories: \n- java\nkeywords: \n- java\n- Semaphore\n- 锁\n- 同步\n---\n\n### Semaphore\n\nSemaphore是一个计数信号量，必须由获取它的线程释放。常用于限制可以访问某些资源的线程数量，利用Semaphore限流。\n\nSemaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取许可证的顺序，遵循FIFO;而非公平锁是抢占式的，有可能一个新的线程获取许可证的时候刚刚有释放的许可，但是还有正在等待许可的线程还在等待。\n\nSemaphore内部主要是通过Sync继承了AQS来实现信号量的功能，内部工作流程还是基于AQS。\n\n### 构造函数\n\n```\npublic Semaphore(int permits) {\n    sync = new NonfairSync(permits);\n}\n\npublic Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n```\n\nSemaphore的构造函数有两个：\n- Semaphore(int permits) ：提供了一个许可数量的入参，默认给内部Sync的是非公平方式。\n- Semaphore(int permits, boolean fair) ：也需要提供提个许可数量的入参，fair来指定是公平模式还是非公平模式。\n\n### Sync\n\n```\nabstract static class Sync extends AbstractQueuedSynchronizer {\n    private static final long serialVersionUID = 1192457210091910933L;\n    //设置状态数\n    Sync(int permits) {\n        setState(permits);\n    }\n    //获取许可数\n    final int getPermits() {\n        return getState();\n    }\n    //非公平模式下的获取\n    final int nonfairTryAcquireShared(int acquires) {\n        for (;;) {\n            int available = getState();\n            int remaining = available - acquires;\n            if (remaining < 0 ||\n                compareAndSetState(available, remaining))//如果许可小于0 或者 设置成功\n                return remaining;\n        }\n    }\n    //共享模式下释放\n    protected final boolean tryReleaseShared(int releases) {\n        for (;;) {\n            int current = getState();\n            int next = current + releases;//可用的许可\n            if (next < current) // overflow\n                throw new Error(\"Maximum permit count exceeded\");\n            if (compareAndSetState(current, next))//设置成功返回true\n                return true;\n        }\n    }\n    //减少许可的数据\n    final void reducePermits(int reductions) {\n        for (;;) {\n            int current = getState();\n            int next = current - reductions;\n            if (next > current) // underflow  不能大于当前许可的数量\n                throw new Error(\"Permit count underflow\");\n            if (compareAndSetState(current, next))\n                return;\n        }\n    }\n    //获取返回所有可用的许可\n    final int drainPermits() {\n        for (;;) {\n            int current = getState();\n            if (current == 0 || compareAndSetState(current, 0))\n                return current;\n        }\n    }\n}\n```\n\nSync定义了非公平模式的获取 和 释放许可的方法，还定义了减少许可】获取所有许可的方法。内部NonfairSync和FairSync都继承于Sync。\n\n### NonfairSync和FairSync\n\n```\nstatic final class NonfairSync extends Sync {\n    private static final long serialVersionUID = -2694183684443567898L;\n\n    NonfairSync(int permits) {\n        super(permits);\n    }\n\n    protected int tryAcquireShared(int acquires) {\n        return nonfairTryAcquireShared(acquires);//直接调用Sync的nonfairTryAcquireShared\n    }\n}\n```\n\n> NonfairSync类继承了Sync类，表示采用非公平策略获取资源，其只有一个tryAcquireShared方法，重写了AQS的该方法，直接调用了父类的nonfairTryAcquireShared。　\n\n```\nstatic final class FairSync extends Sync {\n    private static final long serialVersionUID = 2014338818796000944L;\n\n    FairSync(int permits) {\n        super(permits);\n    }\n\n    protected int tryAcquireShared(int acquires) {\n        for (;;) {\n            if (hasQueuedPredecessors())//如果前面有其他节点在等待，返回-1\n                return -1;\n            int available = getState();\n            int remaining = available - acquires;//剩余的许可\n            if (remaining < 0 ||\n                compareAndSetState(available, remaining))//剩余的许可小于0或者比较设置成功\n                return remaining;\n        }\n    }\n}\n```\n\n> FairSync类继承了Sync类，表示采用公平策略获取资源，使用公平策略来获取资源，会判断同步队列中是否存在其他的等待节点。\n\n### Semaphore的核心方法\n\n#### acquire\n\n此方法从信号量获取一个（多个）许可，在提供一个许可前一直将线程阻塞，或者线程被中断。\n\n```\npublic void acquire() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n```\n\n该方法调用了AQS的acquireSharedInterruptibly，这个方法会先去执行tryAcquireShared去获取资源，如果返回的小于0，就是执行AQS的doAcquireSharedInterruptibly，直接加入阻塞队列，如果前面没有节点（pre是head），会尝试去获取，否则就进入阻塞。\n\n#### release\n\nrelease方法释放指定数量的许可。\n\n```\npublic void release() {\n    sync.releaseShared(1);\n}\n```\n\nrelease方法也是直接调用了AQS的releaseShared，在释放许可成功后，会唤醒其他节点。\n\n\n","slug":"javasource/util/9_Semaphore","published":1,"updated":"2020-01-02T05:49:23.771Z","layout":"post","photos":[],"link":"","_id":"ck6lvszv00089n0ztj6jhik7y","content":"<h3 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h3><p>Semaphore是一个计数信号量，必须由获取它的线程释放。常用于限制可以访问某些资源的线程数量，利用Semaphore限流。</p>\n<p>Semaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取许可证的顺序，遵循FIFO;而非公平锁是抢占式的，有可能一个新的线程获取许可证的时候刚刚有释放的许可，但是还有正在等待许可的线程还在等待。</p>\n<p>Semaphore内部主要是通过Sync继承了AQS来实现信号量的功能，内部工作流程还是基于AQS。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Semaphore(int permits) &#123;</div><div class=\"line\">    sync = new NonfairSync(permits);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public Semaphore(int permits, boolean fair) &#123;</div><div class=\"line\">    sync = fair ? new FairSync(permits) : new NonfairSync(permits);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Semaphore的构造函数有两个：</p>\n<ul>\n<li>Semaphore(int permits) ：提供了一个许可数量的入参，默认给内部Sync的是非公平方式。</li>\n<li>Semaphore(int permits, boolean fair) ：也需要提供提个许可数量的入参，fair来指定是公平模式还是非公平模式。</li>\n</ul>\n<h3 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">abstract static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">    private static final long serialVersionUID = 1192457210091910933L;</div><div class=\"line\">    //设置状态数</div><div class=\"line\">    Sync(int permits) &#123;</div><div class=\"line\">        setState(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\">    //获取许可数</div><div class=\"line\">    final int getPermits() &#123;</div><div class=\"line\">        return getState();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //非公平模式下的获取</div><div class=\"line\">    final int nonfairTryAcquireShared(int acquires) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int available = getState();</div><div class=\"line\">            int remaining = available - acquires;</div><div class=\"line\">            if (remaining &lt; 0 ||</div><div class=\"line\">                compareAndSetState(available, remaining))//如果许可小于0 或者 设置成功</div><div class=\"line\">                return remaining;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //共享模式下释放</div><div class=\"line\">    protected final boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int current = getState();</div><div class=\"line\">            int next = current + releases;//可用的许可</div><div class=\"line\">            if (next &lt; current) // overflow</div><div class=\"line\">                throw new Error(&quot;Maximum permit count exceeded&quot;);</div><div class=\"line\">            if (compareAndSetState(current, next))//设置成功返回true</div><div class=\"line\">                return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //减少许可的数据</div><div class=\"line\">    final void reducePermits(int reductions) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int current = getState();</div><div class=\"line\">            int next = current - reductions;</div><div class=\"line\">            if (next &gt; current) // underflow  不能大于当前许可的数量</div><div class=\"line\">                throw new Error(&quot;Permit count underflow&quot;);</div><div class=\"line\">            if (compareAndSetState(current, next))</div><div class=\"line\">                return;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //获取返回所有可用的许可</div><div class=\"line\">    final int drainPermits() &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int current = getState();</div><div class=\"line\">            if (current == 0 || compareAndSetState(current, 0))</div><div class=\"line\">                return current;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sync定义了非公平模式的获取 和 释放许可的方法，还定义了减少许可】获取所有许可的方法。内部NonfairSync和FairSync都继承于Sync。</p>\n<h3 id=\"NonfairSync和FairSync\"><a href=\"#NonfairSync和FairSync\" class=\"headerlink\" title=\"NonfairSync和FairSync\"></a>NonfairSync和FairSync</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class NonfairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -2694183684443567898L;</div><div class=\"line\"></div><div class=\"line\">    NonfairSync(int permits) &#123;</div><div class=\"line\">        super(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">        return nonfairTryAcquireShared(acquires);//直接调用Sync的nonfairTryAcquireShared</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>NonfairSync类继承了Sync类，表示采用非公平策略获取资源，其只有一个tryAcquireShared方法，重写了AQS的该方法，直接调用了父类的nonfairTryAcquireShared。　</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class FairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = 2014338818796000944L;</div><div class=\"line\"></div><div class=\"line\">    FairSync(int permits) &#123;</div><div class=\"line\">        super(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            if (hasQueuedPredecessors())//如果前面有其他节点在等待，返回-1</div><div class=\"line\">                return -1;</div><div class=\"line\">            int available = getState();</div><div class=\"line\">            int remaining = available - acquires;//剩余的许可</div><div class=\"line\">            if (remaining &lt; 0 ||</div><div class=\"line\">                compareAndSetState(available, remaining))//剩余的许可小于0或者比较设置成功</div><div class=\"line\">                return remaining;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>FairSync类继承了Sync类，表示采用公平策略获取资源，使用公平策略来获取资源，会判断同步队列中是否存在其他的等待节点。</p>\n</blockquote>\n<h3 id=\"Semaphore的核心方法\"><a href=\"#Semaphore的核心方法\" class=\"headerlink\" title=\"Semaphore的核心方法\"></a>Semaphore的核心方法</h3><h4 id=\"acquire\"><a href=\"#acquire\" class=\"headerlink\" title=\"acquire\"></a>acquire</h4><p>此方法从信号量获取一个（多个）许可，在提供一个许可前一直将线程阻塞，或者线程被中断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void acquire() throws InterruptedException &#123;</div><div class=\"line\">    sync.acquireSharedInterruptibly(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该方法调用了AQS的acquireSharedInterruptibly，这个方法会先去执行tryAcquireShared去获取资源，如果返回的小于0，就是执行AQS的doAcquireSharedInterruptibly，直接加入阻塞队列，如果前面没有节点（pre是head），会尝试去获取，否则就进入阻塞。</p>\n<h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><p>release方法释放指定数量的许可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void release() &#123;</div><div class=\"line\">    sync.releaseShared(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>release方法也是直接调用了AQS的releaseShared，在释放许可成功后，会唤醒其他节点。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h3><p>Semaphore是一个计数信号量，必须由获取它的线程释放。常用于限制可以访问某些资源的线程数量，利用Semaphore限流。</p>\n<p>Semaphore有两种模式，公平模式和非公平模式。公平模式就是调用acquire的顺序就是获取许可证的顺序，遵循FIFO;而非公平锁是抢占式的，有可能一个新的线程获取许可证的时候刚刚有释放的许可，但是还有正在等待许可的线程还在等待。</p>\n<p>Semaphore内部主要是通过Sync继承了AQS来实现信号量的功能，内部工作流程还是基于AQS。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public Semaphore(int permits) &#123;</div><div class=\"line\">    sync = new NonfairSync(permits);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public Semaphore(int permits, boolean fair) &#123;</div><div class=\"line\">    sync = fair ? new FairSync(permits) : new NonfairSync(permits);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Semaphore的构造函数有两个：</p>\n<ul>\n<li>Semaphore(int permits) ：提供了一个许可数量的入参，默认给内部Sync的是非公平方式。</li>\n<li>Semaphore(int permits, boolean fair) ：也需要提供提个许可数量的入参，fair来指定是公平模式还是非公平模式。</li>\n</ul>\n<h3 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">abstract static class Sync extends AbstractQueuedSynchronizer &#123;</div><div class=\"line\">    private static final long serialVersionUID = 1192457210091910933L;</div><div class=\"line\">    //设置状态数</div><div class=\"line\">    Sync(int permits) &#123;</div><div class=\"line\">        setState(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\">    //获取许可数</div><div class=\"line\">    final int getPermits() &#123;</div><div class=\"line\">        return getState();</div><div class=\"line\">    &#125;</div><div class=\"line\">    //非公平模式下的获取</div><div class=\"line\">    final int nonfairTryAcquireShared(int acquires) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int available = getState();</div><div class=\"line\">            int remaining = available - acquires;</div><div class=\"line\">            if (remaining &lt; 0 ||</div><div class=\"line\">                compareAndSetState(available, remaining))//如果许可小于0 或者 设置成功</div><div class=\"line\">                return remaining;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //共享模式下释放</div><div class=\"line\">    protected final boolean tryReleaseShared(int releases) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int current = getState();</div><div class=\"line\">            int next = current + releases;//可用的许可</div><div class=\"line\">            if (next &lt; current) // overflow</div><div class=\"line\">                throw new Error(&quot;Maximum permit count exceeded&quot;);</div><div class=\"line\">            if (compareAndSetState(current, next))//设置成功返回true</div><div class=\"line\">                return true;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //减少许可的数据</div><div class=\"line\">    final void reducePermits(int reductions) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int current = getState();</div><div class=\"line\">            int next = current - reductions;</div><div class=\"line\">            if (next &gt; current) // underflow  不能大于当前许可的数量</div><div class=\"line\">                throw new Error(&quot;Permit count underflow&quot;);</div><div class=\"line\">            if (compareAndSetState(current, next))</div><div class=\"line\">                return;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //获取返回所有可用的许可</div><div class=\"line\">    final int drainPermits() &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            int current = getState();</div><div class=\"line\">            if (current == 0 || compareAndSetState(current, 0))</div><div class=\"line\">                return current;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Sync定义了非公平模式的获取 和 释放许可的方法，还定义了减少许可】获取所有许可的方法。内部NonfairSync和FairSync都继承于Sync。</p>\n<h3 id=\"NonfairSync和FairSync\"><a href=\"#NonfairSync和FairSync\" class=\"headerlink\" title=\"NonfairSync和FairSync\"></a>NonfairSync和FairSync</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class NonfairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -2694183684443567898L;</div><div class=\"line\"></div><div class=\"line\">    NonfairSync(int permits) &#123;</div><div class=\"line\">        super(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">        return nonfairTryAcquireShared(acquires);//直接调用Sync的nonfairTryAcquireShared</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>NonfairSync类继承了Sync类，表示采用非公平策略获取资源，其只有一个tryAcquireShared方法，重写了AQS的该方法，直接调用了父类的nonfairTryAcquireShared。　</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class FairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = 2014338818796000944L;</div><div class=\"line\"></div><div class=\"line\">    FairSync(int permits) &#123;</div><div class=\"line\">        super(permits);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    protected int tryAcquireShared(int acquires) &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            if (hasQueuedPredecessors())//如果前面有其他节点在等待，返回-1</div><div class=\"line\">                return -1;</div><div class=\"line\">            int available = getState();</div><div class=\"line\">            int remaining = available - acquires;//剩余的许可</div><div class=\"line\">            if (remaining &lt; 0 ||</div><div class=\"line\">                compareAndSetState(available, remaining))//剩余的许可小于0或者比较设置成功</div><div class=\"line\">                return remaining;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>FairSync类继承了Sync类，表示采用公平策略获取资源，使用公平策略来获取资源，会判断同步队列中是否存在其他的等待节点。</p>\n</blockquote>\n<h3 id=\"Semaphore的核心方法\"><a href=\"#Semaphore的核心方法\" class=\"headerlink\" title=\"Semaphore的核心方法\"></a>Semaphore的核心方法</h3><h4 id=\"acquire\"><a href=\"#acquire\" class=\"headerlink\" title=\"acquire\"></a>acquire</h4><p>此方法从信号量获取一个（多个）许可，在提供一个许可前一直将线程阻塞，或者线程被中断。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void acquire() throws InterruptedException &#123;</div><div class=\"line\">    sync.acquireSharedInterruptibly(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该方法调用了AQS的acquireSharedInterruptibly，这个方法会先去执行tryAcquireShared去获取资源，如果返回的小于0，就是执行AQS的doAcquireSharedInterruptibly，直接加入阻塞队列，如果前面没有节点（pre是head），会尝试去获取，否则就进入阻塞。</p>\n<h4 id=\"release\"><a href=\"#release\" class=\"headerlink\" title=\"release\"></a>release</h4><p>release方法释放指定数量的许可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void release() &#123;</div><div class=\"line\">    sync.releaseShared(1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>release方法也是直接调用了AQS的releaseShared，在释放许可成功后，会唤醒其他节点。</p>\n"},{"title":"ReentrantReadWriteLock阅读","date":"2019-12-03T13:32:17.000Z","comments":0,"keywords":["java","ReentrantReadWriteLock","锁","同步"],"_content":"\n### ReentrantReadWriteLock\n\nReentrantReadWriteLock实现的是ReadWriteLock接口，ReadWriteLock接口中只定义了 readLock 和 writeLock 方法。\n\nreadLock 和 writeLock方法分别返回了内部的读锁和写锁。\n```\npublic ReentrantReadWriteLock.WriteLock writeLock() { return writerLock; }\npublic ReentrantReadWriteLock.ReadLock  readLock()  { return readerLock; }\n```\nReadLock和WriteLock方法都是通过Sync的方法实现的，所以Sync是读写锁的核心：\n\n> 对同一线程，读，写读，写写是共享的，读写是互斥的；对于不同线程而言，读是共享的，读写、写写、写读都是互斥的。\n\n#### Sync\n\n##### Sync中的常量和结构\n\n```\n//低16位为写锁状态，高16位为读锁状态\nstatic final int SHARED_SHIFT   = 16;\n//读锁每次增加的单位\nstatic final int SHARED_UNIT    = (1 << SHARED_SHIFT);\n//读锁的最大数\nstatic final int MAX_COUNT      = (1 << SHARED_SHIFT) - 1;\n//写锁的掩码\nstatic final int EXCLUSIVE_MASK = (1 << SHARED_SHIFT) - 1;\n//返回读锁的数量\nstatic int sharedCount(int c)    { return c >>> SHARED_SHIFT; }\n//返回写锁的数量 EXCLUSIVE_MASK 高位都是0\nstatic int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }\n//当前读线程的计数器\nstatic final class HoldCounter {\n    int count = 0;//当前读线程的重入数\n    final long tid = getThreadId(Thread.currentThread());\n}\nstatic final class ThreadLocalHoldCounter extends ThreadLocal<HoldCounter> {//本地程序计数器\n    public HoldCounter initialValue() {\n        return new HoldCounter();\n    }\n}\nprivate transient ThreadLocalHoldCounter readHolds;\nprivate transient HoldCounter cachedHoldCounter;//当前线程缓存的HoldCounter\nprivate transient Thread firstReader = null;//第一个读线程\nprivate transient int firstReaderHoldCount;\n```\n\n##### 构造方法\n\nSync的构造方法设置了本地线程计数器和AQS的状态\n\n```\nSync() {\nreadHolds = new ThreadLocalHoldCounter();\nsetState(getState()); // ensures visibility of readHolds\n}\n```\n\n##### tryAcquire 写锁的获取\n\n```\nprotected final boolean tryAcquire(int acquires) {\n    Thread current = Thread.currentThread();\n    int c = getState();\n    int w = exclusiveCount(c);//写锁的重入数\n    if (c != 0) {//已经有其他线程获取了读锁或者写锁\n        //1.写锁状态为0，说明读锁已被获取 2.写锁不为0，而且获取写锁的不是当前线程\n        if (w == 0 || current != getExclusiveOwnerThread())\n            return false;\n        //判断统一线程获取写锁是否超过最大数\n        if (w + exclusiveCount(acquires) > MAX_COUNT)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(c + acquires);//当前线程已有写锁，设置写锁的数量（重入）\n        return true;\n    }\n    if (writerShouldBlock() || //是否被阻塞\n        !compareAndSetState(c, c + acquires))//获取锁\n        return false;\n    setExclusiveOwnerThread(current);\n    return true;\n}\n```\n写锁的获取：\n1. 获取state的状态，如果不为0说明已经被获取过锁了；\n    - 如果读锁被获取（写锁为0）或者 写锁被获取 但不是当前线程，返回false。\n    - 如果写锁是当前线程获取的，判断是不是超过写锁的最大数，没有就设置现在写锁的个数，返回true。\n2. 如果state为0，就代表还没有线程获取到读锁和写锁，此时判断writerShouldBlock是否该被阻塞，如果不被阻塞，设置state也成功，就把当前线程设置为owner。\n\n##### tryRelease 写锁的释放\n```\nprotected final boolean tryRelease(int releases) {\n    if (!isHeldExclusively())//检查是不是当前线程\n        throw new IllegalMonitorStateException();\n    int nextc = getState() - releases;//新占用数\n    boolean free = exclusiveCount(nextc) == 0;//独占模式重入数为0，代表独占模式释放了\n    if (free)\n        setExclusiveOwnerThread(null);//把owner设置为空\n    setState(nextc);\n    return free;\n}\n```\n- 先检查此线程是不是持有读锁的线程，不是就抛异常。\n- 然后检查释放后写锁的占用数是不是0，如果为0则表示写锁释放，释放锁资源将锁的持有线程设置为null，否则仅仅修改state。\n\n##### tryAcquireShared 读锁的获取\n\n```\nprotected final int tryAcquireShared(int unused) {\n    Thread current = Thread.currentThread();\n    int c = getState();\n    //有写锁占用，并且不是当前线程\n    if (exclusiveCount(c) != 0 &&\n        getExclusiveOwnerThread() != current)\n        return -1;\n    int r = sharedCount(c);//读锁数量\n    if (!readerShouldBlock() &&//读锁是否需要阻塞\n        r < MAX_COUNT &&//小于最大数\n        compareAndSetState(c, c + SHARED_UNIT)) {//设置读锁成功\n        if (r == 0) {//没有读锁，初始化\n            firstReader = current;\n            firstReaderHoldCount = 1;\n        } else if (firstReader == current) {\n            firstReaderHoldCount++;//第一个读锁线程重入\n        } else {//不是第一个读锁的线程\n            HoldCounter rh = cachedHoldCounter;\n            // 计数器为空或者计数器的tid不为当前正在运行的线程的tid\n            if (rh == null || rh.tid != getThreadId(current))\n                // 获取当前线程对应的计数器\n                cachedHoldCounter = rh = readHolds.get();\n            else if (rh.count == 0) // 计数为0\n                readHolds.set(rh);//加入到readHolds中\n            rh.count++;\n        }\n        return 1;\n    }\n    return fullTryAcquireShared(current);\n}\n```\n1. 先判断写锁不为0，并且不是当前线程，直接返回-1；\n2. 然后判断如果读锁不需要阻塞，小于最大读锁的数，并且比较设置state成功：\n    - 如果没有读锁，则初始化第一个读锁\n    - 如果第一个读锁线程已持有读锁，进行重入\n    - 如果不是第一个读锁的线程：计数器为空或者tid不是当前线程，获取当前线程的计数器；获取计数器为0，加入到readHolds中。最后计数+1\n\n读锁不需要阻塞、小于最大读锁的数、比较设置state成功这三个条件有一个为false会执行 fullTryAcquireShared 方法\n\n```\nfinal int fullTryAcquireShared(Thread current) {\n    HoldCounter rh = null;\n    for (;;) {\n        int c = getState();\n        if (exclusiveCount(c) != 0) {//有写锁\n            if (getExclusiveOwnerThread() != current)//不是当前线程\n                return -1;\n        } else if (readerShouldBlock()) {//读锁要被阻塞（公平）\n            if (firstReader == current) {//当前线程是第一个读线程\n            } else {\n                if (rh == null) {\n                    rh = cachedHoldCounter;\n                    if (rh == null || rh.tid != getThreadId(current)) {\n                        rh = readHolds.get();//获取到当前线程的计数器\n                        if (rh.count == 0)\n                            readHolds.remove();\n                    }\n                }\n                if (rh.count == 0)\n                    return -1;\n            }\n        }\n        if (sharedCount(c) == MAX_COUNT)//读锁是最大值了\n            throw new Error(\"Maximum lock count exceeded\");\n        if (compareAndSetState(c, c + SHARED_UNIT)) {//设置读锁成功\n            if (sharedCount(c) == 0) {//没有读锁初始化\n                firstReader = current;\n                firstReaderHoldCount = 1;\n            } else if (firstReader == current) {//重入\n                firstReaderHoldCount++;\n            } else {\n                if (rh == null)\n                    rh = cachedHoldCounter;\n                if (rh == null || rh.tid != getThreadId(current))\n                    rh = readHolds.get();\n                else if (rh.count == 0)\n                    readHolds.set(rh);\n                rh.count++;\n                cachedHoldCounter = rh; // cache for release\n            }\n            return 1;\n        }\n    }\n}\n```\n此方法与tryAcquireShared方法类似，保证了相关操作可以执行\n\n##### tryReleaseShared 读锁的释放\n\n```\nprotected final boolean tryReleaseShared(int unused) {\n    Thread current = Thread.currentThread();\n    if (firstReader == current) {//第一个读线程\n        if (firstReaderHoldCount == 1)//第一个读线程重入数为1\n            firstReader = null;//\n        else\n            firstReaderHoldCount--;//第一个读线程重入数-1\n    } else {\n        HoldCounter rh = cachedHoldCounter;\n        if (rh == null || rh.tid != getThreadId(current))\n            rh = readHolds.get();//获取到当前线程的计数器\n        int count = rh.count;\n        if (count <= 1) {\n            readHolds.remove();\n            if (count <= 0)\n                throw unmatchedUnlockException();\n        }\n        //减少计数\n        --rh.count;\n    }\n    for (;;) {//CAS设置state\n        int c = getState();\n        int nextc = c - SHARED_UNIT;\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n```\n\n1. 首先判断当前线程是否是第一个读线程，是的话，而且计数器为1，将firstReader设置为null，否则将firstReaderHoldCount-1；\n2. 如不是第一个读线程，先获取当前线程的计数器，若计数器的count小于等于1，则移除当前线程的计数器，如果计数器的计数count小于等于0，则抛出异常，之后再减少计数即可。\n3. CAS设置state\n\n#### NonfairSync（非公平模式）\n```\nstatic final class NonfairSync extends Sync {\n    private static final long serialVersionUID = -8159625535654395037L;\n    final boolean writerShouldBlock() {\n        return false; // writers can always barge\n    }\n    final boolean readerShouldBlock() {\n        return apparentlyFirstQueuedIsExclusive();\n    }\n}\n```\n\n非公平模式的NonfairSync也是继承了Sync，实现了Sync的writerShouldBlock 和 readerShouldBlock 方法：\n\n- writerShouldBlock：非公平模式下，写锁不需要被阻塞。\n- readerShouldBlock：调用apparentlyFirstQueuedIsExclusive，如果队列中第一个节点是独占式，则返回true，堵塞读锁。\n\n> 如果同步队列中的第一个线程是以独占模式获取锁（写锁），那么当前获取读锁的线程需要阻塞，让队列中的第一个线程先执行。\n\n#### FairSync（公平模式）\n\n```\nstatic final class FairSync extends Sync {\n    private static final long serialVersionUID = -2274990926593161451L;\n    final boolean writerShouldBlock() {\n        return hasQueuedPredecessors();\n    }\n    final boolean readerShouldBlock() {\n        return hasQueuedPredecessors();\n    }\n}\n```\n公平模式下的实现了Sync的writerShouldBlock 和 readerShouldBlock 方法实现都一样：判断是否是等待队列中是否有前置节点，有则返回true。\n\n#### ReadLock 和 WriteLock\n\nReentrantReadWriteLock中的ReadLock和WriteLock内部的Sync都是使用的ReentrantReadWriteLock的Sync，读锁和写锁的实现也都是通过调用Sync的方法来实现的，具体不就看了。\n\n","source":"_posts/javasource/util/6_ReentrantReadWriteLock.md","raw":"---\ntitle: ReentrantReadWriteLock阅读 \ndate: 2019-12-03 21:32:17\ncomments: false\ntags: \n- java\n- ReentrantReadWriteLock\n- 锁\n- 同步\ncategories: \n- java\nkeywords: \n- java\n- ReentrantReadWriteLock\n- 锁\n- 同步\n---\n\n### ReentrantReadWriteLock\n\nReentrantReadWriteLock实现的是ReadWriteLock接口，ReadWriteLock接口中只定义了 readLock 和 writeLock 方法。\n\nreadLock 和 writeLock方法分别返回了内部的读锁和写锁。\n```\npublic ReentrantReadWriteLock.WriteLock writeLock() { return writerLock; }\npublic ReentrantReadWriteLock.ReadLock  readLock()  { return readerLock; }\n```\nReadLock和WriteLock方法都是通过Sync的方法实现的，所以Sync是读写锁的核心：\n\n> 对同一线程，读，写读，写写是共享的，读写是互斥的；对于不同线程而言，读是共享的，读写、写写、写读都是互斥的。\n\n#### Sync\n\n##### Sync中的常量和结构\n\n```\n//低16位为写锁状态，高16位为读锁状态\nstatic final int SHARED_SHIFT   = 16;\n//读锁每次增加的单位\nstatic final int SHARED_UNIT    = (1 << SHARED_SHIFT);\n//读锁的最大数\nstatic final int MAX_COUNT      = (1 << SHARED_SHIFT) - 1;\n//写锁的掩码\nstatic final int EXCLUSIVE_MASK = (1 << SHARED_SHIFT) - 1;\n//返回读锁的数量\nstatic int sharedCount(int c)    { return c >>> SHARED_SHIFT; }\n//返回写锁的数量 EXCLUSIVE_MASK 高位都是0\nstatic int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }\n//当前读线程的计数器\nstatic final class HoldCounter {\n    int count = 0;//当前读线程的重入数\n    final long tid = getThreadId(Thread.currentThread());\n}\nstatic final class ThreadLocalHoldCounter extends ThreadLocal<HoldCounter> {//本地程序计数器\n    public HoldCounter initialValue() {\n        return new HoldCounter();\n    }\n}\nprivate transient ThreadLocalHoldCounter readHolds;\nprivate transient HoldCounter cachedHoldCounter;//当前线程缓存的HoldCounter\nprivate transient Thread firstReader = null;//第一个读线程\nprivate transient int firstReaderHoldCount;\n```\n\n##### 构造方法\n\nSync的构造方法设置了本地线程计数器和AQS的状态\n\n```\nSync() {\nreadHolds = new ThreadLocalHoldCounter();\nsetState(getState()); // ensures visibility of readHolds\n}\n```\n\n##### tryAcquire 写锁的获取\n\n```\nprotected final boolean tryAcquire(int acquires) {\n    Thread current = Thread.currentThread();\n    int c = getState();\n    int w = exclusiveCount(c);//写锁的重入数\n    if (c != 0) {//已经有其他线程获取了读锁或者写锁\n        //1.写锁状态为0，说明读锁已被获取 2.写锁不为0，而且获取写锁的不是当前线程\n        if (w == 0 || current != getExclusiveOwnerThread())\n            return false;\n        //判断统一线程获取写锁是否超过最大数\n        if (w + exclusiveCount(acquires) > MAX_COUNT)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(c + acquires);//当前线程已有写锁，设置写锁的数量（重入）\n        return true;\n    }\n    if (writerShouldBlock() || //是否被阻塞\n        !compareAndSetState(c, c + acquires))//获取锁\n        return false;\n    setExclusiveOwnerThread(current);\n    return true;\n}\n```\n写锁的获取：\n1. 获取state的状态，如果不为0说明已经被获取过锁了；\n    - 如果读锁被获取（写锁为0）或者 写锁被获取 但不是当前线程，返回false。\n    - 如果写锁是当前线程获取的，判断是不是超过写锁的最大数，没有就设置现在写锁的个数，返回true。\n2. 如果state为0，就代表还没有线程获取到读锁和写锁，此时判断writerShouldBlock是否该被阻塞，如果不被阻塞，设置state也成功，就把当前线程设置为owner。\n\n##### tryRelease 写锁的释放\n```\nprotected final boolean tryRelease(int releases) {\n    if (!isHeldExclusively())//检查是不是当前线程\n        throw new IllegalMonitorStateException();\n    int nextc = getState() - releases;//新占用数\n    boolean free = exclusiveCount(nextc) == 0;//独占模式重入数为0，代表独占模式释放了\n    if (free)\n        setExclusiveOwnerThread(null);//把owner设置为空\n    setState(nextc);\n    return free;\n}\n```\n- 先检查此线程是不是持有读锁的线程，不是就抛异常。\n- 然后检查释放后写锁的占用数是不是0，如果为0则表示写锁释放，释放锁资源将锁的持有线程设置为null，否则仅仅修改state。\n\n##### tryAcquireShared 读锁的获取\n\n```\nprotected final int tryAcquireShared(int unused) {\n    Thread current = Thread.currentThread();\n    int c = getState();\n    //有写锁占用，并且不是当前线程\n    if (exclusiveCount(c) != 0 &&\n        getExclusiveOwnerThread() != current)\n        return -1;\n    int r = sharedCount(c);//读锁数量\n    if (!readerShouldBlock() &&//读锁是否需要阻塞\n        r < MAX_COUNT &&//小于最大数\n        compareAndSetState(c, c + SHARED_UNIT)) {//设置读锁成功\n        if (r == 0) {//没有读锁，初始化\n            firstReader = current;\n            firstReaderHoldCount = 1;\n        } else if (firstReader == current) {\n            firstReaderHoldCount++;//第一个读锁线程重入\n        } else {//不是第一个读锁的线程\n            HoldCounter rh = cachedHoldCounter;\n            // 计数器为空或者计数器的tid不为当前正在运行的线程的tid\n            if (rh == null || rh.tid != getThreadId(current))\n                // 获取当前线程对应的计数器\n                cachedHoldCounter = rh = readHolds.get();\n            else if (rh.count == 0) // 计数为0\n                readHolds.set(rh);//加入到readHolds中\n            rh.count++;\n        }\n        return 1;\n    }\n    return fullTryAcquireShared(current);\n}\n```\n1. 先判断写锁不为0，并且不是当前线程，直接返回-1；\n2. 然后判断如果读锁不需要阻塞，小于最大读锁的数，并且比较设置state成功：\n    - 如果没有读锁，则初始化第一个读锁\n    - 如果第一个读锁线程已持有读锁，进行重入\n    - 如果不是第一个读锁的线程：计数器为空或者tid不是当前线程，获取当前线程的计数器；获取计数器为0，加入到readHolds中。最后计数+1\n\n读锁不需要阻塞、小于最大读锁的数、比较设置state成功这三个条件有一个为false会执行 fullTryAcquireShared 方法\n\n```\nfinal int fullTryAcquireShared(Thread current) {\n    HoldCounter rh = null;\n    for (;;) {\n        int c = getState();\n        if (exclusiveCount(c) != 0) {//有写锁\n            if (getExclusiveOwnerThread() != current)//不是当前线程\n                return -1;\n        } else if (readerShouldBlock()) {//读锁要被阻塞（公平）\n            if (firstReader == current) {//当前线程是第一个读线程\n            } else {\n                if (rh == null) {\n                    rh = cachedHoldCounter;\n                    if (rh == null || rh.tid != getThreadId(current)) {\n                        rh = readHolds.get();//获取到当前线程的计数器\n                        if (rh.count == 0)\n                            readHolds.remove();\n                    }\n                }\n                if (rh.count == 0)\n                    return -1;\n            }\n        }\n        if (sharedCount(c) == MAX_COUNT)//读锁是最大值了\n            throw new Error(\"Maximum lock count exceeded\");\n        if (compareAndSetState(c, c + SHARED_UNIT)) {//设置读锁成功\n            if (sharedCount(c) == 0) {//没有读锁初始化\n                firstReader = current;\n                firstReaderHoldCount = 1;\n            } else if (firstReader == current) {//重入\n                firstReaderHoldCount++;\n            } else {\n                if (rh == null)\n                    rh = cachedHoldCounter;\n                if (rh == null || rh.tid != getThreadId(current))\n                    rh = readHolds.get();\n                else if (rh.count == 0)\n                    readHolds.set(rh);\n                rh.count++;\n                cachedHoldCounter = rh; // cache for release\n            }\n            return 1;\n        }\n    }\n}\n```\n此方法与tryAcquireShared方法类似，保证了相关操作可以执行\n\n##### tryReleaseShared 读锁的释放\n\n```\nprotected final boolean tryReleaseShared(int unused) {\n    Thread current = Thread.currentThread();\n    if (firstReader == current) {//第一个读线程\n        if (firstReaderHoldCount == 1)//第一个读线程重入数为1\n            firstReader = null;//\n        else\n            firstReaderHoldCount--;//第一个读线程重入数-1\n    } else {\n        HoldCounter rh = cachedHoldCounter;\n        if (rh == null || rh.tid != getThreadId(current))\n            rh = readHolds.get();//获取到当前线程的计数器\n        int count = rh.count;\n        if (count <= 1) {\n            readHolds.remove();\n            if (count <= 0)\n                throw unmatchedUnlockException();\n        }\n        //减少计数\n        --rh.count;\n    }\n    for (;;) {//CAS设置state\n        int c = getState();\n        int nextc = c - SHARED_UNIT;\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n```\n\n1. 首先判断当前线程是否是第一个读线程，是的话，而且计数器为1，将firstReader设置为null，否则将firstReaderHoldCount-1；\n2. 如不是第一个读线程，先获取当前线程的计数器，若计数器的count小于等于1，则移除当前线程的计数器，如果计数器的计数count小于等于0，则抛出异常，之后再减少计数即可。\n3. CAS设置state\n\n#### NonfairSync（非公平模式）\n```\nstatic final class NonfairSync extends Sync {\n    private static final long serialVersionUID = -8159625535654395037L;\n    final boolean writerShouldBlock() {\n        return false; // writers can always barge\n    }\n    final boolean readerShouldBlock() {\n        return apparentlyFirstQueuedIsExclusive();\n    }\n}\n```\n\n非公平模式的NonfairSync也是继承了Sync，实现了Sync的writerShouldBlock 和 readerShouldBlock 方法：\n\n- writerShouldBlock：非公平模式下，写锁不需要被阻塞。\n- readerShouldBlock：调用apparentlyFirstQueuedIsExclusive，如果队列中第一个节点是独占式，则返回true，堵塞读锁。\n\n> 如果同步队列中的第一个线程是以独占模式获取锁（写锁），那么当前获取读锁的线程需要阻塞，让队列中的第一个线程先执行。\n\n#### FairSync（公平模式）\n\n```\nstatic final class FairSync extends Sync {\n    private static final long serialVersionUID = -2274990926593161451L;\n    final boolean writerShouldBlock() {\n        return hasQueuedPredecessors();\n    }\n    final boolean readerShouldBlock() {\n        return hasQueuedPredecessors();\n    }\n}\n```\n公平模式下的实现了Sync的writerShouldBlock 和 readerShouldBlock 方法实现都一样：判断是否是等待队列中是否有前置节点，有则返回true。\n\n#### ReadLock 和 WriteLock\n\nReentrantReadWriteLock中的ReadLock和WriteLock内部的Sync都是使用的ReentrantReadWriteLock的Sync，读锁和写锁的实现也都是通过调用Sync的方法来实现的，具体不就看了。\n\n","slug":"javasource/util/6_ReentrantReadWriteLock","published":1,"updated":"2020-01-02T05:49:23.769Z","layout":"post","photos":[],"link":"","_id":"ck6lvszv1008cn0ztco2eaq67","content":"<h3 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h3><p>ReentrantReadWriteLock实现的是ReadWriteLock接口，ReadWriteLock接口中只定义了 readLock 和 writeLock 方法。</p>\n<p>readLock 和 writeLock方法分别返回了内部的读锁和写锁。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ReentrantReadWriteLock.WriteLock writeLock() &#123; return writerLock; &#125;</div><div class=\"line\">public ReentrantReadWriteLock.ReadLock  readLock()  &#123; return readerLock; &#125;</div></pre></td></tr></table></figure></p>\n<p>ReadLock和WriteLock方法都是通过Sync的方法实现的，所以Sync是读写锁的核心：</p>\n<blockquote>\n<p>对同一线程，读，写读，写写是共享的，读写是互斥的；对于不同线程而言，读是共享的，读写、写写、写读都是互斥的。</p>\n</blockquote>\n<h4 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h4><h5 id=\"Sync中的常量和结构\"><a href=\"#Sync中的常量和结构\" class=\"headerlink\" title=\"Sync中的常量和结构\"></a>Sync中的常量和结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">//低16位为写锁状态，高16位为读锁状态</div><div class=\"line\">static final int SHARED_SHIFT   = 16;</div><div class=\"line\">//读锁每次增加的单位</div><div class=\"line\">static final int SHARED_UNIT    = (1 &lt;&lt; SHARED_SHIFT);</div><div class=\"line\">//读锁的最大数</div><div class=\"line\">static final int MAX_COUNT      = (1 &lt;&lt; SHARED_SHIFT) - 1;</div><div class=\"line\">//写锁的掩码</div><div class=\"line\">static final int EXCLUSIVE_MASK = (1 &lt;&lt; SHARED_SHIFT) - 1;</div><div class=\"line\">//返回读锁的数量</div><div class=\"line\">static int sharedCount(int c)    &#123; return c &gt;&gt;&gt; SHARED_SHIFT; &#125;</div><div class=\"line\">//返回写锁的数量 EXCLUSIVE_MASK 高位都是0</div><div class=\"line\">static int exclusiveCount(int c) &#123; return c &amp; EXCLUSIVE_MASK; &#125;</div><div class=\"line\">//当前读线程的计数器</div><div class=\"line\">static final class HoldCounter &#123;</div><div class=\"line\">    int count = 0;//当前读线程的重入数</div><div class=\"line\">    final long tid = getThreadId(Thread.currentThread());</div><div class=\"line\">&#125;</div><div class=\"line\">static final class ThreadLocalHoldCounter extends ThreadLocal&lt;HoldCounter&gt; &#123;//本地程序计数器</div><div class=\"line\">    public HoldCounter initialValue() &#123;</div><div class=\"line\">        return new HoldCounter();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">private transient ThreadLocalHoldCounter readHolds;</div><div class=\"line\">private transient HoldCounter cachedHoldCounter;//当前线程缓存的HoldCounter</div><div class=\"line\">private transient Thread firstReader = null;//第一个读线程</div><div class=\"line\">private transient int firstReaderHoldCount;</div></pre></td></tr></table></figure>\n<h5 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h5><p>Sync的构造方法设置了本地线程计数器和AQS的状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sync() &#123;</div><div class=\"line\">readHolds = new ThreadLocalHoldCounter();</div><div class=\"line\">setState(getState()); // ensures visibility of readHolds</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"tryAcquire-写锁的获取\"><a href=\"#tryAcquire-写锁的获取\" class=\"headerlink\" title=\"tryAcquire 写锁的获取\"></a>tryAcquire 写锁的获取</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">    Thread current = Thread.currentThread();</div><div class=\"line\">    int c = getState();</div><div class=\"line\">    int w = exclusiveCount(c);//写锁的重入数</div><div class=\"line\">    if (c != 0) &#123;//已经有其他线程获取了读锁或者写锁</div><div class=\"line\">        //1.写锁状态为0，说明读锁已被获取 2.写锁不为0，而且获取写锁的不是当前线程</div><div class=\"line\">        if (w == 0 || current != getExclusiveOwnerThread())</div><div class=\"line\">            return false;</div><div class=\"line\">        //判断统一线程获取写锁是否超过最大数</div><div class=\"line\">        if (w + exclusiveCount(acquires) &gt; MAX_COUNT)</div><div class=\"line\">            throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">        setState(c + acquires);//当前线程已有写锁，设置写锁的数量（重入）</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (writerShouldBlock() || //是否被阻塞</div><div class=\"line\">        !compareAndSetState(c, c + acquires))//获取锁</div><div class=\"line\">        return false;</div><div class=\"line\">    setExclusiveOwnerThread(current);</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>写锁的获取：</p>\n<ol>\n<li>获取state的状态，如果不为0说明已经被获取过锁了；<ul>\n<li>如果读锁被获取（写锁为0）或者 写锁被获取 但不是当前线程，返回false。</li>\n<li>如果写锁是当前线程获取的，判断是不是超过写锁的最大数，没有就设置现在写锁的个数，返回true。</li>\n</ul>\n</li>\n<li>如果state为0，就代表还没有线程获取到读锁和写锁，此时判断writerShouldBlock是否该被阻塞，如果不被阻塞，设置state也成功，就把当前线程设置为owner。</li>\n</ol>\n<h5 id=\"tryRelease-写锁的释放\"><a href=\"#tryRelease-写锁的释放\" class=\"headerlink\" title=\"tryRelease 写锁的释放\"></a>tryRelease 写锁的释放</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">    if (!isHeldExclusively())//检查是不是当前线程</div><div class=\"line\">        throw new IllegalMonitorStateException();</div><div class=\"line\">    int nextc = getState() - releases;//新占用数</div><div class=\"line\">    boolean free = exclusiveCount(nextc) == 0;//独占模式重入数为0，代表独占模式释放了</div><div class=\"line\">    if (free)</div><div class=\"line\">        setExclusiveOwnerThread(null);//把owner设置为空</div><div class=\"line\">    setState(nextc);</div><div class=\"line\">    return free;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>先检查此线程是不是持有读锁的线程，不是就抛异常。</li>\n<li>然后检查释放后写锁的占用数是不是0，如果为0则表示写锁释放，释放锁资源将锁的持有线程设置为null，否则仅仅修改state。</li>\n</ul>\n<h5 id=\"tryAcquireShared-读锁的获取\"><a href=\"#tryAcquireShared-读锁的获取\" class=\"headerlink\" title=\"tryAcquireShared 读锁的获取\"></a>tryAcquireShared 读锁的获取</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final int tryAcquireShared(int unused) &#123;</div><div class=\"line\">    Thread current = Thread.currentThread();</div><div class=\"line\">    int c = getState();</div><div class=\"line\">    //有写锁占用，并且不是当前线程</div><div class=\"line\">    if (exclusiveCount(c) != 0 &amp;&amp;</div><div class=\"line\">        getExclusiveOwnerThread() != current)</div><div class=\"line\">        return -1;</div><div class=\"line\">    int r = sharedCount(c);//读锁数量</div><div class=\"line\">    if (!readerShouldBlock() &amp;&amp;//读锁是否需要阻塞</div><div class=\"line\">        r &lt; MAX_COUNT &amp;&amp;//小于最大数</div><div class=\"line\">        compareAndSetState(c, c + SHARED_UNIT)) &#123;//设置读锁成功</div><div class=\"line\">        if (r == 0) &#123;//没有读锁，初始化</div><div class=\"line\">            firstReader = current;</div><div class=\"line\">            firstReaderHoldCount = 1;</div><div class=\"line\">        &#125; else if (firstReader == current) &#123;</div><div class=\"line\">            firstReaderHoldCount++;//第一个读锁线程重入</div><div class=\"line\">        &#125; else &#123;//不是第一个读锁的线程</div><div class=\"line\">            HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">            // 计数器为空或者计数器的tid不为当前正在运行的线程的tid</div><div class=\"line\">            if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                // 获取当前线程对应的计数器</div><div class=\"line\">                cachedHoldCounter = rh = readHolds.get();</div><div class=\"line\">            else if (rh.count == 0) // 计数为0</div><div class=\"line\">                readHolds.set(rh);//加入到readHolds中</div><div class=\"line\">            rh.count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return fullTryAcquireShared(current);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>先判断写锁不为0，并且不是当前线程，直接返回-1；</li>\n<li>然后判断如果读锁不需要阻塞，小于最大读锁的数，并且比较设置state成功：<ul>\n<li>如果没有读锁，则初始化第一个读锁</li>\n<li>如果第一个读锁线程已持有读锁，进行重入</li>\n<li>如果不是第一个读锁的线程：计数器为空或者tid不是当前线程，获取当前线程的计数器；获取计数器为0，加入到readHolds中。最后计数+1</li>\n</ul>\n</li>\n</ol>\n<p>读锁不需要阻塞、小于最大读锁的数、比较设置state成功这三个条件有一个为false会执行 fullTryAcquireShared 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int fullTryAcquireShared(Thread current) &#123;</div><div class=\"line\">    HoldCounter rh = null;</div><div class=\"line\">    for (;;) &#123;</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        if (exclusiveCount(c) != 0) &#123;//有写锁</div><div class=\"line\">            if (getExclusiveOwnerThread() != current)//不是当前线程</div><div class=\"line\">                return -1;</div><div class=\"line\">        &#125; else if (readerShouldBlock()) &#123;//读锁要被阻塞（公平）</div><div class=\"line\">            if (firstReader == current) &#123;//当前线程是第一个读线程</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                if (rh == null) &#123;</div><div class=\"line\">                    rh = cachedHoldCounter;</div><div class=\"line\">                    if (rh == null || rh.tid != getThreadId(current)) &#123;</div><div class=\"line\">                        rh = readHolds.get();//获取到当前线程的计数器</div><div class=\"line\">                        if (rh.count == 0)</div><div class=\"line\">                            readHolds.remove();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (rh.count == 0)</div><div class=\"line\">                    return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (sharedCount(c) == MAX_COUNT)//读锁是最大值了</div><div class=\"line\">            throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">        if (compareAndSetState(c, c + SHARED_UNIT)) &#123;//设置读锁成功</div><div class=\"line\">            if (sharedCount(c) == 0) &#123;//没有读锁初始化</div><div class=\"line\">                firstReader = current;</div><div class=\"line\">                firstReaderHoldCount = 1;</div><div class=\"line\">            &#125; else if (firstReader == current) &#123;//重入</div><div class=\"line\">                firstReaderHoldCount++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                if (rh == null)</div><div class=\"line\">                    rh = cachedHoldCounter;</div><div class=\"line\">                if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                    rh = readHolds.get();</div><div class=\"line\">                else if (rh.count == 0)</div><div class=\"line\">                    readHolds.set(rh);</div><div class=\"line\">                rh.count++;</div><div class=\"line\">                cachedHoldCounter = rh; // cache for release</div><div class=\"line\">            &#125;</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此方法与tryAcquireShared方法类似，保证了相关操作可以执行</p>\n<h5 id=\"tryReleaseShared-读锁的释放\"><a href=\"#tryReleaseShared-读锁的释放\" class=\"headerlink\" title=\"tryReleaseShared 读锁的释放\"></a>tryReleaseShared 读锁的释放</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryReleaseShared(int unused) &#123;</div><div class=\"line\">    Thread current = Thread.currentThread();</div><div class=\"line\">    if (firstReader == current) &#123;//第一个读线程</div><div class=\"line\">        if (firstReaderHoldCount == 1)//第一个读线程重入数为1</div><div class=\"line\">            firstReader = null;//</div><div class=\"line\">        else</div><div class=\"line\">            firstReaderHoldCount--;//第一个读线程重入数-1</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">        if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">            rh = readHolds.get();//获取到当前线程的计数器</div><div class=\"line\">        int count = rh.count;</div><div class=\"line\">        if (count &lt;= 1) &#123;</div><div class=\"line\">            readHolds.remove();</div><div class=\"line\">            if (count &lt;= 0)</div><div class=\"line\">                throw unmatchedUnlockException();</div><div class=\"line\">        &#125;</div><div class=\"line\">        //减少计数</div><div class=\"line\">        --rh.count;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (;;) &#123;//CAS设置state</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        int nextc = c - SHARED_UNIT;</div><div class=\"line\">        if (compareAndSetState(c, nextc))</div><div class=\"line\">            return nextc == 0;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>首先判断当前线程是否是第一个读线程，是的话，而且计数器为1，将firstReader设置为null，否则将firstReaderHoldCount-1；</li>\n<li>如不是第一个读线程，先获取当前线程的计数器，若计数器的count小于等于1，则移除当前线程的计数器，如果计数器的计数count小于等于0，则抛出异常，之后再减少计数即可。</li>\n<li>CAS设置state</li>\n</ol>\n<h4 id=\"NonfairSync（非公平模式）\"><a href=\"#NonfairSync（非公平模式）\" class=\"headerlink\" title=\"NonfairSync（非公平模式）\"></a>NonfairSync（非公平模式）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class NonfairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -8159625535654395037L;</div><div class=\"line\">    final boolean writerShouldBlock() &#123;</div><div class=\"line\">        return false; // writers can always barge</div><div class=\"line\">    &#125;</div><div class=\"line\">    final boolean readerShouldBlock() &#123;</div><div class=\"line\">        return apparentlyFirstQueuedIsExclusive();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>非公平模式的NonfairSync也是继承了Sync，实现了Sync的writerShouldBlock 和 readerShouldBlock 方法：</p>\n<ul>\n<li>writerShouldBlock：非公平模式下，写锁不需要被阻塞。</li>\n<li>readerShouldBlock：调用apparentlyFirstQueuedIsExclusive，如果队列中第一个节点是独占式，则返回true，堵塞读锁。</li>\n</ul>\n<blockquote>\n<p>如果同步队列中的第一个线程是以独占模式获取锁（写锁），那么当前获取读锁的线程需要阻塞，让队列中的第一个线程先执行。</p>\n</blockquote>\n<h4 id=\"FairSync（公平模式）\"><a href=\"#FairSync（公平模式）\" class=\"headerlink\" title=\"FairSync（公平模式）\"></a>FairSync（公平模式）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class FairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -2274990926593161451L;</div><div class=\"line\">    final boolean writerShouldBlock() &#123;</div><div class=\"line\">        return hasQueuedPredecessors();</div><div class=\"line\">    &#125;</div><div class=\"line\">    final boolean readerShouldBlock() &#123;</div><div class=\"line\">        return hasQueuedPredecessors();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>公平模式下的实现了Sync的writerShouldBlock 和 readerShouldBlock 方法实现都一样：判断是否是等待队列中是否有前置节点，有则返回true。</p>\n<h4 id=\"ReadLock-和-WriteLock\"><a href=\"#ReadLock-和-WriteLock\" class=\"headerlink\" title=\"ReadLock 和 WriteLock\"></a>ReadLock 和 WriteLock</h4><p>ReentrantReadWriteLock中的ReadLock和WriteLock内部的Sync都是使用的ReentrantReadWriteLock的Sync，读锁和写锁的实现也都是通过调用Sync的方法来实现的，具体不就看了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ReentrantReadWriteLock\"><a href=\"#ReentrantReadWriteLock\" class=\"headerlink\" title=\"ReentrantReadWriteLock\"></a>ReentrantReadWriteLock</h3><p>ReentrantReadWriteLock实现的是ReadWriteLock接口，ReadWriteLock接口中只定义了 readLock 和 writeLock 方法。</p>\n<p>readLock 和 writeLock方法分别返回了内部的读锁和写锁。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ReentrantReadWriteLock.WriteLock writeLock() &#123; return writerLock; &#125;</div><div class=\"line\">public ReentrantReadWriteLock.ReadLock  readLock()  &#123; return readerLock; &#125;</div></pre></td></tr></table></figure></p>\n<p>ReadLock和WriteLock方法都是通过Sync的方法实现的，所以Sync是读写锁的核心：</p>\n<blockquote>\n<p>对同一线程，读，写读，写写是共享的，读写是互斥的；对于不同线程而言，读是共享的，读写、写写、写读都是互斥的。</p>\n</blockquote>\n<h4 id=\"Sync\"><a href=\"#Sync\" class=\"headerlink\" title=\"Sync\"></a>Sync</h4><h5 id=\"Sync中的常量和结构\"><a href=\"#Sync中的常量和结构\" class=\"headerlink\" title=\"Sync中的常量和结构\"></a>Sync中的常量和结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">//低16位为写锁状态，高16位为读锁状态</div><div class=\"line\">static final int SHARED_SHIFT   = 16;</div><div class=\"line\">//读锁每次增加的单位</div><div class=\"line\">static final int SHARED_UNIT    = (1 &lt;&lt; SHARED_SHIFT);</div><div class=\"line\">//读锁的最大数</div><div class=\"line\">static final int MAX_COUNT      = (1 &lt;&lt; SHARED_SHIFT) - 1;</div><div class=\"line\">//写锁的掩码</div><div class=\"line\">static final int EXCLUSIVE_MASK = (1 &lt;&lt; SHARED_SHIFT) - 1;</div><div class=\"line\">//返回读锁的数量</div><div class=\"line\">static int sharedCount(int c)    &#123; return c &gt;&gt;&gt; SHARED_SHIFT; &#125;</div><div class=\"line\">//返回写锁的数量 EXCLUSIVE_MASK 高位都是0</div><div class=\"line\">static int exclusiveCount(int c) &#123; return c &amp; EXCLUSIVE_MASK; &#125;</div><div class=\"line\">//当前读线程的计数器</div><div class=\"line\">static final class HoldCounter &#123;</div><div class=\"line\">    int count = 0;//当前读线程的重入数</div><div class=\"line\">    final long tid = getThreadId(Thread.currentThread());</div><div class=\"line\">&#125;</div><div class=\"line\">static final class ThreadLocalHoldCounter extends ThreadLocal&lt;HoldCounter&gt; &#123;//本地程序计数器</div><div class=\"line\">    public HoldCounter initialValue() &#123;</div><div class=\"line\">        return new HoldCounter();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">private transient ThreadLocalHoldCounter readHolds;</div><div class=\"line\">private transient HoldCounter cachedHoldCounter;//当前线程缓存的HoldCounter</div><div class=\"line\">private transient Thread firstReader = null;//第一个读线程</div><div class=\"line\">private transient int firstReaderHoldCount;</div></pre></td></tr></table></figure>\n<h5 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h5><p>Sync的构造方法设置了本地线程计数器和AQS的状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sync() &#123;</div><div class=\"line\">readHolds = new ThreadLocalHoldCounter();</div><div class=\"line\">setState(getState()); // ensures visibility of readHolds</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"tryAcquire-写锁的获取\"><a href=\"#tryAcquire-写锁的获取\" class=\"headerlink\" title=\"tryAcquire 写锁的获取\"></a>tryAcquire 写锁的获取</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryAcquire(int acquires) &#123;</div><div class=\"line\">    Thread current = Thread.currentThread();</div><div class=\"line\">    int c = getState();</div><div class=\"line\">    int w = exclusiveCount(c);//写锁的重入数</div><div class=\"line\">    if (c != 0) &#123;//已经有其他线程获取了读锁或者写锁</div><div class=\"line\">        //1.写锁状态为0，说明读锁已被获取 2.写锁不为0，而且获取写锁的不是当前线程</div><div class=\"line\">        if (w == 0 || current != getExclusiveOwnerThread())</div><div class=\"line\">            return false;</div><div class=\"line\">        //判断统一线程获取写锁是否超过最大数</div><div class=\"line\">        if (w + exclusiveCount(acquires) &gt; MAX_COUNT)</div><div class=\"line\">            throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">        setState(c + acquires);//当前线程已有写锁，设置写锁的数量（重入）</div><div class=\"line\">        return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (writerShouldBlock() || //是否被阻塞</div><div class=\"line\">        !compareAndSetState(c, c + acquires))//获取锁</div><div class=\"line\">        return false;</div><div class=\"line\">    setExclusiveOwnerThread(current);</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>写锁的获取：</p>\n<ol>\n<li>获取state的状态，如果不为0说明已经被获取过锁了；<ul>\n<li>如果读锁被获取（写锁为0）或者 写锁被获取 但不是当前线程，返回false。</li>\n<li>如果写锁是当前线程获取的，判断是不是超过写锁的最大数，没有就设置现在写锁的个数，返回true。</li>\n</ul>\n</li>\n<li>如果state为0，就代表还没有线程获取到读锁和写锁，此时判断writerShouldBlock是否该被阻塞，如果不被阻塞，设置state也成功，就把当前线程设置为owner。</li>\n</ol>\n<h5 id=\"tryRelease-写锁的释放\"><a href=\"#tryRelease-写锁的释放\" class=\"headerlink\" title=\"tryRelease 写锁的释放\"></a>tryRelease 写锁的释放</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryRelease(int releases) &#123;</div><div class=\"line\">    if (!isHeldExclusively())//检查是不是当前线程</div><div class=\"line\">        throw new IllegalMonitorStateException();</div><div class=\"line\">    int nextc = getState() - releases;//新占用数</div><div class=\"line\">    boolean free = exclusiveCount(nextc) == 0;//独占模式重入数为0，代表独占模式释放了</div><div class=\"line\">    if (free)</div><div class=\"line\">        setExclusiveOwnerThread(null);//把owner设置为空</div><div class=\"line\">    setState(nextc);</div><div class=\"line\">    return free;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>先检查此线程是不是持有读锁的线程，不是就抛异常。</li>\n<li>然后检查释放后写锁的占用数是不是0，如果为0则表示写锁释放，释放锁资源将锁的持有线程设置为null，否则仅仅修改state。</li>\n</ul>\n<h5 id=\"tryAcquireShared-读锁的获取\"><a href=\"#tryAcquireShared-读锁的获取\" class=\"headerlink\" title=\"tryAcquireShared 读锁的获取\"></a>tryAcquireShared 读锁的获取</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final int tryAcquireShared(int unused) &#123;</div><div class=\"line\">    Thread current = Thread.currentThread();</div><div class=\"line\">    int c = getState();</div><div class=\"line\">    //有写锁占用，并且不是当前线程</div><div class=\"line\">    if (exclusiveCount(c) != 0 &amp;&amp;</div><div class=\"line\">        getExclusiveOwnerThread() != current)</div><div class=\"line\">        return -1;</div><div class=\"line\">    int r = sharedCount(c);//读锁数量</div><div class=\"line\">    if (!readerShouldBlock() &amp;&amp;//读锁是否需要阻塞</div><div class=\"line\">        r &lt; MAX_COUNT &amp;&amp;//小于最大数</div><div class=\"line\">        compareAndSetState(c, c + SHARED_UNIT)) &#123;//设置读锁成功</div><div class=\"line\">        if (r == 0) &#123;//没有读锁，初始化</div><div class=\"line\">            firstReader = current;</div><div class=\"line\">            firstReaderHoldCount = 1;</div><div class=\"line\">        &#125; else if (firstReader == current) &#123;</div><div class=\"line\">            firstReaderHoldCount++;//第一个读锁线程重入</div><div class=\"line\">        &#125; else &#123;//不是第一个读锁的线程</div><div class=\"line\">            HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">            // 计数器为空或者计数器的tid不为当前正在运行的线程的tid</div><div class=\"line\">            if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                // 获取当前线程对应的计数器</div><div class=\"line\">                cachedHoldCounter = rh = readHolds.get();</div><div class=\"line\">            else if (rh.count == 0) // 计数为0</div><div class=\"line\">                readHolds.set(rh);//加入到readHolds中</div><div class=\"line\">            rh.count++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return 1;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return fullTryAcquireShared(current);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>先判断写锁不为0，并且不是当前线程，直接返回-1；</li>\n<li>然后判断如果读锁不需要阻塞，小于最大读锁的数，并且比较设置state成功：<ul>\n<li>如果没有读锁，则初始化第一个读锁</li>\n<li>如果第一个读锁线程已持有读锁，进行重入</li>\n<li>如果不是第一个读锁的线程：计数器为空或者tid不是当前线程，获取当前线程的计数器；获取计数器为0，加入到readHolds中。最后计数+1</li>\n</ul>\n</li>\n</ol>\n<p>读锁不需要阻塞、小于最大读锁的数、比较设置state成功这三个条件有一个为false会执行 fullTryAcquireShared 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">final int fullTryAcquireShared(Thread current) &#123;</div><div class=\"line\">    HoldCounter rh = null;</div><div class=\"line\">    for (;;) &#123;</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        if (exclusiveCount(c) != 0) &#123;//有写锁</div><div class=\"line\">            if (getExclusiveOwnerThread() != current)//不是当前线程</div><div class=\"line\">                return -1;</div><div class=\"line\">        &#125; else if (readerShouldBlock()) &#123;//读锁要被阻塞（公平）</div><div class=\"line\">            if (firstReader == current) &#123;//当前线程是第一个读线程</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                if (rh == null) &#123;</div><div class=\"line\">                    rh = cachedHoldCounter;</div><div class=\"line\">                    if (rh == null || rh.tid != getThreadId(current)) &#123;</div><div class=\"line\">                        rh = readHolds.get();//获取到当前线程的计数器</div><div class=\"line\">                        if (rh.count == 0)</div><div class=\"line\">                            readHolds.remove();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">                if (rh.count == 0)</div><div class=\"line\">                    return -1;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (sharedCount(c) == MAX_COUNT)//读锁是最大值了</div><div class=\"line\">            throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class=\"line\">        if (compareAndSetState(c, c + SHARED_UNIT)) &#123;//设置读锁成功</div><div class=\"line\">            if (sharedCount(c) == 0) &#123;//没有读锁初始化</div><div class=\"line\">                firstReader = current;</div><div class=\"line\">                firstReaderHoldCount = 1;</div><div class=\"line\">            &#125; else if (firstReader == current) &#123;//重入</div><div class=\"line\">                firstReaderHoldCount++;</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                if (rh == null)</div><div class=\"line\">                    rh = cachedHoldCounter;</div><div class=\"line\">                if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">                    rh = readHolds.get();</div><div class=\"line\">                else if (rh.count == 0)</div><div class=\"line\">                    readHolds.set(rh);</div><div class=\"line\">                rh.count++;</div><div class=\"line\">                cachedHoldCounter = rh; // cache for release</div><div class=\"line\">            &#125;</div><div class=\"line\">            return 1;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此方法与tryAcquireShared方法类似，保证了相关操作可以执行</p>\n<h5 id=\"tryReleaseShared-读锁的释放\"><a href=\"#tryReleaseShared-读锁的释放\" class=\"headerlink\" title=\"tryReleaseShared 读锁的释放\"></a>tryReleaseShared 读锁的释放</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">protected final boolean tryReleaseShared(int unused) &#123;</div><div class=\"line\">    Thread current = Thread.currentThread();</div><div class=\"line\">    if (firstReader == current) &#123;//第一个读线程</div><div class=\"line\">        if (firstReaderHoldCount == 1)//第一个读线程重入数为1</div><div class=\"line\">            firstReader = null;//</div><div class=\"line\">        else</div><div class=\"line\">            firstReaderHoldCount--;//第一个读线程重入数-1</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        HoldCounter rh = cachedHoldCounter;</div><div class=\"line\">        if (rh == null || rh.tid != getThreadId(current))</div><div class=\"line\">            rh = readHolds.get();//获取到当前线程的计数器</div><div class=\"line\">        int count = rh.count;</div><div class=\"line\">        if (count &lt;= 1) &#123;</div><div class=\"line\">            readHolds.remove();</div><div class=\"line\">            if (count &lt;= 0)</div><div class=\"line\">                throw unmatchedUnlockException();</div><div class=\"line\">        &#125;</div><div class=\"line\">        //减少计数</div><div class=\"line\">        --rh.count;</div><div class=\"line\">    &#125;</div><div class=\"line\">    for (;;) &#123;//CAS设置state</div><div class=\"line\">        int c = getState();</div><div class=\"line\">        int nextc = c - SHARED_UNIT;</div><div class=\"line\">        if (compareAndSetState(c, nextc))</div><div class=\"line\">            return nextc == 0;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>首先判断当前线程是否是第一个读线程，是的话，而且计数器为1，将firstReader设置为null，否则将firstReaderHoldCount-1；</li>\n<li>如不是第一个读线程，先获取当前线程的计数器，若计数器的count小于等于1，则移除当前线程的计数器，如果计数器的计数count小于等于0，则抛出异常，之后再减少计数即可。</li>\n<li>CAS设置state</li>\n</ol>\n<h4 id=\"NonfairSync（非公平模式）\"><a href=\"#NonfairSync（非公平模式）\" class=\"headerlink\" title=\"NonfairSync（非公平模式）\"></a>NonfairSync（非公平模式）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class NonfairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -8159625535654395037L;</div><div class=\"line\">    final boolean writerShouldBlock() &#123;</div><div class=\"line\">        return false; // writers can always barge</div><div class=\"line\">    &#125;</div><div class=\"line\">    final boolean readerShouldBlock() &#123;</div><div class=\"line\">        return apparentlyFirstQueuedIsExclusive();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>非公平模式的NonfairSync也是继承了Sync，实现了Sync的writerShouldBlock 和 readerShouldBlock 方法：</p>\n<ul>\n<li>writerShouldBlock：非公平模式下，写锁不需要被阻塞。</li>\n<li>readerShouldBlock：调用apparentlyFirstQueuedIsExclusive，如果队列中第一个节点是独占式，则返回true，堵塞读锁。</li>\n</ul>\n<blockquote>\n<p>如果同步队列中的第一个线程是以独占模式获取锁（写锁），那么当前获取读锁的线程需要阻塞，让队列中的第一个线程先执行。</p>\n</blockquote>\n<h4 id=\"FairSync（公平模式）\"><a href=\"#FairSync（公平模式）\" class=\"headerlink\" title=\"FairSync（公平模式）\"></a>FairSync（公平模式）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class FairSync extends Sync &#123;</div><div class=\"line\">    private static final long serialVersionUID = -2274990926593161451L;</div><div class=\"line\">    final boolean writerShouldBlock() &#123;</div><div class=\"line\">        return hasQueuedPredecessors();</div><div class=\"line\">    &#125;</div><div class=\"line\">    final boolean readerShouldBlock() &#123;</div><div class=\"line\">        return hasQueuedPredecessors();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>公平模式下的实现了Sync的writerShouldBlock 和 readerShouldBlock 方法实现都一样：判断是否是等待队列中是否有前置节点，有则返回true。</p>\n<h4 id=\"ReadLock-和-WriteLock\"><a href=\"#ReadLock-和-WriteLock\" class=\"headerlink\" title=\"ReadLock 和 WriteLock\"></a>ReadLock 和 WriteLock</h4><p>ReentrantReadWriteLock中的ReadLock和WriteLock内部的Sync都是使用的ReentrantReadWriteLock的Sync，读锁和写锁的实现也都是通过调用Sync的方法来实现的，具体不就看了。</p>\n"},{"title":"CyclicBarrier阅读","date":"2019-12-04T14:17:53.000Z","comments":0,"keywords":["java","CyclicBarrier","锁","同步"],"_content":"\n### CyclicBarrier\n\nCyclicBarrier我们叫做栅栏，其实与CountDownLatch的功能类似（CyclicBarrier也可实现CountDownLatch的功能），都是等待多个线程执行完成之后在进行最后的动作，只不过CountDownLatch是一次性的，而CyclicBarrier是可循环的\n\n> CyclicBarrier可以使一定数量的线程反复地在栅栏位置处汇集。当线程到达栅栏位置时将调用await方法，这个方法将阻塞直到所有线程都到达栅栏位置。如果所有线程都到达栅栏位置，那么栅栏将打开，此时所有的线程都将被释放，而栅栏将被重置以便下次使用。\n\n### 源码\n\nCyclicBarrier内部主要使用了ReentrantLock和Condition两个类。\n\n#### 构造函数\n\n```\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties <= 0) throw new IllegalArgumentException();\n    this.parties = parties;\n    this.count = parties;\n    this.barrierCommand = barrierAction;\n}\n\npublic CyclicBarrier(int parties) {\n    this(parties, null);\n}\n```\n\nCyclicBarrier默认的构造函数设置了栅栏拦截的线程数量，每个线程使用await方法告诉CyclicBarrier到达了栅栏，然后当前线程被阻塞。\n另一个构造函数的第二个参数代表所有线程都到达栅栏时，优先执行的动作（barrierAction）。\n\n#### await\n\n```\npublic int await() throws InterruptedException, BrokenBarrierException {\n    try {\n        return dowait(false, 0L);\n    } catch (TimeoutException toe) {\n        throw new Error(toe); // cannot happen\n    }\n}\npublic int await(long timeout, TimeUnit unit)\n    throws InterruptedException,\n           BrokenBarrierException,\n           TimeoutException {\n    return dowait(true, unit.toNanos(timeout));\n}\n```\n\nawait方法有两个，默认的没有设置超时等待，第二个设置了超市等待的时间，两个方法最终都是调用的dowait来完成的。\n\n```\nprivate int dowait(boolean timed, long nanos)\n    throws InterruptedException, BrokenBarrierException,\n           TimeoutException {\n    final ReentrantLock lock = this.lock;\n    lock.lock();//独占式加锁\n    try {\n        final Generation g = generation;\n        if (g.broken)//broken为true抛异常，默认为false\n            throw new BrokenBarrierException();\n        if (Thread.interrupted()) {//线程中断了\n            breakBarrier();//broken为true 通知阻塞在栅栏上的其他线程\n            throw new InterruptedException();\n        }\n        int index = --count;//获取下标\n        if (index == 0) {  // tripped  如果是0，则说明最后一个线程调用了此方法\n            boolean ranAction = false;\n            try {\n                final Runnable command = barrierCommand;\n                if (command != null)\n                    command.run(); //如果command不为空 就先执行 最后的动作\n                ranAction = true;//执行完\n                nextGeneration();//唤醒所有阻塞的线程并重新初始化\n                return 0;\n            } finally {\n                if (!ranAction)//如果执行栅栏任务的时候失败了，就将broken设置为true\n                    breakBarrier();\n            }\n        }\n        for (;;) {//最后一个线程还没执行到\n            try {\n                if (!timed)//没有时间限制 则直接阻塞等待，直到被唤醒\n                    trip.await();\n                else if (nanos > 0L)\n                    nanos = trip.awaitNanos(nanos);//阻塞指定时间\n            } catch (InterruptedException ie) {\n                if (g == generation && ! g.broken) {//当前代broken是false，设置broken为false，抛异常，代表此待结束\n                    breakBarrier();\n                    throw ie;\n                } else {\n                    Thread.currentThread().interrupt();//不是当前代，中断标记\n                }\n            }\n            if (g.broken)// 当有任何一个线程中断了，会唤醒其他线程，剩余线程也要跑异常\n                throw new BrokenBarrierException();\n\n            if (g != generation)//换代 （因为一个线程可以使用多个栅栏，当别的栅栏唤醒了这个线程，就会走到这里，所以需要判断是否是当前代。）\n                return index;\n            // 如果有时间限制，且时间小于等于0，销毁栅栏并抛出异常\n            if (timed && nanos <= 0L) {\n                breakBarrier();\n                throw new TimeoutException();\n            }\n        }\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n如果该线程不是最后一个调用await方法的线程，则它会一直处于等待状态，除非发生以下情况：\n\n- 最后一个线程到达，即index == 0\n- 某个参与线程等待超时\n- 某个参与线程被中断\n- 调用了CyclicBarrier的reset()方法。重新初始化栅栏\n\n### 总结\n\n- CyclicBarrier使用ReentrantLock独占锁来执行await，并发性会受影响。\n- 如果等待过程，线程被中断了就会抛异常。\n- 如果线程被其他的CyclicBarrier线程唤醒，g肯定是当前代，循环阻塞。否则是被当前CyclicBarrier唤醒的，返回下标完成一次全抵达栅栏的过程。\n","source":"_posts/javasource/util/7_CyclicBarrier.md","raw":"---\ntitle: CyclicBarrier阅读 \ndate: 2019-12-04 22:17:53\ncomments: false\ntags: \n- java\n- CyclicBarrier\n- 锁\n- 同步\ncategories: \n- java\nkeywords:\n- java\n- CyclicBarrier\n- 锁\n- 同步\n---\n\n### CyclicBarrier\n\nCyclicBarrier我们叫做栅栏，其实与CountDownLatch的功能类似（CyclicBarrier也可实现CountDownLatch的功能），都是等待多个线程执行完成之后在进行最后的动作，只不过CountDownLatch是一次性的，而CyclicBarrier是可循环的\n\n> CyclicBarrier可以使一定数量的线程反复地在栅栏位置处汇集。当线程到达栅栏位置时将调用await方法，这个方法将阻塞直到所有线程都到达栅栏位置。如果所有线程都到达栅栏位置，那么栅栏将打开，此时所有的线程都将被释放，而栅栏将被重置以便下次使用。\n\n### 源码\n\nCyclicBarrier内部主要使用了ReentrantLock和Condition两个类。\n\n#### 构造函数\n\n```\npublic CyclicBarrier(int parties, Runnable barrierAction) {\n    if (parties <= 0) throw new IllegalArgumentException();\n    this.parties = parties;\n    this.count = parties;\n    this.barrierCommand = barrierAction;\n}\n\npublic CyclicBarrier(int parties) {\n    this(parties, null);\n}\n```\n\nCyclicBarrier默认的构造函数设置了栅栏拦截的线程数量，每个线程使用await方法告诉CyclicBarrier到达了栅栏，然后当前线程被阻塞。\n另一个构造函数的第二个参数代表所有线程都到达栅栏时，优先执行的动作（barrierAction）。\n\n#### await\n\n```\npublic int await() throws InterruptedException, BrokenBarrierException {\n    try {\n        return dowait(false, 0L);\n    } catch (TimeoutException toe) {\n        throw new Error(toe); // cannot happen\n    }\n}\npublic int await(long timeout, TimeUnit unit)\n    throws InterruptedException,\n           BrokenBarrierException,\n           TimeoutException {\n    return dowait(true, unit.toNanos(timeout));\n}\n```\n\nawait方法有两个，默认的没有设置超时等待，第二个设置了超市等待的时间，两个方法最终都是调用的dowait来完成的。\n\n```\nprivate int dowait(boolean timed, long nanos)\n    throws InterruptedException, BrokenBarrierException,\n           TimeoutException {\n    final ReentrantLock lock = this.lock;\n    lock.lock();//独占式加锁\n    try {\n        final Generation g = generation;\n        if (g.broken)//broken为true抛异常，默认为false\n            throw new BrokenBarrierException();\n        if (Thread.interrupted()) {//线程中断了\n            breakBarrier();//broken为true 通知阻塞在栅栏上的其他线程\n            throw new InterruptedException();\n        }\n        int index = --count;//获取下标\n        if (index == 0) {  // tripped  如果是0，则说明最后一个线程调用了此方法\n            boolean ranAction = false;\n            try {\n                final Runnable command = barrierCommand;\n                if (command != null)\n                    command.run(); //如果command不为空 就先执行 最后的动作\n                ranAction = true;//执行完\n                nextGeneration();//唤醒所有阻塞的线程并重新初始化\n                return 0;\n            } finally {\n                if (!ranAction)//如果执行栅栏任务的时候失败了，就将broken设置为true\n                    breakBarrier();\n            }\n        }\n        for (;;) {//最后一个线程还没执行到\n            try {\n                if (!timed)//没有时间限制 则直接阻塞等待，直到被唤醒\n                    trip.await();\n                else if (nanos > 0L)\n                    nanos = trip.awaitNanos(nanos);//阻塞指定时间\n            } catch (InterruptedException ie) {\n                if (g == generation && ! g.broken) {//当前代broken是false，设置broken为false，抛异常，代表此待结束\n                    breakBarrier();\n                    throw ie;\n                } else {\n                    Thread.currentThread().interrupt();//不是当前代，中断标记\n                }\n            }\n            if (g.broken)// 当有任何一个线程中断了，会唤醒其他线程，剩余线程也要跑异常\n                throw new BrokenBarrierException();\n\n            if (g != generation)//换代 （因为一个线程可以使用多个栅栏，当别的栅栏唤醒了这个线程，就会走到这里，所以需要判断是否是当前代。）\n                return index;\n            // 如果有时间限制，且时间小于等于0，销毁栅栏并抛出异常\n            if (timed && nanos <= 0L) {\n                breakBarrier();\n                throw new TimeoutException();\n            }\n        }\n    } finally {\n        lock.unlock();\n    }\n}\n```\n\n如果该线程不是最后一个调用await方法的线程，则它会一直处于等待状态，除非发生以下情况：\n\n- 最后一个线程到达，即index == 0\n- 某个参与线程等待超时\n- 某个参与线程被中断\n- 调用了CyclicBarrier的reset()方法。重新初始化栅栏\n\n### 总结\n\n- CyclicBarrier使用ReentrantLock独占锁来执行await，并发性会受影响。\n- 如果等待过程，线程被中断了就会抛异常。\n- 如果线程被其他的CyclicBarrier线程唤醒，g肯定是当前代，循环阻塞。否则是被当前CyclicBarrier唤醒的，返回下标完成一次全抵达栅栏的过程。\n","slug":"javasource/util/7_CyclicBarrier","published":1,"updated":"2020-01-02T05:49:23.769Z","layout":"post","photos":[],"link":"","_id":"ck6lvszv2008fn0ztyn7j8ozv","content":"<h3 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h3><p>CyclicBarrier我们叫做栅栏，其实与CountDownLatch的功能类似（CyclicBarrier也可实现CountDownLatch的功能），都是等待多个线程执行完成之后在进行最后的动作，只不过CountDownLatch是一次性的，而CyclicBarrier是可循环的</p>\n<blockquote>\n<p>CyclicBarrier可以使一定数量的线程反复地在栅栏位置处汇集。当线程到达栅栏位置时将调用await方法，这个方法将阻塞直到所有线程都到达栅栏位置。如果所有线程都到达栅栏位置，那么栅栏将打开，此时所有的线程都将被释放，而栅栏将被重置以便下次使用。</p>\n</blockquote>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><p>CyclicBarrier内部主要使用了ReentrantLock和Condition两个类。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CyclicBarrier(int parties, Runnable barrierAction) &#123;</div><div class=\"line\">    if (parties &lt;= 0) throw new IllegalArgumentException();</div><div class=\"line\">    this.parties = parties;</div><div class=\"line\">    this.count = parties;</div><div class=\"line\">    this.barrierCommand = barrierAction;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public CyclicBarrier(int parties) &#123;</div><div class=\"line\">    this(parties, null);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>CyclicBarrier默认的构造函数设置了栅栏拦截的线程数量，每个线程使用await方法告诉CyclicBarrier到达了栅栏，然后当前线程被阻塞。<br>另一个构造函数的第二个参数代表所有线程都到达栅栏时，优先执行的动作（barrierAction）。</p>\n<h4 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int await() throws InterruptedException, BrokenBarrierException &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        return dowait(false, 0L);</div><div class=\"line\">    &#125; catch (TimeoutException toe) &#123;</div><div class=\"line\">        throw new Error(toe); // cannot happen</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">public int await(long timeout, TimeUnit unit)</div><div class=\"line\">    throws InterruptedException,</div><div class=\"line\">           BrokenBarrierException,</div><div class=\"line\">           TimeoutException &#123;</div><div class=\"line\">    return dowait(true, unit.toNanos(timeout));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>await方法有两个，默认的没有设置超时等待，第二个设置了超市等待的时间，两个方法最终都是调用的dowait来完成的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">private int dowait(boolean timed, long nanos)</div><div class=\"line\">    throws InterruptedException, BrokenBarrierException,</div><div class=\"line\">           TimeoutException &#123;</div><div class=\"line\">    final ReentrantLock lock = this.lock;</div><div class=\"line\">    lock.lock();//独占式加锁</div><div class=\"line\">    try &#123;</div><div class=\"line\">        final Generation g = generation;</div><div class=\"line\">        if (g.broken)//broken为true抛异常，默认为false</div><div class=\"line\">            throw new BrokenBarrierException();</div><div class=\"line\">        if (Thread.interrupted()) &#123;//线程中断了</div><div class=\"line\">            breakBarrier();//broken为true 通知阻塞在栅栏上的其他线程</div><div class=\"line\">            throw new InterruptedException();</div><div class=\"line\">        &#125;</div><div class=\"line\">        int index = --count;//获取下标</div><div class=\"line\">        if (index == 0) &#123;  // tripped  如果是0，则说明最后一个线程调用了此方法</div><div class=\"line\">            boolean ranAction = false;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                final Runnable command = barrierCommand;</div><div class=\"line\">                if (command != null)</div><div class=\"line\">                    command.run(); //如果command不为空 就先执行 最后的动作</div><div class=\"line\">                ranAction = true;//执行完</div><div class=\"line\">                nextGeneration();//唤醒所有阻塞的线程并重新初始化</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                if (!ranAction)//如果执行栅栏任务的时候失败了，就将broken设置为true</div><div class=\"line\">                    breakBarrier();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (;;) &#123;//最后一个线程还没执行到</div><div class=\"line\">            try &#123;</div><div class=\"line\">                if (!timed)//没有时间限制 则直接阻塞等待，直到被唤醒</div><div class=\"line\">                    trip.await();</div><div class=\"line\">                else if (nanos &gt; 0L)</div><div class=\"line\">                    nanos = trip.awaitNanos(nanos);//阻塞指定时间</div><div class=\"line\">            &#125; catch (InterruptedException ie) &#123;</div><div class=\"line\">                if (g == generation &amp;&amp; ! g.broken) &#123;//当前代broken是false，设置broken为false，抛异常，代表此待结束</div><div class=\"line\">                    breakBarrier();</div><div class=\"line\">                    throw ie;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    Thread.currentThread().interrupt();//不是当前代，中断标记</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (g.broken)// 当有任何一个线程中断了，会唤醒其他线程，剩余线程也要跑异常</div><div class=\"line\">                throw new BrokenBarrierException();</div><div class=\"line\"></div><div class=\"line\">            if (g != generation)//换代 （因为一个线程可以使用多个栅栏，当别的栅栏唤醒了这个线程，就会走到这里，所以需要判断是否是当前代。）</div><div class=\"line\">                return index;</div><div class=\"line\">            // 如果有时间限制，且时间小于等于0，销毁栅栏并抛出异常</div><div class=\"line\">            if (timed &amp;&amp; nanos &lt;= 0L) &#123;</div><div class=\"line\">                breakBarrier();</div><div class=\"line\">                throw new TimeoutException();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        lock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果该线程不是最后一个调用await方法的线程，则它会一直处于等待状态，除非发生以下情况：</p>\n<ul>\n<li>最后一个线程到达，即index == 0</li>\n<li>某个参与线程等待超时</li>\n<li>某个参与线程被中断</li>\n<li>调用了CyclicBarrier的reset()方法。重新初始化栅栏</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>CyclicBarrier使用ReentrantLock独占锁来执行await，并发性会受影响。</li>\n<li>如果等待过程，线程被中断了就会抛异常。</li>\n<li>如果线程被其他的CyclicBarrier线程唤醒，g肯定是当前代，循环阻塞。否则是被当前CyclicBarrier唤醒的，返回下标完成一次全抵达栅栏的过程。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a>CyclicBarrier</h3><p>CyclicBarrier我们叫做栅栏，其实与CountDownLatch的功能类似（CyclicBarrier也可实现CountDownLatch的功能），都是等待多个线程执行完成之后在进行最后的动作，只不过CountDownLatch是一次性的，而CyclicBarrier是可循环的</p>\n<blockquote>\n<p>CyclicBarrier可以使一定数量的线程反复地在栅栏位置处汇集。当线程到达栅栏位置时将调用await方法，这个方法将阻塞直到所有线程都到达栅栏位置。如果所有线程都到达栅栏位置，那么栅栏将打开，此时所有的线程都将被释放，而栅栏将被重置以便下次使用。</p>\n</blockquote>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><p>CyclicBarrier内部主要使用了ReentrantLock和Condition两个类。</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public CyclicBarrier(int parties, Runnable barrierAction) &#123;</div><div class=\"line\">    if (parties &lt;= 0) throw new IllegalArgumentException();</div><div class=\"line\">    this.parties = parties;</div><div class=\"line\">    this.count = parties;</div><div class=\"line\">    this.barrierCommand = barrierAction;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public CyclicBarrier(int parties) &#123;</div><div class=\"line\">    this(parties, null);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>CyclicBarrier默认的构造函数设置了栅栏拦截的线程数量，每个线程使用await方法告诉CyclicBarrier到达了栅栏，然后当前线程被阻塞。<br>另一个构造函数的第二个参数代表所有线程都到达栅栏时，优先执行的动作（barrierAction）。</p>\n<h4 id=\"await\"><a href=\"#await\" class=\"headerlink\" title=\"await\"></a>await</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int await() throws InterruptedException, BrokenBarrierException &#123;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        return dowait(false, 0L);</div><div class=\"line\">    &#125; catch (TimeoutException toe) &#123;</div><div class=\"line\">        throw new Error(toe); // cannot happen</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">public int await(long timeout, TimeUnit unit)</div><div class=\"line\">    throws InterruptedException,</div><div class=\"line\">           BrokenBarrierException,</div><div class=\"line\">           TimeoutException &#123;</div><div class=\"line\">    return dowait(true, unit.toNanos(timeout));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>await方法有两个，默认的没有设置超时等待，第二个设置了超市等待的时间，两个方法最终都是调用的dowait来完成的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">private int dowait(boolean timed, long nanos)</div><div class=\"line\">    throws InterruptedException, BrokenBarrierException,</div><div class=\"line\">           TimeoutException &#123;</div><div class=\"line\">    final ReentrantLock lock = this.lock;</div><div class=\"line\">    lock.lock();//独占式加锁</div><div class=\"line\">    try &#123;</div><div class=\"line\">        final Generation g = generation;</div><div class=\"line\">        if (g.broken)//broken为true抛异常，默认为false</div><div class=\"line\">            throw new BrokenBarrierException();</div><div class=\"line\">        if (Thread.interrupted()) &#123;//线程中断了</div><div class=\"line\">            breakBarrier();//broken为true 通知阻塞在栅栏上的其他线程</div><div class=\"line\">            throw new InterruptedException();</div><div class=\"line\">        &#125;</div><div class=\"line\">        int index = --count;//获取下标</div><div class=\"line\">        if (index == 0) &#123;  // tripped  如果是0，则说明最后一个线程调用了此方法</div><div class=\"line\">            boolean ranAction = false;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                final Runnable command = barrierCommand;</div><div class=\"line\">                if (command != null)</div><div class=\"line\">                    command.run(); //如果command不为空 就先执行 最后的动作</div><div class=\"line\">                ranAction = true;//执行完</div><div class=\"line\">                nextGeneration();//唤醒所有阻塞的线程并重新初始化</div><div class=\"line\">                return 0;</div><div class=\"line\">            &#125; finally &#123;</div><div class=\"line\">                if (!ranAction)//如果执行栅栏任务的时候失败了，就将broken设置为true</div><div class=\"line\">                    breakBarrier();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (;;) &#123;//最后一个线程还没执行到</div><div class=\"line\">            try &#123;</div><div class=\"line\">                if (!timed)//没有时间限制 则直接阻塞等待，直到被唤醒</div><div class=\"line\">                    trip.await();</div><div class=\"line\">                else if (nanos &gt; 0L)</div><div class=\"line\">                    nanos = trip.awaitNanos(nanos);//阻塞指定时间</div><div class=\"line\">            &#125; catch (InterruptedException ie) &#123;</div><div class=\"line\">                if (g == generation &amp;&amp; ! g.broken) &#123;//当前代broken是false，设置broken为false，抛异常，代表此待结束</div><div class=\"line\">                    breakBarrier();</div><div class=\"line\">                    throw ie;</div><div class=\"line\">                &#125; else &#123;</div><div class=\"line\">                    Thread.currentThread().interrupt();//不是当前代，中断标记</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (g.broken)// 当有任何一个线程中断了，会唤醒其他线程，剩余线程也要跑异常</div><div class=\"line\">                throw new BrokenBarrierException();</div><div class=\"line\"></div><div class=\"line\">            if (g != generation)//换代 （因为一个线程可以使用多个栅栏，当别的栅栏唤醒了这个线程，就会走到这里，所以需要判断是否是当前代。）</div><div class=\"line\">                return index;</div><div class=\"line\">            // 如果有时间限制，且时间小于等于0，销毁栅栏并抛出异常</div><div class=\"line\">            if (timed &amp;&amp; nanos &lt;= 0L) &#123;</div><div class=\"line\">                breakBarrier();</div><div class=\"line\">                throw new TimeoutException();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        lock.unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果该线程不是最后一个调用await方法的线程，则它会一直处于等待状态，除非发生以下情况：</p>\n<ul>\n<li>最后一个线程到达，即index == 0</li>\n<li>某个参与线程等待超时</li>\n<li>某个参与线程被中断</li>\n<li>调用了CyclicBarrier的reset()方法。重新初始化栅栏</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>CyclicBarrier使用ReentrantLock独占锁来执行await，并发性会受影响。</li>\n<li>如果等待过程，线程被中断了就会抛异常。</li>\n<li>如果线程被其他的CyclicBarrier线程唤醒，g肯定是当前代，循环阻塞。否则是被当前CyclicBarrier唤醒的，返回下标完成一次全抵达栅栏的过程。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck6lvszmv0001n0zta3g578go","category_id":"ck6lvszmz0003n0ztmqql6n0l","_id":"ck6lvszn20007n0zti44kkqmr"},{"post_id":"ck6lvszrj000dn0ztowmb5nxz","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszro000jn0ztcrqq32bm"},{"post_id":"ck6lvszrh0008n0zt8xxuhfd6","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrq000on0ztb43n4932"},{"post_id":"ck6lvszrk000en0zt9lnefceu","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrr000rn0ztx5vk9jyb"},{"post_id":"ck6lvszrn000in0ztplf8edey","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrs000un0ztwqyj2kx4"},{"post_id":"ck6lvszri0009n0zt742vxfnd","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrt000xn0ztdde77umy"},{"post_id":"ck6lvszro000ln0zt67z7or19","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszru0010n0zt1sbcotja"},{"post_id":"ck6lvszrq000qn0ztdokch5uq","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszru0013n0ztqa4nme8p"},{"post_id":"ck6lvszri000cn0zty6p83tka","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrv0016n0zt41735kyc"},{"post_id":"ck6lvszrr000tn0zt65n03d9y","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrw0019n0ztb0c5xh9x"},{"post_id":"ck6lvszrs000wn0zt4mzjwxqx","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrx001cn0ztlzg7v6qu"},{"post_id":"ck6lvszrt000zn0ztv4d4lxok","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszrx001fn0zte9bk2lwz"},{"post_id":"ck6lvszru0012n0ztatfexnkm","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszry001in0ztzi0bkquw"},{"post_id":"ck6lvszrv0015n0zt27ys9ap4","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszs0001ln0zt2ayep46g"},{"post_id":"ck6lvszrv0018n0zt3m5z63c3","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszs1001on0ztokuh0rl8"},{"post_id":"ck6lvszrw001bn0zt9ykmm1fh","category_id":"ck6lvszmz0003n0ztmqql6n0l","_id":"ck6lvszs2001rn0ztoxa4x2p8"},{"post_id":"ck6lvszrx001en0ztilfa7mme","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszs2001wn0ztn2cicx9o"},{"post_id":"ck6lvszrx001hn0zt9fr9uls0","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszs3001zn0zt7xh8imqd"},{"post_id":"ck6lvszry001kn0zttpvcfnzx","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszs40022n0ztjstgybuq"},{"post_id":"ck6lvszs0001nn0zt9z6iwxlg","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszs50027n0ztme8cxttm"},{"post_id":"ck6lvszs2001tn0ztj39adhqs","category_id":"ck6lvszri000an0ztw3t55ws0","_id":"ck6lvszs6002an0ztyinu78sl"},{"post_id":"ck6lvszs1001qn0zt6492qdov","category_id":"ck6lvszs2001un0ztpsw22hl3","_id":"ck6lvszs7002fn0zttjx2ji3p"},{"post_id":"ck6lvszs3001yn0zt74fo401g","category_id":"ck6lvszs50025n0ztgvj4i59n","_id":"ck6lvszs8002jn0zt2hxg62qg"},{"post_id":"ck6lvszs30021n0ztpy3mxd5u","category_id":"ck6lvszs6002dn0ztv94kvlgb","_id":"ck6lvszsa002on0ztu77gky5j"},{"post_id":"ck6lvszs40024n0zt3gai4tyg","category_id":"ck6lvszs6002dn0ztv94kvlgb","_id":"ck6lvszsd002un0zthbrtd6hd"},{"post_id":"ck6lvszs50029n0zttkdeygmd","category_id":"ck6lvszs6002dn0ztv94kvlgb","_id":"ck6lvszse0030n0ztdy67f4ii"},{"post_id":"ck6lvszs6002cn0zt8qwf379e","category_id":"ck6lvszsd002vn0ztmqrxlpp4","_id":"ck6lvszsg0035n0zti69vj1cl"},{"post_id":"ck6lvszs7002gn0ztw6g7kpkq","category_id":"ck6lvszse0031n0zty88gwslr","_id":"ck6lvszsi003bn0ztyci9i0ga"},{"post_id":"ck6lvszs9002mn0ztrgpjcvss","category_id":"ck6lvszsk003en0zt2snvm7s1","_id":"ck6lvszsp003on0zt3f4mrpfe"},{"post_id":"ck6lvszsc002tn0zt527rx5cr","category_id":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszst0041n0ztkx7dmo3d"},{"post_id":"ck6lvszsf0034n0ztgqqw1umm","category_id":"ck6lvszsu0047n0ztltgn7gud","_id":"ck6lvszsv004dn0ztpsv32juz"},{"post_id":"ck6lvszsg0036n0ztjv8ne0q5","category_id":"ck6lvszsu0047n0ztltgn7gud","_id":"ck6lvszsv004gn0ztlw21r4vx"},{"post_id":"ck6lvszsh0039n0ztlnpnzm8o","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszsw004ln0zthc94ihd8"},{"post_id":"ck6lvszs8002in0ztglg5lrld","category_id":"ck6lvszsg0037n0ztemwrxdc6","_id":"ck6lvszsx004on0ztnpgk4x6r"},{"post_id":"ck6lvszs8002in0ztglg5lrld","category_id":"ck6lvszsw004in0ztmrez0op9","_id":"ck6lvszsx004qn0zthlinrsdk"},{"post_id":"ck6lvszsi003cn0ztw8pufzt5","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszsy004sn0ztihf4upv6"},{"post_id":"ck6lvszsl003gn0zt2ql6isbg","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszsz004xn0ztupl3t9n6"},{"post_id":"ck6lvszsm003in0ztsaayv45m","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszt00052n0ztfndhtjgt"},{"post_id":"ck6lvszsn003ln0ztnihfiv3l","category_id":"ck6lvszsz004yn0ztu1t09axw","_id":"ck6lvszt00055n0ztmaqcx49n"},{"post_id":"ck6lvszso003nn0ztks5bmyyx","category_id":"ck6lvszt00053n0ztl2lcajbj","_id":"ck6lvszt1005an0zt31za64r2"},{"post_id":"ck6lvszsa002nn0zta9jcv1qx","category_id":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt1005dn0ztyekdpbzn"},{"post_id":"ck6lvszsa002nn0zta9jcv1qx","category_id":"ck6lvszt00057n0ztjh2b6pe1","_id":"ck6lvszt2005gn0ztedkj7094"},{"post_id":"ck6lvszsq003sn0ztgmixa2es","category_id":"ck6lvszt1005bn0ztm0rhnkbw","_id":"ck6lvszt2005jn0zt5s1qjip7"},{"post_id":"ck6lvszsd002yn0zty4vp3lrr","category_id":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt4005sn0zts4gt2buc"},{"post_id":"ck6lvszsd002yn0zty4vp3lrr","category_id":"ck6lvszt3005nn0zt0brl5be8","_id":"ck6lvszt4005un0ztope34qjk"},{"post_id":"ck6lvszse002zn0ztmshwzgi1","category_id":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt5005wn0ztdgqs9xow"},{"post_id":"ck6lvszse002zn0ztmshwzgi1","category_id":"ck6lvszt4005qn0zt89dflbu8","_id":"ck6lvszt5005zn0zt11uzozwy"},{"post_id":"ck6lvszse0032n0zt7swpe7kv","category_id":"ck6lvszsm003jn0ztkr5djvof","_id":"ck6lvszt70063n0ztbpy7dmdj"},{"post_id":"ck6lvszse0032n0zt7swpe7kv","category_id":"ck6lvszt4005tn0ztrvuz6nld","_id":"ck6lvszt70065n0ztfpgxf92s"},{"post_id":"ck6lvszsr003tn0ztjq5earnw","category_id":"ck6lvszt00053n0ztl2lcajbj","_id":"ck6lvszt80067n0zt9m8moyjw"},{"post_id":"ck6lvszsr003tn0ztjq5earnw","category_id":"ck6lvszt5005yn0ztg365rdzt","_id":"ck6lvszt80068n0ztw2uiubjb"},{"post_id":"ck6lvszsb002rn0ztu04696gw","category_id":"ck6lvszsg0037n0ztemwrxdc6","_id":"ck6lvszt8006bn0zt9kctp0ty"},{"post_id":"ck6lvszsb002rn0ztu04696gw","category_id":"ck6lvszt2005kn0zt4y5n3yl6","_id":"ck6lvszt9006en0ztrg8llks1"},{"post_id":"ck6lvszsb002rn0ztu04696gw","category_id":"ck6lvszt70064n0ztjaau5v32","_id":"ck6lvszt9006gn0zta0kkxc95"},{"post_id":"ck6lvszuu007rn0ztcroi7c0h","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszuw007vn0ztatx547mv"},{"post_id":"ck6lvszuu007sn0ztgun1wvse","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszux007xn0ztdhg3cc0s"},{"post_id":"ck6lvszuv007un0ztrmmwwyft","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszuy0081n0ztnbl3mzi5"},{"post_id":"ck6lvszuw007wn0ztgr43r52e","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszuy0084n0ztrt77gx8l"},{"post_id":"ck6lvszux007yn0ztj5dxin6a","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszuz0088n0zt1zwquira"},{"post_id":"ck6lvszuy0082n0ztmw4n7lto","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszv1008bn0ztl42lhlji"},{"post_id":"ck6lvszuy0085n0ztji9t3b9p","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszv2008en0ztwr3yrfax"},{"post_id":"ck6lvszv00089n0ztj6jhik7y","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszv4008gn0ztch9p0snl"},{"post_id":"ck6lvszv1008cn0ztco2eaq67","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszv5008hn0ztiqn1j2kj"},{"post_id":"ck6lvszv2008fn0ztyn7j8ozv","category_id":"ck6lvszsv004en0zt02oxi9vr","_id":"ck6lvszv5008kn0ztyp495uy0"}],"PostTag":[{"post_id":"ck6lvszmv0001n0zta3g578go","tag_id":"ck6lvszn00004n0ztqon6xe9d","_id":"ck6lvszn20006n0ztrxj0lmar"},{"post_id":"ck6lvszrj000dn0ztowmb5nxz","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrn000hn0ztgbhfsnm1"},{"post_id":"ck6lvszrh0008n0zt8xxuhfd6","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszro000kn0zt6ml1l9vg"},{"post_id":"ck6lvszrk000en0zt9lnefceu","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrq000pn0ztjeb37od3"},{"post_id":"ck6lvszrn000in0ztplf8edey","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrr000sn0ztfhamdgmb"},{"post_id":"ck6lvszri0009n0zt742vxfnd","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrs000vn0ztlq1tlbxo"},{"post_id":"ck6lvszro000ln0zt67z7or19","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrt000yn0zt87rwarcz"},{"post_id":"ck6lvszrq000qn0ztdokch5uq","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszru0011n0ztctkrgbhk"},{"post_id":"ck6lvszri000cn0zty6p83tka","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszru0014n0ztnjlyqnmb"},{"post_id":"ck6lvszrr000tn0zt65n03d9y","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrv0017n0ztlsk8mrcd"},{"post_id":"ck6lvszrs000wn0zt4mzjwxqx","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrw001an0zt7inrwgrf"},{"post_id":"ck6lvszrt000zn0ztv4d4lxok","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrx001dn0zt6nlmi802"},{"post_id":"ck6lvszru0012n0ztatfexnkm","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszrx001gn0zt3714vejc"},{"post_id":"ck6lvszrv0015n0zt27ys9ap4","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszry001jn0ztk73nqjz9"},{"post_id":"ck6lvszrv0018n0zt3m5z63c3","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszs0001mn0zt3cczbqub"},{"post_id":"ck6lvszrw001bn0zt9ykmm1fh","tag_id":"ck6lvszn00004n0ztqon6xe9d","_id":"ck6lvszs1001pn0ztlryyd74y"},{"post_id":"ck6lvszrx001en0ztilfa7mme","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszs2001sn0ztixh6enn9"},{"post_id":"ck6lvszrx001hn0zt9fr9uls0","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszs3001xn0ztf28x744e"},{"post_id":"ck6lvszry001kn0zttpvcfnzx","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszs30020n0zt4ciasaev"},{"post_id":"ck6lvszs0001nn0zt9z6iwxlg","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszs40023n0zt8s0jv5u1"},{"post_id":"ck6lvszs2001tn0ztj39adhqs","tag_id":"ck6lvszri000bn0ztvzxqdh42","_id":"ck6lvszs50028n0ztpzvljytb"},{"post_id":"ck6lvszs1001qn0zt6492qdov","tag_id":"ck6lvszs2001vn0ztsg08qbuv","_id":"ck6lvszs6002bn0ztudiaxo6m"},{"post_id":"ck6lvszs3001yn0zt74fo401g","tag_id":"ck6lvszs50026n0zt7lg7xgdl","_id":"ck6lvszs7002hn0ztixweqmua"},{"post_id":"ck6lvszs30021n0ztpy3mxd5u","tag_id":"ck6lvszs7002en0ztzasxlh4q","_id":"ck6lvszsc002sn0ztdj3w1p3r"},{"post_id":"ck6lvszs30021n0ztpy3mxd5u","tag_id":"ck6lvszs8002ln0ztzd6fmn95","_id":"ck6lvszsd002wn0ztjpu6vqls"},{"post_id":"ck6lvszs40024n0zt3gai4tyg","tag_id":"ck6lvszs7002en0ztzasxlh4q","_id":"ck6lvszsi003an0ztx4o4u3kv"},{"post_id":"ck6lvszs40024n0zt3gai4tyg","tag_id":"ck6lvszsd002xn0zt6xh7ngap","_id":"ck6lvszsk003dn0zt523trr9x"},{"post_id":"ck6lvszs40024n0zt3gai4tyg","tag_id":"ck6lvszsf0033n0ztuj84q5ur","_id":"ck6lvszsm003hn0ztt7g97idg"},{"post_id":"ck6lvszs50029n0zttkdeygmd","tag_id":"ck6lvszs7002en0ztzasxlh4q","_id":"ck6lvszso003mn0zt5otbj1t9"},{"post_id":"ck6lvszs50029n0zttkdeygmd","tag_id":"ck6lvszsk003fn0ztkch5ushg","_id":"ck6lvszsp003pn0ztzwajhmpi"},{"post_id":"ck6lvszs6002cn0zt8qwf379e","tag_id":"ck6lvszsd002xn0zt6xh7ngap","_id":"ck6lvszss003wn0zterxq9obu"},{"post_id":"ck6lvszs6002cn0zt8qwf379e","tag_id":"ck6lvszsp003qn0ztxtfb5mgy","_id":"ck6lvszss003xn0zt5h9dbveu"},{"post_id":"ck6lvszs7002gn0ztw6g7kpkq","tag_id":"ck6lvszsr003vn0ztr2qne8o6","_id":"ck6lvszss0040n0zt7o83jwir"},{"post_id":"ck6lvszs8002in0ztglg5lrld","tag_id":"ck6lvszss003zn0ztcow042r9","_id":"ck6lvszsu0046n0zt8ynmjxdp"},{"post_id":"ck6lvszs8002in0ztglg5lrld","tag_id":"ck6lvszst0043n0zt6cxamfyr","_id":"ck6lvszsu0048n0zt6yhw1b9k"},{"post_id":"ck6lvszs9002mn0ztrgpjcvss","tag_id":"ck6lvszst0045n0ztg1pb18ug","_id":"ck6lvszsu004an0ztvyj9fqtl"},{"post_id":"ck6lvszsa002nn0zta9jcv1qx","tag_id":"ck6lvszsu0049n0ztyp6f9mia","_id":"ck6lvszsv004hn0zt3w0urnge"},{"post_id":"ck6lvszsa002nn0zta9jcv1qx","tag_id":"ck6lvszsu004cn0ztoougwn6s","_id":"ck6lvszsw004jn0ztsikxkeq4"},{"post_id":"ck6lvszsb002rn0ztu04696gw","tag_id":"ck6lvszss003zn0ztcow042r9","_id":"ck6lvszsy004un0zt5bkwjn8t"},{"post_id":"ck6lvszsb002rn0ztu04696gw","tag_id":"ck6lvszsw004kn0ztukwd58mg","_id":"ck6lvszsz004vn0ztz3uqat9x"},{"post_id":"ck6lvszsb002rn0ztu04696gw","tag_id":"ck6lvszsw004nn0zt99gdrp04","_id":"ck6lvszsz004zn0ztzha2hqz4"},{"post_id":"ck6lvszsc002tn0zt527rx5cr","tag_id":"ck6lvszsu0049n0ztyp6f9mia","_id":"ck6lvszsz0050n0ztxada8sga"},{"post_id":"ck6lvszsd002yn0zty4vp3lrr","tag_id":"ck6lvszsu0049n0ztyp6f9mia","_id":"ck6lvszt00056n0ztisbwnw52"},{"post_id":"ck6lvszsd002yn0zty4vp3lrr","tag_id":"ck6lvszsz0051n0ztxt67qwga","_id":"ck6lvszt00058n0ztyu93xbmp"},{"post_id":"ck6lvszse002zn0ztmshwzgi1","tag_id":"ck6lvszsu0049n0ztyp6f9mia","_id":"ck6lvszt1005en0zt3ltzy9n5"},{"post_id":"ck6lvszse002zn0ztmshwzgi1","tag_id":"ck6lvszt00059n0zt1epwwwbw","_id":"ck6lvszt2005hn0zt1gcp68sf"},{"post_id":"ck6lvszse0032n0zt7swpe7kv","tag_id":"ck6lvszsu0049n0ztyp6f9mia","_id":"ck6lvszt3005mn0ztt8t23xdo"},{"post_id":"ck6lvszse0032n0zt7swpe7kv","tag_id":"ck6lvszt2005in0ztgr2nkz47","_id":"ck6lvszt4005on0zt1jpmmkz7"},{"post_id":"ck6lvszsf0034n0ztgqqw1umm","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszt5005xn0ztx6ryrhir"},{"post_id":"ck6lvszsf0034n0ztgqqw1umm","tag_id":"ck6lvszt4005pn0ztno72gpll","_id":"ck6lvszt50060n0zt2kw1avwi"},{"post_id":"ck6lvszsf0034n0ztgqqw1umm","tag_id":"ck6lvszt4005rn0ztn1h5vj6u","_id":"ck6lvszt70062n0ztgqje6l4k"},{"post_id":"ck6lvszsg0036n0ztjv8ne0q5","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszt8006an0ztn8dhtz5u"},{"post_id":"ck6lvszsg0036n0ztjv8ne0q5","tag_id":"ck6lvszt4005pn0ztno72gpll","_id":"ck6lvszt8006cn0ztt5yq6wm0"},{"post_id":"ck6lvszsg0036n0ztjv8ne0q5","tag_id":"ck6lvszt70066n0zte4eyjxq1","_id":"ck6lvszt9006fn0ztksimuo0k"},{"post_id":"ck6lvszsh0039n0ztlnpnzm8o","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszt9006jn0ztylq5czp3"},{"post_id":"ck6lvszsh0039n0ztlnpnzm8o","tag_id":"ck6lvszt9006dn0zto5ofxiz7","_id":"ck6lvszt9006kn0zt1qqosbna"},{"post_id":"ck6lvszsh0039n0ztlnpnzm8o","tag_id":"ck6lvszt9006hn0ztt9imhbqt","_id":"ck6lvszta006mn0zt954lnpt5"},{"post_id":"ck6lvszsi003cn0ztw8pufzt5","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszta006pn0zto6nf8aus"},{"post_id":"ck6lvszsi003cn0ztw8pufzt5","tag_id":"ck6lvszta006ln0ztvcfml2jl","_id":"ck6lvsztb006qn0ztsw8nnl1k"},{"post_id":"ck6lvszsi003cn0ztw8pufzt5","tag_id":"ck6lvszt9006hn0ztt9imhbqt","_id":"ck6lvsztb006sn0zt3envdncs"},{"post_id":"ck6lvszsl003gn0zt2ql6isbg","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvsztc006wn0zt8acips7v"},{"post_id":"ck6lvszsl003gn0zt2ql6isbg","tag_id":"ck6lvsztb006rn0ztvdw8f1rk","_id":"ck6lvsztc006xn0ztt1fplo5x"},{"post_id":"ck6lvszsl003gn0zt2ql6isbg","tag_id":"ck6lvsztb006tn0zt63qgs4as","_id":"ck6lvsztd006zn0ztho3qnjn6"},{"post_id":"ck6lvszsl003gn0zt2ql6isbg","tag_id":"ck6lvszt9006hn0ztt9imhbqt","_id":"ck6lvsztd0070n0zttqr73q8e"},{"post_id":"ck6lvszsm003in0ztsaayv45m","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszte0076n0ztewfmbkhp"},{"post_id":"ck6lvszsm003in0ztsaayv45m","tag_id":"ck6lvsztc006yn0zt35oln1by","_id":"ck6lvsztf0077n0ztyi4qml0p"},{"post_id":"ck6lvszsm003in0ztsaayv45m","tag_id":"ck6lvsztd0071n0ztlohhe3uw","_id":"ck6lvsztf0079n0zto0pqbqk3"},{"post_id":"ck6lvszsm003in0ztsaayv45m","tag_id":"ck6lvsztd0072n0zto882cwxk","_id":"ck6lvsztf007an0ztfvvv43bj"},{"post_id":"ck6lvszsm003in0ztsaayv45m","tag_id":"ck6lvsztd0073n0ztjuohcnpl","_id":"ck6lvsztg007cn0ztcjr0m64r"},{"post_id":"ck6lvszsm003in0ztsaayv45m","tag_id":"ck6lvsztd0074n0ztkk7hach6","_id":"ck6lvsztg007dn0ztd6j063nj"},{"post_id":"ck6lvszsn003ln0ztnihfiv3l","tag_id":"ck6lvsztb006rn0ztvdw8f1rk","_id":"ck6lvsztg007fn0ztnocjkkzh"},{"post_id":"ck6lvszsn003ln0ztnihfiv3l","tag_id":"ck6lvsztf0078n0zt6qx6chb8","_id":"ck6lvsztg007gn0ztidl7q9kc"},{"post_id":"ck6lvszso003nn0ztks5bmyyx","tag_id":"ck6lvsztg007bn0zt3is4udka","_id":"ck6lvszth007jn0ztu2iim9e2"},{"post_id":"ck6lvszso003nn0ztks5bmyyx","tag_id":"ck6lvsztg007en0zt13979fst","_id":"ck6lvszth007kn0ztti41e85z"},{"post_id":"ck6lvszso003nn0ztks5bmyyx","tag_id":"ck6lvsztg007hn0ztqwsmwxo2","_id":"ck6lvszth007mn0ztvfobdht9"},{"post_id":"ck6lvszsq003sn0ztgmixa2es","tag_id":"ck6lvsztg007in0ztr9lca2ad","_id":"ck6lvszth007nn0zt9wa4szbl"},{"post_id":"ck6lvszsr003tn0ztjq5earnw","tag_id":"ck6lvsztg007bn0zt3is4udka","_id":"ck6lvszti007pn0ztk41z6gtu"},{"post_id":"ck6lvszsr003tn0ztjq5earnw","tag_id":"ck6lvszth007on0ztczv7vvrm","_id":"ck6lvszti007qn0zteo5bz7m8"},{"post_id":"ck6lvszuw007wn0ztgr43r52e","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszuy0080n0zttl2jutw4"},{"post_id":"ck6lvszuw007wn0ztgr43r52e","tag_id":"ck6lvszta006ln0ztvcfml2jl","_id":"ck6lvszuy0083n0zt9l61ld7w"},{"post_id":"ck6lvszuu007rn0ztcroi7c0h","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszuz0087n0ztw9bvmi4j"},{"post_id":"ck6lvszuu007rn0ztcroi7c0h","tag_id":"ck6lvszuv007tn0zthfv1lx9n","_id":"ck6lvszv1008an0zth4sozwd3"},{"post_id":"ck6lvszuu007sn0ztgun1wvse","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszv5008jn0ztxcr7pswx"},{"post_id":"ck6lvszuu007sn0ztgun1wvse","tag_id":"ck6lvszux007zn0zttl5mmmui","_id":"ck6lvszv5008ln0ztrybnkm30"},{"post_id":"ck6lvszuu007sn0ztgun1wvse","tag_id":"ck6lvszuz0086n0ztxu53pn07","_id":"ck6lvszv5008nn0zthxzd6qzt"},{"post_id":"ck6lvszuu007sn0ztgun1wvse","tag_id":"ck6lvszv2008dn0zt6h1fyjji","_id":"ck6lvszv5008on0ztrar56esq"},{"post_id":"ck6lvszuv007un0ztrmmwwyft","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszv6008rn0ztvfrm3s6z"},{"post_id":"ck6lvszuv007un0ztrmmwwyft","tag_id":"ck6lvszv5008in0ztdu3xkze3","_id":"ck6lvszv6008sn0zt9rkmd5cz"},{"post_id":"ck6lvszuv007un0ztrmmwwyft","tag_id":"ck6lvszv5008mn0ztykv0ni1s","_id":"ck6lvszv6008un0zt7ryjn5jp"},{"post_id":"ck6lvszuv007un0ztrmmwwyft","tag_id":"ck6lvsztf0078n0zt6qx6chb8","_id":"ck6lvszv6008vn0zt255ch1hz"},{"post_id":"ck6lvszuv007un0ztrmmwwyft","tag_id":"ck6lvszv5008pn0zt14rc1woy","_id":"ck6lvszv7008xn0ztt9dgtg93"},{"post_id":"ck6lvszux007yn0ztj5dxin6a","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszv7008yn0ztwxxi00co"},{"post_id":"ck6lvszux007yn0ztj5dxin6a","tag_id":"ck6lvszv5008qn0ztgth9si3k","_id":"ck6lvszv70090n0zt76t2u2xh"},{"post_id":"ck6lvszuy0082n0ztmw4n7lto","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszv70093n0zt1e7wql7j"},{"post_id":"ck6lvszuy0082n0ztmw4n7lto","tag_id":"ck6lvszv6008tn0ztvg5oyp3c","_id":"ck6lvszv80094n0ztiqm4afzt"},{"post_id":"ck6lvszuy0082n0ztmw4n7lto","tag_id":"ck6lvsztf0078n0zt6qx6chb8","_id":"ck6lvszv90096n0ztgybu0q8k"},{"post_id":"ck6lvszuy0082n0ztmw4n7lto","tag_id":"ck6lvszv5008pn0zt14rc1woy","_id":"ck6lvszv90097n0zt74xg159l"},{"post_id":"ck6lvszuy0082n0ztmw4n7lto","tag_id":"ck6lvszv7008zn0zty71ybp4x","_id":"ck6lvszva0099n0ztt0n8wb3r"},{"post_id":"ck6lvszuy0082n0ztmw4n7lto","tag_id":"ck6lvszv70091n0zteejruflr","_id":"ck6lvszva009an0ztn7kdmxie"},{"post_id":"ck6lvszuy0085n0ztji9t3b9p","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszva009cn0ztdfvki0bp"},{"post_id":"ck6lvszuy0085n0ztji9t3b9p","tag_id":"ck6lvszv70092n0zt2p6ze1jp","_id":"ck6lvszva009dn0ztgncra3w6"},{"post_id":"ck6lvszuy0085n0ztji9t3b9p","tag_id":"ck6lvsztf0078n0zt6qx6chb8","_id":"ck6lvszvb009fn0zt0jerf292"},{"post_id":"ck6lvszuy0085n0ztji9t3b9p","tag_id":"ck6lvszv5008pn0zt14rc1woy","_id":"ck6lvszvb009gn0ztqhul8upn"},{"post_id":"ck6lvszv00089n0ztj6jhik7y","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszvb009in0ztw5mbaqyf"},{"post_id":"ck6lvszv00089n0ztj6jhik7y","tag_id":"ck6lvszv90098n0zt8lgfyhse","_id":"ck6lvszvb009jn0zt9336f90t"},{"post_id":"ck6lvszv00089n0ztj6jhik7y","tag_id":"ck6lvsztf0078n0zt6qx6chb8","_id":"ck6lvszvb009ln0zthbl3bhli"},{"post_id":"ck6lvszv00089n0ztj6jhik7y","tag_id":"ck6lvszv5008pn0zt14rc1woy","_id":"ck6lvszvb009mn0zt4dzmv1jz"},{"post_id":"ck6lvszv1008cn0ztco2eaq67","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszvc009nn0ztd49qhxga"},{"post_id":"ck6lvszv1008cn0ztco2eaq67","tag_id":"ck6lvszva009en0ztnvhnatwy","_id":"ck6lvszvc009pn0ztf64umyik"},{"post_id":"ck6lvszv1008cn0ztco2eaq67","tag_id":"ck6lvsztf0078n0zt6qx6chb8","_id":"ck6lvszvc009qn0zt71b8swzh"},{"post_id":"ck6lvszv1008cn0ztco2eaq67","tag_id":"ck6lvszv5008pn0zt14rc1woy","_id":"ck6lvszvc009rn0ztd6rq3eij"},{"post_id":"ck6lvszv2008fn0ztyn7j8ozv","tag_id":"ck6lvszt3005ln0zt4wodk83k","_id":"ck6lvszvc009sn0ztew5f8k66"},{"post_id":"ck6lvszv2008fn0ztyn7j8ozv","tag_id":"ck6lvszvb009kn0zttcmnc3d8","_id":"ck6lvszvc009tn0ztrz95zpo3"},{"post_id":"ck6lvszv2008fn0ztyn7j8ozv","tag_id":"ck6lvsztf0078n0zt6qx6chb8","_id":"ck6lvszvc009un0zt7z23x4lt"},{"post_id":"ck6lvszv2008fn0ztyn7j8ozv","tag_id":"ck6lvszv5008pn0zt14rc1woy","_id":"ck6lvszvd009vn0ztm81d75ht"}],"Tag":[{"name":"其他","_id":"ck6lvszn00004n0ztqon6xe9d"},{"name":"设计模式","_id":"ck6lvszri000bn0ztvzxqdh42"},{"name":"CAP","_id":"ck6lvszs2001vn0ztsg08qbuv"},{"name":"一致性hash","_id":"ck6lvszs50026n0zt7lg7xgdl"},{"name":"jvm","_id":"ck6lvszs7002en0ztzasxlh4q"},{"name":"垃圾回收","_id":"ck6lvszs8002ln0ztzd6fmn95"},{"name":"JVM","_id":"ck6lvszsd002xn0zt6xh7ngap"},{"name":"内存区域","_id":"ck6lvszsf0033n0ztuj84q5ur"},{"name":"垃圾收集器","_id":"ck6lvszsk003fn0ztkch5ushg"},{"name":"类加载机制","_id":"ck6lvszsp003qn0ztxtfb5mgy"},{"name":"JDK","_id":"ck6lvszsr003vn0ztr2qne8o6"},{"name":"mysql","_id":"ck6lvszss003zn0ztcow042r9"},{"name":"事务","_id":"ck6lvszst0043n0zt6cxamfyr"},{"name":"存储引擎","_id":"ck6lvszst0045n0ztg1pb18ug"},{"name":"redis","_id":"ck6lvszsu0049n0ztyp6f9mia"},{"name":"HyperLogLog","_id":"ck6lvszsu004cn0ztoougwn6s"},{"name":"索引","_id":"ck6lvszsw004kn0ztukwd58mg"},{"name":"B+","_id":"ck6lvszsw004nn0zt99gdrp04"},{"name":"分布式锁","_id":"ck6lvszsz0051n0ztxt67qwga"},{"name":"布隆过滤器","_id":"ck6lvszt00059n0zt1epwwwbw"},{"name":"限流","_id":"ck6lvszt2005in0ztgr2nkz47"},{"name":"java","_id":"ck6lvszt3005ln0zt4wodk83k"},{"name":"spring","_id":"ck6lvszt4005pn0ztno72gpll"},{"name":"aop","_id":"ck6lvszt4005rn0ztn1h5vj6u"},{"name":"IoC","_id":"ck6lvszt70066n0zte4eyjxq1"},{"name":"volatile","_id":"ck6lvszt9006dn0zto5ofxiz7"},{"name":"并发","_id":"ck6lvszt9006hn0ztt9imhbqt"},{"name":"ConcurrentHashMap","_id":"ck6lvszta006ln0ztvcfml2jl"},{"name":"synchronized","_id":"ck6lvsztb006rn0ztvdw8f1rk"},{"name":"lock","_id":"ck6lvsztb006tn0zt63qgs4as"},{"name":"集合","_id":"ck6lvsztc006yn0zt35oln1by"},{"name":"List","_id":"ck6lvsztd0071n0ztlohhe3uw"},{"name":"Set","_id":"ck6lvsztd0072n0zto882cwxk"},{"name":"Map","_id":"ck6lvsztd0073n0ztjuohcnpl"},{"name":"Collection","_id":"ck6lvsztd0074n0ztkk7hach6"},{"name":"锁","_id":"ck6lvsztf0078n0zt6qx6chb8"},{"name":"structure","_id":"ck6lvsztg007bn0zt3is4udka"},{"name":"trie","_id":"ck6lvsztg007en0zt13979fst"},{"name":"字典数","_id":"ck6lvsztg007hn0ztqwsmwxo2"},{"name":"zookeeper","_id":"ck6lvsztg007in0ztr9lca2ad"},{"name":"并查集","_id":"ck6lvszth007on0ztczv7vvrm"},{"name":"PriorityQueue","_id":"ck6lvszuv007tn0zthfv1lx9n"},{"name":"ExecutorService","_id":"ck6lvszux007zn0zttl5mmmui"},{"name":"ThreadPoolExecutor","_id":"ck6lvszuz0086n0ztxu53pn07"},{"name":"线程池","_id":"ck6lvszv2008dn0zt6h1fyjji"},{"name":"aqs","_id":"ck6lvszv5008in0ztdu3xkze3"},{"name":"AbstractQueuedSynchronizer","_id":"ck6lvszv5008mn0ztykv0ni1s"},{"name":"同步","_id":"ck6lvszv5008pn0zt14rc1woy"},{"name":"HashMap","_id":"ck6lvszv5008qn0ztgth9si3k"},{"name":"ReentrantLock","_id":"ck6lvszv6008tn0ztvg5oyp3c"},{"name":"公平锁","_id":"ck6lvszv7008zn0zty71ybp4x"},{"name":"非公平锁","_id":"ck6lvszv70091n0zteejruflr"},{"name":"CountDownLatch","_id":"ck6lvszv70092n0zt2p6ze1jp"},{"name":"Semaphore","_id":"ck6lvszv90098n0zt8lgfyhse"},{"name":"ReentrantReadWriteLock","_id":"ck6lvszva009en0ztnvhnatwy"},{"name":"CyclicBarrier","_id":"ck6lvszvb009kn0zttcmnc3d8"}]}}