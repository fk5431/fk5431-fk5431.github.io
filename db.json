{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/about/weixin.png","path":"about/weixin.png","modified":1,"renderable":0},{"_id":"source/about/zhifubao.png","path":"about/zhifubao.png","modified":1,"renderable":0},{"_id":"source/pay/weixin.png","path":"pay/weixin.png","modified":1,"renderable":0},{"_id":"source/pay/zhifubao.png","path":"pay/zhifubao.png","modified":1,"renderable":0},{"_id":"source/uploads/author.jpg","path":"uploads/author.jpg","modified":1,"renderable":0},{"_id":"source/uploads/concurrentHashMap.png","path":"uploads/concurrentHashMap.png","modified":1,"renderable":0},{"_id":"source/uploads/design-patterns.jpg","path":"uploads/design-patterns.jpg","modified":1,"renderable":0},{"_id":"source/uploads/double_checked_locking/double_checked_lock.png","path":"uploads/double_checked_locking/double_checked_lock.png","modified":1,"renderable":0},{"_id":"source/uploads/double_checked_locking/double_checked_lock1.png","path":"uploads/double_checked_locking/double_checked_lock1.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/zzzzzz.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"source/favicon.ico","hash":"781096cb74eaeea8e2fb26a37e810e6d688e28b4","modified":1497533730643},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1497533730000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1497533730000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1497533730000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1497533730000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1497533730000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1497533730000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1497533730000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1497533730000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1497533730000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1497533730000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1497533730000},{"_id":"themes/next/_config.yml","hash":"3f0ad0ee55913d75102664ce85d058af71c41892","modified":1497533730000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1497533730000},{"_id":"source/_posts/start.md","hash":"209edc846d5f74dcb58726f6b8162a1eac3a8703","modified":1497581846903},{"_id":"source/about/index.md","hash":"b85f4d257da3bacc586fdb13d9c609e809672f15","modified":1497533730643},{"_id":"source/about/weixin.png","hash":"57dd56fecf6f6b3b95e3eb205ca360f0656f92fd","modified":1497533730643},{"_id":"source/about/zhifubao.png","hash":"e5f1b2b91d1c3a64e0f7f72f6c78c5ead9099b76","modified":1497533730643},{"_id":"source/categories/index.md","hash":"36ac1ae42c3969427c1f1b22ae21f915b131117e","modified":1497533730643},{"_id":"source/pay/weixin.png","hash":"57dd56fecf6f6b3b95e3eb205ca360f0656f92fd","modified":1497533730647},{"_id":"source/pay/zhifubao.png","hash":"e5f1b2b91d1c3a64e0f7f72f6c78c5ead9099b76","modified":1497533730647},{"_id":"source/tags/index.md","hash":"f5f47f5675b1d4516c0312892750082ba944fb00","modified":1497533730647},{"_id":"source/uploads/author.jpg","hash":"64f368339dd0e50cb0e77ececff611f68fa8f5ca","modified":1497533730647},{"_id":"source/uploads/concurrentHashMap.png","hash":"d1ab4315b91c992435e96ab6f8575a957e86b1e8","modified":1497533730647},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1497533730000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1497533730000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1497533730000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1497533730000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1497533730000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1497533730000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1497533730000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1497533730000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1497533730000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1497533730000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1497533730000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1497533730000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1497533730000},{"_id":"themes/next/layout/_layout.swig","hash":"3b254fa8ad6016cfa8bfcfc820d169b7c9bdac47","modified":1497533730000},{"_id":"themes/next/layout/_layoutnc.swig","hash":"43edd6fb1f361dbe42cfc895329a37c5d5487384","modified":1497533730000},{"_id":"themes/next/layout/archive.swig","hash":"a576a64f5d30017a1008b88282191c326cda22f1","modified":1497533730000},{"_id":"themes/next/layout/category.swig","hash":"affe41b8a749239a889149d4951fc38d7f354dcc","modified":1497533730000},{"_id":"themes/next/layout/index.swig","hash":"06c70465ad3089aea2f3864b196a01450f745f7f","modified":1497533730000},{"_id":"themes/next/layout/page.swig","hash":"b5f8d1ba95d749f2e46c9784354456edc005d850","modified":1497533730000},{"_id":"themes/next/layout/post.swig","hash":"ec1d8e5afea9d84a16c5a09fda72a5a65306bb2b","modified":1497533730000},{"_id":"themes/next/layout/schedule.swig","hash":"5d37852199c5b512c3bfec4f503345f1dbdcac38","modified":1497533730000},{"_id":"themes/next/layout/tag.swig","hash":"c6a3bcda9a5c18f647500998f36412fe4d1274e8","modified":1497533730000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1497533730000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1497533730000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1497533730000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1497533730000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1497533730000},{"_id":"source/uploads/design-patterns.jpg","hash":"5533c4baa4a9ee3e2315d805f40f42fe7d4af6ce","modified":1497705220000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"source/_posts/Design_pattern/abstract-factory-pattern.md","hash":"e20b032b3ac42ab25b46d91b3e591e76f1f0905a","modified":1497874569431},{"_id":"source/_posts/Design_pattern/builder.md","hash":"337e882f195f1833da03163514417c1ce49c2828","modified":1500863012868},{"_id":"source/_posts/Design_pattern/double-checked-locking.md","hash":"1b9471ae944805b42c45e898588a6d0250d0f15b","modified":1500860076662},{"_id":"source/_posts/Design_pattern/factory_pattern.md","hash":"e87bd5189de1384da6c271573b1993425f5d6cf1","modified":1497709738247},{"_id":"source/_posts/Design_pattern/singleton-pattern.md","hash":"9b7e0de67dfc137e0d535eb727cc091e339d8043","modified":1497972377331},{"_id":"source/_posts/Design_pattern/start.md","hash":"d2057460c5927114659d49c51cc71c99fedee877","modified":1497737855568},{"_id":"source/_posts/java/concurrentHashMap.md","hash":"9a7dd57304cf58820deac5a635a7558829b12b69","modified":1497533730643},{"_id":"source/_posts/java/volatile.md","hash":"1fbfe352605fbd799342e74480ff6bd6e1aec642","modified":1497533730643},{"_id":"source/uploads/double_checked_locking/double_checked_lock.png","hash":"4e955d8760cc3f6a72c3ed28fc0321c7bc7153b4","modified":1497971456000},{"_id":"source/uploads/double_checked_locking/double_checked_lock1.png","hash":"ea0f57df87b459dfab9e82912d8e05f819881391","modified":1497971480000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1497533730000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1497533730000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1497533730000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1497533730000},{"_id":"themes/next/layout/_macro/post.swig","hash":"640b431eccbbd27f10c6781f33db5ea9a6e064de","modified":1497533730000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1497533730000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1497533730000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1497533730000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1497533730000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1497533730000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1497533730000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1497533730000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1497533730000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1497533730000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1497533730000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1497533730000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1497533730000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"55491984964175176e054661a7326e85fa83a7a0","modified":1497533730000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1497533730000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1497533730000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1497533730000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1497533730000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1497533730000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1497533730000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1497533730000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1497533730000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1497533730000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1497533730000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1497533730000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1497533730000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1497533730000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1497533730000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1497533730000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1497533730000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1497533730000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1497533730000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1497533730000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1497533730000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1497533730000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497533730000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497533730000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1497533730000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1497533730000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497533730000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497533730000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1497533730000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1497533730000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1497533730000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1497533730000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1497533730000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1497533730000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1497533730000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1497533730000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1497533730000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1497533730000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1497533730000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"ea3833c82c4b0851ad3c4ee2898cbfd17da3bf54","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1497533730000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1497533730000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1497533730000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1497533730000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1497533730000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1497533730000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"0bc96718d71a45d5d28b84318e7d8df9f100a57e","modified":1497533730000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1497533730000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1497533730000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1497533730000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1497533730000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1497533730000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1497533730000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1497533730000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1497533730000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1497533730000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1497533730000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1497533730000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1497533730000},{"_id":"themes/next/source/js/src/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1497533730000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1497533730000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1497533730000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1497533730000},{"_id":"themes/next/source/js/src/utils.js","hash":"2041eae5ac81c392067bfbd1bba4399cb37beea1","modified":1497533730000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497533730000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497533730000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1497533730000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1497533730000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1497533730000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1497533730000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1497533730000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1497533730000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1497533730000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1497533730000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1497533730000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1497533730000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1497533730000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1497533730000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1497533730000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1497533730000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1497533730000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1497533730000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1497533730000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1497533730000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1497533730000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1497533730000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1497533730000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1497533730000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1497533730000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1497533730000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1497533730000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1497533730000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1497533730000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1497533730000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1497533730000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1497533730000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1497533730000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1497533730000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"c196401747019d389da09b7a0fe7f27e3a0ec01f","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1497533730000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1497533730000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1497533730000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1497533730000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1497533730000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1497533730000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1497533730000}],"Category":[{"name":"其他","_id":"cj5hj5yqb00034lm3h0r4h6vw"},{"name":"设计模式","_id":"cj5hj5ytb000a4lm3krprbeib"},{"name":"java","_id":"cj5hj5yu1000t4lm3u0j5im0k"}],"Data":[],"Page":[{"title":"about","date":"2017-04-17T07:04:18.000Z","comments":0,"_content":"### fk5431的githubpage\n- [github](https://github.com/fk5431)： https://github.com/fk5431\n- [csdn](http://blog.csdn.net/fk5431)：http://blog.csdn.net/fk5431\n\n小菜鸟一个，欢迎讨论。\n\n坚持原创技术分享，您的支持将鼓励我继续创作！\n![支付宝](zhifubao.png)\n![微信](weixin.png)","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-17 15:04:18\ncomments: false\n---\n### fk5431的githubpage\n- [github](https://github.com/fk5431)： https://github.com/fk5431\n- [csdn](http://blog.csdn.net/fk5431)：http://blog.csdn.net/fk5431\n\n小菜鸟一个，欢迎讨论。\n\n坚持原创技术分享，您的支持将鼓励我继续创作！\n![支付宝](zhifubao.png)\n![微信](weixin.png)","updated":"2017-06-15T13:35:30.643Z","path":"about/index.html","layout":"page","_id":"cj5hj5yq300014lm3q0vx2vg3","content":"<h3 id=\"fk5431的githubpage\"><a href=\"#fk5431的githubpage\" class=\"headerlink\" title=\"fk5431的githubpage\"></a>fk5431的githubpage</h3><ul>\n<li><a href=\"https://github.com/fk5431\" target=\"_blank\" rel=\"external\">github</a>： <a href=\"https://github.com/fk5431\" target=\"_blank\" rel=\"external\">https://github.com/fk5431</a></li>\n<li><a href=\"http://blog.csdn.net/fk5431\" target=\"_blank\" rel=\"external\">csdn</a>：<a href=\"http://blog.csdn.net/fk5431\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/fk5431</a></li>\n</ul>\n<p>小菜鸟一个，欢迎讨论。</p>\n<p>坚持原创技术分享，您的支持将鼓励我继续创作！<br><img src=\"zhifubao.png\" alt=\"支付宝\"><br><img src=\"weixin.png\" alt=\"微信\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"fk5431的githubpage\"><a href=\"#fk5431的githubpage\" class=\"headerlink\" title=\"fk5431的githubpage\"></a>fk5431的githubpage</h3><ul>\n<li><a href=\"https://github.com/fk5431\">github</a>： <a href=\"https://github.com/fk5431\">https://github.com/fk5431</a></li>\n<li><a href=\"http://blog.csdn.net/fk5431\">csdn</a>：<a href=\"http://blog.csdn.net/fk5431\">http://blog.csdn.net/fk5431</a></li>\n</ul>\n<p>小菜鸟一个，欢迎讨论。</p>\n<p>坚持原创技术分享，您的支持将鼓励我继续创作！<br><img src=\"zhifubao.png\" alt=\"支付宝\"><br><img src=\"weixin.png\" alt=\"微信\"></p>\n"},{"title":"categories","date":"2017-04-17T07:04:09.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-17 15:04:09\ntype: \"categories\" \ncomments: false\n---\n","updated":"2017-06-15T13:35:30.643Z","path":"categories/index.html","layout":"page","_id":"cj5hj5yq700024lm3bwce17tk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-17T06:05:03.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-17 14:05:03\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-06-15T13:35:30.647Z","path":"tags/index.html","layout":"page","_id":"cj5hj5yqe00054lm3sgs8t8yp","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo初步使用","date":"2017-04-17T06:40:10.000Z","comments":0,"keywords":"hexo, github","_content":"## Hexo\nHexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）\n\n### hexo的安装\nhexo只依赖于\n\n- Node.js\n- Git\n\n上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装\n\n```\nnpm install -g hexo-cli\n```\n### hexo的基本命令\n\n- hexo init [folder]   #新建一个网站\n- hexo n [layout] <title>    #新建一篇文章\n- hexo g   #生成静态文件\n- hexo d   #部署网站。\n- hexo publish [layout] <filename>   #发表草稿\n- hexo s   #启动服务器\n- hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)\n\n### hexo的配置\n\n配置内容来自官网\n\n#### 网站\n|参数|描述|\n|---|----|\n| title |\t网站标题|\n| subtitle |\t网站副标题|\n| description |\t网站描述|\n| author |\t您的名字|\n| language |\t网站使用的语言|\n| timezone\t|网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。|\n\n其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。\n\n#### 网址\n| 参数|\t描述|\t默认值|\n|---------|---------|--------|\n| url |\t网址\t|        |\n| root\t| 网站根目录\t|          |\n| permalink\t| 文章的 永久链接 格式\t|:year/:month/:day/:title/|\n| permalink_defaults|\t永久链接中各部分的默认值\t|     |\n\n>网站存放在子目录\n如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n\n#### 目录\n| 参数|\t描述|\t默认值|\n|------|------|-------|\n| source_dir|\t资源文件夹，这个文件夹用来存放内容。|\tsource|\n| public_dir\t| 公共文件夹，这个文件夹用于存放生成的站点文件。|\tpublic|\n| tag_dir\t| 标签文件夹|\ttags|\n| archive_dir|\t归档文件夹|\tarchives|\n| category_dir|\t分类文件夹\t| categories|\n| code_dir\t| Include code 文件夹|\tdownloads/code|\n| i18n_dir|\t国际化（i18n）文件夹\t|:lang|\n| skip_render\t| 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。\t|     |\n\n>提示\n如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。\n\n#### 文章\n| 参数|\t描述\t|默认值|\n|-----|--------|-----------|\n| new_post_name\t| 新文章的文件名称\t| :title.md|\n| _layout\t| 预设布局|\tpost|\n| auto_spacing\t| 在中文和英文之间加入空格\t| false|\n| titlecase\t| 把标题转换为 title case|\tfalse|\n| external_link\t| 在新标签中打开链接|\ttrue|\n| filename_case|\t把文件名称转换为 (1) 小写或 (2) 大写\t|0|\n| render_drafts\t| 显示草稿|\tfalse|\n| post_asset_folder\t| 启动 Asset 文件夹|\tfalse|\n| relative_link\t| 把链接改为与根目录的相对位址|\tfalse|\n| future\t| 显示未来的文章|\ttrue|\n| highlight\t| 代码块的设置|\t|\n\n>相对地址\n默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\n\n#### 分类 & 标签\n| 参数|\t描述|\t默认值|\n|-------|---------|------------|\n| default_category|\t默认分类|\tuncategorized|\n| category_map|\t分类别名\t|             |\n| tag_map|\t标签别名\t|            |\n\n#### 日期 / 时间格式         \nHexo 使用 Moment.js 来解析和显示时间。\n\n| 参数\t|描述\t|默认值|\n|---------|----------|-----------|\n| date_format\t| 日期格式|\tYYYY-MM-DD|\n| time_format\t| 时间格式|\tH:mm:ss|\n\n#### 分页\n| 参数\t|描述\t|默认值|\n|-------|---------|---------|\n| per_page|\t每页显示的文章量 (0 = 关闭分页功能)\t| 10|\n| pagination_dir|\t分页目录\t| page|\n\n#### 扩展\n|参数\t|描述|\n|----------|----------|\n|theme\t|当前主题名称。值为false时禁用主题|\n|deploy|\t部署部分的设置        |\n\n\n###我的坑\n我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……\n然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。\n最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午","source":"_posts/start.md","raw":"---\ntitle: hexo初步使用\ndate: 2017-04-17 14:40:10\ncomments: false\ntags: \n- 其他\ncategories: \n- 其他\nkeywords: hexo, github\n---\n## Hexo\nHexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）\n\n### hexo的安装\nhexo只依赖于\n\n- Node.js\n- Git\n\n上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装\n\n```\nnpm install -g hexo-cli\n```\n### hexo的基本命令\n\n- hexo init [folder]   #新建一个网站\n- hexo n [layout] <title>    #新建一篇文章\n- hexo g   #生成静态文件\n- hexo d   #部署网站。\n- hexo publish [layout] <filename>   #发表草稿\n- hexo s   #启动服务器\n- hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)\n\n### hexo的配置\n\n配置内容来自官网\n\n#### 网站\n|参数|描述|\n|---|----|\n| title |\t网站标题|\n| subtitle |\t网站副标题|\n| description |\t网站描述|\n| author |\t您的名字|\n| language |\t网站使用的语言|\n| timezone\t|网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。|\n\n其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。\n\n#### 网址\n| 参数|\t描述|\t默认值|\n|---------|---------|--------|\n| url |\t网址\t|        |\n| root\t| 网站根目录\t|          |\n| permalink\t| 文章的 永久链接 格式\t|:year/:month/:day/:title/|\n| permalink_defaults|\t永久链接中各部分的默认值\t|     |\n\n>网站存放在子目录\n如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。\n\n#### 目录\n| 参数|\t描述|\t默认值|\n|------|------|-------|\n| source_dir|\t资源文件夹，这个文件夹用来存放内容。|\tsource|\n| public_dir\t| 公共文件夹，这个文件夹用于存放生成的站点文件。|\tpublic|\n| tag_dir\t| 标签文件夹|\ttags|\n| archive_dir|\t归档文件夹|\tarchives|\n| category_dir|\t分类文件夹\t| categories|\n| code_dir\t| Include code 文件夹|\tdownloads/code|\n| i18n_dir|\t国际化（i18n）文件夹\t|:lang|\n| skip_render\t| 跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。\t|     |\n\n>提示\n如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。\n\n#### 文章\n| 参数|\t描述\t|默认值|\n|-----|--------|-----------|\n| new_post_name\t| 新文章的文件名称\t| :title.md|\n| _layout\t| 预设布局|\tpost|\n| auto_spacing\t| 在中文和英文之间加入空格\t| false|\n| titlecase\t| 把标题转换为 title case|\tfalse|\n| external_link\t| 在新标签中打开链接|\ttrue|\n| filename_case|\t把文件名称转换为 (1) 小写或 (2) 大写\t|0|\n| render_drafts\t| 显示草稿|\tfalse|\n| post_asset_folder\t| 启动 Asset 文件夹|\tfalse|\n| relative_link\t| 把链接改为与根目录的相对位址|\tfalse|\n| future\t| 显示未来的文章|\ttrue|\n| highlight\t| 代码块的设置|\t|\n\n>相对地址\n默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\n\n#### 分类 & 标签\n| 参数|\t描述|\t默认值|\n|-------|---------|------------|\n| default_category|\t默认分类|\tuncategorized|\n| category_map|\t分类别名\t|             |\n| tag_map|\t标签别名\t|            |\n\n#### 日期 / 时间格式         \nHexo 使用 Moment.js 来解析和显示时间。\n\n| 参数\t|描述\t|默认值|\n|---------|----------|-----------|\n| date_format\t| 日期格式|\tYYYY-MM-DD|\n| time_format\t| 时间格式|\tH:mm:ss|\n\n#### 分页\n| 参数\t|描述\t|默认值|\n|-------|---------|---------|\n| per_page|\t每页显示的文章量 (0 = 关闭分页功能)\t| 10|\n| pagination_dir|\t分页目录\t| page|\n\n#### 扩展\n|参数\t|描述|\n|----------|----------|\n|theme\t|当前主题名称。值为false时禁用主题|\n|deploy|\t部署部分的设置        |\n\n\n###我的坑\n我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……\n然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。\n最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午","slug":"start","published":1,"updated":"2017-06-16T02:57:26.903Z","layout":"post","photos":[],"link":"","_id":"cj5hj5ypw00004lm3oy9nob6v","content":"<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）</p>\n<h3 id=\"hexo的安装\"><a href=\"#hexo的安装\" class=\"headerlink\" title=\"hexo的安装\"></a>hexo的安装</h3><p>hexo只依赖于</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<p>上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"hexo的基本命令\"><a href=\"#hexo的基本命令\" class=\"headerlink\" title=\"hexo的基本命令\"></a>hexo的基本命令</h3><ul>\n<li>hexo init [folder]   #新建一个网站</li>\n<li>hexo n [layout] <title>    #新建一篇文章</title></li>\n<li>hexo g   #生成静态文件</li>\n<li>hexo d   #部署网站。</li>\n<li>hexo publish [layout] <filename>   #发表草稿</filename></li>\n<li>hexo s   #启动服务器</li>\n<li>hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>\n</ul>\n<h3 id=\"hexo的配置\"><a href=\"#hexo的配置\" class=\"headerlink\" title=\"hexo的配置\"></a>hexo的配置</h3><p>配置内容来自官网</p>\n<h4 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td>\n</tr>\n</tbody>\n</table>\n<p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p>\n<h4 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>网址</td>\n<td></td>\n</tr>\n<tr>\n<td>root</td>\n<td>网站根目录</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>文章的 永久链接 格式</td>\n<td>:year/:month/:day/:title/</td>\n</tr>\n<tr>\n<td>permalink_defaults</td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>网站存放在子目录<br>如果您的网站存放在子目录中，例如 <a href=\"http://yoursite.com/blog，则请将您的\">http://yoursite.com/blog，则请将您的</a> url 设为 <a href=\"http://yoursite.com/blog\">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source_dir</td>\n<td>资源文件夹，这个文件夹用来存放内容。</td>\n<td>source</td>\n</tr>\n<tr>\n<td>public_dir</td>\n<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>\n<td>public</td>\n</tr>\n<tr>\n<td>tag_dir</td>\n<td>标签文件夹</td>\n<td>tags</td>\n</tr>\n<tr>\n<td>archive_dir</td>\n<td>归档文件夹</td>\n<td>archives</td>\n</tr>\n<tr>\n<td>category_dir</td>\n<td>分类文件夹</td>\n<td>categories</td>\n</tr>\n<tr>\n<td>code_dir</td>\n<td>Include code 文件夹</td>\n<td>downloads/code</td>\n</tr>\n<tr>\n<td>i18n_dir</td>\n<td>国际化（i18n）文件夹</td>\n<td>:lang</td>\n</tr>\n<tr>\n<td>skip_render</td>\n<td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示<br>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p>\n</blockquote>\n<h4 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>new_post_name</td>\n<td>新文章的文件名称</td>\n<td>:title.md</td>\n</tr>\n<tr>\n<td>_layout</td>\n<td>预设布局</td>\n<td>post</td>\n</tr>\n<tr>\n<td>auto_spacing</td>\n<td>在中文和英文之间加入空格</td>\n<td>false</td>\n</tr>\n<tr>\n<td>titlecase</td>\n<td>把标题转换为 title case</td>\n<td>false</td>\n</tr>\n<tr>\n<td>external_link</td>\n<td>在新标签中打开链接</td>\n<td>true</td>\n</tr>\n<tr>\n<td>filename_case</td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n<td>0</td>\n</tr>\n<tr>\n<td>render_drafts</td>\n<td>显示草稿</td>\n<td>false</td>\n</tr>\n<tr>\n<td>post_asset_folder</td>\n<td>启动 Asset 文件夹</td>\n<td>false</td>\n</tr>\n<tr>\n<td>relative_link</td>\n<td>把链接改为与根目录的相对位址</td>\n<td>false</td>\n</tr>\n<tr>\n<td>future</td>\n<td>显示未来的文章</td>\n<td>true</td>\n</tr>\n<tr>\n<td>highlight</td>\n<td>代码块的设置</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>相对地址<br>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：<a href=\"http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\" target=\"_blank\" rel=\"external\">http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</a></p>\n</blockquote>\n<h4 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default_category</td>\n<td>默认分类</td>\n<td>uncategorized</td>\n</tr>\n<tr>\n<td>category_map</td>\n<td>分类别名</td>\n<td></td>\n</tr>\n<tr>\n<td>tag_map</td>\n<td>标签别名</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h4><p>Hexo 使用 Moment.js 来解析和显示时间。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>date_format</td>\n<td>日期格式</td>\n<td>YYYY-MM-DD</td>\n</tr>\n<tr>\n<td>time_format</td>\n<td>时间格式</td>\n<td>H:mm:ss</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>per_page</td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n<td>10</td>\n</tr>\n<tr>\n<td>pagination_dir</td>\n<td>分页目录</td>\n<td>page</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>theme</td>\n<td>当前主题名称。值为false时禁用主题</td>\n</tr>\n<tr>\n<td>deploy</td>\n<td>部署部分的设置</td>\n</tr>\n</tbody>\n</table>\n<p>###我的坑<br>我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……<br>然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。<br>最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hexo\"><a href=\"#Hexo\" class=\"headerlink\" title=\"Hexo\"></a>Hexo</h2><p>Hexo是一个可以快速搭建博客的框架，使用Markdown解析文章，生成静态的网页。（可以部署在github上哦）</p>\n<h3 id=\"hexo的安装\"><a href=\"#hexo的安装\" class=\"headerlink\" title=\"hexo的安装\"></a>hexo的安装</h3><p>hexo只依赖于</p>\n<ul>\n<li>Node.js</li>\n<li>Git</li>\n</ul>\n<p>上面的两个的安装就不说了，自行百度，hexo基于上述环境可以使用nmp安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<h3 id=\"hexo的基本命令\"><a href=\"#hexo的基本命令\" class=\"headerlink\" title=\"hexo的基本命令\"></a>hexo的基本命令</h3><ul>\n<li>hexo init [folder]   #新建一个网站</li>\n<li>hexo n [layout] <title>    #新建一篇文章</li>\n<li>hexo g   #生成静态文件</li>\n<li>hexo d   #部署网站。</li>\n<li>hexo publish [layout] <filename>   #发表草稿</li>\n<li>hexo s   #启动服务器</li>\n<li>hexo clean   #清除缓存文件 (db.json) 和已生成的静态文件 (public)</li>\n</ul>\n<h3 id=\"hexo的配置\"><a href=\"#hexo的配置\" class=\"headerlink\" title=\"hexo的配置\"></a>hexo的配置</h3><p>配置内容来自官网</p>\n<h4 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>subtitle</td>\n<td>网站副标题</td>\n</tr>\n<tr>\n<td>description</td>\n<td>网站描述</td>\n</tr>\n<tr>\n<td>author</td>\n<td>您的名字</td>\n</tr>\n<tr>\n<td>language</td>\n<td>网站使用的语言</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td>\n</tr>\n</tbody>\n</table>\n<p>其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。</p>\n<h4 id=\"网址\"><a href=\"#网址\" class=\"headerlink\" title=\"网址\"></a>网址</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>url</td>\n<td>网址</td>\n<td></td>\n</tr>\n<tr>\n<td>root</td>\n<td>网站根目录</td>\n<td></td>\n</tr>\n<tr>\n<td>permalink</td>\n<td>文章的 永久链接 格式</td>\n<td>:year/:month/:day/:title/</td>\n</tr>\n<tr>\n<td>permalink_defaults</td>\n<td>永久链接中各部分的默认值</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>网站存放在子目录<br>如果您的网站存放在子目录中，例如 <a href=\"http://yoursite.com/blog，则请将您的\">http://yoursite.com/blog，则请将您的</a> url 设为 <a href=\"http://yoursite.com/blog\">http://yoursite.com/blog</a> 并把 root 设为 /blog/。</p>\n</blockquote>\n<h4 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>source_dir</td>\n<td>资源文件夹，这个文件夹用来存放内容。</td>\n<td>source</td>\n</tr>\n<tr>\n<td>public_dir</td>\n<td>公共文件夹，这个文件夹用于存放生成的站点文件。</td>\n<td>public</td>\n</tr>\n<tr>\n<td>tag_dir</td>\n<td>标签文件夹</td>\n<td>tags</td>\n</tr>\n<tr>\n<td>archive_dir</td>\n<td>归档文件夹</td>\n<td>archives</td>\n</tr>\n<tr>\n<td>category_dir</td>\n<td>分类文件夹</td>\n<td>categories</td>\n</tr>\n<tr>\n<td>code_dir</td>\n<td>Include code 文件夹</td>\n<td>downloads/code</td>\n</tr>\n<tr>\n<td>i18n_dir</td>\n<td>国际化（i18n）文件夹</td>\n<td>:lang</td>\n</tr>\n<tr>\n<td>skip_render</td>\n<td>跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>提示<br>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p>\n</blockquote>\n<h4 id=\"文章\"><a href=\"#文章\" class=\"headerlink\" title=\"文章\"></a>文章</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>new_post_name</td>\n<td>新文章的文件名称</td>\n<td>:title.md</td>\n</tr>\n<tr>\n<td>_layout</td>\n<td>预设布局</td>\n<td>post</td>\n</tr>\n<tr>\n<td>auto_spacing</td>\n<td>在中文和英文之间加入空格</td>\n<td>false</td>\n</tr>\n<tr>\n<td>titlecase</td>\n<td>把标题转换为 title case</td>\n<td>false</td>\n</tr>\n<tr>\n<td>external_link</td>\n<td>在新标签中打开链接</td>\n<td>true</td>\n</tr>\n<tr>\n<td>filename_case</td>\n<td>把文件名称转换为 (1) 小写或 (2) 大写</td>\n<td>0</td>\n</tr>\n<tr>\n<td>render_drafts</td>\n<td>显示草稿</td>\n<td>false</td>\n</tr>\n<tr>\n<td>post_asset_folder</td>\n<td>启动 Asset 文件夹</td>\n<td>false</td>\n</tr>\n<tr>\n<td>relative_link</td>\n<td>把链接改为与根目录的相对位址</td>\n<td>false</td>\n</tr>\n<tr>\n<td>future</td>\n<td>显示未来的文章</td>\n<td>true</td>\n</tr>\n<tr>\n<td>highlight</td>\n<td>代码块的设置</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>相对地址<br>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为example.com,您有一篇文章名为hello，那么绝对链接可能像这样：<a href=\"http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。\">http://example.com/hello.html，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</a></p>\n</blockquote>\n<h4 id=\"分类-amp-标签\"><a href=\"#分类-amp-标签\" class=\"headerlink\" title=\"分类 &amp; 标签\"></a>分类 &amp; 标签</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>default_category</td>\n<td>默认分类</td>\n<td>uncategorized</td>\n</tr>\n<tr>\n<td>category_map</td>\n<td>分类别名</td>\n<td></td>\n</tr>\n<tr>\n<td>tag_map</td>\n<td>标签别名</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"日期-时间格式\"><a href=\"#日期-时间格式\" class=\"headerlink\" title=\"日期 / 时间格式\"></a>日期 / 时间格式</h4><p>Hexo 使用 Moment.js 来解析和显示时间。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>date_format</td>\n<td>日期格式</td>\n<td>YYYY-MM-DD</td>\n</tr>\n<tr>\n<td>time_format</td>\n<td>时间格式</td>\n<td>H:mm:ss</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>per_page</td>\n<td>每页显示的文章量 (0 = 关闭分页功能)</td>\n<td>10</td>\n</tr>\n<tr>\n<td>pagination_dir</td>\n<td>分页目录</td>\n<td>page</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>theme</td>\n<td>当前主题名称。值为false时禁用主题</td>\n</tr>\n<tr>\n<td>deploy</td>\n<td>部署部分的设置</td>\n</tr>\n</tbody>\n</table>\n<p>###我的坑<br>我吧整个hexo init初始化的项目放到github个人blog下……然后github就说解析不了博客了……<br>然后想了想，我把master分支放hexo生成的public里面的东西，然后新建个分支放hexo的东西，这样就可以在哪里有环境就可以写，然后！！在编译器clone自己的项目，不能在同一个项目文件夹写完然后复制public的文件放到master分支，这样hexo的命令就用不了了，提示加载不到一个模块。<br>最后吧一个项目clone两次，一个专门该mater分支，一个写…………坑了一上午</p>\n"},{"title":"建造者模式","date":"2017-07-16T01:35:56.000Z","keywords":"设计模式, 建造者模式","_content":"\n## 建造者模式\n\n### 定义\n\n将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)\n\n### 使用场景\n\n1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。\n2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 \n\n**优点**:\n\n1. 使用建造者模式可以让客户端不知道产品内部的组成细节.\n2. 具体的建造类之间是相互独立的,对系统的扩展是非常有利的.\n3. 由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.\n\n### 建造者模式一般包含的角色\n\n1. builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,\n2. ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.\n3. Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.\n4. Product: 要创建的负责对象.\n\n### Demo\n\n如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:\n\n首先是Persion\n```\npackage factory.pattern.Builder;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Persion {\n    private List<String> parts = new ArrayList<String>();\n\n    public void Add(String part){\n        parts.add(part);\n    }\n\n    public void Show(){\n        for(String part : parts){\n            System.out.println(part);\n        }\n    }\n\n}\n```\n然后是Builder\n```\npackage factory.pattern.Builder;\n   \n   /**\n    * Created by fk5431 on 7/24/17.\n    */\n   public interface Builder {\n       void BuildHead();\n       void BuildBody();\n       void BuildHand();\n       void BuildFeet();\n       Persion getResult();\n   }\n```\n然后瘦人胖人类分别实现接口\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class FatPersonBuilder implements Builder {\n    private Persion product;\n    public FatPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"胖人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"胖人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"胖人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"胖人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class ThinPersonBuilder implements Builder {\n    Persion product;\n    public ThinPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"瘦人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"瘦人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"瘦人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"瘦人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n然后是指导者\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Director {\n    public Persion Persion(Builder builder){\n        builder.BuildBody();\n        builder.BuildFeet();\n        builder.BuildHand();\n        builder.BuildHead();\n        return builder.getResult();\n    }\n}\n```\n最后测试一下\n```\npublic class Test {\n\n    public static void main(String[] args) {\n        Director d = new Director();\n        Persion p = d.Persion(new ThinPersonBuilder());\n        p.Show();\n    }\n}\n```","source":"_posts/Design_pattern/builder.md","raw":"---\ntitle: 建造者模式\ndate: 2017-07-16 09:35:56\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式, 建造者模式\n---\n\n## 建造者模式\n\n### 定义\n\n将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)\n\n### 使用场景\n\n1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。\n2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 \n\n**优点**:\n\n1. 使用建造者模式可以让客户端不知道产品内部的组成细节.\n2. 具体的建造类之间是相互独立的,对系统的扩展是非常有利的.\n3. 由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.\n\n### 建造者模式一般包含的角色\n\n1. builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,\n2. ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.\n3. Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.\n4. Product: 要创建的负责对象.\n\n### Demo\n\n如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:\n\n首先是Persion\n```\npackage factory.pattern.Builder;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Persion {\n    private List<String> parts = new ArrayList<String>();\n\n    public void Add(String part){\n        parts.add(part);\n    }\n\n    public void Show(){\n        for(String part : parts){\n            System.out.println(part);\n        }\n    }\n\n}\n```\n然后是Builder\n```\npackage factory.pattern.Builder;\n   \n   /**\n    * Created by fk5431 on 7/24/17.\n    */\n   public interface Builder {\n       void BuildHead();\n       void BuildBody();\n       void BuildHand();\n       void BuildFeet();\n       Persion getResult();\n   }\n```\n然后瘦人胖人类分别实现接口\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class FatPersonBuilder implements Builder {\n    private Persion product;\n    public FatPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"胖人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"胖人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"胖人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"胖人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class ThinPersonBuilder implements Builder {\n    Persion product;\n    public ThinPersonBuilder(){\n        product = new Persion();\n    }\n    public void BuildHead() {\n        product.Add(\"瘦人头\");\n    }\n\n    public void BuildBody() {\n        product.Add(\"瘦人身体\");\n    }\n\n    public void BuildHand() {\n        product.Add(\"瘦人手\");\n    }\n\n    public void BuildFeet() {\n        product.Add(\"瘦人脚\");\n    }\n\n    public Persion getResult() {\n        return product;\n    }\n}\n```\n然后是指导者\n```\npackage factory.pattern.Builder;\n\n/**\n * Created by fk5431 on 7/24/17.\n */\npublic class Director {\n    public Persion Persion(Builder builder){\n        builder.BuildBody();\n        builder.BuildFeet();\n        builder.BuildHand();\n        builder.BuildHead();\n        return builder.getResult();\n    }\n}\n```\n最后测试一下\n```\npublic class Test {\n\n    public static void main(String[] args) {\n        Director d = new Director();\n        Persion p = d.Persion(new ThinPersonBuilder());\n        p.Show();\n    }\n}\n```","slug":"Design_pattern/builder","published":1,"updated":"2017-07-24T02:23:32.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5hj5yt700084lm38buidxf5","content":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。<br>2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 </p>\n<p><strong>优点</strong>:</p>\n<ol>\n<li>使用建造者模式可以让客户端不知道产品内部的组成细节.</li>\n<li>具体的建造类之间是相互独立的,对系统的扩展是非常有利的.</li>\n<li>由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.</li>\n</ol>\n<h3 id=\"建造者模式一般包含的角色\"><a href=\"#建造者模式一般包含的角色\" class=\"headerlink\" title=\"建造者模式一般包含的角色\"></a>建造者模式一般包含的角色</h3><ol>\n<li>builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,</li>\n<li>ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.</li>\n<li>Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.</li>\n<li>Product: 要创建的负责对象.</li>\n</ol>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><p>如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:</p>\n<p>首先是Persion<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Persion &#123;</div><div class=\"line\">    private List&lt;String&gt; parts = new ArrayList&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">    public void Add(String part)&#123;</div><div class=\"line\">        parts.add(part);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void Show()&#123;</div><div class=\"line\">        for(String part : parts)&#123;</div><div class=\"line\">            System.out.println(part);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是Builder<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\">   </div><div class=\"line\">   /**</div><div class=\"line\">    * Created by fk5431 on 7/24/17.</div><div class=\"line\">    */</div><div class=\"line\">   public interface Builder &#123;</div><div class=\"line\">       void BuildHead();</div><div class=\"line\">       void BuildBody();</div><div class=\"line\">       void BuildHand();</div><div class=\"line\">       void BuildFeet();</div><div class=\"line\">       Persion getResult();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>然后瘦人胖人类分别实现接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FatPersonBuilder implements Builder &#123;</div><div class=\"line\">    private Persion product;</div><div class=\"line\">    public FatPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;胖人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;胖人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;胖人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;胖人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ThinPersonBuilder implements Builder &#123;</div><div class=\"line\">    Persion product;</div><div class=\"line\">    public ThinPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后是指导者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Director &#123;</div><div class=\"line\">    public Persion Persion(Builder builder)&#123;</div><div class=\"line\">        builder.BuildBody();</div><div class=\"line\">        builder.BuildFeet();</div><div class=\"line\">        builder.BuildHand();</div><div class=\"line\">        builder.BuildHead();</div><div class=\"line\">        return builder.getResult();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后测试一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Director d = new Director();</div><div class=\"line\">        Persion p = d.Persion(new ThinPersonBuilder());</div><div class=\"line\">        p.Show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。(创建型模式)</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>1 创建一些复杂的对象时,这些对象的内部组成间的构建顺序是稳定的,但是对象的内部组成构件面临着复杂的变化。<br>2 要创建的复杂对象的算法,独立于该对象的组成部分,也独立与组成部分的装配方法时。 </p>\n<p><strong>优点</strong>:</p>\n<ol>\n<li>使用建造者模式可以让客户端不知道产品内部的组成细节.</li>\n<li>具体的建造类之间是相互独立的,对系统的扩展是非常有利的.</li>\n<li>由于具体的建造者是独立的,因此可以对建造过程逐步细化,而对其他的模块没有任何影响.</li>\n</ol>\n<h3 id=\"建造者模式一般包含的角色\"><a href=\"#建造者模式一般包含的角色\" class=\"headerlink\" title=\"建造者模式一般包含的角色\"></a>建造者模式一般包含的角色</h3><ol>\n<li>builder: 给出一个抽象接口,以规范产品对象的各个组成成分的建造.这个接口规定要实现负责对象的哪些部分的创建,不涉及具体对象部件的创建,</li>\n<li>ConcreteBuilder: 实现Builder接口,针对不同的商业逻辑,具体化复杂对象的各部分的创建.在建造过程完成后,提供产品实例.</li>\n<li>Director: 调用具体建造者来创建复杂对象的各个部分,在指导者中不涉及具体产品的信息,只负责保证对象各部分完整创建或按某顺序创建.</li>\n<li>Product: 要创建的负责对象.</li>\n</ol>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h3><p>如果要创建一个小人,肯定要创建人的头,身体,手,脚,现在系统将人分为胖人和瘦人,那么设计如下:</p>\n<p>首先是Persion<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">import java.util.ArrayList;</div><div class=\"line\">import java.util.List;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Persion &#123;</div><div class=\"line\">    private List&lt;String&gt; parts = new ArrayList&lt;String&gt;();</div><div class=\"line\"></div><div class=\"line\">    public void Add(String part)&#123;</div><div class=\"line\">        parts.add(part);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void Show()&#123;</div><div class=\"line\">        for(String part : parts)&#123;</div><div class=\"line\">            System.out.println(part);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然后是Builder<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\">   </div><div class=\"line\">   /**</div><div class=\"line\">    * Created by fk5431 on 7/24/17.</div><div class=\"line\">    */</div><div class=\"line\">   public interface Builder &#123;</div><div class=\"line\">       void BuildHead();</div><div class=\"line\">       void BuildBody();</div><div class=\"line\">       void BuildHand();</div><div class=\"line\">       void BuildFeet();</div><div class=\"line\">       Persion getResult();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>然后瘦人胖人类分别实现接口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FatPersonBuilder implements Builder &#123;</div><div class=\"line\">    private Persion product;</div><div class=\"line\">    public FatPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;胖人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;胖人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;胖人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;胖人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ThinPersonBuilder implements Builder &#123;</div><div class=\"line\">    Persion product;</div><div class=\"line\">    public ThinPersonBuilder()&#123;</div><div class=\"line\">        product = new Persion();</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void BuildHead() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人头&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildBody() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人身体&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildHand() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人手&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void BuildFeet() &#123;</div><div class=\"line\">        product.Add(&quot;瘦人脚&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public Persion getResult() &#123;</div><div class=\"line\">        return product;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后是指导者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.Builder;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 7/24/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Director &#123;</div><div class=\"line\">    public Persion Persion(Builder builder)&#123;</div><div class=\"line\">        builder.BuildBody();</div><div class=\"line\">        builder.BuildFeet();</div><div class=\"line\">        builder.BuildHand();</div><div class=\"line\">        builder.BuildHead();</div><div class=\"line\">        return builder.getResult();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后测试一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class Test &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        Director d = new Director();</div><div class=\"line\">        Persion p = d.Persion(new ThinPersonBuilder());</div><div class=\"line\">        p.Show();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"抽象工厂模式","date":"2017-06-18T06:39:16.000Z","comments":0,"keywords":"设计模式, 抽象工厂模式","_content":"## 抽象工厂模式\n\n### 介绍\n\n为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）\n\n### 和工厂模式区别\n\n工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。\n\n> QQ换皮肤可以使用抽象工厂模式\n\n**优点**：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n**缺点**：扩展非常麻烦，需要修改很多代码。\n\n### DEMO\n\n可以在前一个例子上给图形增加颜色，就相当于一个产品族了：\n\n先创建一个图形和颜色的接口类：\n\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Color {\n    void fill();\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Shape {\n    void draw();\n}\n```\n\n然后分别实现各自两个类进行测试：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Black implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Black : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Red implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Red : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\n\n然后实现工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic abstract class AbstractFactory {\n    abstract Color getColorFactory(String color);\n    abstract Shape getShapeFactory(String shape);\n}\n```\n然后扩展工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ShapeFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        return null;\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        if(shape == null) {\n            return null;\n        }\n        if (\"rectangle\".equals(shape)){\n            return new Rectangle();\n        }else if (\"circle\".equals(shape)){\n            return new Circle();\n        }else {\n            return null;\n        }\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ColorFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        if(color == null) {\n            return null;\n        }\n        if(\"red\".equals(color)){\n            return new Red();\n        }else if(\"black\".equals(color)){\n            return new Black();\n        }else {\n            return null;\n        }\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        return null;\n    }\n}\n```\n然后写一个工厂创造器：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice){\n        if(choice.equalsIgnoreCase(\"shape\")){\n            return new ShapeFactory();\n        } else if(choice.equalsIgnoreCase(\"color\")){\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n最后写一个测试类来试试输出：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class AbstractFactoryPattern {\n\n    public static void main(String[] args) {\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"shape\");\n        Shape shape1 = shapeFactory.getShapeFactory(\"circle\");\n        shape1.draw();\n        Shape shape2 = shapeFactory.getShapeFactory(\"rectangle\");\n        shape2.draw();\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"color\");\n        Color color1 = colorFactory.getColorFactory(\"red\");\n        color1.fill();\n        Color color2 = colorFactory.getColorFactory(\"black\");\n        color2.fill();\n    }\n\n}\n```\n\n输出如果如下:\n```\nCircle : draw()\nRectangle : draw()\nRed : fill()\nBlack : fill()\n```","source":"_posts/Design_pattern/abstract-factory-pattern.md","raw":"---\ntitle: 抽象工厂模式\ndate: 2017-06-18 14:39:16\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式, 抽象工厂模式\n---\n## 抽象工厂模式\n\n### 介绍\n\n为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）\n\n### 和工厂模式区别\n\n工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。\n\n> QQ换皮肤可以使用抽象工厂模式\n\n**优点**：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。\n**缺点**：扩展非常麻烦，需要修改很多代码。\n\n### DEMO\n\n可以在前一个例子上给图形增加颜色，就相当于一个产品族了：\n\n先创建一个图形和颜色的接口类：\n\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Color {\n    void fill();\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic interface Shape {\n    void draw();\n}\n```\n\n然后分别实现各自两个类进行测试：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Black implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Black : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Red implements Color {\n    @Override\n    public void fill() {\n        System.out.println(\"Red : fill()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Circle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\n\n然后实现工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic abstract class AbstractFactory {\n    abstract Color getColorFactory(String color);\n    abstract Shape getShapeFactory(String shape);\n}\n```\n然后扩展工厂抽象类：\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ShapeFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        return null;\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        if(shape == null) {\n            return null;\n        }\n        if (\"rectangle\".equals(shape)){\n            return new Rectangle();\n        }else if (\"circle\".equals(shape)){\n            return new Circle();\n        }else {\n            return null;\n        }\n    }\n}\n```\n\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class ColorFactory extends AbstractFactory {\n    @Override\n    Color getColorFactory(String color) {\n        if(color == null) {\n            return null;\n        }\n        if(\"red\".equals(color)){\n            return new Red();\n        }else if(\"black\".equals(color)){\n            return new Black();\n        }else {\n            return null;\n        }\n    }\n\n    @Override\n    Shape getShapeFactory(String shape) {\n        return null;\n    }\n}\n```\n然后写一个工厂创造器：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice){\n        if(choice.equalsIgnoreCase(\"shape\")){\n            return new ShapeFactory();\n        } else if(choice.equalsIgnoreCase(\"color\")){\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n最后写一个测试类来试试输出：\n```\npackage factory.pattern.abs;\n\n/**\n * Created by FK on 2017/6/18.\n */\npublic class AbstractFactoryPattern {\n\n    public static void main(String[] args) {\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"shape\");\n        Shape shape1 = shapeFactory.getShapeFactory(\"circle\");\n        shape1.draw();\n        Shape shape2 = shapeFactory.getShapeFactory(\"rectangle\");\n        shape2.draw();\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"color\");\n        Color color1 = colorFactory.getColorFactory(\"red\");\n        color1.fill();\n        Color color2 = colorFactory.getColorFactory(\"black\");\n        color2.fill();\n    }\n\n}\n```\n\n输出如果如下:\n```\nCircle : draw()\nRectangle : draw()\nRed : fill()\nBlack : fill()\n```","slug":"Design_pattern/abstract-factory-pattern","published":1,"updated":"2017-06-19T12:16:09.431Z","layout":"post","photos":[],"link":"","_id":"cj5hj5yt900094lm3mn64ntka","content":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）</p>\n<h3 id=\"和工厂模式区别\"><a href=\"#和工厂模式区别\" class=\"headerlink\" title=\"和工厂模式区别\"></a>和工厂模式区别</h3><p>工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。</p>\n<blockquote>\n<p>QQ换皮肤可以使用抽象工厂模式</p>\n</blockquote>\n<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：扩展非常麻烦，需要修改很多代码。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>可以在前一个例子上给图形增加颜色，就相当于一个产品族了：</p>\n<p>先创建一个图形和颜色的接口类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Color &#123;</div><div class=\"line\">    void fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后分别实现各自两个类进行测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Black implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Black : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Red implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Red : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后实现工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class AbstractFactory &#123;</div><div class=\"line\">    abstract Color getColorFactory(String color);</div><div class=\"line\">    abstract Shape getShapeFactory(String shape);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后扩展工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        if(shape == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (&quot;rectangle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125;else if (&quot;circle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ColorFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        if(color == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(&quot;red&quot;.equals(color))&#123;</div><div class=\"line\">            return new Red();</div><div class=\"line\">        &#125;else if(&quot;black&quot;.equals(color))&#123;</div><div class=\"line\">            return new Black();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后写一个工厂创造器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryProducer &#123;</div><div class=\"line\">    public static AbstractFactory getFactory(String choice)&#123;</div><div class=\"line\">        if(choice.equalsIgnoreCase(&quot;shape&quot;))&#123;</div><div class=\"line\">            return new ShapeFactory();</div><div class=\"line\">        &#125; else if(choice.equalsIgnoreCase(&quot;color&quot;))&#123;</div><div class=\"line\">            return new ColorFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后写一个测试类来试试输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class AbstractFactoryPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        AbstractFactory shapeFactory = FactoryProducer.getFactory(&quot;shape&quot;);</div><div class=\"line\">        Shape shape1 = shapeFactory.getShapeFactory(&quot;circle&quot;);</div><div class=\"line\">        shape1.draw();</div><div class=\"line\">        Shape shape2 = shapeFactory.getShapeFactory(&quot;rectangle&quot;);</div><div class=\"line\">        shape2.draw();</div><div class=\"line\">        AbstractFactory colorFactory = FactoryProducer.getFactory(&quot;color&quot;);</div><div class=\"line\">        Color color1 = colorFactory.getColorFactory(&quot;red&quot;);</div><div class=\"line\">        color1.fill();</div><div class=\"line\">        Color color2 = colorFactory.getColorFactory(&quot;black&quot;);</div><div class=\"line\">        color2.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出如果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Red : fill()</div><div class=\"line\">Black : fill()</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类。（创建型模式）</p>\n<h3 id=\"和工厂模式区别\"><a href=\"#和工厂模式区别\" class=\"headerlink\" title=\"和工厂模式区别\"></a>和工厂模式区别</h3><p>工厂模式提供一个产品的结构，而抽象工厂模式提供多个产品的结构，可以组成一个产品族。</p>\n<blockquote>\n<p>QQ换皮肤可以使用抽象工厂模式</p>\n</blockquote>\n<p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：扩展非常麻烦，需要修改很多代码。</p>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>可以在前一个例子上给图形增加颜色，就相当于一个产品族了：</p>\n<p>先创建一个图形和颜色的接口类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Color &#123;</div><div class=\"line\">    void fill();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后分别实现各自两个类进行测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Black implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Black : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Red implements Color &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void fill() &#123;</div><div class=\"line\">        System.out.println(&quot;Red : fill()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后实现工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public abstract class AbstractFactory &#123;</div><div class=\"line\">    abstract Color getColorFactory(String color);</div><div class=\"line\">    abstract Shape getShapeFactory(String shape);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后扩展工厂抽象类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        if(shape == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (&quot;rectangle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125;else if (&quot;circle&quot;.equals(shape))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class ColorFactory extends AbstractFactory &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    Color getColorFactory(String color) &#123;</div><div class=\"line\">        if(color == null) &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(&quot;red&quot;.equals(color))&#123;</div><div class=\"line\">            return new Red();</div><div class=\"line\">        &#125;else if(&quot;black&quot;.equals(color))&#123;</div><div class=\"line\">            return new Black();</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    Shape getShapeFactory(String shape) &#123;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后写一个工厂创造器：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryProducer &#123;</div><div class=\"line\">    public static AbstractFactory getFactory(String choice)&#123;</div><div class=\"line\">        if(choice.equalsIgnoreCase(&quot;shape&quot;))&#123;</div><div class=\"line\">            return new ShapeFactory();</div><div class=\"line\">        &#125; else if(choice.equalsIgnoreCase(&quot;color&quot;))&#123;</div><div class=\"line\">            return new ColorFactory();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>最后写一个测试类来试试输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.abs;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/18.</div><div class=\"line\"> */</div><div class=\"line\">public class AbstractFactoryPattern &#123;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        AbstractFactory shapeFactory = FactoryProducer.getFactory(&quot;shape&quot;);</div><div class=\"line\">        Shape shape1 = shapeFactory.getShapeFactory(&quot;circle&quot;);</div><div class=\"line\">        shape1.draw();</div><div class=\"line\">        Shape shape2 = shapeFactory.getShapeFactory(&quot;rectangle&quot;);</div><div class=\"line\">        shape2.draw();</div><div class=\"line\">        AbstractFactory colorFactory = FactoryProducer.getFactory(&quot;color&quot;);</div><div class=\"line\">        Color color1 = colorFactory.getColorFactory(&quot;red&quot;);</div><div class=\"line\">        color1.fill();</div><div class=\"line\">        Color color2 = colorFactory.getColorFactory(&quot;black&quot;);</div><div class=\"line\">        color2.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>输出如果如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Red : fill()</div><div class=\"line\">Black : fill()</div></pre></td></tr></table></figure></p>\n"},{"title":"设计模式——工厂模式","date":"2017-06-17T13:21:50.000Z","comments":0,"keywords":"设计模式, 工厂模式","_content":"\n## 工厂模式\n\n### 介绍\n\n定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）\n\n### 使用场景\n\n例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。\n\n- 优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。\n- 缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）\n\n### DEMO\n\n工厂模式比较简单，就写个最常用的例子：图形。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic interface Shape {\n    void draw();\n}\n\n```\n创建 shape抽象类\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\nrectangle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\ncircle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Square : draw()\");\n    }\n}\n\n```\nsquare实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class ShapeFactory {\n\n    public Shape getShape(String shapeType){\n        if(shapeType == null){\n            return null;\n        }\n        if(shapeType.equalsIgnoreCase(\"CIRCLE\")){\n            return new Circle();\n        } else if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\n            return new Rectangle();\n        } else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\n            return new Square();\n        }\n        return null;\n    }\n\n}\n```\n创建一个工厂，生成基于给传入值的实体类的对象。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class FactoryPattern {\n    public static void main(String[] args) {\n        ShapeFactory shapeFactory = new ShapeFactory();\n        Shape circle = shapeFactory.getShape(\"CIRCLE\");\n        //调用 Circle 的 draw 方法\n        circle.draw();\n        Shape rectangle = shapeFactory.getShape(\"RECTANGLE\");\n        //调用 Rectangle 的 draw 方法\n        rectangle.draw();\n        Shape square = shapeFactory.getShape(\"SQUARE\");\n        //调用 Square 的 draw 方法\n        square.draw();\n    }\n}\n```\n写个demo来测试下输出是否实现了工厂模式，输出如下：\n```\nCircle : draw()\nRectangle : draw()\nSquare : draw()\n```","source":"_posts/Design_pattern/factory_pattern.md","raw":"---\ntitle: 设计模式——工厂模式\ndate: 2017-06-17 21:21:50\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式, 工厂模式\n---\n\n## 工厂模式\n\n### 介绍\n\n定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）\n\n### 使用场景\n\n例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。\n\n- 优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。\n- 缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）\n\n### DEMO\n\n工厂模式比较简单，就写个最常用的例子：图形。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic interface Shape {\n    void draw();\n}\n\n```\n创建 shape抽象类\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Rectangle implements Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Rectangle : draw()\");\n    }\n}\n```\nrectangle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Circle : draw()\");\n    }\n}\n```\ncircle实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Square : draw()\");\n    }\n}\n\n```\nsquare实现shape方法\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class ShapeFactory {\n\n    public Shape getShape(String shapeType){\n        if(shapeType == null){\n            return null;\n        }\n        if(shapeType.equalsIgnoreCase(\"CIRCLE\")){\n            return new Circle();\n        } else if(shapeType.equalsIgnoreCase(\"RECTANGLE\")){\n            return new Rectangle();\n        } else if(shapeType.equalsIgnoreCase(\"SQUARE\")){\n            return new Square();\n        }\n        return null;\n    }\n\n}\n```\n创建一个工厂，生成基于给传入值的实体类的对象。\n\n```\npackage factory.pattern;\n\n/**\n * Created by FK on 2017/6/17.\n */\npublic class FactoryPattern {\n    public static void main(String[] args) {\n        ShapeFactory shapeFactory = new ShapeFactory();\n        Shape circle = shapeFactory.getShape(\"CIRCLE\");\n        //调用 Circle 的 draw 方法\n        circle.draw();\n        Shape rectangle = shapeFactory.getShape(\"RECTANGLE\");\n        //调用 Rectangle 的 draw 方法\n        rectangle.draw();\n        Shape square = shapeFactory.getShape(\"SQUARE\");\n        //调用 Square 的 draw 方法\n        square.draw();\n    }\n}\n```\n写个demo来测试下输出是否实现了工厂模式，输出如下：\n```\nCircle : draw()\nRectangle : draw()\nSquare : draw()\n```","slug":"Design_pattern/factory_pattern","published":1,"updated":"2017-06-17T14:28:58.247Z","layout":"post","photos":[],"link":"","_id":"cj5hj5ytb000c4lm3r4m4u6ac","content":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。</p>\n<ul>\n<li>优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。</li>\n<li>缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>工厂模式比较简单，就写个最常用的例子：图形。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 shape抽象类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>rectangle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>circle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Square implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Square : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>square实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public Shape getShape(String shapeType)&#123;</div><div class=\"line\">        if(shapeType == null)&#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;SQUARE&quot;))&#123;</div><div class=\"line\">            return new Square();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建一个工厂，生成基于给传入值的实体类的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryPattern &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        ShapeFactory shapeFactory = new ShapeFactory();</div><div class=\"line\">        Shape circle = shapeFactory.getShape(&quot;CIRCLE&quot;);</div><div class=\"line\">        //调用 Circle 的 draw 方法</div><div class=\"line\">        circle.draw();</div><div class=\"line\">        Shape rectangle = shapeFactory.getShape(&quot;RECTANGLE&quot;);</div><div class=\"line\">        //调用 Rectangle 的 draw 方法</div><div class=\"line\">        rectangle.draw();</div><div class=\"line\">        Shape square = shapeFactory.getShape(&quot;SQUARE&quot;);</div><div class=\"line\">        //调用 Square 的 draw 方法</div><div class=\"line\">        square.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>写个demo来测试下输出是否实现了工厂模式，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Square : draw()</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。（创建型模式）</p>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>例如orm框架，在选择数据库的时候只需要替换方言和驱动，不需要对已经实现的具体细节进行改动。</p>\n<ul>\n<li>优点：使用工厂模式可以屏蔽具体实现，只需要关心接口的调用；在增加一个产品的时候，只需要在工厂类里扩展一个产品就可以。</li>\n<li>缺点：每增加产品就必须增加具体实现类和实现工厂，增加了系统复杂性。（如果产品非常非常多，233333）</li>\n</ul>\n<h3 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h3><p>工厂模式比较简单，就写个最常用的例子：图形。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public interface Shape &#123;</div><div class=\"line\">    void draw();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建 shape抽象类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Rectangle implements Shape &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Rectangle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>rectangle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Circle implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Circle : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>circle实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class Square implements Shape &#123;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void draw() &#123;</div><div class=\"line\">        System.out.println(&quot;Square : draw()&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>square实现shape方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class ShapeFactory &#123;</div><div class=\"line\"></div><div class=\"line\">    public Shape getShape(String shapeType)&#123;</div><div class=\"line\">        if(shapeType == null)&#123;</div><div class=\"line\">            return null;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if(shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;))&#123;</div><div class=\"line\">            return new Circle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;))&#123;</div><div class=\"line\">            return new Rectangle();</div><div class=\"line\">        &#125; else if(shapeType.equalsIgnoreCase(&quot;SQUARE&quot;))&#123;</div><div class=\"line\">            return new Square();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return null;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建一个工厂，生成基于给传入值的实体类的对象。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by FK on 2017/6/17.</div><div class=\"line\"> */</div><div class=\"line\">public class FactoryPattern &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        ShapeFactory shapeFactory = new ShapeFactory();</div><div class=\"line\">        Shape circle = shapeFactory.getShape(&quot;CIRCLE&quot;);</div><div class=\"line\">        //调用 Circle 的 draw 方法</div><div class=\"line\">        circle.draw();</div><div class=\"line\">        Shape rectangle = shapeFactory.getShape(&quot;RECTANGLE&quot;);</div><div class=\"line\">        //调用 Rectangle 的 draw 方法</div><div class=\"line\">        rectangle.draw();</div><div class=\"line\">        Shape square = shapeFactory.getShape(&quot;SQUARE&quot;);</div><div class=\"line\">        //调用 Square 的 draw 方法</div><div class=\"line\">        square.draw();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>写个demo来测试下输出是否实现了工厂模式，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Circle : draw()</div><div class=\"line\">Rectangle : draw()</div><div class=\"line\">Square : draw()</div></pre></td></tr></table></figure></p>\n"},{"title":"双重检查锁定","date":"2017-06-20T11:57:37.000Z","keywords":"双重检查锁定","_content":"\n## 双重检查锁定\n\n### 产生原因\n在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.\n\n处理这个可以加同步锁,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public synchronized static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.\n所以通过双重检查锁定来实现延迟初始化,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n上面这种方法看起很好\n- 在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。\n- 在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。\n\n但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.\n\n> ###问题根源\n> 在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> ctorInstance(memory);  //2：初始化对象\n> instance = memory;     //3：设置instance指向刚分配的内存地址 \n> ```\n> 上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> instance = memory;     //3：设置instance指向刚分配的内存地址\n>                        //注意，此时对象还没有被初始化！\n> ctorInstance(memory);  //2：初始化对象\n> ```\n> 根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。\n> 为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock.png)\n> 只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。\n> 但是在多线程执行并发的时候示意图如下:\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock1.png)\n> 由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。\n> 所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：\n \n> |   时间 |  线程A |  线程B |\n> | ------ | ----- | ------ |\n> | t1  | A1：分配对象的内存空间 |   | \n> | t2 | A3：设置instance指向内存空间 |  |\n> | t3 |  | B1：判断instance是否为空 |\n> | t4 |  | B2：由于instance不为null，线程B将访问instance引用的对象 | \n> | t5 | A2：初始化对象 | |\n> | t6 | A4：访问instance引用的对象 |  |\n\n> 这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。\n  \n> 在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：\n> 1. 不允许2和3重排序；\n> 2. 允许2和3重排序，但不允许其他线程“看到”这个重排序。\n\n以上引用内容来自 http://ifeve.com/double-checked-locking-with-delay-initialization/\n\n### 解决方案\n\n#### 基于volatile的双重检定\n只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:\n```\npublic class UnsafeLazyLoading {\n    private volatile static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。\n\n#### 基于类初始化\n\n> JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。\n因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. \n","source":"_posts/Design_pattern/double-checked-locking.md","raw":"---\ntitle: 双重检查锁定\ndate: 2017-06-20 19:57:37\ntags: \n- 其他\ncategories: \n- 其他\nkeywords: 双重检查锁定\n---\n\n## 双重检查锁定\n\n### 产生原因\n在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.\n\n处理这个可以加同步锁,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public synchronized static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2\n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.\n所以通过双重检查锁定来实现延迟初始化,代码如下:\n```\npublic class UnsafeLazyLoading {\n    private static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n上面这种方法看起很好\n- 在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。\n- 在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。\n\n但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.\n\n> ###问题根源\n> 在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> ctorInstance(memory);  //2：初始化对象\n> instance = memory;     //3：设置instance指向刚分配的内存地址 \n> ```\n> 上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：\n> ```\n> memory = allocate();   //1：分配对象的内存空间\n> instance = memory;     //3：设置instance指向刚分配的内存地址\n>                        //注意，此时对象还没有被初始化！\n> ctorInstance(memory);  //2：初始化对象\n> ```\n> 根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。\n> 为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock.png)\n> 只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。\n> 但是在多线程执行并发的时候示意图如下:\n> ![intra-thread semantics](../../../uploads/double_checked_locking/double_checked_lock1.png)\n> 由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。\n> 所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：\n \n> |   时间 |  线程A |  线程B |\n> | ------ | ----- | ------ |\n> | t1  | A1：分配对象的内存空间 |   | \n> | t2 | A3：设置instance指向内存空间 |  |\n> | t3 |  | B1：判断instance是否为空 |\n> | t4 |  | B2：由于instance不为null，线程B将访问instance引用的对象 | \n> | t5 | A2：初始化对象 | |\n> | t6 | A4：访问instance引用的对象 |  |\n\n> 这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。\n  \n> 在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：\n> 1. 不允许2和3重排序；\n> 2. 允许2和3重排序，但不允许其他线程“看到”这个重排序。\n\n以上引用内容来自 http://ifeve.com/double-checked-locking-with-delay-initialization/\n\n### 解决方案\n\n#### 基于volatile的双重检定\n只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:\n```\npublic class UnsafeLazyLoading {\n    private volatile static UnsafeLazyLoading unsafeLazyLoading;\n    private UnsafeLazyLoading (){}\n    public static UnsafeLazyLoading getInstance(){\n        if( unsafeLazyLoading == null){                     //sign 1\n            synchronized (UnsafeLazyLoading.class){\n                if( unsafeLazyLoading == null){\n                    unsafeLazyLoading = new UnsafeLazyLoading();   \n                }\n            }\n            \n        }\n        return unsafeLazyLoading;\n    }\n}\n```\n当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。\n\n#### 基于类初始化\n\n> JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。\n因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. \n","slug":"Design_pattern/double-checked-locking","published":1,"updated":"2017-07-24T01:34:36.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5hj5ytf000d4lm3lotgwqmd","content":"<h2 id=\"双重检查锁定\"><a href=\"#双重检查锁定\" class=\"headerlink\" title=\"双重检查锁定\"></a>双重检查锁定</h2><h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h3><p>在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.</p>\n<p>处理这个可以加同步锁,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public synchronized static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.<br>所以通过双重检查锁定来实现延迟初始化,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面这种方法看起很好</p>\n<ul>\n<li>在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。</li>\n<li>在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。</li>\n</ul>\n<p>但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.</p>\n<blockquote>\n<p>###问题根源<br>在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址 </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址</div><div class=\"line\">&gt;                        //注意，此时对象还没有被初始化！</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。<br>为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock.png\" alt=\"intra-thread semantics\"><br>只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。<br>但是在多线程执行并发的时候示意图如下:<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock1.png\" alt=\"intra-thread semantics\"><br>由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。<br>所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>线程A</th>\n<th>线程B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>t1</td>\n<td>A1：分配对象的内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>A3：设置instance指向内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>B1：判断instance是否为空</td>\n</tr>\n<tr>\n<td>t4</td>\n<td></td>\n<td>B2：由于instance不为null，线程B将访问instance引用的对象</td>\n</tr>\n<tr>\n<td>t5</td>\n<td>A2：初始化对象</td>\n<td></td>\n</tr>\n<tr>\n<td>t6</td>\n<td>A4：访问instance引用的对象</td>\n</tr>\n</tbody>\n</table>\n<p>这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。</p>\n<p>在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：</p>\n<ol>\n<li>不允许2和3重排序；</li>\n<li>允许2和3重排序，但不允许其他线程“看到”这个重排序。</li>\n</ol>\n</blockquote>\n<p>以上引用内容来自 <a href=\"http://ifeve.com/double-checked-locking-with-delay-initialization/\" target=\"_blank\" rel=\"external\">http://ifeve.com/double-checked-locking-with-delay-initialization/</a></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"基于volatile的双重检定\"><a href=\"#基于volatile的双重检定\" class=\"headerlink\" title=\"基于volatile的双重检定\"></a>基于volatile的双重检定</h4><p>只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private volatile static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。</p>\n<h4 id=\"基于类初始化\"><a href=\"#基于类初始化\" class=\"headerlink\" title=\"基于类初始化\"></a>基于类初始化</h4><blockquote>\n<p>JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。<br>因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"双重检查锁定\"><a href=\"#双重检查锁定\" class=\"headerlink\" title=\"双重检查锁定\"></a>双重检查锁定</h2><h3 id=\"产生原因\"><a href=\"#产生原因\" class=\"headerlink\" title=\"产生原因\"></a>产生原因</h3><p>在写Java程序的时候,有时候会推迟高开销对象的初始化,在使用的时候在进行初始化,达到lazy loading的效果.但是进行延迟初始化的时候可能会产生很多问题(多线程环境),例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>就比如简单的单例模式要获取唯一的实例,如果在多线程环境下如果线程A运行到 sign 1标识的行,此时线程B运行到 sing 2标识的行,线程A就会看到需要的实例还没有被初始化,就会产生问题.</p>\n<p>处理这个可以加同步锁,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public synchronized static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            unsafeLazyLoading = new UnsafeLazyLoading();    //sing 2</div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>但是每次在获取实例的时候都会进入同步锁,会严重影响系统的性能.<br>所以通过双重检查锁定来实现延迟初始化,代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面这种方法看起很好</p>\n<ul>\n<li>在多个线程试图在同一时间创建对象时，会通过加锁来保证只有一个线程能创建对象。</li>\n<li>在对象创建好之后，执行getInstance()将不需要获取锁，直接返回已创建好的对象。</li>\n</ul>\n<p>但是执行到 sing1 标识的地方的时候,线程有可能unsafeLazyLoading不为空的时候,但是unsafeLazyloading引用的对象还有可能没有完成初始化的过程.</p>\n<blockquote>\n<p>###问题根源<br>在上述代码执行到   unsafelazyloading = new UnsafeLazyLoading(); 的时候,此时创建一个对象可分解为以下三步:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址 </div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>上面三行伪代码中的2和3之间，可能会被重排序（在一些JIT编译器上，这种重排序是真实发生的，详情见参考文献1的“Out-of-order writes”部分）。2和3之间重排序之后的执行时序如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; memory = allocate();   //1：分配对象的内存空间</div><div class=\"line\">&gt; instance = memory;     //3：设置instance指向刚分配的内存地址</div><div class=\"line\">&gt;                        //注意，此时对象还没有被初始化！</div><div class=\"line\">&gt; ctorInstance(memory);  //2：初始化对象</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure></p>\n<p>根据《The Java Language Specification, Java SE 7 Edition》（后文简称为java语言规范），所有线程在执行java程序时必须要遵守intra-thread semantics。intra-thread semantics保证重排序不会改变单线程内的程序执行结果。换句话来说，intra-thread semantics允许那些在单线程内，不会改变单线程程序执行结果的重排序。上面三行伪代码的2和3之间虽然被重排序了，但这个重排序并不会违反intra-thread semantics。这个重排序在没有改变单线程程序的执行结果的前提下，可以提高程序的执行性能。<br>为了更好的理解intra-thread semantics，请看下面的示意图（假设一个线程A在构造对象后，立即访问这个对象）：<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock.png\" alt=\"intra-thread semantics\"><br>只要保证2排在4的前面，即使2和3之间重排序了，也不会违反intra-thread semantics。<br>但是在多线程执行并发的时候示意图如下:<br><img src=\"../../../uploads/double_checked_locking/double_checked_lock1.png\" alt=\"intra-thread semantics\"><br>由于单线程内要遵守intra-thread semantics，从而能保证A线程的程序执行结果不会被改变。但是当线程A和B按上图的时序执行时，B线程将看到一个还没有被初始化的对象。<br>所以在双重检查锁定代码的（unsafeLazyLoading = new UnsafeLazyLoading();  ）如果发生重排序，另一个并发执行的线程B就有可能在第4行判断instance不为null。线程B接下来将访问instance所引用的对象，但此时这个对象可能还没有被A线程初始化！下面是这个场景的具体执行时序：</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>线程A</th>\n<th>线程B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>t1</td>\n<td>A1：分配对象的内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t2</td>\n<td>A3：设置instance指向内存空间</td>\n<td></td>\n</tr>\n<tr>\n<td>t3</td>\n<td></td>\n<td>B1：判断instance是否为空</td>\n</tr>\n<tr>\n<td>t4</td>\n<td></td>\n<td>B2：由于instance不为null，线程B将访问instance引用的对象</td>\n</tr>\n<tr>\n<td>t5</td>\n<td>A2：初始化对象</td>\n<td></td>\n</tr>\n<tr>\n<td>t6</td>\n<td>A4：访问instance引用的对象</td>\n</tr>\n</tbody>\n</table>\n<p>这里A2和A3虽然重排序了，但java内存模型的intra-thread semantics将确保A2一定会排在A4前面执行。因此线程A的intra-thread semantics没有改变。但A2和A3的重排序，将导致线程B在B1处判断出instance不为空，线程B接下来将访问instance引用的对象。此时，线程B将会访问到一个还未初始化的对象。</p>\n<p>在知晓了问题发生的根源之后，我们可以想出两个办法来实现线程安全的延迟初始化：</p>\n<ol>\n<li>不允许2和3重排序；</li>\n<li>允许2和3重排序，但不允许其他线程“看到”这个重排序。</li>\n</ol>\n</blockquote>\n<p>以上引用内容来自 <a href=\"http://ifeve.com/double-checked-locking-with-delay-initialization/\">http://ifeve.com/double-checked-locking-with-delay-initialization/</a></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"基于volatile的双重检定\"><a href=\"#基于volatile的双重检定\" class=\"headerlink\" title=\"基于volatile的双重检定\"></a>基于volatile的双重检定</h4><p>只需要把要获取的实例unsafeLazyLoading声明为volatile就可以,如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UnsafeLazyLoading &#123;</div><div class=\"line\">    private volatile static UnsafeLazyLoading unsafeLazyLoading;</div><div class=\"line\">    private UnsafeLazyLoading ()&#123;&#125;</div><div class=\"line\">    public static UnsafeLazyLoading getInstance()&#123;</div><div class=\"line\">        if( unsafeLazyLoading == null)&#123;                     //sign 1</div><div class=\"line\">            synchronized (UnsafeLazyLoading.class)&#123;</div><div class=\"line\">                if( unsafeLazyLoading == null)&#123;</div><div class=\"line\">                    unsafeLazyLoading = new UnsafeLazyLoading();   </div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        return unsafeLazyLoading;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>当声明对象的引用为volatile后，上述说到的2和3之间的重排序，在多线程环境中将会被禁止。</p>\n<h4 id=\"基于类初始化\"><a href=\"#基于类初始化\" class=\"headerlink\" title=\"基于类初始化\"></a>基于类初始化</h4><blockquote>\n<p>JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。<br>因此就可以采用静态内部类的形式实现延迟加载的效果,像上一篇文章最后的代码一样.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这样虽然允许了上述的2,3之间的重排序,但是非构造线程无法被重排序所影响. </p>\n"},{"title":"单例模式","date":"2017-06-19T04:18:25.000Z","comments":0,"keywords":"设计模式, 单例模式","_content":"\n## 单例模式\n\n### 定义\n一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)\n设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:\n\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n### 使用场景\n- 需要频繁实例化然后销毁的对象。\n- 创建对象时耗时过多或者耗资源过多，但又经常用到的对象。\n- 有状态的工具类对象。\n- 频繁访问数据库或文件的对象。\n\n### 单例模式的实现\n\n单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.\n\n#### 懒汉式典型实现\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazy {\n    private static SingletonLazy singletonLazy;\n    private SingletonLazy (){}\n    public static SingletonLazy getInstance(){\n        if( singletonLazy == null){\n            singletonLazy = new SingletonLazy();\n        }\n        return singletonLazy;\n    }\n}\n```\n懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.\n\n#### 懒汉式线程安全形式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazeSafe {\n    private static SingletonLazeSafe singletonLazeSafe;\n    private SingletonLazeSafe(){}\n    public static synchronized SingletonLazeSafe getInstance(){\n        if(singletonLazeSafe == null){\n            singletonLazeSafe = new SingletonLazeSafe();\n        }\n        return singletonLazeSafe;\n    }\n}\n```\n懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.\n\n#### 饿汉式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonHungary {\n    private static SingletonHungary singletonHungary = new SingletonHungary();\n    private SingletonHungary(){}\n    public static SingletonHungary getInstance(){\n        return singletonHungary;\n    }\n}\n```\n饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.\n\n#### ~~双重校验锁~~\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class DoubleCheckedLocking {\n    private volatile static DoubleCheckedLocking doubleCheckedLocking;\n    private DoubleCheckedLocking(){}\n    public DoubleCheckedLocking getInstance(){\n        if(doubleCheckedLocking == null){\n            synchronized (DoubleCheckedLocking.class){\n                if(doubleCheckedLocking == null){\n                    doubleCheckedLocking = new DoubleCheckedLocking();\n                }\n            }\n        }\n        return doubleCheckedLocking;\n    }\n}\n```\n这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.\n但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.\n(双重检查锁定的问题下次专门内个文章)\n\n#### 静态内部类\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.\n\n","source":"_posts/Design_pattern/singleton-pattern.md","raw":"---\ntitle: 单例模式\ndate: 2017-06-19 12:18:25\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式, 单例模式\n---\n\n## 单例模式\n\n### 定义\n一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)\n设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:\n\n1. 单例类只能有一个实例。\n2. 单例类必须自己创建自己的唯一实例。\n3. 单例类必须给所有其他对象提供这一实例。\n\n### 使用场景\n- 需要频繁实例化然后销毁的对象。\n- 创建对象时耗时过多或者耗资源过多，但又经常用到的对象。\n- 有状态的工具类对象。\n- 频繁访问数据库或文件的对象。\n\n### 单例模式的实现\n\n单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.\n\n#### 懒汉式典型实现\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazy {\n    private static SingletonLazy singletonLazy;\n    private SingletonLazy (){}\n    public static SingletonLazy getInstance(){\n        if( singletonLazy == null){\n            singletonLazy = new SingletonLazy();\n        }\n        return singletonLazy;\n    }\n}\n```\n懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.\n\n#### 懒汉式线程安全形式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonLazeSafe {\n    private static SingletonLazeSafe singletonLazeSafe;\n    private SingletonLazeSafe(){}\n    public static synchronized SingletonLazeSafe getInstance(){\n        if(singletonLazeSafe == null){\n            singletonLazeSafe = new SingletonLazeSafe();\n        }\n        return singletonLazeSafe;\n    }\n}\n```\n懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.\n\n#### 饿汉式\n\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonHungary {\n    private static SingletonHungary singletonHungary = new SingletonHungary();\n    private SingletonHungary(){}\n    public static SingletonHungary getInstance(){\n        return singletonHungary;\n    }\n}\n```\n饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.\n\n#### ~~双重校验锁~~\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class DoubleCheckedLocking {\n    private volatile static DoubleCheckedLocking doubleCheckedLocking;\n    private DoubleCheckedLocking(){}\n    public DoubleCheckedLocking getInstance(){\n        if(doubleCheckedLocking == null){\n            synchronized (DoubleCheckedLocking.class){\n                if(doubleCheckedLocking == null){\n                    doubleCheckedLocking = new DoubleCheckedLocking();\n                }\n            }\n        }\n        return doubleCheckedLocking;\n    }\n}\n```\n这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.\n但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.\n(双重检查锁定的问题下次专门内个文章)\n\n#### 静态内部类\n```\npackage factory.pattern.singleton;\n/**\n * Created by fk5431 on 6/19/17.\n */\npublic class SingletonStaticClass {\n    //静态内部类\n    private static class SingletonHodler{\n        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();\n    }\n    private SingletonStaticClass(){}\n    public static final SingletonStaticClass getInstance(){\n        return SingletonHodler.INSTANCE;\n    }\n}\n```\n这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.\n\n","slug":"Design_pattern/singleton-pattern","published":1,"updated":"2017-06-20T15:26:17.331Z","layout":"post","photos":[],"link":"","_id":"cj5hj5ytk000e4lm32s9s368s","content":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)<br>设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>需要频繁实例化然后销毁的对象。</li>\n<li>创建对象时耗时过多或者耗资源过多，但又经常用到的对象。</li>\n<li>有状态的工具类对象。</li>\n<li>频繁访问数据库或文件的对象。</li>\n</ul>\n<h3 id=\"单例模式的实现\"><a href=\"#单例模式的实现\" class=\"headerlink\" title=\"单例模式的实现\"></a>单例模式的实现</h3><p>单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.</p>\n<h4 id=\"懒汉式典型实现\"><a href=\"#懒汉式典型实现\" class=\"headerlink\" title=\"懒汉式典型实现\"></a>懒汉式典型实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazy &#123;</div><div class=\"line\">    private static SingletonLazy singletonLazy;</div><div class=\"line\">    private SingletonLazy ()&#123;&#125;</div><div class=\"line\">    public static SingletonLazy getInstance()&#123;</div><div class=\"line\">        if( singletonLazy == null)&#123;</div><div class=\"line\">            singletonLazy = new SingletonLazy();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazy;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.</p>\n<h4 id=\"懒汉式线程安全形式\"><a href=\"#懒汉式线程安全形式\" class=\"headerlink\" title=\"懒汉式线程安全形式\"></a>懒汉式线程安全形式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazeSafe &#123;</div><div class=\"line\">    private static SingletonLazeSafe singletonLazeSafe;</div><div class=\"line\">    private SingletonLazeSafe()&#123;&#125;</div><div class=\"line\">    public static synchronized SingletonLazeSafe getInstance()&#123;</div><div class=\"line\">        if(singletonLazeSafe == null)&#123;</div><div class=\"line\">            singletonLazeSafe = new SingletonLazeSafe();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazeSafe;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.</p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonHungary &#123;</div><div class=\"line\">    private static SingletonHungary singletonHungary = new SingletonHungary();</div><div class=\"line\">    private SingletonHungary()&#123;&#125;</div><div class=\"line\">    public static SingletonHungary getInstance()&#123;</div><div class=\"line\">        return singletonHungary;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.</p>\n<h4 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a><del>双重校验锁</del></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class DoubleCheckedLocking &#123;</div><div class=\"line\">    private volatile static DoubleCheckedLocking doubleCheckedLocking;</div><div class=\"line\">    private DoubleCheckedLocking()&#123;&#125;</div><div class=\"line\">    public DoubleCheckedLocking getInstance()&#123;</div><div class=\"line\">        if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">            synchronized (DoubleCheckedLocking.class)&#123;</div><div class=\"line\">                if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">                    doubleCheckedLocking = new DoubleCheckedLocking();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return doubleCheckedLocking;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.<br>但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.<br>(双重检查锁定的问题下次专门内个文章)</p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>一个类有且仅有一个实例，并且自行实例化向整个系统提供。(创建型模式)<br>设计模式中比较简单的几种之一,单例模式就是让一个类在系统运行过程中只会产生唯一的一个实例,单例模式主要:</p>\n<ol>\n<li>单例类只能有一个实例。</li>\n<li>单例类必须自己创建自己的唯一实例。</li>\n<li>单例类必须给所有其他对象提供这一实例。</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ul>\n<li>需要频繁实例化然后销毁的对象。</li>\n<li>创建对象时耗时过多或者耗资源过多，但又经常用到的对象。</li>\n<li>有状态的工具类对象。</li>\n<li>频繁访问数据库或文件的对象。</li>\n</ul>\n<h3 id=\"单例模式的实现\"><a href=\"#单例模式的实现\" class=\"headerlink\" title=\"单例模式的实现\"></a>单例模式的实现</h3><p>单例模式的实现一般根据实例化对象时的不同分为懒汉式和饿汉式.</p>\n<h4 id=\"懒汉式典型实现\"><a href=\"#懒汉式典型实现\" class=\"headerlink\" title=\"懒汉式典型实现\"></a>懒汉式典型实现</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazy &#123;</div><div class=\"line\">    private static SingletonLazy singletonLazy;</div><div class=\"line\">    private SingletonLazy ()&#123;&#125;</div><div class=\"line\">    public static SingletonLazy getInstance()&#123;</div><div class=\"line\">        if( singletonLazy == null)&#123;</div><div class=\"line\">            singletonLazy = new SingletonLazy();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazy;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的模式就是在需要进行实例化的时候在进行实例化,这种方式在多线程的时候是有问题的,会有线程安全问题.</p>\n<h4 id=\"懒汉式线程安全形式\"><a href=\"#懒汉式线程安全形式\" class=\"headerlink\" title=\"懒汉式线程安全形式\"></a>懒汉式线程安全形式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonLazeSafe &#123;</div><div class=\"line\">    private static SingletonLazeSafe singletonLazeSafe;</div><div class=\"line\">    private SingletonLazeSafe()&#123;&#125;</div><div class=\"line\">    public static synchronized SingletonLazeSafe getInstance()&#123;</div><div class=\"line\">        if(singletonLazeSafe == null)&#123;</div><div class=\"line\">            singletonLazeSafe = new SingletonLazeSafe();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return singletonLazeSafe;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>懒汉式的线程安全模式在进入获取实例方法时候就会加synchronize,可以保证线程安全获取唯一的实例,但是如果该方法调用过多会有性能方面的影响.</p>\n<h4 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonHungary &#123;</div><div class=\"line\">    private static SingletonHungary singletonHungary = new SingletonHungary();</div><div class=\"line\">    private SingletonHungary()&#123;&#125;</div><div class=\"line\">    public static SingletonHungary getInstance()&#123;</div><div class=\"line\">        return singletonHungary;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>饿汉式会在类装载时候就进行实例的初始化,虽然没有了synchronize的效率影响,但是在类加载的时候就进行了初始化一方面浪费了内存,也没有实现lazy loading加载的效果.</p>\n<h4 id=\"双重校验锁\"><a href=\"#双重校验锁\" class=\"headerlink\" title=\"双重校验锁\"></a><del>双重校验锁</del></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class DoubleCheckedLocking &#123;</div><div class=\"line\">    private volatile static DoubleCheckedLocking doubleCheckedLocking;</div><div class=\"line\">    private DoubleCheckedLocking()&#123;&#125;</div><div class=\"line\">    public DoubleCheckedLocking getInstance()&#123;</div><div class=\"line\">        if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">            synchronized (DoubleCheckedLocking.class)&#123;</div><div class=\"line\">                if(doubleCheckedLocking == null)&#123;</div><div class=\"line\">                    doubleCheckedLocking = new DoubleCheckedLocking();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return doubleCheckedLocking;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式采用了双锁机制,一方面保证了多线程的安全,另一方面还提高了效率.<br>但是看起来是完美,但是实际上这种方式是有缺陷的,是错误的一种.<br>(双重检查锁定的问题下次专门内个文章)</p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">package factory.pattern.singleton;</div><div class=\"line\">/**</div><div class=\"line\"> * Created by fk5431 on 6/19/17.</div><div class=\"line\"> */</div><div class=\"line\">public class SingletonStaticClass &#123;</div><div class=\"line\">    //静态内部类</div><div class=\"line\">    private static class SingletonHodler&#123;</div><div class=\"line\">        private static final SingletonStaticClass INSTANCE = new SingletonStaticClass();</div><div class=\"line\">    &#125;</div><div class=\"line\">    private SingletonStaticClass()&#123;&#125;</div><div class=\"line\">    public static final SingletonStaticClass getInstance()&#123;</div><div class=\"line\">        return SingletonHodler.INSTANCE;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种方式利用了 classloder 机制来保证初始化 instance 时只有一个线程,但是这个是类装载的时候不一定会进行初始化,只有在调用 getInstance 方法时候才会显示的装载SingletonHodler,然后实例化instance.</p>\n"},{"title":"设计模式","date":"2017-06-16T13:09:10.000Z","comments":0,"keywords":"设计模式","_content":"\n## 设计模式\n设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。\n使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。\n\n## 设计原则\n\n### 开闭原则\n\n模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）\n\n### 里氏替换原则\n\n任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（里氏替换原则可以说继承复用的基础）\n\n### 依赖倒转原则\n\n把父类都替换成它的子类，程序的行为没有变化。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。\n\n### 接口隔离原则\n\n使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。\n\n### 最少知道原则（迪米特法则）\n\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。\n\n### 合成复用原则\n\n尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。\n\n## 设计模式的分类\n\n- **创建型模式**：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。\n- **结构型模式**：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n- **行为型模式**：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。\n- **J2EE模式**：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。\n\n\n![design_patterns](../../../uploads/design-patterns.jpg)(图片来自菜鸟教程)","source":"_posts/Design_pattern/start.md","raw":"---\ntitle: 设计模式\ndate: 2017-06-16 21:09:10\ncomments: false\ntags: \n- 设计模式\ncategories: \n- 设计模式\nkeywords: 设计模式\n---\n\n## 设计模式\n设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。\n使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。\n\n## 设计原则\n\n### 开闭原则\n\n模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）\n\n### 里氏替换原则\n\n任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（里氏替换原则可以说继承复用的基础）\n\n### 依赖倒转原则\n\n把父类都替换成它的子类，程序的行为没有变化。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。\n\n### 接口隔离原则\n\n使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。\n\n### 最少知道原则（迪米特法则）\n\n一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。\n\n### 合成复用原则\n\n尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。\n\n## 设计模式的分类\n\n- **创建型模式**：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。\n- **结构型模式**：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。\n- **行为型模式**：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。\n- **J2EE模式**：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。\n\n\n![design_patterns](../../../uploads/design-patterns.jpg)(图片来自菜鸟教程)","slug":"Design_pattern/start","published":1,"updated":"2017-06-17T22:17:35.568Z","layout":"post","photos":[],"link":"","_id":"cj5hj5ytq000i4lm3bn4n2bv5","content":"<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。<br>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><p>模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）</p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（里氏替换原则可以说继承复用的基础）</p>\n<h3 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h3><p>把父类都替换成它的子类，程序的行为没有变化。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。</p>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><p>使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。</p>\n<h3 id=\"最少知道原则（迪米特法则）\"><a href=\"#最少知道原则（迪米特法则）\" class=\"headerlink\" title=\"最少知道原则（迪米特法则）\"></a>最少知道原则（迪米特法则）</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。</p>\n<h3 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h3><p>尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><ul>\n<li><strong>创建型模式</strong>：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</li>\n<li><strong>结构型模式</strong>：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li>\n<li><strong>行为型模式</strong>：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。</li>\n<li><strong>J2EE模式</strong>：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。</li>\n</ul>\n<p><img src=\"../../../uploads/design-patterns.jpg\" alt=\"design_patterns\">(图片来自菜鸟教程)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h2><p>设计模式是一套被反复使用、多数人知晓的、经过分类的、代码设计经验的总结。其实就是经过前人反复使用总结使用得出在不同场景有对应的解决方案。<br>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p>\n<h2 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h2><h3 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h3><p>模块应对扩展开放，对修改关闭，也就是在对程序进行拓展的时候，不要去修改原来的代码，实现热插拔的效果。这样可以使得程序扩展性更好，更易于维护。（主要是使用接口和抽象类实现，例如“抽象工厂模式”）</p>\n<h3 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h3><p>任何父类出现的地方，子类一定可以出现，就是用子类替换也一定可以运行。（里氏替换原则可以说继承复用的基础）</p>\n<h3 id=\"依赖倒转原则\"><a href=\"#依赖倒转原则\" class=\"headerlink\" title=\"依赖倒转原则\"></a>依赖倒转原则</h3><p>把父类都替换成它的子类，程序的行为没有变化。（开闭原则的基础）针对接口编程，依赖抽象类而不依赖具体类。</p>\n<h3 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h3><p>使用多个隔离的接口，比使用单个接口要好。其实就降低程序之间的耦合度，增加系统的可维护性。</p>\n<h3 id=\"最少知道原则（迪米特法则）\"><a href=\"#最少知道原则（迪米特法则）\" class=\"headerlink\" title=\"最少知道原则（迪米特法则）\"></a>最少知道原则（迪米特法则）</h3><p>一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。也是降低类之间的耦合度。</p>\n<h3 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h3><p>尽量使用合成/聚合的方式，而不是使用继承。某些情景下可以在一个新对象里面使用一些已有的对象达到复用的作用，而不是通过继承的方式，这样如果已有的类要进行改动就不需要对所有的类进行改动了。</p>\n<h2 id=\"设计模式的分类\"><a href=\"#设计模式的分类\" class=\"headerlink\" title=\"设计模式的分类\"></a>设计模式的分类</h2><ul>\n<li><strong>创建型模式</strong>：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。</li>\n<li><strong>结构型模式</strong>：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。</li>\n<li><strong>行为型模式</strong>：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。</li>\n<li><strong>J2EE模式</strong>：MVC 模式、业务代表模式、组合实体模式、数据访问对象模式、前端控制器模式、拦截过滤器模式、服务定位器模式、传输对象模式。</li>\n</ul>\n<p><img src=\"../../../uploads/design-patterns.jpg\" alt=\"design_patterns\">(图片来自菜鸟教程)</p>\n"},{"title":"深入分析ConcurrentHashMap","date":"2017-05-03T07:24:25.000Z","comments":0,"keywords":"ConcurrentHashMap, 并发","_content":"\n### HashMap的问题\nHashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。\n\n#### Hash表的数据结构\nHashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value>插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。\n如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。\n所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。\n\n#### HashMap的源码\n\n```\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    //计算Hash值\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    //如果存在值，替换旧值\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    //增加节点\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n上面代码是HashMap进行put一个元素时候的源码。\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    //如果大小大于现在的threshold时候，需要resize\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n```\n在增加节点时候会判断是否需要rehash操作。\n\n```\n void resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n    //新建一个Hash Table\n    Entry[] newTable = new Entry[newCapacity];\n    //吧旧oldtable 迁移到新的newTable上\n    transfer(newTable, initHashSeedAsNeeded(newCapacity));\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\n```\nresize源码会新建个更大的hash表\n\n```\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    //  从OldTable里摘一个元素出来，然后放到NewTable中\n    for (Entry<K,V> e : table) {\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n迁移源代码\n\n#### 正常ReHash过程\n\n就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。\n\n#### 并发下的Rehash\n\n假设有两个线程，当第一个线程执行到 \n```\n    Entry<K, V> next = e.next;\n```\n时候被挂起。\n```\n假设有三个值， <3,a>,<7,b>,<5,c>,HashMap的初始大小是2\n ______           e               next\n|__0___|       _______          _______          _______ \n|__1___| ---> |_<3,a>_| -----> |_<7,b>_| -----> |_<5,c>_|\n```\n那么现在线程1如下：\n```\n ______    \n|__0___|      \n|__1___|   \n|__2___|      \n|__3___|\n```\n那么线程2开始rehash：\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                next               e\n```\n\n那么如果现在线程1被调度开始执行：\n```\nnewTable[i] = e;\ne = next;\n```\n- 先是执行 newTalbe[i] = e;\n- 然后是e = next，导致了e指向了key(7)，\n- 而下一次循环的next = e.next导致了next指向了key(3)\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                e                 next\n```\n这样就会导致\n```\n线程1\n ______    \n|__0___|           __________________              \n|__1___|          |                 |            \n|__2___|       ___|___          ____|__ \n|__3___| ---> |_<3,a>_| -----> |_<7,b>_| ----> null\n                                \n```\n产生循环链表，导致死循环。\n\n### concurrentHashMap原理\nconcurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。\n\n![concurrentHashMap](../../../uploads/concurrentHashMap.png)\n\nHashEntry源码:\n```\nstatic final class HashEntry<K,V> {\n        final int hash;\n        final K key;\n        volatile V value;\n        volatile HashEntry<K,V> next;\n```\n\nvolatile关键字保证了多线程读取的时候一定是最新值。\n\nConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。\n\n#### 基本操作源码分析\n\n构造方法:\n```\npublic ConcurrentHashMap(int initialCapacity,\n                         float loadFactor, int concurrencyLevel) {\n    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)\n        throw new IllegalArgumentException();\n    if (concurrencyLevel > MAX_SEGMENTS)\n        concurrencyLevel = MAX_SEGMENTS;   //1\n    int sshift = 0;\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;    //2\n    }\n    this.segmentShift = 32 - sshift;  //3\n    this.segmentMask = ssize - 1;   //4\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    int c = initialCapacity / ssize;\n    if (c * ssize < initialCapacity)\n        ++c;\n    int cap = MIN_SEGMENT_TABLE_CAPACITY;\n    while (cap < c)\n        cap <<= 1;\n    Segment<K,V> s0 =\n        new Segment<K,V>(loadFactor, (int)(cap * loadFactor),\n                         (HashEntry<K,V>[])new HashEntry[cap]);//5\n    Segment<K,V>[] ss = (Segment<K,V>[])new Segment[ssize]; //6\n    UNSAFE.putOrderedObject(ss, SBASE, s0); \n    this.segments = ss;\n}\n```\n\n整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。\n\n注释1: 最大的并发等级不能超过MAX_SEGMENTS 1<<16(也就是1的二进制向左移16位,65535)\n\n注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.\n\n注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；\n\n注释5和6: 初始化segment\n\n1. 初始化每个segment的HashEntry长度；\n\n2. 创建segment数组和segment[0]。\n\n> HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。\n\n#### get操作\n```\npublic V get(Object key) {\n    Segment<K,V> s; \n    HashEntry<K,V>[] tab;\n    int h = hash(key);  //1\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&  //2\n        (tab = s.table) != null) {\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\n注释1: 根据key计算hash值\n\n注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环\n\n里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null\n\n#### put操作\n```\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash >>> segmentShift) & segmentMask;\n    if ((s = (Segment<K,V>)UNSAFE.getObject          \n         (segments, (j << SSHIFT) + SBASE)) == null) \n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}\n```\n1. 判断值是否为null\n\n2. 计算hash值\n\n3. 定位segment 如果不存在，则创建\n\n4. 调用segment的put方法\n\n还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true\n再来看看Segment的put方法\n```\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry<K,V> node = tryLock() ? null :\n        scanAndLockForPut(key, hash, value);  //1\n    V oldValue;\n    try {\n        HashEntry<K,V>[] tab = table;\n        int index = (tab.length - 1) & hash;\n        HashEntry<K,V> first = entryAt(tab, index);  //2\n        for (HashEntry<K,V> e = first;;) { //3\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash && key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry<K,V>(hash, key, value, first);\n                int c = count + 1;\n                if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}\n```\n注释1: 获取锁 ，保证线程安全\n\n注释2:定位到具体的HashEntry\n\n注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.\n\n最后释放锁,返回旧值.\n\n再说明一下put 和 putifAbsent的用法\n\n这两个方法本身是线程安全的,但是要看你的用法是否恰当\n\n例子:\n```\nprivate static ConcurrentHashMap<String,AtomicInteger> map = new ConcurrentHashMap<>();\npublic static void putInTo(String key) {\n    AtomicInteger obj = map.get(key);\n    if(obj == null){\n        map.put(key, new AtomicInteger(0));\n    }else{\n        obj.incrementAndGet();\n        map.put(key, obj);\n    }\n}\n```\n\n这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。\n\n原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。\n\n这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法\n```\nprivate static ConcurrentMap<String, AtomicLong> wordCounts = newConcurrentHashMap<>();  \n   \npublic static long increase(String word) {  \n    AtomicLong number = wordCounts.get(word);  \n    if(number == null) {  \n        AtomicLong newNumber = newAtomicLong(0);  \n        number = wordCounts.putIfAbsent(word, newNumber);  \n        if(number == null) {  \n            number = newNumber;  \n        }  \n    }  \n    return number.incrementAndGet();  \n}\n```\n获取size\n```\npublic int size() {\n    final Segment<K,V>[] segments = this.segments;\n    int size;\n    boolean overflow; \n    long sum;         \n    long last = 0L;   \n    int retries = -1; \n    try {\n        for (;;) {\n            if (retries++ == RETRIES_BEFORE_LOCK) {  //1\n                for (int j = 0; j < segments.length; ++j)\n                    ensureSegment(j).lock(); \n            }\n            sum = 0L;\n            size = 0;\n            overflow = false;\n            for (int j = 0; j < segments.length; ++j) {\n                Segment<K,V> seg = segmentAt(segments, j);\n                if (seg != null) {\n                    sum += seg.modCount;  //2\n                    int c = seg.count;\n                    if (c < 0 || (size += c) < 0)\n                        overflow = true;\n                }\n            }\n            if (sum == last)\n                break;\n            last = sum;\n        }\n    } finally {\n        if (retries > RETRIES_BEFORE_LOCK) {\n            for (int j = 0; j < segments.length; ++j)\n                segmentAt(segments, j).unlock();\n        }\n    }\n    return overflow ? Integer.MAX_VALUE : size;\n}\n```\n\n注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count\n ","source":"_posts/java/concurrentHashMap.md","raw":"---\ntitle: 深入分析ConcurrentHashMap \ndate: 2017-05-03 15:24:25\ncomments: false\ntags: \n- java\ncategories: \n- java\nkeywords: ConcurrentHashMap, 并发\n---\n\n### HashMap的问题\nHashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。\n\n#### Hash表的数据结构\nHashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value>插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。\n如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。\n所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。\n\n#### HashMap的源码\n\n```\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    //计算Hash值\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    //如果存在值，替换旧值\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    //增加节点\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n上面代码是HashMap进行put一个元素时候的源码。\n\n```\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    //如果大小大于现在的threshold时候，需要resize\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n```\n在增加节点时候会判断是否需要rehash操作。\n\n```\n void resize(int newCapacity) {\n    Entry[] oldTable = table;\n    int oldCapacity = oldTable.length;\n    if (oldCapacity == MAXIMUM_CAPACITY) {\n        threshold = Integer.MAX_VALUE;\n        return;\n    }\n    //新建一个Hash Table\n    Entry[] newTable = new Entry[newCapacity];\n    //吧旧oldtable 迁移到新的newTable上\n    transfer(newTable, initHashSeedAsNeeded(newCapacity));\n    table = newTable;\n    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n}\n```\nresize源码会新建个更大的hash表\n\n```\nvoid transfer(Entry[] newTable, boolean rehash) {\n    int newCapacity = newTable.length;\n    //  从OldTable里摘一个元素出来，然后放到NewTable中\n    for (Entry<K,V> e : table) {\n        while(null != e) {\n            Entry<K,V> next = e.next;\n            if (rehash) {\n                e.hash = null == e.key ? 0 : hash(e.key);\n            }\n            int i = indexFor(e.hash, newCapacity);\n            e.next = newTable[i];\n            newTable[i] = e;\n            e = next;\n        }\n    }\n}\n```\n迁移源代码\n\n#### 正常ReHash过程\n\n就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。\n\n#### 并发下的Rehash\n\n假设有两个线程，当第一个线程执行到 \n```\n    Entry<K, V> next = e.next;\n```\n时候被挂起。\n```\n假设有三个值， <3,a>,<7,b>,<5,c>,HashMap的初始大小是2\n ______           e               next\n|__0___|       _______          _______          _______ \n|__1___| ---> |_<3,a>_| -----> |_<7,b>_| -----> |_<5,c>_|\n```\n那么现在线程1如下：\n```\n ______    \n|__0___|      \n|__1___|   \n|__2___|      \n|__3___|\n```\n那么线程2开始rehash：\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                next               e\n```\n\n那么如果现在线程1被调度开始执行：\n```\nnewTable[i] = e;\ne = next;\n```\n- 先是执行 newTalbe[i] = e;\n- 然后是e = next，导致了e指向了key(7)，\n- 而下一次循环的next = e.next导致了next指向了key(3)\n```\n ______    \n|__0___|              _______\n|__1___| ----------> |_<5,c>_|  ---------> null \n|__2___|       _______          _______ \n|__3___| ---> |_<7,b>_| -----> |_<3,a>_| ----> null\n                e                 next\n```\n这样就会导致\n```\n线程1\n ______    \n|__0___|           __________________              \n|__1___|          |                 |            \n|__2___|       ___|___          ____|__ \n|__3___| ---> |_<3,a>_| -----> |_<7,b>_| ----> null\n                                \n```\n产生循环链表，导致死循环。\n\n### concurrentHashMap原理\nconcurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。\n\n![concurrentHashMap](../../../uploads/concurrentHashMap.png)\n\nHashEntry源码:\n```\nstatic final class HashEntry<K,V> {\n        final int hash;\n        final K key;\n        volatile V value;\n        volatile HashEntry<K,V> next;\n```\n\nvolatile关键字保证了多线程读取的时候一定是最新值。\n\nConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。\n\n#### 基本操作源码分析\n\n构造方法:\n```\npublic ConcurrentHashMap(int initialCapacity,\n                         float loadFactor, int concurrencyLevel) {\n    if (!(loadFactor > 0) || initialCapacity < 0 || concurrencyLevel <= 0)\n        throw new IllegalArgumentException();\n    if (concurrencyLevel > MAX_SEGMENTS)\n        concurrencyLevel = MAX_SEGMENTS;   //1\n    int sshift = 0;\n    int ssize = 1;\n    while (ssize < concurrencyLevel) {\n        ++sshift;\n        ssize <<= 1;    //2\n    }\n    this.segmentShift = 32 - sshift;  //3\n    this.segmentMask = ssize - 1;   //4\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    int c = initialCapacity / ssize;\n    if (c * ssize < initialCapacity)\n        ++c;\n    int cap = MIN_SEGMENT_TABLE_CAPACITY;\n    while (cap < c)\n        cap <<= 1;\n    Segment<K,V> s0 =\n        new Segment<K,V>(loadFactor, (int)(cap * loadFactor),\n                         (HashEntry<K,V>[])new HashEntry[cap]);//5\n    Segment<K,V>[] ss = (Segment<K,V>[])new Segment[ssize]; //6\n    UNSAFE.putOrderedObject(ss, SBASE, s0); \n    this.segments = ss;\n}\n```\n\n整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。\n\n注释1: 最大的并发等级不能超过MAX_SEGMENTS 1<<16(也就是1的二进制向左移16位,65535)\n\n注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.\n\n注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；\n\n注释5和6: 初始化segment\n\n1. 初始化每个segment的HashEntry长度；\n\n2. 创建segment数组和segment[0]。\n\n> HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。\n\n#### get操作\n```\npublic V get(Object key) {\n    Segment<K,V> s; \n    HashEntry<K,V>[] tab;\n    int h = hash(key);  //1\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&  //2\n        (tab = s.table) != null) {\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n                 (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\n注释1: 根据key计算hash值\n\n注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环\n\n里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null\n\n#### put操作\n```\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash >>> segmentShift) & segmentMask;\n    if ((s = (Segment<K,V>)UNSAFE.getObject          \n         (segments, (j << SSHIFT) + SBASE)) == null) \n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}\n```\n1. 判断值是否为null\n\n2. 计算hash值\n\n3. 定位segment 如果不存在，则创建\n\n4. 调用segment的put方法\n\n还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true\n再来看看Segment的put方法\n```\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry<K,V> node = tryLock() ? null :\n        scanAndLockForPut(key, hash, value);  //1\n    V oldValue;\n    try {\n        HashEntry<K,V>[] tab = table;\n        int index = (tab.length - 1) & hash;\n        HashEntry<K,V> first = entryAt(tab, index);  //2\n        for (HashEntry<K,V> e = first;;) { //3\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash && key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry<K,V>(hash, key, value, first);\n                int c = count + 1;\n                if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}\n```\n注释1: 获取锁 ，保证线程安全\n\n注释2:定位到具体的HashEntry\n\n注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.\n\n最后释放锁,返回旧值.\n\n再说明一下put 和 putifAbsent的用法\n\n这两个方法本身是线程安全的,但是要看你的用法是否恰当\n\n例子:\n```\nprivate static ConcurrentHashMap<String,AtomicInteger> map = new ConcurrentHashMap<>();\npublic static void putInTo(String key) {\n    AtomicInteger obj = map.get(key);\n    if(obj == null){\n        map.put(key, new AtomicInteger(0));\n    }else{\n        obj.incrementAndGet();\n        map.put(key, obj);\n    }\n}\n```\n\n这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。\n\n原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。\n\n这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法\n```\nprivate static ConcurrentMap<String, AtomicLong> wordCounts = newConcurrentHashMap<>();  \n   \npublic static long increase(String word) {  \n    AtomicLong number = wordCounts.get(word);  \n    if(number == null) {  \n        AtomicLong newNumber = newAtomicLong(0);  \n        number = wordCounts.putIfAbsent(word, newNumber);  \n        if(number == null) {  \n            number = newNumber;  \n        }  \n    }  \n    return number.incrementAndGet();  \n}\n```\n获取size\n```\npublic int size() {\n    final Segment<K,V>[] segments = this.segments;\n    int size;\n    boolean overflow; \n    long sum;         \n    long last = 0L;   \n    int retries = -1; \n    try {\n        for (;;) {\n            if (retries++ == RETRIES_BEFORE_LOCK) {  //1\n                for (int j = 0; j < segments.length; ++j)\n                    ensureSegment(j).lock(); \n            }\n            sum = 0L;\n            size = 0;\n            overflow = false;\n            for (int j = 0; j < segments.length; ++j) {\n                Segment<K,V> seg = segmentAt(segments, j);\n                if (seg != null) {\n                    sum += seg.modCount;  //2\n                    int c = seg.count;\n                    if (c < 0 || (size += c) < 0)\n                        overflow = true;\n                }\n            }\n            if (sum == last)\n                break;\n            last = sum;\n        }\n    } finally {\n        if (retries > RETRIES_BEFORE_LOCK) {\n            for (int j = 0; j < segments.length; ++j)\n                segmentAt(segments, j).unlock();\n        }\n    }\n    return overflow ? Integer.MAX_VALUE : size;\n}\n```\n\n注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count\n ","slug":"java/concurrentHashMap","published":1,"updated":"2017-06-15T13:35:30.643Z","layout":"post","photos":[],"link":"","_id":"cj5hj5ytv000l4lm3jk5d58e1","content":"<h3 id=\"HashMap的问题\"><a href=\"#HashMap的问题\" class=\"headerlink\" title=\"HashMap的问题\"></a>HashMap的问题</h3><p>HashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。</p>\n<h4 id=\"Hash表的数据结构\"><a href=\"#Hash表的数据结构\" class=\"headerlink\" title=\"Hash表的数据结构\"></a>Hash表的数据结构</h4><p>HashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value=\"\">插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。<br>如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。<br>所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。</key,></p>\n<h4 id=\"HashMap的源码\"><a href=\"#HashMap的源码\" class=\"headerlink\" title=\"HashMap的源码\"></a>HashMap的源码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    if (table == EMPTY_TABLE) &#123;</div><div class=\"line\">        inflateTable(threshold);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return putForNullKey(value);</div><div class=\"line\">    //计算Hash值</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int i = indexFor(hash, table.length);</div><div class=\"line\">    //如果存在值，替换旧值</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            e.recordAccess(this);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    modCount++;</div><div class=\"line\">    //增加节点</div><div class=\"line\">    addEntry(hash, key, value, i);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码是HashMap进行put一个元素时候的源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class=\"line\">    //如果大小大于现在的threshold时候，需要resize</div><div class=\"line\">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class=\"line\">        resize(2 * table.length);</div><div class=\"line\">        hash = (null != key) ? hash(key) : 0;</div><div class=\"line\">        bucketIndex = indexFor(hash, table.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createEntry(hash, key, value, bucketIndex);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在增加节点时候会判断是否需要rehash操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> void resize(int newCapacity) &#123;</div><div class=\"line\">    Entry[] oldTable = table;</div><div class=\"line\">    int oldCapacity = oldTable.length;</div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">        threshold = Integer.MAX_VALUE;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //新建一个Hash Table</div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];</div><div class=\"line\">    //吧旧oldtable 迁移到新的newTable上</div><div class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class=\"line\">    table = newTable;</div><div class=\"line\">    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resize源码会新建个更大的hash表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable, boolean rehash) &#123;</div><div class=\"line\">    int newCapacity = newTable.length;</div><div class=\"line\">    //  从OldTable里摘一个元素出来，然后放到NewTable中</div><div class=\"line\">    for (Entry&lt;K,V&gt; e : table) &#123;</div><div class=\"line\">        while(null != e) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; next = e.next;</div><div class=\"line\">            if (rehash) &#123;</div><div class=\"line\">                e.hash = null == e.key ? 0 : hash(e.key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            int i = indexFor(e.hash, newCapacity);</div><div class=\"line\">            e.next = newTable[i];</div><div class=\"line\">            newTable[i] = e;</div><div class=\"line\">            e = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迁移源代码</p>\n<h4 id=\"正常ReHash过程\"><a href=\"#正常ReHash过程\" class=\"headerlink\" title=\"正常ReHash过程\"></a>正常ReHash过程</h4><p>就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。</p>\n<h4 id=\"并发下的Rehash\"><a href=\"#并发下的Rehash\" class=\"headerlink\" title=\"并发下的Rehash\"></a>并发下的Rehash</h4><p>假设有两个线程，当第一个线程执行到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Entry&lt;K, V&gt; next = e.next;</div></pre></td></tr></table></figure></p>\n<p>时候被挂起。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">假设有三个值， &lt;3,a&gt;,&lt;7,b&gt;,&lt;5,c&gt;,HashMap的初始大小是2</div><div class=\"line\"> ______           e               next</div><div class=\"line\">|__0___|       _______          _______          _______ </div><div class=\"line\">|__1___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;5,c&gt;_|</div></pre></td></tr></table></figure></p>\n<p>那么现在线程1如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|      </div><div class=\"line\">|__1___|   </div><div class=\"line\">|__2___|      </div><div class=\"line\">|__3___|</div></pre></td></tr></table></figure></p>\n<p>那么线程2开始rehash：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                next               e</div></pre></td></tr></table></figure></p>\n<p>那么如果现在线程1被调度开始执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newTable[i] = e;</div><div class=\"line\">e = next;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>先是执行 newTalbe[i] = e;</li>\n<li>然后是e = next，导致了e指向了key(7)，</li>\n<li>而下一次循环的next = e.next导致了next指向了key(3)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                e                 next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就会导致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">线程1</div><div class=\"line\"> ______    </div><div class=\"line\">|__0___|           __________________              </div><div class=\"line\">|__1___|          |                 |            </div><div class=\"line\">|__2___|       ___|___          ____|__ </div><div class=\"line\">|__3___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| ----&gt; null</div></pre></td></tr></table></figure></p>\n<p>产生循环链表，导致死循环。</p>\n<h3 id=\"concurrentHashMap原理\"><a href=\"#concurrentHashMap原理\" class=\"headerlink\" title=\"concurrentHashMap原理\"></a>concurrentHashMap原理</h3><p>concurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>\n<p><img src=\"../../../uploads/concurrentHashMap.png\" alt=\"concurrentHashMap\"></p>\n<p>HashEntry源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class HashEntry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        volatile V value;</div><div class=\"line\">        volatile HashEntry&lt;K,V&gt; next;</div></pre></td></tr></table></figure></p>\n<p>volatile关键字保证了多线程读取的时候一定是最新值。</p>\n<p>ConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。</p>\n<h4 id=\"基本操作源码分析\"><a href=\"#基本操作源码分析\" class=\"headerlink\" title=\"基本操作源码分析\"></a>基本操作源码分析</h4><p>构造方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ConcurrentHashMap(int initialCapacity,</div><div class=\"line\">                         float loadFactor, int concurrencyLevel) &#123;</div><div class=\"line\">    if (!(loadFactor &gt; 0) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0)</div><div class=\"line\">        throw new IllegalArgumentException();</div><div class=\"line\">    if (concurrencyLevel &gt; MAX_SEGMENTS)</div><div class=\"line\">        concurrencyLevel = MAX_SEGMENTS;   //1</div><div class=\"line\">    int sshift = 0;</div><div class=\"line\">    int ssize = 1;</div><div class=\"line\">    while (ssize &lt; concurrencyLevel) &#123;</div><div class=\"line\">        ++sshift;</div><div class=\"line\">        ssize &lt;&lt;= 1;    //2</div><div class=\"line\">    &#125;</div><div class=\"line\">    this.segmentShift = 32 - sshift;  //3</div><div class=\"line\">    this.segmentMask = ssize - 1;   //4</div><div class=\"line\">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</div><div class=\"line\">    int c = initialCapacity / ssize;</div><div class=\"line\">    if (c * ssize &lt; initialCapacity)</div><div class=\"line\">        ++c;</div><div class=\"line\">    int cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class=\"line\">    while (cap &lt; c)</div><div class=\"line\">        cap &lt;&lt;= 1;</div><div class=\"line\">    Segment&lt;K,V&gt; s0 =</div><div class=\"line\">        new Segment&lt;K,V&gt;(loadFactor, (int)(cap * loadFactor),</div><div class=\"line\">                         (HashEntry&lt;K,V&gt;[])new HashEntry[cap]);//5</div><div class=\"line\">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])new Segment[ssize]; //6</div><div class=\"line\">    UNSAFE.putOrderedObject(ss, SBASE, s0); </div><div class=\"line\">    this.segments = ss;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。</p>\n<p>注释1: 最大的并发等级不能超过MAX_SEGMENTS 1&lt;&lt;16(也就是1的二进制向左移16位,65535)</p>\n<p>注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.</p>\n<p>注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；</p>\n<p>注释5和6: 初始化segment</p>\n<ol>\n<li><p>初始化每个segment的HashEntry长度；</p>\n</li>\n<li><p>创建segment数组和segment[0]。</p>\n</li>\n</ol>\n<blockquote>\n<p>HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。</p>\n</blockquote>\n<h4 id=\"get操作\"><a href=\"#get操作\" class=\"headerlink\" title=\"get操作\"></a>get操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s; </div><div class=\"line\">    HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">    int h = hash(key);  //1</div><div class=\"line\">    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;  //2</div><div class=\"line\">        (tab = s.table) != null) &#123;</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                 (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">             e != null; e = e.next) &#123;</div><div class=\"line\">            K k;</div><div class=\"line\">            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                return e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注释1: 根据key计算hash值</p>\n<p>注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环</p>\n<p>里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null</p>\n<h4 id=\"put操作\"><a href=\"#put操作\" class=\"headerlink\" title=\"put操作\"></a>put操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s;</div><div class=\"line\">    if (value == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </div><div class=\"line\">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) </div><div class=\"line\">        s = ensureSegment(j);</div><div class=\"line\">    return s.put(key, hash, value, false);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>判断值是否为null</p>\n</li>\n<li><p>计算hash值</p>\n</li>\n<li><p>定位segment 如果不存在，则创建</p>\n</li>\n<li><p>调用segment的put方法</p>\n</li>\n</ol>\n<p>还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true<br>再来看看Segment的put方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">    HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">        scanAndLockForPut(key, hash, value);  //1</div><div class=\"line\">    V oldValue;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">        int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);  //2</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = first;;) &#123; //3</div><div class=\"line\">            if (e != null) &#123;</div><div class=\"line\">                K k;</div><div class=\"line\">                if ((k = e.key) == key ||</div><div class=\"line\">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                    oldValue = e.value;</div><div class=\"line\">                    if (!onlyIfAbsent) &#123;</div><div class=\"line\">                        e.value = value;</div><div class=\"line\">                        ++modCount;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                if (node != null)</div><div class=\"line\">                    node.setNext(first);</div><div class=\"line\">                else</div><div class=\"line\">                    node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                int c = count + 1;</div><div class=\"line\">                if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                    rehash(node);</div><div class=\"line\">                else</div><div class=\"line\">                    setEntryAt(tab, index, node);</div><div class=\"line\">                ++modCount;</div><div class=\"line\">                count = c;</div><div class=\"line\">                oldValue = null;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">    return oldValue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1: 获取锁 ，保证线程安全</p>\n<p>注释2:定位到具体的HashEntry</p>\n<p>注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.</p>\n<p>最后释放锁,返回旧值.</p>\n<p>再说明一下put 和 putifAbsent的用法</p>\n<p>这两个方法本身是线程安全的,但是要看你的用法是否恰当</p>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentHashMap&lt;String,AtomicInteger&gt; map = new ConcurrentHashMap&lt;&gt;();</div><div class=\"line\">public static void putInTo(String key) &#123;</div><div class=\"line\">    AtomicInteger obj = map.get(key);</div><div class=\"line\">    if(obj == null)&#123;</div><div class=\"line\">        map.put(key, new AtomicInteger(0));</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        obj.incrementAndGet();</div><div class=\"line\">        map.put(key, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。</p>\n<p>原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。</p>\n<p>这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentMap&lt;String, AtomicLong&gt; wordCounts = newConcurrentHashMap&lt;&gt;();  </div><div class=\"line\">   </div><div class=\"line\">public static long increase(String word) &#123;  </div><div class=\"line\">    AtomicLong number = wordCounts.get(word);  </div><div class=\"line\">    if(number == null) &#123;  </div><div class=\"line\">        AtomicLong newNumber = newAtomicLong(0);  </div><div class=\"line\">        number = wordCounts.putIfAbsent(word, newNumber);  </div><div class=\"line\">        if(number == null) &#123;  </div><div class=\"line\">            number = newNumber;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return number.incrementAndGet();  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>获取size<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int size() &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] segments = this.segments;</div><div class=\"line\">    int size;</div><div class=\"line\">    boolean overflow; </div><div class=\"line\">    long sum;         </div><div class=\"line\">    long last = 0L;   </div><div class=\"line\">    int retries = -1; </div><div class=\"line\">    try &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            if (retries++ == RETRIES_BEFORE_LOCK) &#123;  //1</div><div class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                    ensureSegment(j).lock(); </div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = 0L;</div><div class=\"line\">            size = 0;</div><div class=\"line\">            overflow = false;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j) &#123;</div><div class=\"line\">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class=\"line\">                if (seg != null) &#123;</div><div class=\"line\">                    sum += seg.modCount;  //2</div><div class=\"line\">                    int c = seg.count;</div><div class=\"line\">                    if (c &lt; 0 || (size += c) &lt; 0)</div><div class=\"line\">                        overflow = true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum == last)</div><div class=\"line\">                break;</div><div class=\"line\">            last = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                segmentAt(segments, j).unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return overflow ? Integer.MAX_VALUE : size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"HashMap的问题\"><a href=\"#HashMap的问题\" class=\"headerlink\" title=\"HashMap的问题\"></a>HashMap的问题</h3><p>HashMap是不支持并发操作的，多线程情况下HashMap可能会导致死循环的发生，导致CPU占用率达到100%。</p>\n<h4 id=\"Hash表的数据结构\"><a href=\"#Hash表的数据结构\" class=\"headerlink\" title=\"Hash表的数据结构\"></a>Hash表的数据结构</h4><p>HashMap通常会用一个指针数组（假设为table[]）来做分散所有的key，当一个key被加入时，会通过Hash算法通过key算出这个数组的下标i，然后就把这个<key, value>插到table[i]中，如果有两个不同的key被算在了同一个i，那么就叫冲突，又叫碰撞，这样会在table[i]上形成一个链表。<br>如果table[] 大小很小，那么要放入更多的元素的时候，产生的碰撞就会非常频繁，这样会影响Hash表的性能。<br>所以，hash表的容量非常重要，如果有元素要插入时候，如果超过了设定的threshold，那么就必须增大hash表的大小，hash表的每个元素就必须重新被计算一边，也就是rehash。</p>\n<h4 id=\"HashMap的源码\"><a href=\"#HashMap的源码\" class=\"headerlink\" title=\"HashMap的源码\"></a>HashMap的源码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    if (table == EMPTY_TABLE) &#123;</div><div class=\"line\">        inflateTable(threshold);</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (key == null)</div><div class=\"line\">        return putForNullKey(value);</div><div class=\"line\">    //计算Hash值</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int i = indexFor(hash, table.length);</div><div class=\"line\">    //如果存在值，替换旧值</div><div class=\"line\">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class=\"line\">        Object k;</div><div class=\"line\">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class=\"line\">            V oldValue = e.value;</div><div class=\"line\">            e.value = value;</div><div class=\"line\">            e.recordAccess(this);</div><div class=\"line\">            return oldValue;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    modCount++;</div><div class=\"line\">    //增加节点</div><div class=\"line\">    addEntry(hash, key, value, i);</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面代码是HashMap进行put一个元素时候的源码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class=\"line\">    //如果大小大于现在的threshold时候，需要resize</div><div class=\"line\">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class=\"line\">        resize(2 * table.length);</div><div class=\"line\">        hash = (null != key) ? hash(key) : 0;</div><div class=\"line\">        bucketIndex = indexFor(hash, table.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    createEntry(hash, key, value, bucketIndex);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在增加节点时候会判断是否需要rehash操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> void resize(int newCapacity) &#123;</div><div class=\"line\">    Entry[] oldTable = table;</div><div class=\"line\">    int oldCapacity = oldTable.length;</div><div class=\"line\">    if (oldCapacity == MAXIMUM_CAPACITY) &#123;</div><div class=\"line\">        threshold = Integer.MAX_VALUE;</div><div class=\"line\">        return;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //新建一个Hash Table</div><div class=\"line\">    Entry[] newTable = new Entry[newCapacity];</div><div class=\"line\">    //吧旧oldtable 迁移到新的newTable上</div><div class=\"line\">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</div><div class=\"line\">    table = newTable;</div><div class=\"line\">    threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>resize源码会新建个更大的hash表</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">void transfer(Entry[] newTable, boolean rehash) &#123;</div><div class=\"line\">    int newCapacity = newTable.length;</div><div class=\"line\">    //  从OldTable里摘一个元素出来，然后放到NewTable中</div><div class=\"line\">    for (Entry&lt;K,V&gt; e : table) &#123;</div><div class=\"line\">        while(null != e) &#123;</div><div class=\"line\">            Entry&lt;K,V&gt; next = e.next;</div><div class=\"line\">            if (rehash) &#123;</div><div class=\"line\">                e.hash = null == e.key ? 0 : hash(e.key);</div><div class=\"line\">            &#125;</div><div class=\"line\">            int i = indexFor(e.hash, newCapacity);</div><div class=\"line\">            e.next = newTable[i];</div><div class=\"line\">            newTable[i] = e;</div><div class=\"line\">            e = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>迁移源代码</p>\n<h4 id=\"正常ReHash过程\"><a href=\"#正常ReHash过程\" class=\"headerlink\" title=\"正常ReHash过程\"></a>正常ReHash过程</h4><p>就像代码中一样，新建一个新的table容量比oldtale要大，然后将oldtable中元素迁移到newtable中，在单线程下这样没什么问题。</p>\n<h4 id=\"并发下的Rehash\"><a href=\"#并发下的Rehash\" class=\"headerlink\" title=\"并发下的Rehash\"></a>并发下的Rehash</h4><p>假设有两个线程，当第一个线程执行到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Entry&lt;K, V&gt; next = e.next;</div></pre></td></tr></table></figure></p>\n<p>时候被挂起。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">假设有三个值， &lt;3,a&gt;,&lt;7,b&gt;,&lt;5,c&gt;,HashMap的初始大小是2</div><div class=\"line\"> ______           e               next</div><div class=\"line\">|__0___|       _______          _______          _______ </div><div class=\"line\">|__1___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;5,c&gt;_|</div></pre></td></tr></table></figure></p>\n<p>那么现在线程1如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|      </div><div class=\"line\">|__1___|   </div><div class=\"line\">|__2___|      </div><div class=\"line\">|__3___|</div></pre></td></tr></table></figure></p>\n<p>那么线程2开始rehash：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                next               e</div></pre></td></tr></table></figure></p>\n<p>那么如果现在线程1被调度开始执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newTable[i] = e;</div><div class=\"line\">e = next;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>先是执行 newTalbe[i] = e;</li>\n<li>然后是e = next，导致了e指向了key(7)，</li>\n<li>而下一次循环的next = e.next导致了next指向了key(3)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ______    </div><div class=\"line\">|__0___|              _______</div><div class=\"line\">|__1___| ----------&gt; |_&lt;5,c&gt;_|  ---------&gt; null </div><div class=\"line\">|__2___|       _______          _______ </div><div class=\"line\">|__3___| ---&gt; |_&lt;7,b&gt;_| -----&gt; |_&lt;3,a&gt;_| ----&gt; null</div><div class=\"line\">                e                 next</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这样就会导致<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">线程1</div><div class=\"line\"> ______    </div><div class=\"line\">|__0___|           __________________              </div><div class=\"line\">|__1___|          |                 |            </div><div class=\"line\">|__2___|       ___|___          ____|__ </div><div class=\"line\">|__3___| ---&gt; |_&lt;3,a&gt;_| -----&gt; |_&lt;7,b&gt;_| ----&gt; null</div></pre></td></tr></table></figure></p>\n<p>产生循环链表，导致死循环。</p>\n<h3 id=\"concurrentHashMap原理\"><a href=\"#concurrentHashMap原理\" class=\"headerlink\" title=\"concurrentHashMap原理\"></a>concurrentHashMap原理</h3><p>concurrentHashMap采用锁分段技术：假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>\n<p><img src=\"../../../uploads/concurrentHashMap.png\" alt=\"concurrentHashMap\"></p>\n<p>HashEntry源码:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">static final class HashEntry&lt;K,V&gt; &#123;</div><div class=\"line\">        final int hash;</div><div class=\"line\">        final K key;</div><div class=\"line\">        volatile V value;</div><div class=\"line\">        volatile HashEntry&lt;K,V&gt; next;</div></pre></td></tr></table></figure></p>\n<p>volatile关键字保证了多线程读取的时候一定是最新值。</p>\n<p>ConcurrentHashMap包含一个Segment数组,每个Segment包含一个HashEntry数组,当修改HashEntry数组采用开链法处理冲突,所以它的每个HashEntry元素又是链表结构的元素。</p>\n<h4 id=\"基本操作源码分析\"><a href=\"#基本操作源码分析\" class=\"headerlink\" title=\"基本操作源码分析\"></a>基本操作源码分析</h4><p>构造方法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">public ConcurrentHashMap(int initialCapacity,</div><div class=\"line\">                         float loadFactor, int concurrencyLevel) &#123;</div><div class=\"line\">    if (!(loadFactor &gt; 0) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0)</div><div class=\"line\">        throw new IllegalArgumentException();</div><div class=\"line\">    if (concurrencyLevel &gt; MAX_SEGMENTS)</div><div class=\"line\">        concurrencyLevel = MAX_SEGMENTS;   //1</div><div class=\"line\">    int sshift = 0;</div><div class=\"line\">    int ssize = 1;</div><div class=\"line\">    while (ssize &lt; concurrencyLevel) &#123;</div><div class=\"line\">        ++sshift;</div><div class=\"line\">        ssize &lt;&lt;= 1;    //2</div><div class=\"line\">    &#125;</div><div class=\"line\">    this.segmentShift = 32 - sshift;  //3</div><div class=\"line\">    this.segmentMask = ssize - 1;   //4</div><div class=\"line\">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</div><div class=\"line\">    int c = initialCapacity / ssize;</div><div class=\"line\">    if (c * ssize &lt; initialCapacity)</div><div class=\"line\">        ++c;</div><div class=\"line\">    int cap = MIN_SEGMENT_TABLE_CAPACITY;</div><div class=\"line\">    while (cap &lt; c)</div><div class=\"line\">        cap &lt;&lt;= 1;</div><div class=\"line\">    Segment&lt;K,V&gt; s0 =</div><div class=\"line\">        new Segment&lt;K,V&gt;(loadFactor, (int)(cap * loadFactor),</div><div class=\"line\">                         (HashEntry&lt;K,V&gt;[])new HashEntry[cap]);//5</div><div class=\"line\">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])new Segment[ssize]; //6</div><div class=\"line\">    UNSAFE.putOrderedObject(ss, SBASE, s0); </div><div class=\"line\">    this.segments = ss;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>整个初始化是通过参数initialCapacity(初始容量)，loadFactor(增长因子)和concurrencyLevel(并发等级)来初始化segmentShift（段偏移量）、segmentMask（段掩码）和segment数组。</p>\n<p>注释1: 最大的并发等级不能超过MAX_SEGMENTS 1&lt;&lt;16(也就是1的二进制向左移16位,65535)</p>\n<p>注释2: 如果你传入的是15 就是向上取2的4次方倍 也就是16.</p>\n<p>注释3和4: segmentShift和segmentMask在定位segment使用，segmentShift = 32 - ssize向左移位的次数，segmentMask = ssize - 1。ssize的最大长度是65536，对应的 segmentShift最大值为16，segmentMask最大值是65535，对应的二进制16位全为1；</p>\n<p>注释5和6: 初始化segment</p>\n<ol>\n<li><p>初始化每个segment的HashEntry长度；</p>\n</li>\n<li><p>创建segment数组和segment[0]。</p>\n</li>\n</ol>\n<blockquote>\n<p>HashEntry长度cap同样也是2的N次方，默认情况，ssize = 16，initialCapacity = 16，loadFactor = 0.75f，那么cap = 1，threshold = (int) cap * loadFactor = 0。</p>\n</blockquote>\n<h4 id=\"get操作\"><a href=\"#get操作\" class=\"headerlink\" title=\"get操作\"></a>get操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V get(Object key) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s; </div><div class=\"line\">    HashEntry&lt;K,V&gt;[] tab;</div><div class=\"line\">    int h = hash(key);  //1</div><div class=\"line\">    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;  //2</div><div class=\"line\">        (tab = s.table) != null) &#123;</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class=\"line\">                 (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class=\"line\">             e != null; e = e.next) &#123;</div><div class=\"line\">            K k;</div><div class=\"line\">            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class=\"line\">                return e.value;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return null;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注释1: 根据key计算hash值</p>\n<p>注释2: 根据计算出的hash值定位segment 如果segment不为null segment.table也不为null 跳转进里面的循环</p>\n<p>里面的一大段东西 大致讲的就是通过hash值定位segment中对应的HashEntry 遍历HashEntry,如果key存在,返回key对应的value 如果不存在则返回null</p>\n<h4 id=\"put操作\"><a href=\"#put操作\" class=\"headerlink\" title=\"put操作\"></a>put操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">public V put(K key, V value) &#123;</div><div class=\"line\">    Segment&lt;K,V&gt; s;</div><div class=\"line\">    if (value == null)</div><div class=\"line\">        throw new NullPointerException();</div><div class=\"line\">    int hash = hash(key);</div><div class=\"line\">    int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class=\"line\">    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </div><div class=\"line\">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) </div><div class=\"line\">        s = ensureSegment(j);</div><div class=\"line\">    return s.put(key, hash, value, false);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li><p>判断值是否为null</p>\n</li>\n<li><p>计算hash值</p>\n</li>\n<li><p>定位segment 如果不存在，则创建</p>\n</li>\n<li><p>调用segment的put方法</p>\n</li>\n</ol>\n<p>还有一个putifAbsent的方法 ,唯一的不同就是最后的false变为了true<br>再来看看Segment的put方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">final V put(K key, int hash, V value, boolean onlyIfAbsent) &#123;</div><div class=\"line\">    HashEntry&lt;K,V&gt; node = tryLock() ? null :</div><div class=\"line\">        scanAndLockForPut(key, hash, value);  //1</div><div class=\"line\">    V oldValue;</div><div class=\"line\">    try &#123;</div><div class=\"line\">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class=\"line\">        int index = (tab.length - 1) &amp; hash;</div><div class=\"line\">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);  //2</div><div class=\"line\">        for (HashEntry&lt;K,V&gt; e = first;;) &#123; //3</div><div class=\"line\">            if (e != null) &#123;</div><div class=\"line\">                K k;</div><div class=\"line\">                if ((k = e.key) == key ||</div><div class=\"line\">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class=\"line\">                    oldValue = e.value;</div><div class=\"line\">                    if (!onlyIfAbsent) &#123;</div><div class=\"line\">                        e.value = value;</div><div class=\"line\">                        ++modCount;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                e = e.next;</div><div class=\"line\">            &#125;</div><div class=\"line\">            else &#123;</div><div class=\"line\">                if (node != null)</div><div class=\"line\">                    node.setNext(first);</div><div class=\"line\">                else</div><div class=\"line\">                    node = new HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class=\"line\">                int c = count + 1;</div><div class=\"line\">                if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class=\"line\">                    rehash(node);</div><div class=\"line\">                else</div><div class=\"line\">                    setEntryAt(tab, index, node);</div><div class=\"line\">                ++modCount;</div><div class=\"line\">                count = c;</div><div class=\"line\">                oldValue = null;</div><div class=\"line\">                break;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        unlock();</div><div class=\"line\">    &#125;</div><div class=\"line\">    return oldValue;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1: 获取锁 ，保证线程安全</p>\n<p>注释2:定位到具体的HashEntry</p>\n<p>注释3: 遍历HashEntry链表,如果key已存在 再判断传入的onlyIfAbsent的值 ,再决定是否覆盖旧值.</p>\n<p>最后释放锁,返回旧值.</p>\n<p>再说明一下put 和 putifAbsent的用法</p>\n<p>这两个方法本身是线程安全的,但是要看你的用法是否恰当</p>\n<p>例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentHashMap&lt;String,AtomicInteger&gt; map = new ConcurrentHashMap&lt;&gt;();</div><div class=\"line\">public static void putInTo(String key) &#123;</div><div class=\"line\">    AtomicInteger obj = map.get(key);</div><div class=\"line\">    if(obj == null)&#123;</div><div class=\"line\">        map.put(key, new AtomicInteger(0));</div><div class=\"line\">    &#125;else&#123;</div><div class=\"line\">        obj.incrementAndGet();</div><div class=\"line\">        map.put(key, obj);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码可以用最开始提供的测试代码进行测试，会发现如果多个线程调用putInTo方法 最后值会确定不了,每一次都是不一样。 就算是保证原子性的AtomicInteger 也会有误差,可能误差比较小罢了。这个误差的出现就会出现在前几次的操作。</p>\n<p>原因: 多个线程同时进入putInTo 比如线程1已经把不存在的键值对存入,而线程2还没完成操作 再继续存入key相同的键值对,从而覆盖了前面存入的数据,导致数据丢失。</p>\n<p>这段代码就能保证线程安全 而不用通过synchronized关键字来锁定方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">private static ConcurrentMap&lt;String, AtomicLong&gt; wordCounts = newConcurrentHashMap&lt;&gt;();  </div><div class=\"line\">   </div><div class=\"line\">public static long increase(String word) &#123;  </div><div class=\"line\">    AtomicLong number = wordCounts.get(word);  </div><div class=\"line\">    if(number == null) &#123;  </div><div class=\"line\">        AtomicLong newNumber = newAtomicLong(0);  </div><div class=\"line\">        number = wordCounts.putIfAbsent(word, newNumber);  </div><div class=\"line\">        if(number == null) &#123;  </div><div class=\"line\">            number = newNumber;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    return number.incrementAndGet();  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>获取size<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">public int size() &#123;</div><div class=\"line\">    final Segment&lt;K,V&gt;[] segments = this.segments;</div><div class=\"line\">    int size;</div><div class=\"line\">    boolean overflow; </div><div class=\"line\">    long sum;         </div><div class=\"line\">    long last = 0L;   </div><div class=\"line\">    int retries = -1; </div><div class=\"line\">    try &#123;</div><div class=\"line\">        for (;;) &#123;</div><div class=\"line\">            if (retries++ == RETRIES_BEFORE_LOCK) &#123;  //1</div><div class=\"line\">                for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                    ensureSegment(j).lock(); </div><div class=\"line\">            &#125;</div><div class=\"line\">            sum = 0L;</div><div class=\"line\">            size = 0;</div><div class=\"line\">            overflow = false;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j) &#123;</div><div class=\"line\">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</div><div class=\"line\">                if (seg != null) &#123;</div><div class=\"line\">                    sum += seg.modCount;  //2</div><div class=\"line\">                    int c = seg.count;</div><div class=\"line\">                    if (c &lt; 0 || (size += c) &lt; 0)</div><div class=\"line\">                        overflow = true;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (sum == last)</div><div class=\"line\">                break;</div><div class=\"line\">            last = sum;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; finally &#123;</div><div class=\"line\">        if (retries &gt; RETRIES_BEFORE_LOCK) &#123;</div><div class=\"line\">            for (int j = 0; j &lt; segments.length; ++j)</div><div class=\"line\">                segmentAt(segments, j).unlock();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return overflow ? Integer.MAX_VALUE : size;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>注释1 : RETRIES_BEFORE_LOCK为不变常量2 尝试两次不锁住Segment的方式来统计每个Segment的大小,如果在统计的过程中Segment的count发生变化,这时候再加锁统计Segment的count</p>\n"},{"title":"深入理解volatile","date":"2017-05-02T01:45:54.000Z","comments":0,"keywords":"volatile, 并发","_content":"\n> java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。\n\n### Volatile\n\nVolatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。\n\n### 正确使用volatile变量的条件\n\n如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：\n\n- 该变量的写操作不依赖当前值\n- 该变量没有包含在具有其他变量的不变式中\n\n大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。\n\n#### 使用volatile和不用volatile的一个例子\njdk版本：jdk1.7.0_4\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n运行后程序会进入死循环，一直运行。\n\n> 在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 \n\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static volatile boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n程序输出end，然后马上退出。\n\n> 把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 \n\n#### 正确使用volatile的模式\n##### 状态标志\n也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。\n\n```\nvolatile boolean shutdownRequested;\n\n...\n\npublic void shutdown() { shutdownRequested = true; }\n\npublic void doWork() { \n    while (!shutdownRequested) { \n        // do stuff\n    }\n}\n```\n这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。\n\n##### 用于一次安全的发布\n缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。\n实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。\n```\npublic class BackgroundFloobleLoader {\n    public volatile Flooble theFlooble;\n\n    public void initInBackground() {\n        // do lots of stuff\n        theFlooble = new Flooble();  // this is the only write to theFlooble\n    }\n}\n\npublic class SomeOtherClass {\n    public void doWork() {\n        while (true) { \n            // do some stuff...\n            // use the Flooble, but only if it is ready\n            if (floobleLoader.theFlooble != null) \n                doSomething(floobleLoader.theFlooble);\n        }\n    }\n}\n```\n如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。\n该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。\n\n##### 独立观察模式\n安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。\n使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。\n\n```\npublic class UserManager {\n    public volatile String lastUser;\n\n    public boolean authenticate(String user, String password) {\n        boolean valid = passwordIsValid(user, password);\n        if (valid) {\n            User u = new User();\n            activeUsers.add(u);\n            lastUser = user;\n        }\n        return valid;\n    }\n}\n```\n该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。\n\n##### volatile bean 模式\nvolatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。\n在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：\n```\n@ThreadSafe\npublic class Person {\n    private volatile String firstName;\n    private volatile String lastName;\n    private volatile int age;\n\n    public String getFirstName() { return firstName; }\n    public String getLastName() { return lastName; }\n    public int getAge() { return age; }\n\n    public void setFirstName(String firstName) { \n        this.firstName = firstName;\n    }\n\n    public void setLastName(String lastName) { \n        this.lastName = lastName;\n    }\n\n    public void setAge(int age) { \n        this.age = age;\n    }\n}\n```\n\n##### 开销较低的读－写锁策略\n目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。\n然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。\n```\n@ThreadSafe\npublic class CheesyCounter {\n    // Employs the cheap read-write lock trick\n    // All mutative operations MUST be done with the 'this' lock held\n    @GuardedBy(\"this\") private volatile int value;\n\n    public int getValue() { return value; }\n\n    public synchronized int increment() {\n        return value++;\n    }\n}\n```\n之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。\n\n### 性能考虑\n使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。\n很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。\nvolatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。\n\n\n学习资料 ： [Java 理论与实践: 正确使用 Volatile 变量](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java/volatile.md","raw":"---\ntitle: 深入理解volatile\ndate: 2017-05-02 09:45:54\ncomments: false\ntags: \n- java\ncategories: \n- java\nkeywords: volatile, 并发\n---\n\n> java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。\n\n### Volatile\n\nVolatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。\n\n### 正确使用volatile变量的条件\n\n如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：\n\n- 该变量的写操作不依赖当前值\n- 该变量没有包含在具有其他变量的不变式中\n\n大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。\n\n#### 使用volatile和不用volatile的一个例子\njdk版本：jdk1.7.0_4\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n运行后程序会进入死循环，一直运行。\n\n> 在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 \n\n```\npackage com.fk.Thread;\n\n/**\n * Created by fengkai on 02/05/17.\n */\npublic class VolatileTest {\n\n    private static volatile boolean flag ;\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    if (flag == !flag) {\n                        System.out.println(\"end !\");\n                        System.exit(1);\n                    }\n                }\n            }\n        }).start();\n        Thread.sleep(1);\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                for(;;) {\n                    flag = !flag;\n                }\n            }\n        }).start();\n\n    }\n\n}\n```\n程序输出end，然后马上退出。\n\n> 把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 \n\n#### 正确使用volatile的模式\n##### 状态标志\n也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。\n\n```\nvolatile boolean shutdownRequested;\n\n...\n\npublic void shutdown() { shutdownRequested = true; }\n\npublic void doWork() { \n    while (!shutdownRequested) { \n        // do stuff\n    }\n}\n```\n这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。\n\n##### 用于一次安全的发布\n缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。\n实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。\n```\npublic class BackgroundFloobleLoader {\n    public volatile Flooble theFlooble;\n\n    public void initInBackground() {\n        // do lots of stuff\n        theFlooble = new Flooble();  // this is the only write to theFlooble\n    }\n}\n\npublic class SomeOtherClass {\n    public void doWork() {\n        while (true) { \n            // do some stuff...\n            // use the Flooble, but only if it is ready\n            if (floobleLoader.theFlooble != null) \n                doSomething(floobleLoader.theFlooble);\n        }\n    }\n}\n```\n如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。\n该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。\n\n##### 独立观察模式\n安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。\n使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。\n\n```\npublic class UserManager {\n    public volatile String lastUser;\n\n    public boolean authenticate(String user, String password) {\n        boolean valid = passwordIsValid(user, password);\n        if (valid) {\n            User u = new User();\n            activeUsers.add(u);\n            lastUser = user;\n        }\n        return valid;\n    }\n}\n```\n该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。\n\n##### volatile bean 模式\nvolatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。\n在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：\n```\n@ThreadSafe\npublic class Person {\n    private volatile String firstName;\n    private volatile String lastName;\n    private volatile int age;\n\n    public String getFirstName() { return firstName; }\n    public String getLastName() { return lastName; }\n    public int getAge() { return age; }\n\n    public void setFirstName(String firstName) { \n        this.firstName = firstName;\n    }\n\n    public void setLastName(String lastName) { \n        this.lastName = lastName;\n    }\n\n    public void setAge(int age) { \n        this.age = age;\n    }\n}\n```\n\n##### 开销较低的读－写锁策略\n目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。\n然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。\n```\n@ThreadSafe\npublic class CheesyCounter {\n    // Employs the cheap read-write lock trick\n    // All mutative operations MUST be done with the 'this' lock held\n    @GuardedBy(\"this\") private volatile int value;\n\n    public int getValue() { return value; }\n\n    public synchronized int increment() {\n        return value++;\n    }\n}\n```\n之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。\n\n### 性能考虑\n使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。\n很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。\nvolatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。\n\n\n学习资料 ： [Java 理论与实践: 正确使用 Volatile 变量](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"java/volatile","published":1,"updated":"2017-06-15T13:35:30.643Z","layout":"post","photos":[],"link":"","_id":"cj5hj5yty000q4lm3c1ye8ede","content":"<blockquote>\n<p>java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。</p>\n</blockquote>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>Volatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。</p>\n<h3 id=\"正确使用volatile变量的条件\"><a href=\"#正确使用volatile变量的条件\" class=\"headerlink\" title=\"正确使用volatile变量的条件\"></a>正确使用volatile变量的条件</h3><p>如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：</p>\n<ul>\n<li>该变量的写操作不依赖当前值</li>\n<li>该变量没有包含在具有其他变量的不变式中</li>\n</ul>\n<p>大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。</p>\n<h4 id=\"使用volatile和不用volatile的一个例子\"><a href=\"#使用volatile和不用volatile的一个例子\" class=\"headerlink\" title=\"使用volatile和不用volatile的一个例子\"></a>使用volatile和不用volatile的一个例子</h4><p>jdk版本：jdk1.7.0_4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行后程序会进入死循环，一直运行。</p>\n<blockquote>\n<p>在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static volatile boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>程序输出end，然后马上退出。</p>\n<blockquote>\n<p>把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 </p>\n</blockquote>\n<h4 id=\"正确使用volatile的模式\"><a href=\"#正确使用volatile的模式\" class=\"headerlink\" title=\"正确使用volatile的模式\"></a>正确使用volatile的模式</h4><h5 id=\"状态标志\"><a href=\"#状态标志\" class=\"headerlink\" title=\"状态标志\"></a>状态标志</h5><p>也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">volatile boolean shutdownRequested;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">public void shutdown() &#123; shutdownRequested = true; &#125;</div><div class=\"line\"></div><div class=\"line\">public void doWork() &#123; </div><div class=\"line\">    while (!shutdownRequested) &#123; </div><div class=\"line\">        // do stuff</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。</p>\n<h5 id=\"用于一次安全的发布\"><a href=\"#用于一次安全的发布\" class=\"headerlink\" title=\"用于一次安全的发布\"></a>用于一次安全的发布</h5><p>缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。<br>实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BackgroundFloobleLoader &#123;</div><div class=\"line\">    public volatile Flooble theFlooble;</div><div class=\"line\"></div><div class=\"line\">    public void initInBackground() &#123;</div><div class=\"line\">        // do lots of stuff</div><div class=\"line\">        theFlooble = new Flooble();  // this is the only write to theFlooble</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class SomeOtherClass &#123;</div><div class=\"line\">    public void doWork() &#123;</div><div class=\"line\">        while (true) &#123; </div><div class=\"line\">            // do some stuff...</div><div class=\"line\">            // use the Flooble, but only if it is ready</div><div class=\"line\">            if (floobleLoader.theFlooble != null) </div><div class=\"line\">                doSomething(floobleLoader.theFlooble);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。<br>该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。</p>\n<h5 id=\"独立观察模式\"><a href=\"#独立观察模式\" class=\"headerlink\" title=\"独立观察模式\"></a>独立观察模式</h5><p>安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。<br>使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserManager &#123;</div><div class=\"line\">    public volatile String lastUser;</div><div class=\"line\"></div><div class=\"line\">    public boolean authenticate(String user, String password) &#123;</div><div class=\"line\">        boolean valid = passwordIsValid(user, password);</div><div class=\"line\">        if (valid) &#123;</div><div class=\"line\">            User u = new User();</div><div class=\"line\">            activeUsers.add(u);</div><div class=\"line\">            lastUser = user;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return valid;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。</p>\n<h5 id=\"volatile-bean-模式\"><a href=\"#volatile-bean-模式\" class=\"headerlink\" title=\"volatile bean 模式\"></a>volatile bean 模式</h5><p>volatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。<br>在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class Person &#123;</div><div class=\"line\">    private volatile String firstName;</div><div class=\"line\">    private volatile String lastName;</div><div class=\"line\">    private volatile int age;</div><div class=\"line\"></div><div class=\"line\">    public String getFirstName() &#123; return firstName; &#125;</div><div class=\"line\">    public String getLastName() &#123; return lastName; &#125;</div><div class=\"line\">    public int getAge() &#123; return age; &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setFirstName(String firstName) &#123; </div><div class=\"line\">        this.firstName = firstName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setLastName(String lastName) &#123; </div><div class=\"line\">        this.lastName = lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setAge(int age) &#123; </div><div class=\"line\">        this.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"开销较低的读－写锁策略\"><a href=\"#开销较低的读－写锁策略\" class=\"headerlink\" title=\"开销较低的读－写锁策略\"></a>开销较低的读－写锁策略</h5><p>目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。<br>然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class CheesyCounter &#123;</div><div class=\"line\">    // Employs the cheap read-write lock trick</div><div class=\"line\">    // All mutative operations MUST be done with the &apos;this&apos; lock held</div><div class=\"line\">    @GuardedBy(&quot;this&quot;) private volatile int value;</div><div class=\"line\"></div><div class=\"line\">    public int getValue() &#123; return value; &#125;</div><div class=\"line\"></div><div class=\"line\">    public synchronized int increment() &#123;</div><div class=\"line\">        return value++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。</p>\n<h3 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h3><p>使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。<br>很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。<br>volatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。</p>\n<p>学习资料 ： <a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\" target=\"_blank\" rel=\"external\">Java 理论与实践: 正确使用 Volatile 变量</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。</p>\n</blockquote>\n<h3 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h3><p>Volatile变量具有synchronized的可见性特性，但是不具备原子性。线程可以自动发现volatile变量的最新值，volatile可以用于线程安全，但是只能作用于很有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。</p>\n<h3 id=\"正确使用volatile变量的条件\"><a href=\"#正确使用volatile变量的条件\" class=\"headerlink\" title=\"正确使用volatile变量的条件\"></a>正确使用volatile变量的条件</h3><p>如果说要想使用volatile变量来替代锁，保证线程安全，必须满足一下两个条件：</p>\n<ul>\n<li>该变量的写操作不依赖当前值</li>\n<li>该变量没有包含在具有其他变量的不变式中</li>\n</ul>\n<p>大多数的编程情况都于这两个条件其中之一冲突，所以计数器、互斥锁或任何具有多个变量相关的不定式不能单独用volatile解决。</p>\n<h4 id=\"使用volatile和不用volatile的一个例子\"><a href=\"#使用volatile和不用volatile的一个例子\" class=\"headerlink\" title=\"使用volatile和不用volatile的一个例子\"></a>使用volatile和不用volatile的一个例子</h4><p>jdk版本：jdk1.7.0_4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行后程序会进入死循环，一直运行。</p>\n<blockquote>\n<p>在当前的Java内存模型下，线程可以把变量保存在本地内存（比如机器的寄存器）中，而不是直接在主存中进行读写。这就可能造成一个线程在主存中修改了一个变量的值，而另外一个线程还继续使用它在寄存器中的变量值的拷贝，造成数据的不一致。 </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">package com.fk.Thread;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by fengkai on 02/05/17.</div><div class=\"line\"> */</div><div class=\"line\">public class VolatileTest &#123;</div><div class=\"line\"></div><div class=\"line\">    private static volatile boolean flag ;</div><div class=\"line\"></div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    if (flag == !flag) &#123;</div><div class=\"line\">                        System.out.println(&quot;end !&quot;);</div><div class=\"line\">                        System.exit(1);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\">        Thread.sleep(1);</div><div class=\"line\">        new Thread(new Runnable() &#123;</div><div class=\"line\">            @Override</div><div class=\"line\">            public void run() &#123;</div><div class=\"line\">                for(;;) &#123;</div><div class=\"line\">                    flag = !flag;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;).start();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>程序输出end，然后马上退出。</p>\n<blockquote>\n<p>把该变量声明为volatile（不稳定的），这就指示JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。一般说来，多任务环境下各任务间共享的标志都应该加volatile修饰。 </p>\n</blockquote>\n<h4 id=\"正确使用volatile的模式\"><a href=\"#正确使用volatile的模式\" class=\"headerlink\" title=\"正确使用volatile的模式\"></a>正确使用volatile的模式</h4><h5 id=\"状态标志\"><a href=\"#状态标志\" class=\"headerlink\" title=\"状态标志\"></a>状态标志</h5><p>也许实现 volatile 变量的规范使用仅仅是使用一个布尔状态标志，用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">volatile boolean shutdownRequested;</div><div class=\"line\"></div><div class=\"line\">...</div><div class=\"line\"></div><div class=\"line\">public void shutdown() &#123; shutdownRequested = true; &#125;</div><div class=\"line\"></div><div class=\"line\">public void doWork() &#123; </div><div class=\"line\">    while (!shutdownRequested) &#123; </div><div class=\"line\">        // do stuff</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样使用volatiile简化了编码。这种类型标记通常只有一个状态转换，然后程序停止。</p>\n<h5 id=\"用于一次安全的发布\"><a href=\"#用于一次安全的发布\" class=\"headerlink\" title=\"用于一次安全的发布\"></a>用于一次安全的发布</h5><p>缺乏同步会导致无法实现可见性，这使得确定何时写入对象引用而不是原语值变得更加困难。在缺乏同步的情况下，可能会遇到某个对象引用的更新值（由另一个线程写入）和该对象状态的旧值同时存在。（这就是造成著名的双重检查锁定（double-checked-locking）问题的根源，其中对象引用在没有同步的情况下进行读操作，产生的问题是您可能会看到一个更新的引用，但是仍然会通过该引用看到不完全构造的对象）。<br>实现安全发布对象的一种技术就是将对象引用定义为 volatile 类型。下面一个示例，其中后台线程在启动阶段从数据库加载一些数据。其他代码在能够利用这些数据时，在使用之前将检查这些数据是否曾经发布过。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class BackgroundFloobleLoader &#123;</div><div class=\"line\">    public volatile Flooble theFlooble;</div><div class=\"line\"></div><div class=\"line\">    public void initInBackground() &#123;</div><div class=\"line\">        // do lots of stuff</div><div class=\"line\">        theFlooble = new Flooble();  // this is the only write to theFlooble</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">public class SomeOtherClass &#123;</div><div class=\"line\">    public void doWork() &#123;</div><div class=\"line\">        while (true) &#123; </div><div class=\"line\">            // do some stuff...</div><div class=\"line\">            // use the Flooble, but only if it is ready</div><div class=\"line\">            if (floobleLoader.theFlooble != null) </div><div class=\"line\">                doSomething(floobleLoader.theFlooble);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果 theFlooble 引用不是 volatile 类型，doWork() 中的代码在解除对 theFlooble 的引用时，将会得到一个不完全构造的 Flooble。<br>该模式的一个必要条件是：被发布的对象必须是线程安全的，或者是有效的不可变对象（有效不可变意味着对象的状态在发布之后永远不会被修改）。volatile 类型的引用可以确保对象的发布形式的可见性，但是如果对象的状态在发布后将发生更改，那么就需要额外的同步。</p>\n<h5 id=\"独立观察模式\"><a href=\"#独立观察模式\" class=\"headerlink\" title=\"独立观察模式\"></a>独立观察模式</h5><p>安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。<br>使用该模式的另一种应用程序就是收集程序的统计信息。下面展示了身份验证机制如何记忆最近一次登录的用户的名字。将反复使用 lastUser 引用来发布值，以供程序的其他部分使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class UserManager &#123;</div><div class=\"line\">    public volatile String lastUser;</div><div class=\"line\"></div><div class=\"line\">    public boolean authenticate(String user, String password) &#123;</div><div class=\"line\">        boolean valid = passwordIsValid(user, password);</div><div class=\"line\">        if (valid) &#123;</div><div class=\"line\">            User u = new User();</div><div class=\"line\">            activeUsers.add(u);</div><div class=\"line\">            lastUser = user;</div><div class=\"line\">        &#125;</div><div class=\"line\">        return valid;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>该模式是前面模式的扩展；将某个值发布以在程序内的其他地方使用，但是与一次性事件的发布不同，这是一系列独立事件。这个模式要求被发布的值是有效不可变的 —— 即值的状态在发布后不会更改。使用该值的代码需要清楚该值可能随时发生变化。</p>\n<h5 id=\"volatile-bean-模式\"><a href=\"#volatile-bean-模式\" class=\"headerlink\" title=\"volatile bean 模式\"></a>volatile bean 模式</h5><p>volatile bean 模式适用于将 JavaBeans 作为“荣誉结构”使用的框架。在 volatile bean 模式中，JavaBean 被用作一组具有 getter 和 setter 方法 的独立属性的容器。volatile bean 模式的基本原理是：很多框架为易变数据的持有者（例如 HttpSession）提供了容器，但是放入这些容器中的对象必须是线程安全的。<br>在 volatile bean 模式中，JavaBean 的所有数据成员都是 volatile 类型的，并且 getter 和 setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。此外，对于对象引用的数据成员，引用的对象必须是有效不可变的。（这将禁止具有数组值的属性，因为当数组引用被声明为 volatile 时，只有引用而不是数组本身具有 volatile 语义）。对于任何 volatile 变量，不变式或约束都不能包含 JavaBean 属性。下面的示例展示了遵守 volatile bean 模式的 JavaBean：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class Person &#123;</div><div class=\"line\">    private volatile String firstName;</div><div class=\"line\">    private volatile String lastName;</div><div class=\"line\">    private volatile int age;</div><div class=\"line\"></div><div class=\"line\">    public String getFirstName() &#123; return firstName; &#125;</div><div class=\"line\">    public String getLastName() &#123; return lastName; &#125;</div><div class=\"line\">    public int getAge() &#123; return age; &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setFirstName(String firstName) &#123; </div><div class=\"line\">        this.firstName = firstName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setLastName(String lastName) &#123; </div><div class=\"line\">        this.lastName = lastName;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void setAge(int age) &#123; </div><div class=\"line\">        this.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"开销较低的读－写锁策略\"><a href=\"#开销较低的读－写锁策略\" class=\"headerlink\" title=\"开销较低的读－写锁策略\"></a>开销较低的读－写锁策略</h5><p>目前为止，了解了 volatile 的功能还不足以实现计数器。因为 ++x 实际上是三种操作（读、添加、存储）的简单组合，如果多个线程凑巧试图同时对 volatile 计数器执行增量操作，那么它的更新值有可能会丢失。<br>然而，如果读操作远远超过写操作，您可以结合使用内部锁和 volatile 变量来减少公共代码路径的开销。下面显示的线程安全的计数器使用 synchronized 确保增量操作是原子的，并使用 volatile 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及 volatile 读操作，这通常要优于一个无竞争的锁获取的开销。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">@ThreadSafe</div><div class=\"line\">public class CheesyCounter &#123;</div><div class=\"line\">    // Employs the cheap read-write lock trick</div><div class=\"line\">    // All mutative operations MUST be done with the &apos;this&apos; lock held</div><div class=\"line\">    @GuardedBy(&quot;this&quot;) private volatile int value;</div><div class=\"line\"></div><div class=\"line\">    public int getValue() &#123; return value; &#125;</div><div class=\"line\"></div><div class=\"line\">    public synchronized int increment() &#123;</div><div class=\"line\">        return value++;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之所以将这种技术称之为 “开销较低的读－写锁” 是因为您使用了不同的同步机制进行读写操作。因为本例中的写操作违反了使用 volatile 的第一个条件，因此不能使用 volatile 安全地实现计数器 —— 您必须使用锁。然而，您可以在读操作中使用 volatile 确保当前值的可见性，因此可以使用锁进行所有变化的操作，使用 volatile 进行只读操作。其中，锁一次只允许一个线程访问值，volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 —— 就像读－写操作一样。然而，要随时牢记这种模式的弱点：如果超越了该模式的最基本应用，结合这两个竞争的同步机制将变得非常困难。</p>\n<h3 id=\"性能考虑\"><a href=\"#性能考虑\" class=\"headerlink\" title=\"性能考虑\"></a>性能考虑</h3><p>使用 volatile 变量的主要原因是其简易性：在某些情形下，使用 volatile 变量要比使用相应的锁简单得多。使用 volatile 变量次要原因是其性能：某些情况下，volatile 变量同步机制的性能要优于锁。<br>很难做出准确、全面的评价，例如 “X 总是比 Y 快”，尤其是对 JVM 内在的操作而言。（例如，某些情况下 VM 也许能够完全删除锁机制，这使得我们难以抽象地比较 volatile 和 synchronized 的开销。）就是说，在目前大多数的处理器架构上，volatile 读操作开销非常低 —— 几乎和非 volatile 读操作一样。而 volatile 写操作的开销要比非 volatile 写操作多很多，因为要保证可见性需要实现内存界定（Memory Fence），即便如此，volatile 的总开销仍然要比锁获取低。<br>volatile 操作不会像锁一样造成阻塞，因此，在能够安全使用 volatile 的情况下，volatile 可以提供一些优于锁的可伸缩特性。如果读操作的次数要远远超过写操作，与锁相比，volatile 变量通常能够减少同步的性能开销。</p>\n<p>学习资料 ： <a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\">Java 理论与实践: 正确使用 Volatile 变量</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5hj5ypw00004lm3oy9nob6v","category_id":"cj5hj5yqb00034lm3h0r4h6vw","_id":"cj5hj5yqi00074lm33wnjuuzb"},{"post_id":"cj5hj5ytf000d4lm3lotgwqmd","category_id":"cj5hj5yqb00034lm3h0r4h6vw","_id":"cj5hj5ytu000j4lm3kwk9k0h0"},{"post_id":"cj5hj5yt700084lm38buidxf5","category_id":"cj5hj5ytb000a4lm3krprbeib","_id":"cj5hj5yty000o4lm32jggacth"},{"post_id":"cj5hj5ytk000e4lm32s9s368s","category_id":"cj5hj5ytb000a4lm3krprbeib","_id":"cj5hj5yu0000r4lm3m5dj0jjq"},{"post_id":"cj5hj5ytq000i4lm3bn4n2bv5","category_id":"cj5hj5ytb000a4lm3krprbeib","_id":"cj5hj5yu2000v4lm3jtrjs8j2"},{"post_id":"cj5hj5yt900094lm3mn64ntka","category_id":"cj5hj5ytb000a4lm3krprbeib","_id":"cj5hj5yu3000x4lm3g1bus4ht"},{"post_id":"cj5hj5ytb000c4lm3r4m4u6ac","category_id":"cj5hj5ytb000a4lm3krprbeib","_id":"cj5hj5yu500114lm3d5d8o8s1"},{"post_id":"cj5hj5ytv000l4lm3jk5d58e1","category_id":"cj5hj5yu1000t4lm3u0j5im0k","_id":"cj5hj5yua00134lm321ntlxli"},{"post_id":"cj5hj5yty000q4lm3c1ye8ede","category_id":"cj5hj5yu1000t4lm3u0j5im0k","_id":"cj5hj5yuc00154lm3kgods8ax"}],"PostTag":[{"post_id":"cj5hj5ypw00004lm3oy9nob6v","tag_id":"cj5hj5yqd00044lm3vtzy3nqi","_id":"cj5hj5yqh00064lm31itguf4b"},{"post_id":"cj5hj5ytf000d4lm3lotgwqmd","tag_id":"cj5hj5yqd00044lm3vtzy3nqi","_id":"cj5hj5ytq000h4lm36r0wxm7n"},{"post_id":"cj5hj5yt700084lm38buidxf5","tag_id":"cj5hj5ytb000b4lm30koruwjr","_id":"cj5hj5ytu000k4lm36nbebxbh"},{"post_id":"cj5hj5ytk000e4lm32s9s368s","tag_id":"cj5hj5ytb000b4lm30koruwjr","_id":"cj5hj5yty000p4lm3i7acbl2e"},{"post_id":"cj5hj5ytq000i4lm3bn4n2bv5","tag_id":"cj5hj5ytb000b4lm30koruwjr","_id":"cj5hj5yu1000s4lm3zf2cnmly"},{"post_id":"cj5hj5yt900094lm3mn64ntka","tag_id":"cj5hj5ytb000b4lm30koruwjr","_id":"cj5hj5yu3000w4lm3xr275zay"},{"post_id":"cj5hj5ytb000c4lm3r4m4u6ac","tag_id":"cj5hj5ytb000b4lm30koruwjr","_id":"cj5hj5yu4000y4lm3s99mge63"},{"post_id":"cj5hj5ytv000l4lm3jk5d58e1","tag_id":"cj5hj5yu2000u4lm3flqn33yq","_id":"cj5hj5yu700124lm32gv5a4kw"},{"post_id":"cj5hj5yty000q4lm3c1ye8ede","tag_id":"cj5hj5yu2000u4lm3flqn33yq","_id":"cj5hj5yub00144lm3ugd1lhgr"}],"Tag":[{"name":"其他","_id":"cj5hj5yqd00044lm3vtzy3nqi"},{"name":"设计模式","_id":"cj5hj5ytb000b4lm30koruwjr"},{"name":"java","_id":"cj5hj5yu2000u4lm3flqn33yq"}]}}